,repo,language,readme_txt
0,homerchen19/nba-go,JavaScript,"<p align=center>
<img src=""https://user-images.githubusercontent.com/12113222/32413609-ea673d3e-c24f-11e7-935b-0a2a86be0ee2.png"">
</p>
<p align=center>
<a target=""_blank"" href=""https://npmjs.org/package/nba-go"" title=""NPM version""><img src=""https://img.shields.io/npm/v/nba-go.svg""></a>
<a target=""_blank"" href=""https://travis-ci.org/xxhomey19/nba-go"" title=""Build Status""><img src=""https://travis-ci.org/xxhomey19/nba-go.svg?branch=master""></a>
<a target=""_blank"" href=""http://nodejs.org/download/"" title=""Node version""><img src=""https://img.shields.io/badge/node.js-%3E=_6.0-green.svg""></a>
<a target=""_blank"" href=""https://opensource.org/licenses/MIT"" title=""License: MIT""><img src=""https://img.shields.io/badge/License-MIT-blue.svg""></a>
<a target=""_blank"" href=""http://makeapullrequest.com"" title=""PRs Welcome""><img src=""https://img.shields.io/badge/PRs-welcome-brightgreen.svg""></a>
</p>

> The finest NBA CLI.

Watch NBA live play-by-play, game preview, box score and player information on your console.  
Best CLI tool for those who are both **NBA fans** and **Engineers**.

All data comes from [stats.nba.com](http://stats.nba.com/) APIs.

## Install

In order to use nba-go, make sure that you have [Node](https://nodejs.org/) version 6.0.0 or higher.

```
$ npm install -g nba-go
```

Or in a Docker Container:

```
$ docker build -t nba-go:latest .
$ docker run -it nba-go:latest
```

By default, the docker container will run `nba-go game -t`, but you can
override this command at run time.  
For example:

```
$ docker run -it nba-go:latest nba-go player Curry -i
```

Or download the latest version [pkg](https://github.com/zeit/pkg) binaries in [releases](https://github.com/xxhomey19/nba-go/releases). It can be run on Linux, macOs and Windows.  
For example:

```
./nba-go-macos game -h
```

## Usage

`nba-go` provides two main commands.

1. [`game` or `g`](#game)
2. [`player` or `p`](#player)

### Game

There are two things to do.

1. [**Check schedule**](#check-schedule).
2. Choose one game which you want to watch.

Depending on the status of the game you chose, a different result will be shown. There are three kinds of statuses that may be displayed.

| Status              | Example                                                                                                                                                                 | Description                                                                                                                                                             |
| ------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| [Pregame](#pregame) | <img alt=""screen shot 2017-11-06 at 8 57 02 am"" src=""https://user-images.githubusercontent.com/12113222/32421167-8a3521d4-c2d0-11e7-9ae3-be1c0def1b71.png"">             | It shows **when the game starts**. <br> Selecting this will show the comparison between two teams, including average points, field goal percents, average assists, etc. |
| [Live](#live)       | <img alt=""screen shot 2017-11-06 at 8 56 50 am"" src=""https://user-images.githubusercontent.com/12113222/32421177-adc7ae5a-c2d0-11e7-9824-a4de7c40a5e4.png"">             | It shows **live game clock**. <br> **Most powerful feature!** Selecting this will show the live page which includes scoreboard, play-by-play and box score.             |
| [Final](#final)     | <img width=""600"" alt=""screen shot 2017-11-06 at 8 56 14 am"" src=""https://user-images.githubusercontent.com/12113222/32421166-8a08dde0-c2d0-11e7-8a38-69f646786653.png""> | Selecting this will show scoreboard, detailed box score, etc.                                                                                                           |

#### Check schedule

In order to show the schedule on some days, `nba-go` provides the command `nba-go game` with some options.

#### Options

##### `-d <date>` or `--date <date>`

Enter a specific date to check the schedule on that day.

```
$ nba-go game -d 2017/11/02
```

![game -d gif](https://user-images.githubusercontent.com/12113222/32413795-0e7d75c2-c254-11e7-8a77-eeabed3c11f2.gif)

##### `-y` or `--yesterday`

Check **yesterday's** schedule.

```
$ nba-go game -y
```

![game -y gif](https://user-images.githubusercontent.com/12113222/32414094-8bd4ba98-c25a-11e7-84f0-4fc473dc7144.gif)

##### `-t` or `--today`

Check **today's** schedule.

```
$ nba-go game -t
```

![game -t gif](https://user-images.githubusercontent.com/12113222/32414115-f1a1ad72-c25a-11e7-8c79-a8b9b1ee0599.gif)

##### `-T` or `--tomorrow`

Check **tomorrow's** schedule.

```
$ nba-go game -T
```

![game -T gif](https://user-images.githubusercontent.com/12113222/32414142-7897dfe0-c25b-11e7-9acf-d50ade5379fd.gif)

##### `-n` or `--networks`

Display on schedule home team and away team television network information.

```
$ nba-go game -n
```

#### Pregame

⭐️⭐️  
Check the detailed comparison data between two teams in the game.

![pregame](https://user-images.githubusercontent.com/12113222/32414253-ad64df82-c25d-11e7-9076-4da800f3c701.gif)

#### Live

⭐️⭐️⭐️  
**Best feature!** Realtime updated play-by-play, scoreboard and box score. Turn on fullscreen mode for better experience.  
Btw, play-by-play is scrollable!.

![live](https://user-images.githubusercontent.com/12113222/32420915-3ca6b34a-c2cd-11e7-904d-bf41cc4b93f7.gif)

#### Final

⭐️⭐️  
Check two teams' detailed scoreboard and box score.

![final](https://user-images.githubusercontent.com/12113222/32436783-1e7ad7b8-c320-11e7-97af-29d95732581c.gif)

#### Filter

Filter results to quickly jump to the info you care about

#### Options

##### `-f` or `--filter`

Currently only supports filtering the results by team but more options on the way

```
nba-go game --filter team=Detroit
```

### Player

Get player's basic information, regular season data and playoffs data.

**Note.** Must place **player's name** between `nba-go player` and options.

#### Options

##### `-i` or `--info`

Get player's basic information.

```
$ nba-go player Curry -i
```

![player -i gif](https://user-images.githubusercontent.com/12113222/32416941-7cfc49e6-c28c-11e7-8a79-15601a44554e.gif)

##### `-r` or `--regular`

Get player's basic information.

```
$ nba-go player Curry -r
```

![player -r gif](https://user-images.githubusercontent.com/12113222/32416897-bb82af9e-c28b-11e7-827f-0f0d67d80364.gif)

##### `-p` or `--playoffs`

Get player's basic information.

```
$ nba-go player Curry -p
```

![player -p gif](https://user-images.githubusercontent.com/12113222/32500032-234e8fba-c40f-11e7-87c0-6e42a66a52dc.gif)

##### `-c` or `--compare`

Get and compare the stats from multiple players. The better stat will be highlighted in green to make comparing easier.
When listing the multiple names they must be in quotes and seperated by commas. Can be combined with the -i, -r, and -p flags.

```
$ nba-go player ""Lebron James, Stephen Curry, James Harden"" -c -i -r -p
```

![player -c gif](https://user-images.githubusercontent.com/12113222/37696809-1fd54306-2d14-11e8-9261-4d9b6a08588a.gif)

#### Mixed them all

Get all data at the same time.

```
$ nba-go player Curry -i -r -p
```

![player mixed gif](https://user-images.githubusercontent.com/12113222/32416928-5054d48a-c28c-11e7-84d3-bc17681e1a5e.gif)

## Development

* It's simple to run `nba-go` on your local computer.  
* The following is step-by-step instruction.

```
$ git clone https://github.com/xxhomey19/nba-go.git
$ cd nba-go
$ yarn
$ NODE_ENV=development node bin/cli.js <command>
```

## Related repo:

- [nba-bar](https://github.com/xxhomey19/nba-bar)
- [watch-nba](https://github.com/chentsulin/watch-nba)
- [nba-color](https://github.com/xxhomey19/nba-color)

## License

MIT © [xxhomey19](https://github.com/xxhomey19)
"
1,hegaojian/JetpackMvvm,Kotlin,"[![Platform][1]][2] [![GitHub license][3]][4]  [![GitHub license][5]][6] 

[1]:https://img.shields.io/badge/platform-Android-blue.svg  
[2]:https://github.com/hegaojian/JetpackMvvm
[3]:https://img.shields.io/github/release/hegaojian/JetpackMvvm.svg
[4]:https://github.com/hegaojian/JetpackMvvm/releases/latest
[5]:https://img.shields.io/badge/license-Apache%202-blue.svg
[6]:https://github.com/hegaojian/JetpackMvvm/blob/master/LICENSE

# :chicken::chicken::chicken:JetPackMvvm
- **基于MVVM模式集成谷歌官方推荐的JetPack组件库：LiveData、ViewModel、Lifecycle、Navigation组件**
- **使用kotlin语言，添加大量拓展函数，简化代码**
- **加入Retrofit网络请求,协程，帮你简化各种操作，让你快速请求网络**  

## 演示Demo
 已用该库重构了我之前的玩安卓项目，利用Navigation组件以单Activity+Fragment架构编写，优化了很多代码，对比之前的mvp项目，开发效率与舒适度要提高了不少，想看之前MVP的项目可以去 [https://github.com/hegaojian/WanAndroid](https://github.com/hegaojian/WanAndroid) 
 
#### 效果图展示 
![项目效果图](https://upload-images.jianshu.io/upload_images/9305757-818106225dd01e65.gif?imageMogr2/auto-orient/strip)
 
#### APK下载：

- [Github下载](https://github.com/hegaojian/JetpackMvvm/releases/download/1.2.6/app-release.apk)

- [firm下载(推荐)](http://d.6short.com/v9q7)

- 扫码下载(推荐)

![](https://upload-images.jianshu.io/upload_images/9305757-8ca8324f5690198e.png?imageMogr2/auto-orient/strip|imageView2/2/format/webp)
  
  
## 1.如何集成

- **1.1 在root's build.gradle中加入Jitpack仓库**

``` gradle
allprojects {
    repositories {
        ...
        maven { url 'https://jitpack.io' }
    }
}
```

- **1.2 在app's build.gradle中添加依赖**

``` gradle
dependencies {
  ...
  implementation 'com.github.hegaojian:JetpackMvvm:1.2.7'
}
```

- **1.3 在app's build.gradle中，android 模块下按需开启DataBinding与ViewBinding**

``` gradle
AndroidStudio 4.0 以下版本------>
android {
    ...
    dataBinding {
        enabled = true 
    }
    viewBinding {
        enabled = true
    }
}

AndroidStudio 4.0及以上版本 ------>
android {
    ...
   buildFeatures {
        dataBinding = true
        viewBinding = true
    }
}
 
```

## 2.继承基类
一般我们项目中都会有一套自己定义的符合业务需求的基类 ***BaseActivity/BaseFragment***，所以我们的基类需要**继承本框架的Base类**

- 不想用Databinding与ViewBinding-------可以继承 BaseVmActivity/BaseVmFragment
- 用Databinding-----------可以继承BaseVmDbActivity/BaseVmDbFragment**
- 用Viewbinding-----------可以继承BaseVmVbActivity/BaseVmVbFragment**

**Activity：**

``` kotlin 
abstract class BaseActivity<VM : BaseViewModel, DB : ViewDataBinding> : BaseVmDbActivity<VM, DB>() {
     /**
     * 当前Activity绑定的视图布局Id abstract修饰供子类实现
     */
    abstract override fun layoutId(): Int
    /**
     * 当前Activityc创建后调用的方法 abstract修饰供子类实现
     */
    abstract override fun initView(savedInstanceState: Bundle?)

    /**
     * 创建liveData数据观察
     */
    override override fun createObserver()


    /**
     * 打开等待框 在这里实现你的等待框展示
     */
    override fun showLoading(message: String) {
       ...
    }

    /**
     * 关闭等待框 在这里实现你的等待框关闭
     */
    override fun dismissLoading() {
       ...
    }
}
```
**Fragment：**
``` kotlin
abstract class BaseFragment<VM : BaseViewModel,DB:ViewDataBinding> : BaseVmDbFragment<VM,DB>() {
   
    abstract override fun initView(savedInstanceState: Bundle?)

    /**
     * 懒加载 只有当前fragment视图显示时才会触发该方法 abstract修饰供子类实现
     */
    abstract override fun lazyLoadData()

    /**
     * 创建liveData数据观察 懒加载之后才会触发
     */
    override override fun createObserver()
  
    /**
     * Fragment执行onViewCreated后触发的方法 
     */
    override fun initData() {

    }
    
   /**
     * 打开等待框 在这里实现你的等待框展示
     */
    override fun showLoading(message: String) {
       ...
    }

    /**
     * 关闭等待框 在这里实现你的等待框关闭
     */
    override fun dismissLoading() {
       ...
    }
}
```

## 3.编写一个登录功能

- **3.1 创建LoginViewModel类继承BaseViewModel**

``` xml
class LoginViewModel : BaseViewModel() {
  
}
```

- **3.2 创建LoginFragment 继承基类传入相关泛型,第一个泛型为你创建的LoginViewModel,第二个泛型为ViewDataBind，保存fragment_login.xml后databinding会生成一个FragmentLoginBinding类。（如果没有生成，试着点击Build->Clean Project）**
``` kotlin
class LoginFragment : BaseFragment<LoginViewModel, FragmentLoginBinding>() {
    
    /**
     *  初始化操作
     */
    override fun initView(savedInstanceState: Bundle?) {
        ...
    }
    
    /**
     *  fragment 懒加载
     */
    override fun lazyLoadData() { 
        ...
    }
}
```

## 4.网络请求（Retrofit+协程）

- **4.1 新建请求配置类继承 BaseNetworkApi 示例：**
``` kotlin
class NetworkApi : BaseNetworkApi() {

   companion object {
         
        val instance: NetworkApi by lazy(mode = LazyThreadSafetyMode.SYNCHRONIZED) { NetworkApi() }

        //双重校验锁式-单例 封装NetApiService 方便直接快速调用
        val service: ApiService by lazy(mode = LazyThreadSafetyMode.SYNCHRONIZED) {
            instance.getApi(ApiService::class.java, ApiService.SERVER_URL)
        }
    }
   
    /**
     * 实现重写父类的setHttpClientBuilder方法，
     * 在这里可以添加拦截器，可以对 OkHttpClient.Builder 做任意你想要做的骚操作
     */
    override fun setHttpClientBuilder(builder: OkHttpClient.Builder): OkHttpClient.Builder {
        builder.apply {
            //示例：添加公共heads，可以存放token，公共参数等， 注意要设置在日志拦截器之前，不然Log中会不显示head信息
            addInterceptor(MyHeadInterceptor())
            // 日志拦截器
            addInterceptor(LogInterceptor())
            //超时时间 连接、读、写
            connectTimeout(10, TimeUnit.SECONDS)
            readTimeout(5, TimeUnit.SECONDS)
            writeTimeout(5, TimeUnit.SECONDS)
        }
        return builder
    }

    /**
     * 实现重写父类的setRetrofitBuilder方法，
     * 在这里可以对Retrofit.Builder做任意骚操作，比如添加GSON解析器，protobuf等
     */
    override fun setRetrofitBuilder(builder: Retrofit.Builder): Retrofit.Builder {
        return builder.apply {
            addConverterFactory(GsonConverterFactory.create(GsonBuilder().create()))
            addCallAdapterFactory(CoroutineCallAdapterFactory())
        }
    }
}
```


- **4.2如果你请求服务器返回的数据有基类（没有可忽略这一步）例如:**
``` kotlin
{
    ""data"": ...,
    ""errorCode"": 0,
    ""errorMsg"": """"
}
```
该示例格式是 [玩Android Api](https://www.wanandroid.com/blog/show/2)返回的数据格式，如果errorCode等于0 请求成功，否则请求失败
作为开发者的角度来说，我们主要是想得到脱壳数据-data，且不想每次都判断errorCode==0请求是否成功或失败
这时我们可以在服务器返回数据基类中继承BaseResponse，实现相关方法：

``` kotlin
data class ApiResponse<T>(var errorCode: Int, var errorMsg: String, var data: T) : BaseResponse<T>() {

    // 这里是示例，wanandroid 网站返回的 错误码为 0 就代表请求成功，请你根据自己的业务需求来编写
    override fun isSucces() = errorCode == 0

    override fun getResponseCode() = errorCode

    override fun getResponseData() = data

    override fun getResponseMsg() = errorMsg

}
```
- **4.3 在ViewModel中发起请求，所有请求都是在viewModelScope中启动，请求会发生在IO线程，最终回调在主线程上，当页面销毁的时候，请求会统一取消，不用担心内存泄露的风险，框架做了2种请求使用方式**  

**1、将请求数据包装给ResultState，在Activity/Fragment中去监听ResultState拿到数据做处理**

``` kotlin
class RequestLoginViewModel: BaseViewModel {

  //自动脱壳过滤处理请求结果，自动判断结果是否成功
    var loginResult = MutableLiveData<ResultState<UserInfo>>()
    
  //不用框架帮脱壳
    var loginResult2 = MutableLiveData<ResultState<ApiResponse<UserInfo>>>()
    
  fun login(username: String, password: String){
   //1.在 Activity/Fragment的监听回调中拿到已脱壳的数据（项目有基类的可以用）
        request(
            { HttpRequestCoroutine.login(username, password) }, //请求体
            loginResult,//请求的结果接收者，请求成功与否都会改变该值，在Activity或fragment中监听回调结果，具体可看loginActivity中的回调
            true,//是否显示等待框，，默认false不显示 可以默认不传
            ""正在登录中...""//等待框内容，可以默认不填请求网络中...
        )
        
   //2.在Activity/Fragment中的监听拿到未脱壳的数据，你可以自己根据code做业务需求操作（项目没有基类的可以用）
        requestNoCheck(
          {HttpRequestCoroutine.login(username,password)},
          loginResult2,
          true,
          ""正在登录中..."") 
}


class LoginFragment : BaseFragment<LoginViewModel, FragmentLoginBinding>() {
    
    private val requestLoginRegisterViewModel: RequestLoginRegisterViewModel by viewModels()
    
    /**
     *  初始化操作
     */
    override fun initView(savedInstanceState: Bundle?) {
        ...
    }
    
    /**
     *  fragment 懒加载
     */
    override fun lazyLoadData() { 
        ...
    }
    
    override fun createObserver(){
      //脱壳
       requestLoginRegisterViewModel.loginResult.observe(viewLifecycleOwner,
            Observer { resultState ->
                parseState(resultState, {
                    //登录成功 打印用户
                    it.username.logd()
                }, {
                    //登录失败(网络连接问题，服务器的结果码不正确...异常都会走在这里)
                    showMessage(it.errorMsg)
                })
            })
    
       //不脱壳
       requestLoginRegisterViewModel.loginResult2.observe(viewLifecycleOwner, Observer {resultState ->
               parseState(resultState,{
                   if(it.errorCode==0){
                       //登录成功 打印用户名
                       it.data.username.logd()
                   }else{
                       //登录失败
                       showMessage(it.errorMsg)
                   }
               },{
                   //请求发生了异常
                   showMessage(it.errorMsg)
               })
           })
   } 
}
```

**2、 直接在当前ViewModel中拿到请求结果**

``` kotlin
class RequestLoginViewModel : BaseViewModel() {
    
  fun login(username: String, password: String){
   //1.拿到已脱壳的数据（项目有基类的可以用）
     request({HttpRequestCoroutine.login(username,password)},{
             //请求成功 已自动处理了 请求结果是否正常
             it.username.logd()
         },{
             //请求失败 网络异常，或者请求结果码错误都会回调在这里
             it.errorMsg.logd()
         },true,""正在登录中..."")
        
   //2.拿到未脱壳的数据，你可以自己根据code做业务需求操作（项目没有基类或者不想框架帮忙脱壳的可以用）
       requestNoCheck({HttpRequestCoroutine.login(username,password)},{
            //请求成功 自己拿到数据做业务需求操作
            if(it.errorCode==0){
                //结果正确
                it.data.username.logd()
            }else{
                //结果错误
                it.errorMsg.logd()
            }
        },{
            //请求失败 网络异常回调在这里
            it.errorMsg.logd()
        },true,""正在登录中..."")
}
 
```
### 注意：使用该请求方式时需要注意，如果该ViewModel并不是跟Activity/Fragment绑定的泛型ViewModel，而是
val mainViewModel:MainViewModel by viewModels()
或者
val mainViewModel：MainViewModel by activityViewModels()
获取的
如果请求时要弹出loading，你需要在Activity | Fragment中添加以下代码：
### addLoadingObserve(viewModel)

## 4.4 开启打印日志开关
设置全局jetpackMvvmLog变量 是否打开请求日志，默认false不打印，如需要打印日志功能，请设值为 true

## 5.获取ViewModel
- **5.1我们的activity/fragment会有多个ViewModel，按传统的写法感觉有点累**
``` kotlin
 val mainViewModel = ViewModelProvider(this,
            ViewModelProvider.AndroidViewModelFactory(application)).get(MainViewModel::class.java)
```
**现在官方Ktx有拓展函数可以轻松调用
``` kotlin
//在activity中获取当前Activity级别作用域的ViewModel
 private val mainViewModel:MainViewModel by viewModels()
 
//在activity中获取Application级别作用域的ViewModel（注，这个是本框架提供的，Application类继承框架的BaseApp才有用）
 private val mainViewModel by lazy { getAppViewModel<MainViewModel>()}

//在fragment中获取当前Fragment级别作用域的ViewModel
 private val mainViewModel:MainViewModel by viewModels()

//在fragment中获取父类Activity级别作用域的ViewModel
private val mainViewModel：MainViewModel by activityViewModels()

//在fragment中获取Application级别作用域的ViewModel（注，这个是本框架提供的，Application类继承框架的BaseApp才有用）
private val mainViewModel by lazy { getAppViewModel<MainViewModel>()}
```
## 6.写了一些常用的拓展函数
``` kotlin
 算了不写了，这个不重要，想具体看的话可以在
 me.hgj.jetpackmvvm.ext.util
 me.hgj.jetpackmvvm.ext.view
 的包中看，反正你也可以自己写，按照自己的喜好与需求来
```

## 7.混淆

``` kotlin 
-keep class me.hgj.jetpackmvvm.**{*;}
################ ViewBinding & DataBinding ###############
-keepclassmembers class * implements androidx.viewbinding.ViewBinding {
  public static * inflate(android.view.LayoutInflater);
  public static * inflate(android.view.LayoutInflater, android.view.ViewGroup, boolean);
  public static * bind(android.view.View);
}
```

## 联系
- QQ交流群：419581249

## License
``` license
 Copyright 2019, hegaojian(何高建)       
  
   Licensed under the Apache License, Version 2.0 (the ""License"");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at 
 
       http://www.apache.org/licenses/LICENSE-2.0 

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an ""AS IS"" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
```

"
2,naoyashiga/Dunk,Swift,"# Dunk
![](https://raw.githubusercontent.com/naoyashiga/Dunk/master/demo.gif)  
Dunk is a Dribbble client.
"
3,chonyy/AI-basketball-analysis,Python,"<p align=center>
    <img src=""./static/img/analysis.gif"" width=""960"" height=""300"">
</p>

<p align=center>
    <a target=""_blank"" href=""https://travis-ci.com/chonyy/AI-basketball-analysis"" title=""Build Status""><img src=""https://travis-ci.com/chonyy/AI-basketball-analysis.svg?branch=master""></a>
    <a target=""_blank"" href=""#"" title=""language count""><img src=""https://img.shields.io/github/languages/count/chonyy/AI-basketball-analysis""></a>
    <a target=""_blank"" href=""#"" title=""top language""><img src=""https://img.shields.io/github/languages/top/chonyy/AI-basketball-analysis?color=orange""></a>
    <a target=""_blank"" href=""https://img.shields.io/github/pipenv/locked/python-version/chonyy/daily-nba"" title=""Python version""><img src=""https://img.shields.io/github/pipenv/locked/python-version/chonyy/daily-nba?color=green""></a>
    <a target=""_blank"" href=""https://opensource.org/licenses/MIT"" title=""License: MIT""><img src=""https://img.shields.io/badge/License-MIT-blue.svg""></a>
    <a target=""_blank"" href=""#"" title=""repo size""><img src=""https://img.shields.io/github/repo-size/chonyy/AI-basketball-analysis""></a>
    <a target=""_blank"" href=""http://makeapullrequest.com"" title=""PRs Welcome""><img src=""https://img.shields.io/badge/PRs-welcome-brightgreen.svg""></a>
</p>

> 🏀 Analyze basketball shots and shooting pose with machine learning!

This is an artificial intelligence application built on the concept of **object detection**. Analyze basketball shots by digging into the data collected from object detection. We can get the result by simply uploading files to the web App, or submitting a **POST request** to the API. Please check the [features](#features) below. There are more features coming up! Feel free to follow.

All the data for the shooting pose analysis is calculated by implementing [OpenPose](https://github.com/CMU-Perceptual-Computing-Lab/openpose). Please note that this is an implementation only for noncommercial research use only. Please read the [LICENSE](https://github.com/chonyy/AI-basketball-analysis/blob/master/LICENSE), which is exaclty same as the [CMU's OpenPose License](https://github.com/CMU-Perceptual-Computing-Lab/openpose/blob/master/LICENSE).

If your are interested in the concept of human pose estimation, I have written a [research paper **summary**](https://towardsdatascience.com/openpose-research-paper-summary-realtime-multi-person-2d-pose-estimation-3563a4d7e66) of OpenPose. Check it out!

## Getting Started

These instructions will get you a copy of the project up and running on your local machine.

### Get a copy

Get a copy of this project by simply running the git clone command.

``` git
git clone https://github.com/chonyy/AI-basketball-analysis.git
```

### Prerequisites

Before running the project, we have to install all the dependencies from requirements.txt

``` pip
pip install -r requirements.txt
```

Please note that you need a GPU with proper CUDA setup to run the video analysis, since a CUDA device is required to run OpenPose.

### Hosting

Last, get the project hosted on your local machine with a single command.

``` python
python app.py
```

<p align=center>
    <img src=""./static/img/index_page.PNG"" width=""551.1"" height=""278.7"">
</p>

#### Alternatives

##### Google Colab

[<img src=""https://colab.research.google.com/assets/colab-badge.svg"" align=""center"">](https://colab.research.google.com/github/hardik0/AI-basketball-analysis-on-google-colab/blob/master/AI_basketball_analysis_google_colab.ipynb)

Thanks to [hardik0](https://github.com/hardik0/AI-basketball-analysis-on-google-colab). Now we can play around with it without a GPU machine!

##### Heroku

This project is also hosted on [Heroku](https://ai-basketball-analysis.herokuapp.com/). However, the heavy computation of TensorFlow may cause Timeout error and crash the app (especially for video analysis). Therefore, hosting the project on your local machine is more preferable.

Please note that the shooting pose analysis won't be running on the Heroku hosted website, since a CUDA device is required to run OpenPose.

## Project Structure

<p align=center>
    <img src=""./static/img/structure.png"">
</p>

## Features

This project has three main features, [shot analysis](#shot-analysis), [shot detection](#shot-detection), [detection API](#detection-api).

### Shot and Pose analysis

#### Shot counting

<p align=center>
    <img src=""./static/img/analysis_result.PNG"">
</p>

Counting shooting attempts and missing, scoring shots from the input video.
Detection keypoints in different colors have different meanings listed below:
* **Blue:** Detected basketball in normal status
* **Purple**: Undetermined shot
* **Green:** Shot went in
* **Red:** Miss

#### Pose analysis

<p align=center>
    <img src=""./static/img/curry_pose.gif"" width=""800"" height=""450"">
</p>

Implementing [OpenPose](https://github.com/CMU-Perceptual-Computing-Lab/openpose) to calculate the angle of elbow and knee during shooting.

<p align=center>
    <img src=""https://2.bp.blogspot.com/_xaY-4TqFF6s/SgDgFQeGI6I/AAAAAAAAANk/I83JeZ89MOU/w1200-h630-p-k-no-nu/Basketball+Free+Throw+Side+On1-031509.jpg"">
</p>

Release angle and release time are calculated by all the data collected from shot analysis and pose analysis. Please note that there will be a relatively big **error** for the release time since it was calculated as the total time when the ball is in hand.

### Shot detection

<p align=center>
    <img src=""./static/img/detection.PNG"">
</p>

Detection will be shown on the image. The confidence and the coordinate of the detection will be listed below.

### Detection API

<p align=center>
    <img src=""./static/img/API.PNG"" width=""861.6"" height=""649.6"">
</p>

Get the JSON response by submitting a **POST** request to (./detection_json) with ""image"" as KEY and input image as VALUE.

## Detection model

<p align=center>
    <img src=""https://jkjung-avt.github.io/assets/2018-03-30-making-frcn-faster/FRCN_architecture.png"" width=""558"" height=""560.5"">
</p>

The object detection model is trained with the [Faster R-CNN model architecture](https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/detection_model_zoo.md#coco-trained-models), which includes pretrained weight on COCO dataset. Taking the configuration from the model architecture and train it on my own dataset.


## Future plans
- [ ] Change the model to a more efficient YOLOv4
- [ ] Implement SORT Tracking algorithm to filter out false detection
- [ ] Improve the visual effect
- [ ] Improve the efficiency, making it executable on web app services.
"
4,hegaojian/WanAndroid,Kotlin,"[![Platform][1]][2] [![GitHub license][3]][4]  [![GitHub license][5]][6] 

[1]:https://img.shields.io/badge/platform-Android-blue.svg  
[2]:https://github.com/hegaojian/WanAndroid
[3]:https://img.shields.io/github/release/hegaojian/WanAndroid.svg
[4]:https://github.com/hegaojian/WanAndroid/releases/latest
[5]:https://img.shields.io/badge/license-Apache%202-blue.svg
[6]:https://github.com/hegaojian/WanAndroid/blob/master/LICENSE

# 通知 该项目已停止维护

  已使用JetPack+MVVM重构该项目 新地址： [https://github.com/hegaojian/JetpackMvvm](https://github.com/hegaojian/JetpackMvvm)

# WanAndroid
一位练习时长两年半的安卓练习生根据鸿神提供的[WanAndroid开放Api](https://www.wanandroid.com/blog/show/2)来制作的产品级App,基本实现了所有的功能，使用Kotlin语言，基于Material Design+AndroidX + MVP + RxJava + Retrofit等优秀的开源框架开发,注释超详细，方便大家练手

如果你觉得本项目做的还不错对你有帮助，**容我卑微地向你要个star**，有任何问题或建议，欢迎提交[issues](https://github.com/hegaojian/WanAndroid/issues)

# 前言
前段时间学习了 **Kotlin** ，于是打算写一个项目来练练手刷刷熟练度，因为经常逛鸿神的[WanAndroid](https://www.wanandroid.com)网站，觉得很不错，Api也很丰富健全， 虽然根据[WanAndroid](https://www.wanandroid.com)APi开发出的app多如牛毛，有诸多优秀的app,但是每个人的喜好与审美不一样，所以都没有做到我心目中的最完美，于是我就想自己设计开发一个让自己觉得满意的玩安卓App。界面的话参考了一些市场上App的风格搭配实现

## 实现的功能

- 首页五大模块：首页 / 项目 / 体系/ 公众号 / 我的
- 登录注册功能
- 导航功能
- 搜索功能 热门搜索推荐 搜索历史记录
- 积分功能 积分排行 积分获取记录
- 收藏功能 收藏文章 收藏网址 
- 待办清单 添加清单 编辑清单 删除清单
- 广场功能
- 发布自己的文章、查询、删除文章
- 文章网址详情 详情中收藏 分享 浏览器打开
- 全局修改应用主题色
- 全局修改列表的加载动画
- 文章在任何地方收藏与取消，其他界面相对应的数据也会变化
- 布局优化，大量使用ConstraintLayout
- 集成Bugly收集bug并实现App更新
- 全局捕捉异常防止崩溃

## APP下载

- [GitHub下载](https://github.com/hegaojian/WanAndroid/releases/download/1.0.9/app-release.apk)

- [fir.im下载](http://d.6short.com/4ybt)

- [小米应用市场下载](http://app.mi.com/download/933598?id=me.hegj.wandroid&ref=search&nonce=2368478985935143674%3A26235470&appClientId=2882303761517485445&appSignature=T49mZxF9fm7r1qKDSyN68zGb37Ar0wJUK_9EQK6PC2s)

- 扫码

![](https://upload-images.jianshu.io/upload_images/9305757-a915f9e674931aa7.png?imageMogr2/auto-orient/strip|imageView2/2/w/500/format/webp)
 

## 应用截图

![](https://upload-images.jianshu.io/upload_images/9305757-cfe71359e8b28283.png?imageMogr2/auto-orient/strip|imageView2/2/w/986/format/webp)
![](https://upload-images.jianshu.io/upload_images/9305757-1e7f1d3b963681ce.png?imageMogr2/auto-orient/strip|imageView2/2/w/987/format/webp)
![](https://upload-images.jianshu.io/upload_images/9305757-29f7facf2c51304f.png?imageMogr2/auto-orient/strip|imageView2/2/w/980/format/webp)
![](https://upload-images.jianshu.io/upload_images/9305757-85ce00bc6e56fc4c.png?imageMogr2/auto-orient/strip|imageView2/2/w/976/format/webp)
![](https://upload-images.jianshu.io/upload_images/9305757-017b33c24c2fa8ed.png?imageMogr2/auto-orient/strip|imageView2/2/w/991/format/webp)

## 项目中用到的开源库
- [一个在 Java VM 上使用可观测的序列来组成异步的、基于事件的程序的框架-RxJava2](https://github.com/ReactiveX/RxJava)
- [一个依赖注入框架-Dagger2](https://github.com/square/dagger)
- [处理网络请求的框架-Okhttp](https://github.com/square/okhttp)
- [一个基于OKHttp封装的网络加载框架-Retrofit](https://github.com/square/retrofit)
- [转换json数据的官方框架-Gson](https://github.com/google/gson)
- [Android的事件发布-Eventbus](https://github.com/greenrobot/EventBus)
- [项目核心库MVP框架-MVPArms](https://github.com/JessYanCoding/MVPArms)
- [屏幕适配AndroidAutoSize](https://github.com/JessYanCoding/AndroidAutoSize)
- [一个美丽的、流体和可扩展的对话框-Material-dialogs](https://github.com/afollestad/material-dialogs)
- [一个强大的Fragment管理库-Fragmentation](https://github.com/YoKeyword/Fragmentation)
- [一个增强BottomNavigationView的安卓库-BottomNavigationViewEx](https://github.com/ittianyu/BottomNavigationViewEx)
- [强大、可定制、易扩展的 ViewPager 指示器框架-MagicIndicator](https://github.com/hackware1993/MagicIndicator)
- [一个强大的轮播库-BGABanner-Android](https://github.com/bingoogolapple/BGABanner-Android)
- [一个强大并且灵活的RecyclerViewAdapter-BaseRecyclerViewAdapterHelper](https://github.com/CymChad/BaseRecyclerViewAdapterHelper)
- [RecyclerView侧滑菜单，Item拖拽，滑动删除Item，自动加载更多，HeaderView，FooterView，Item分组黏贴-SwipeRecyclerView](https://github.com/yanzhenjie/SwipeRecyclerView)
- [揭示效果布局-RevealLayout](https://github.com/goweii/RevealLayout)
- [优雅地处理加载中，重试，无数据-Loadsir](https://github.com/KingJA/LoadSir)
- [基于Android WebView的一个强大的库-Agentweb](https://github.com/Justson/AgentWeb)
- [Android流式布局-FlowLayout](https://github.com/hongyangAndroid/FlowLayout)
- [基于mmap内存映射的移动端通用 key-value 组件-MMKV](https://github.com/Tencent/MMKV)
- [全局捕捉异常防止崩溃-CustomActivityOnCrash](https://github.com/Ereza/CustomActivityOnCrash)
## 素材来源
- [阿里巴巴矢量图标库](http://www.iconfont.cn/)
- 借鉴了[花瓣APP](https://huaban.com/)的登录页
- [个人中心界面借鉴](https://www.ui.cn/detail/495986.html)
- [goweii](https://github.com/goweii/WanAndroid)项目中的Launch图标

## 特别感谢
- 感谢[鸿洋大神](https://github.com/hongyangAndroid)提供的[WanAndroid开放API](https://www.wanandroid.com/blog/show/2)，我在issues提了一些自己的需求，鸿神都耐心的帮忙添加了，谢谢

# 更新日志

## v 1.0.9 (2019-12-6)
- 1.添加kotlin拓展函数，优化设置控件主题，跳转拦截代码
- 2.请求网络写法纠正，具体看[#11](https://github.com/hegaojian/WanAndroid/issues/11)

## v 1.0.8 (2019-11-12)
- 1.添加Bugly校验
- 2.我的-加入我们 修改了群号为作者自己的
- 3.删除build中的signingConfigs编译信息

## v 1.0.7 (2019-10-18)
- 1.添加积分规则
- 2.添加分享文章提示
- 3.修复5.1手机打开webview报错bug
- 4.修复recyclerview在加载更多时，点击会调用多次接口bug
- 5.升级gradle版本至3.5.1,SDK提升至29

## v 1.0.6 (2019-10-9)
- 1.添加广场功能
- 2.自己的文章-删除、查询、添加
- 3.可以查看他人的信息
- 4.个人中心界面改版

## v 1.0.5 (2019-9-28)
- 😍😍😍为祖国母亲庆生，添加国庆主题

## v 1.0.4 (2019-9-25)
- 1.修复bug体系-广场中的列表数据没有显示作者
- 2.修复部分tab，标题，文本数据显示了网页标签bug
- 3.修改体系中tab位置起始位左侧显示

## v 1.0.3 (2019-9-11)
- 1.修复部分手机登录注册返回主页后闪退的bug
- 2.暂时去掉侧滑功能，现在输入法出现的黑屏不好看，后面解决后再加上侧滑功能
- 3.添加全局捕捉异常库，防止崩溃
- 4.修复Bugly上的bug

## v 1.0.2 (2019-9-6)
- 1.太粗心大意了，修复添加任务清单界面点击返回键无响应bug

## v 1.0.1 (2019-9-6)

- 1.修复开源项目界面点击返回无反应bug

## v 1.0.0 (2019-9-5)

- 首次提交，大致完成功能，但存在一些问题，后期慢慢解决吧
- 1.因为侧滑返回库的原因导致输入法弹出出现黑屏，实在不行就换个其他的库了
- 2.kotlin用的不是特别熟练，感觉很多地方还可以精简或者有其他更好的方案替代
- 3.启动页因为考虑到要根据用户选择的主题色来动态显示，就没有设置纯色背景，所以会导致冷启动时会出现短暂白屏


## License
```
 Copyright 2019, hegaojian(何高建)       
  
   Licensed under the Apache License, Version 2.0 (the ""License"");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at 
 
       http://www.apache.org/licenses/LICENSE-2.0 

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an ""AS IS"" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
```
"
5,bttmly/nba,JavaScript,"# nba
*Node.js client for nba.com API endpoints*

`npm install nba`

## NOTES:

### BLACKLISTED IP ADDRESSES:
It appears as though the NBA has blacklisted certain blocks of IP addresses, specifically those of cloud hosting providers including AWS. As such, you may hit a situation where an application using this package works fine on your local machine, but doesn't work at all when deployed to a cloud server. Annoyingly, requests from these IPs seem to just hang. More information [here](https://github.com/bttmly/nba/issues/41) and [here](https://github.com/seemethere/nba_py/issues/88) -- the second issue has a `curl` command somewhere which will quickly tell you if NBA is accepting requests from your IP. (Incidentally, this is also the same reason the TravisCI build is always ""broken"" but tests all pass locally). There is a simple pass-through server in `scripts/proxy` that can be used to get around this restriction; you can put the proxy server somewhere that can reach NBA.com (e.g. not on AWS or Heroku or similar) and host your actual application on a cloud provider.

### CORS restrictions on browser usage
This package can't be used directly from the browser because of [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) restrictions imposed by nba.com. If you run some sort of intermediate server which relays requests to NBA.com, you can change the host the client points to by following the instructions in the *Transport Layer* section

## NBA API
The [stats.nba.com](http://stats.nba.com) uses a large number of undocumented JSON endpoints to provide the statistics tables and charts displayed on that website. This library provides a JavaScript client for interacting with many of those API endpoints.

## Getting Started

`NBA.findPlayer(str)` will return an object with a player's name, their ID, and their team information. This method is built into the package.

All methods in the `NBA.stats` namespace require an object to be passed in as a parameter. The keys to the object are in the docs for the `stats` namespace [here](doc/stats.md)

```js
const NBA = require(""nba"");
const curry = NBA.findPlayer('Stephen Curry');
console.log(curry);
/* logs the following:
{
  firstName: 'Stephen',
  lastName: 'Curry',
  playerId: 201939,
  teamId: 1610612744,
  fullName: 'Stephen Curry',
  downcaseName: 'stephen curry'
}
*/
NBA.stats.playerInfo({ PlayerID: curry.playerId }).then(console.log);
```

For more example API calls, see `/test/integration/stats.js` and other test files.

## Stability Warning
This is a client for an unstable and undocumented API. While I try to follow [semver](http://semver.org/) for changes to the JavaScript API this library exposes, the underlying HTTP API can (and has) changed without warning. In particular, the NBA has repeatedly deprecated endpoints, or added certain required headers without which requests will fail. Further, this library comes bundled with a (relatively) up-to-date list of current NBA players which is subject to change at any time -- the specific contents of it should not be considered part of this library's API contract.

## Usability
To put it nicely, the NBA's API endpoints are a little clunky to work with. This library tries to strike a balance between being usable but not making assumptions about how the data will be used. Specifically, the NBA sends data in a concise ""table"" form where the column headers come first then each result is an array of values that need to be matched with the proper header. This library does a simple transformation to zip the header and values arrays into a header-keyed object. Beyond that, it tries to not do too much. This is important to note because sometimes the various ""result sets"" that come back on a single endpoint seem sort of arbitrary. The underlying HTTP API doesn't seem to follow standard REST practices; rather it seems the endpoints are tied directly to the data needed by specific tables and charts displayed on [stats.nba.com](). This is what I mean by ""clunky"" to work with -- it can be tricky to assemble the data you need for a specific analysis from the various endpoints available.

## Documentation
_still lots to do here..._

There are four primary parts of this library
- *Top-level methods*
- *`stats` namespace* &mdash; [docs](https://github.com/bttmly/nba/blob/master/doc/stats.md)
- *`synergy` namespace* [see tests](https://github.com/bttmly/nba/blob/master/test/integration/synergy.js)
– *`data` namespace* [see tests](https://github.com/bttmly/nba/blob/master/test/integration/data.js)
- *~`sportVu` namespace*~ NBA has removed sportVu endpoints. the methods exist here for backwards compatibility but they throw errors

## Transport Layer
In some cases you will want to use a different transport layer to handle HTTP requests. Perhaps you have an HTTP client library you like better than what I used here. Better yet, you want to get stats for the WNBA or the G League. The following code snippet shows how to use the `withTransport` method to create a new client with your own transport function.

```js
// here we are getting stats for the WNBA!

const nba = require(""nba"");
const getJSON = require(""nba/src/get-json"");

// for the G League, try ""stats.gleague.nba.com""
const newHost = ""stats.wnba.com"";

const transport = (url, params, options) => {
  // simply swap the host and then defer the rest to the built in getJSON function
  const fixedURL = url.replace(""stats.nba.com"", ""stats.wnba.com"");
  return getJSON(fixedURL, params, options);
};

// create a new stats client here with our WNBA transport
const wnbaStats = nba.stats.withTransport(transport);

(async () => {
  const result = await wnbaStats.playerInfo({ PlayerID: ""1628886"" });
  console.log(result);
})();
```

## ""I don't use Node.js""
Please take a look at [nba-client-template](http://github.com/bttmly/nba-client-template). The relevant part of the repo is a single JSON document from which many programming languages can dynamically generate an API client. The repo contains (sloppy) examples in [Ruby](https://github.com/bttmly/nba-client-template/blob/master/example-clients/simple-client.rb) and [Python](https://github.com/bttmly/nba-client-template/blob/master/example-clients/simple-client.py). Compiled languages can use code generation techniques to the same effect -- there's a (again, sloppy) example in [Go](https://github.com/bttmly/nba-client-template/tree/master/example-clients/golang). If you'd like me to publish it to a specific registry so you can install it with your language's package manager, please [open an issue](http://github.com/bttmly/nba-client-template/issues). Please note, however, that package only includes  the endpoints exposed by this library under the `stats` namespace -- `sportvu` and `synergy` endpoints aren't yet included in it. I also plan to add a command-line interface to this library so that it can be easily driven as a child process by another program.

##
"
6,smuyyh/SprintNBA,Java,"# :basketball: SprintNBA

## 完整的NBA第三方Android客户端，包含NBA头条新闻、视频集锦/赛场花絮、比赛直播（目前支持比赛前瞻、文字直播、球队及球员技术统计、视频直播(企鹅推出了球队通、联盟通... 简直不能忍啊！！)）、球队战绩排行、球员数据排名、虎扑论坛专区（已实现发帖与回复功能）、球队及球员的详细资料。

## 声明

本项目部分API来自NBA中文官网与虎扑体育，纯练手之作，个人未从中获取任何利益，其所有内容均可在NBA中文官网与虎扑体育获取。数据的获取与共享可能会侵犯到NBA中文官网与虎扑体育的权益，若被告知需停止共享与使用，本人会立即删除整个项目。

## 项目

本项目采用 MaterialDesign + MVP + Retrofit2 开发。项目的大部分功能已经完成，并在百度手机助手等应用商店上架V1.1版本。目前正在不断完善中，喜欢的话不防给个star哈。

## 重要更新

### V2.0
1. 增加比赛视频直播
2. 优化比赛视频直播的稳定性。支持换源

### V1.1
1. 由于腾讯视频对真实地址解析后播放进行了加密，故采用新方法进行真实地址解析，若遇到不可播放的视频，可点击右上角跳转到内嵌网页播放。
2. 增强UI体验。修复一些bug
3. 若初次体验V1.0 导致V1.1应用自动更新无法下载，则应到设置->应用->SprintNBA下，授予SD读写权限。

### V1.0
初次版本，含NBA新闻、视频花絮、赛程及文字直播、技术统计、球队及球员数据排行、详细资料，虎扑论坛专区。

## 下载
- APK本地下载：[SprintNBA-2.0.apk](https://raw.githubusercontent.com/smuyyh/SprintNBA/master/app/release/SprintNBA-2.0.apk)

- 百度手机助手应用商店：[SprintNBA-2.0](http://shouji.baidu.com/software/11090327.html)

- 百度91无线：[SprintNBA-2.0](http://apk.91.com/Soft/Android/com.yuyh.sprintnba-3-2.0.html)

- 安卓市场：[SprintNBA-2.0](http://apk.hiapk.com/appinfo/com.yuyh.sprintnba/3)

## TODO

*   [ ] 代码优化
*   [ ] 虎扑论坛部分功能暂未完善
*   [ ] 单支球队赛程
*   [ ] 优化相关视频播放。腾讯视频真实地址提取功能不稳定，导致部分视频不能播放。
*   [ ] 部分BUG修复（有疑问欢迎提[issue](https://github.com/smuyyh/SprintNBA/issues/new)）

## 应用截图

友情提示：高清图片，耐心等待哟~~

- **头条新闻**

<img src=""https://github.com/smuyyh/SprintNBA/blob/master/screenshot/home_news_1.png?raw=true"" width=""280""/>
<img src=""https://github.com/smuyyh/SprintNBA/blob/master/screenshot/news_detail_1.png?raw=true"" width=""280""/>
<img src=""https://github.com/smuyyh/SprintNBA/blob/master/screenshot/news_img_1.png?raw=true"" width=""280""/>

<br>

- **比赛视频/赛场花絮**

<img src=""https://github.com/smuyyh/SprintNBA/blob/master/screenshot/home_video_list_1.png?raw=true"" width=""280""/>
<img src=""https://github.com/smuyyh/SprintNBA/blob/master/screenshot/home_video_1.png?raw=true"" width=""280""/>
<img src=""https://github.com/smuyyh/SprintNBA/blob/master/screenshot/video_play.png?raw=true"" width=""280""/>

<br>

- **比赛相关**

<img src=""https://github.com/smuyyh/SprintNBA/blob/master/screenshot/home_schedule_1.png?raw=true"" width=""280""/>
<img src=""https://github.com/smuyyh/SprintNBA/blob/master/screenshot/match_data_1.png?raw=true"" width=""280""/>
<img src=""https://github.com/smuyyh/SprintNBA/blob/master/screenshot/match_live_1.png?raw=true"" width=""280""/>
<img src=""https://github.com/smuyyh/SprintNBA/blob/master/screenshot/match_video_live_source.png?raw=true"" width=""280""/>
<img src=""https://github.com/smuyyh/SprintNBA/blob/master/screenshot/match_video_live.png?raw=true"" width=""280""/>

<br>

- **球队/球员 相关**

<img src=""https://github.com/smuyyh/SprintNBA/blob/master/screenshot/home_team_sort_1.png?raw=true"" width=""280""/>
<img src=""https://github.com/smuyyh/SprintNBA/blob/master/screenshot/home_player_stats_1.png?raw=true"" width=""280""/>
<img src=""https://github.com/smuyyh/SprintNBA/blob/master/screenshot/player_list_1.png?raw=true"" width=""280""/>
<img src=""https://github.com/smuyyh/SprintNBA/blob/master/screenshot/player_detail_1.png?raw=true"" width=""280""/>
<img src=""https://github.com/smuyyh/SprintNBA/blob/master/screenshot/team_detail_1.png?raw=true"" width=""280""/>

<br>

- **虎扑论坛相关**

<img src=""https://github.com/smuyyh/SprintNBA/blob/master/screenshot/home_hupu_1.png?raw=true"" width=""280""/>
<img src=""https://github.com/smuyyh/SprintNBA/blob/master/screenshot/thread_list_1.png?raw=true"" width=""280""/>
<img src=""https://github.com/smuyyh/SprintNBA/blob/master/screenshot/thread_detail_1.png?raw=true"" width=""280""/>

<br>

- **其他**

<img src=""https://github.com/smuyyh/SprintNBA/blob/master/screenshot/home_other_1.png?raw=true"" width=""280""/>
"
7,linouk23/NBA-Player-Movements,Python,"# NBA Player Movements

This is a script for visualization of NBA games from raw SportVU logs.

If you admire both Spurs' and Warriors' ball movement, Brad Stevens' playbook, or just miss KD in OKC you'll find this entertaining.

## Examples

![Spurs](https://github.com/linouk23/NBA-Player-Movements/blob/master/examples/spurs.gif)
![Warriors](https://github.com/linouk23/NBA-Player-Movements/blob/master/examples/warriors.gif)
![Celtics](https://github.com/linouk23/NBA-Player-Movements/blob/master/examples/celtics.gif)
![Durant](https://github.com/linouk23/NBA-Player-Movements/blob/master/examples/durant.gif)

## Usage

1. Clone this repo:

  ```bash
  $ git clone https://github.com/linouk23/NBA-Player-Movements
  ```

2. Choose any NBA game from ```data/2016.NBA.Raw.SportVU.Game.Logs``` directory.

3. Generate an animation for the play by running the following script:

  ```bash
  $ python3 main.py --path=Celtics@Lakers.json --event=140
  ```

  ```
  required arguments:
    --path PATH    a path to json file to read the events from

  optional arguments:
    --event EVENT  an index of the event to create the animation to
                   (the indexing start with zero, if you index goes beyond out
                   the total number of events (plays), it will show you the last
                   one of the game)
    -h, --help     show the help message and exit
  ```
"
8,FaridSafi/react-native-basketball,JavaScript,"# react-native-basketball

React-Native clone of the Facebook Basketball game

![](https://raw.githubusercontent.com/FaridSafi/react-native-basketball/master/capture/capture.gif)

### Versioning

For React Native 0.45.1

### Installation

- `git clone https://github.com/FaridSafi/react-native-basketball`
- `cd react-native-basketball && npm install`
- `react-native run-ios`


Feel free to ask me questions on Twitter [@FaridSafi](https://www.twitter.com/FaridSafi)!

# License

Licensed under the [MIT](LICENSE)
"
9,TryKickoff/kickoff,CSS,"![Kickoff](http://i.imgur.com/bfMlVwe.jpg)

> A lightweight front-end framework for creating scalable and performant, responsive sites

[![devDependency Status](https://david-dm.org/trykickoff/kickoff/dev-status.png)](https://david-dm.org/trykickoff/kickoff#info=devDependencies) [![Build status](https://ci.appveyor.com/api/projects/status/g699smb2tsoakc8k/branch/master?svg=true)](https://ci.appveyor.com/project/mrmartineau/kickoff/branch/master) [![Dependency Status](https://dependencyci.com/github/TryKickoff/kickoff/badge)](https://dependencyci.com/github/TryKickoff/kickoff) [![XO code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/sindresorhus/xo)  [![bitHound Overall Score](https://www.bithound.io/github/TryKickoff/kickoff/badges/score.svg)](https://www.bithound.io/github/TryKickoff/kickoff)

Developed and maintained by [Ashley Nolan](https://github.com/ashleynolan) & [Zander Martineau](https://github.com/mrmartineau)

## Features
|                	| Feature                    	| Description                                                                                   	|
|----------------	|----------------------------	|-----------------------------------------------------------------------------------------------	|
| :fast_forward: 	| #webperf                   	| Performance-first, responsive philosophy                                                      	|
| :oncoming_bus: 	| Rock-solid build tasks     	| We use gulp & webpack to deliver the best task runner & developer experience for your project 	|
| :eyeglasses:   	| Unopinionated & extendable 	| A few common UI elements, a grid & some other base styles. The rest is up to you.             	|
| :crystal_ball: 	| Future proof               	| Build complex layouts with flexbox & use ES2015 (ES6) for your javascript.                                                  	|
| :angry:        	| Lean & mean                	| CSS: 8.68 kB gzipped<br> JS: 2 kB gzipped<br> It is a boilerplate after all :wink:                 	|

## Tasks
| Command | Description |
|----------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| `npm start` | Basic dev server using [Browsersync](http://www.browsersync.io/) |
| `npm run watch` | Watch all files for changes |
| `npm run deploy` | Install all dependencies and compile all assets for production deployment |
| `npm run compile:all` | Compile the CSS & JS, compress the images and run any other compilation tasks needed to run your app |
| `npm run compile:release` | Add the `--release` flag to any other task, e.g. `gulp javascript --release` or `gulp css --release` |
| `npm run compile:css` | [Sass](http://sass-lang.com/) ([Libsass](http://sass-lang.com/libsass) via [node-sass](https://github.com/sass/node-sass)), [Postcss](http://postcss.org/) with [Autoprefixer](https://github.com/postcss/autoprefixer), [CSSNano](https://github.com/ben-eb/cssnano), Source Maps & more.. |
| `npm run compile:js` | [Babel](http://babeljs.io/), [Webpack](http://webpack.github.io/) |
| `npm run compile:svg` | Auto-generated [SVG sprites](https://github.com/w0rm/gulp-svgstore) |
| `npm run compress:images` | Image compression with [imagemin](https://www.npmjs.com/package/gulp-imagemin) |
| `npm run lint:js` | Lint JS using [xo](https://github.com/sindresorhus/xo) |
| `npm run fix:js` | Fix JS linting issues using [xo](https://github.com/sindresorhus/xo) |
| `npm run lint:css` | Lint CSS using [stylelint](https://github.com/stylelint/stylelint). We use the [https://github.com/stylelint/stylelint-config-standard](https://github.com/stylelint/stylelint-config-standard) rules for our linting |
| `npm test` | Run javascript and css tests |
| `npm run clean:all` | Clean the compiled files |
| `npm run copy:all` | Run the copy tasks - useful for things like webfonts etc |
| `npm run release-patch` | Creates a patch release using [release-it](https://github.com/webpro/release-it) |
| `npm run release-minor` | Creates a minor release using [release-it](https://github.com/webpro/release-it) |
| `npm run release-major` | Creates a major release using [release-it](https://github.com/webpro/release-it) |
| `npm run release-premajor` | Creates a premajor release using [release-it](https://github.com/webpro/release-it) |

---

## :memo: Demos and documentation
Kickoff's demo and documentation site is hosted at [trykickoff.com](http://trykickoff.com/).

---

## Yeoman generator
Our Yeoman Generator is the best way to get Kickoff each time you want to start a new project, visit [trykickoff.com/docs/yeoman.html](http://trykickoff.com/learn/yeoman.html) for more info.

---

### ![Slack logo](http://i.imgur.com/1LNs3Q6.png?1) [Need real-time help? Find us on Slack](https://slackin-trykickoff.herokuapp.com/)

---

## :bug: Bugs and feature requests
Have a bug or a feature request? Please search for existing and closed issues. If your problem or idea is not addressed yet, [please open a new issue](https://github.com/TryKickoff/kickoff/issues/new).

---

## Browser compatibility
Kickoff has been tested in the following browsers:

| [Chrome](https://www.google.com/chrome/) (latest) | [Firefox](https://www.mozilla.org/en-GB/firefox/new/) (latest) | [Safari](https://www.apple.com/safari/) (latest) | [Edge](http://www.microsoft.com/en-us/windows/microsoft-edge) (latest) | [Opera](https://www.opera.com/) (latest) |
|:----------------------------------------------------------------------------------------------------------------------------:|:-------------------------------------------------------------------------------------------------------------------------------:|:----------------------------------------------------------------------------------------------------------------------------:|------------------------------------------------------------------------|:-------------------------------------------------------------------------------------------------------------------------:|
| <img src=""https://raw.githubusercontent.com/alrra/browser-logos/master/src/chrome/chrome_64x64.png"" width=""48"" alt=""Chrome""> | <img src=""https://raw.githubusercontent.com/alrra/browser-logos/master/src/firefox/firefox_64x64.png"" width=""48"" alt=""Firefox""> | <img src=""https://raw.githubusercontent.com/alrra/browser-logos/master/src/safari/safari_64x64.png"" width=""48"" alt=""Safari""> | <img src=""https://raw.githubusercontent.com/alrra/browser-logos/master/src/edge/edge_64x64.png"" alt=""Microsoft Edge""> | <img src=""https://raw.githubusercontent.com/alrra/browser-logos/master/src/opera/opera_64x64.png"" width=""48"" alt=""Opera""> |

We also support older versions of Internet Explorer but the support is limited. For example, the Kickoff grid relies on flexbox so Modernizr is needed to detect for it and then we can provide a fallback.

---

## Maintainers and contributors
| Zander Martineau | Ashley Nolan | Nic Bell |
|:-------------------------------------------------------------------:|:--------------------------------------------------------------------:|:-----------------------------------------------------------------:|
| ![Zander](https://avatars0.githubusercontent.com/u/64883?v=3&s=100) | ![Ashley](https://avatars3.githubusercontent.com/u/805184?v=3&s=100) | ![Nic](https://avatars3.githubusercontent.com/u/151842?v=3&s=100) |
| [Twitter](http://twitter.com/mrmartineau) | [Twitter](http://twitter.com/AshNolan_) | [Twitter](http://twitter.com/nicbell) |
| [Github](https://github.com/mrmartineau/) | [Github](https://github.com/ashleynolan) | [Github](https://github.com/nicbell/) |
| [Site](http://zander.wtf) | [Site](http://ashleynolan.co.uk) | [Site](http://nicbell.net) |

### Community
If you're using Kickoff we'd love to hear about it; please e-mail us at trykickoff@gmail.com

Keep track of development and community news by following [@TryKickoff on Twitter](http://twitter.com/TryKickoff).

### Contributing
Please read our [contribution guidelines](https://github.com/TryKickoff/kickoff/wiki/Contributing-to-Kickoff) before contributing to Kickoff.

### Versioning
For transparency into our release cycle and in striving to maintain backward compatibility, Kickoff is maintained under [the Semantic Versioning guidelines](http://semver.org/). Sometimes we screw up, but we'll adhere to those rules whenever possible.

---

### Sponsored by
![TMW Unlimited...](http://i.imgur.com/KIUIgi8.png?1)

Kickoff was created by Ash and Zander while working at TMW. TMW continue to provide sponsorship for the development of the project as well as trykickoff.com domain renewals, stickers etc.
"
10,kshvmdn/nba.js,JavaScript,"## nba.js

[![npm version](https://badge.fury.io/js/nba.js.svg)](https://badge.fury.io/js/nba.js)
[![Build Status](https://travis-ci.org/kshvmdn/nba.js.svg?branch=master)](https://travis-ci.org/kshvmdn/nba.js)
[![Coverage Status](https://coveralls.io/repos/github/kshvmdn/nba.js/badge.svg?branch=master)](https://coveralls.io/github/kshvmdn/nba.js?branch=master)
[![Dependency Status](https://img.shields.io/david/kshvmdn/nba.js.svg)](https://david-dm.org/kshvmdn/nba.js)
[![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg)](https://github.com/prettier/prettier)

> A Node.js library for current and historical NBA stats, scores, and data.

### Table of contents

* [Installation](#installation)
* [Usage](#usage)
* [Examples](#examples)
* [Contribute](#contribute)
* [License](#license)

Full documentation and usage guide can be found [here](docs).

### Installation

Install via [npm](https://npmjs.com/packages/nba.js).

```sh
$ npm install --save nba.js
```

### Usage

* This library provides access to data from 2 different APIs:

  * [data.nba.net](http://data.nba.net)
  * [stats.nba.com](http://stats.nba.com)

* For the full usage guide, see [USAGE.md](docs/USAGE.md).

* **Method & parameter reference**: [`nba.data`](docs/api/DATA.md),
  [`nba.stats`](docs/api/STATS.md).

### Examples

See [EXAMPLES.md](docs/EXAMPLES.md).

### Contribute

This project is completely open source. Feel free to
[open an issue](https://github.com/kshvmdn/nba.js/issues) or
[make a pull request](https://github.com/kshvmdn/nba.js/pulls).

For more information, see [CONTRIBUTING.md](docs/CONTRIBUTING.md).

### License

[MIT](./LICENSE) © [Kashav Madan](http://kshvmdn.com).
"
11,jaebradley/basketball_reference_web_scraper,HTML,"<p align=""center"">
    <a href=""#"" target=""_blank"" rel=""noopener noreferrer"">
        <img width=""550"" src=""https://imgur.com/dJL05Ud.png"" alt=""logo"">
    </a>
</p>
<p align=""center"">
    <a href=""https://pypi.org/project/basketball-reference-scraper/"">
        <img src=""https://img.shields.io/pypi/v/basketball_reference_web_scraper"" alt=""pypi"" />
    </a>
    <a href=""https://pypi.org/project/basketball-reference-scraper/"">
        <img src=""https://img.shields.io/pypi/pyversions/basketball_reference_web_scraper"" alt=""python version"" />
    </a>
    <a href=""https://pypi.org/project/basketball-reference-scraper/"">
        <img src=""https://img.shields.io/pypi/l/basketball_reference_web_scraper"" alt=""license"" />
    </a>
    <a href=""https://codecov.io/gh/jaebradley/basketball_reference_web_scraper"">
        <img src=""https://codecov.io/gh/jaebradley/basketball_reference_web_scraper/branch/v4/graph/badge.svg"" alt=""code coverage"" />
    </a>
    <a href=""https://github.com/jaebradley/basketball_reference_web_scraper/workflows/Basketball%20Reference%20Web%20Scraper/badge.svg"">
        <img src=""https://github.com/jaebradley/basketball_reference_web_scraper/workflows/Basketball%20Reference%20Web%20Scraper/badge.svg"" alt=""continuous integration"" />
    </a>
</p>

[Basketball Reference](http://www.basketball-reference.com) is a great site (especially for a basketball stats nut like me), and hopefully they don't get too pissed off at me for creating this.

I initially wrote this library as an exercise for creating my first `PyPi` package - hope you find it valuable!  

## Documentation

For documentation about installing the package and API methods see [the documentation page](https://jaebradley.github.io/basketball_reference_web_scraper/).

## Contributors

Thanks to [@DaiJunyan](https://github.com/DaiJunyan), [@ecallahan5](https://github.com/ecallahan5), 
[@Yotamho](https://github.com/Yotamho), [@ntsirakis](https://github.com/ntsirakis), and [@allanbelliti](https://github.com/allanbelliti) for their contributions!

"
12,cwendt94/espn-api,Python,"![](https://github.com/cwendt94/espn-api/workflows/Espn%20API/badge.svg)
![](https://github.com/cwendt94/espn-api/workflows/Espn%20API%20Integration%20Test/badge.svg) [![codecov](https://codecov.io/gh/cwendt94/espn-api/branch/master/graphs/badge.svg)](https://codecov.io/gh/cwendt94/espn-api) [![Join the chat at https://gitter.im/ff-espn-api/community](https://badges.gitter.im/ff-espn-api/community.svg)](https://gitter.im/ff-espn-api/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![PyPI version](https://badge.fury.io/py/espn-api.svg)](https://badge.fury.io/py/espn-api)<a target=""_blank"" href=""https://www.python.org/downloads/"" title=""Python version""><img src=""https://img.shields.io/badge/python-%3E=_3.8-teal.svg""></a>


## ESPN API
This package uses ESPN's Fantasy API to extract data from any public or private league for **Fantasy Football and Basketball (NHL, MLB, and WNBA are in development)**.  
Please feel free to make suggestions, bug reports, and pull request for features or fixes!

This package was inspired and based off of [rbarton65/espnff](https://github.com/rbarton65/espnff).

## Installing
With Git:
```
git clone https://github.com/cwendt94/espn-api
cd espn-api
python3 setup.py install
```
With pip:
```
pip install espn_api
```

## Usage
### [For Getting Started and API details head over to the Wiki!](https://github.com/cwendt94/espn-api/wiki)
```python
# Football API
from espn_api.football import League
# Basketball API
from espn_api.basketball import League
# Hockey API
from espn_api.hockey import League
# Baseball API
from espn_api.baseball import League
# Init
league = League(league_id=222, year=2019)
```

### Run Tests
```
python3 setup.py nosetests
```
## [Discussions](https://github.com/cwendt94/espn-api/discussions) (new)
If you have any questions about the package, ESPN API data, or want to talk about a feature please start a [discussion](https://github.com/cwendt94/espn-api/discussions)! 


## Issue Reporting
If you find a bug follow the steps below for reporting.

1. Open a [new issue](https://github.com/cwendt94/espn-api/issues) with a brief description of the bug for the title. In the title also add which sport (Football or Basketball)

2. Run the application in debug mode to view ESPN API request's and response's
    ```python
    # ... import statement above
    league = League(league_id=1245, year=2019, debug=True)
    ```
    The application will print all requests and the response from ESPN's API in the console. I would suggest piping the console output to a text file as it will be a lot of data.

3. Find the last log before the crash and copy it in the issue descrption with the line number of the crash or possible bug.

4. Submit the new issue!

I will try to comment on the issue as soon as possible with my thoughts and possible fix!
"
13,hegaojian/MvvmHelper,Kotlin,"#### :chicken::chicken::chicken: 这是一个快速开发的框架，使用Kotlin语言开发，MVVM+Jetpack架构，封装了公共头部、界面状态管理、ViewModel、LiveData、DataBinding、ViewBinding、头部刷新、加载更多、沉浸式、全局通知、丰富好用的拓展函数、RxHttp网络请求等等一系列工具


### 更详细的文档介绍 请看 [Wiki](https://github.com/hegaojian/MvvmHelper/wiki)   [Wiki](https://github.com/hegaojian/MvvmHelper/wiki)   [Wiki](https://github.com/hegaojian/MvvmHelper/wiki)

clone慢的可以用 gitee链接 https://gitee.com/hegaojian/MvvmHelper

## 1.如何集成

- **1.1 在root's build.gradle中加入 Jitpack 仓库 **

```gradle
allprojects {
    repositories {
        ...
        maven { url 'https://jitpack.io' }
    }
}
```

- **1.2 在app's build.gradle中添加依赖**

```gradle
apply plugin: 'kotlin-kapt'

...

dependencies {
  ...
  implementation 'com.github.hegaojian:MvvmHelper:1.1.7'
  kapt 'com.github.liujingxing.rxhttp:rxhttp-compiler:2.9.3'
}
```

- **1.3 在app's build.gradle中，android 模块下开启DataBinding或者ViewBinding 可以自行选择**

``` gradle
AndroidStudio 4.0 以下版本------>
android {
    ...
    dataBinding {
        enabled = true //可选 不用可以不写
    }
    viewBinding {
        enabled = true //可选 不用可以不写
    }
}

AndroidStudio 4.0及以上版本 ------>
android {
    ...
   buildFeatures {
        dataBinding = true //可选 不用可以不写
        viewBinding = true //可选 不用可以不写
    }
}
 
```

- **1.4 在Application中初始化**

```kotlin
 MvvmHelper.init(this,BuildConfig.DEBUG)
```


## 混淆

``` kotlin 
-keepclassmembers class * implements androidx.viewbinding.ViewBinding {
  public static * inflate(android.view.LayoutInflater);
  public static * inflate(android.view.LayoutInflater, android.view.ViewGroup, boolean);
  public static * bind(android.view.View);
}
```

"
14,zengm-games/zengm,TypeScript,"# Basketball GM, Football GM, ZenGM Baseball, and ZenGM Hockey

Single-player sports simulation games. Make trades, set rosters, draft players,
and try to build the next dynasty, all from within your web browser. The games
are implemented entirely in client-side JavaScript, backed by IndexedDB.

Copyright (C) ZenGM, LLC. All rights reserved.

Email: jeremy@zengm.com

Website: <https://zengm.com/>

Development: <https://github.com/zengm-games/zengm>

Discussion:

* <https://www.reddit.com/r/BasketballGM/>
* <https://www.reddit.com/r/Football_GM/>
* <https://www.reddit.com/r/ZenGMBaseball/>
* <https://www.reddit.com/r/ZenGMHockey/>
* <https://zengm.com/discord/>

**This project is NOT open source, but it is also not completely closed. Please
see [LICENSE.md](LICENSE.md) for details.**

## Development Info

If you just want to play the game, go to <https://zengm.com/>. Instructions
below are for developers who want to run a copy locally so they can make changes
to the code.

If you want to contribute but get stuck somewhere, please contact me! I'm happy
to help.

### License and Contributor License Agreement

**This project is NOT open source, but it is also not completely closed. Please
see LICENSE.md for details.**

If you want to contribute code to this project, you must sign a contributor
license agreement. There are separate forms for individuals and entities (such
as corporations):

* [Individual CLA](CLA-individual.md) (this is probably what you want)
* [Entity CLA](CLA-entity.md)

Make a copy of the form, fill in your information at the bottom, and send an
email to jeremy@zengm.com with the subject line, ""Contributor License Agreement
from YOUR_NAME_HERE (GITHUB_USERNAME_HERE)"".

### Step 1 - Installing

Make sure you're using a recent version of [Node.js](https://nodejs.org/), older
versions probably won't work. Then, all of the tooling used in development can
be set up by simply installing [Yarn 1](https://classic.yarnpkg.com/) and
running:

    yarn install

from within this folder.

### Step 2 - Building

To build the app along with all its assets, run

    yarn run build

However during development, you probably would rather do

    yarn run start-watch

which will start the server and watch JS and CSS files for changes and
recompile. This simply runs both `yarn run start` and `yarn run watch` together,
which alternatively can be run separately if you wish.

By default this will build the basketball version of the game. For other sports,
set the SPORT environment variable to ""football"", ""baseball"", or ""hockey"", like:

    SPORT=football yarn run start-watch

Open `package.json` to see all available development scripts.

### Step 3 - Running

To run the game locally, you need some way of running a web server to display
the content. There are currently two ways to do it. It doesn't matter which you
use as long as you can get it to run on your computer.

#### 1. Node.js (easiest)

Run

    yarn run start

and point your browser to <http://localhost:3000/>. If you use the command `yarn
run start-watch` from above, then running the command `yarn run start` is not
necessary.

#### 2. Apache

The mod_rewrite rules in `.htaccess` let the game run in Apache. Everything
should work if you point it at the `build` folder with mod_rewrite enabled.

### Step 4 - Testing

TypeScript and ESLint are used to enforce some coding standards. To run them on
the entire codebase, run

    yarn run lint

Integration and unit tests spread out through the codebase in *.test.ts files.
Coverage is not great. They can be run from the command line with

    yarn test

There is also a single end-to-end test which creates a league and simulates a
season. To execute the end-to-end test, run

    yarn run test-e2e

For the end-to-end test, by default it is basketball. If you want it to do
football, stick `SPORT=football ` in front.

### Code Overview

This is a single-page app that runs almost entirely client-side by storing data
in IndexedDB. The core of the game runs inside a Shared Worker (or a Web Worker
in crappy browsers that don't support Shared Workers), and then each open tab
runs only UI code that talks to the worker. The UI code is in the `src/ui`
folder and the core game code is in the `src/worker` folder. They communicate
through the `toUI` and `toWorker` functions.

The UI is built with React and Bootstrap.

In the worker, data is ultimately stored in IndexedDB, but for performance and
cross-browser compatibility reasons, a cache (implemented in
`src/worker/db/Cache.ts`) sits on top of the database containing all commonly
accessed data. The idea is that IndexedDB should only be accessed for uncommon
situations, like viewing stats from past seasons. For simulating games and
viewing current data, only the cache should be necessary.

The cache is overly complicated because (1) the values it returns are mutable,
so you better not mess with them accidentally, and (2) when you do purposely
mutate a value (like updating a player's stats), you need to remember to always
write it back to the cache manually by calling `idb.cache.*.put`.

In both the worker and UI processes, there is a global variable `self.bbgm`
which gives you access to many of the internal functions of the game from
within your browser.

### Shared Worker Debugging

As mentioned above, the core of a game runs in a Shared Worker. This makes
debugging a little tricky. For instance, in Chrome, if you `console.log`
something inside the Shared Worker, you won't see it in the normal JS console.
Instead, you need to go to chrome://inspect/#workers and click ""Inspect"" under
<http://localhost/gen/worker.js>.

In any browser, if you have two tabs open and you reload one of them, the worker
process will not reload. So make sure you close all tabs except one before
reloading if you want to see changes in the worker.

### Service Worker

This only applies if you use Apache, not if you use `yarn run start`!

A service worker is used for offline caching. This can make development tricky,
because if you load the game in your browser, make a change, wait for
build/watch to finish, and then reload... you will not see your change because
it will cache the original version and then not update it on a reload. This is
the normal behavior for service workers (they only switch to a new version when
you actually close the website and reopen it, not on a reload), but it makes
development annoying.

To work around that, in Chrome you can [use the ""Update on reload"" option][1]
and keep your devtools open. Then reloading will always get you the latest
version.

Even with that, ctrl+shift+r may be a good idea to make sure you're seeing your
latest changes.

[1]: https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle#update_on_reload

### Git Workflow

If you want to contribute changes back to the project, first create a fork on
GitHub. Then make your changes in a new branch. Confirm that the tests
(hopefully including new ones you wrote!) and ESLint all pass. Finally, send me
a pull request.

It's also probably a good idea to create an [issue on
GitHub](https://github.com/zengm-games/zengm/issues) before you start working
on something to keep me in the loop.

## Less Important Development Info

### Sport-specific stuff

Abbreviations of stats should be done like basketball-reference.com and
football-reference.com stat pages. For instance, ""defensive rebounds"" is ""drb"".

### Thank you BrowserStack

Shout out to [BrowserStack](https://www.browserstack.com/) for helping with
cross-browser testing.
"
15,jrbadiabo/Bet-on-Sibyl,Jupyter Notebook,"======================![Sibyl Logo](Images/Sibyl_white_logo.png)======================


Sport Game Outcome Prediction Project - Bet on Sibyl 
======================
### Bet on Sibyl in a nutshell

BetonSibyl is a platform controlled by a set of algorithmic models (a model defined for each sport)
that projects accurately estimated results (predictions of upcoming games) from a multitude of statistical variables.
At launch, the platform will cover the four major US sports (Football, Basketball, Baseball, Hockey), Soccer and Tennis.
Moreover, the models provide stats to measure the
performance of the algorithm for the current season (for each sport) along with bankroll comparaison stats with bookmaker 
(scraping from the [oddsportal's website](http://www.oddsportal.com/) to do so). Here's below an image from the mobile app 
propotype based on the platform.

[![Prototype images](Images/Sibyl_mobile_app_screenshots.png)](https://marvelapp.com/31dgaj4/screen/17384930)

## Table of content

- [Data collection](#data-collection)
    - [Decomposition - Data Design Decisions](#data-design-decisions)
    - [Web Scraping - Selenium/Beautiful Soup](#web-scraping)
- [Predictions](#predictions)
    - [Data Preprocessing](#data-preprocessing)
    - [Algorithm Tuning and Running](#algorithm-tuning-and-runing)
- [Results Presentation](#results-presentation)
    - [Bookmakers comparaison over the year](#bookmakers-comparaison-over-the-year)
    - [Model Performance Metrics](#model-performance-metrics)
    - [ML one-sport process in a nutshell](#ml-one-sport-process-in-a-nutshell)
- [License](#license)
- [Links](#links)
- [Notes](#notes)

## Data collection

### Data Design Decisions

1. It is decided that the two participating teams/players in each matchup are respectively represented by visitor team and home team (player A/player B in case of Tennis).
 This is contrary to another popular method of representing the teams as the favorite and underdog.

2. The point differential is chosen to be positive when the home team scores more points than the away team.

3. To represent the difference between the two teams that are playing in the matchup, the ratio or the difference between
 the same attributes are taken between the two teams. That is, the home team’s statistic is divided by the visitor team’s
  statistic. Therefore, when attributes are a positive indicator of performance, a value greater than 1 indicates that
   the home team performs better for that particular attribute. When the attributes are integers (not statistics), then 
   the difference between the home team’s attribute and the away team’s attribute is taken. Examples of this are win 
   streak, compared to statistics such as points per game that would be compared by taking the ratio.


### Web Scraping

The data is scraped from several websites according to each sport using Python and the Selenium and BeautifulSoup (only for MLB data)
 packages for Python. Data sources for each sports are described in the ""Link"" section. 
 According to each sport/league, the script goes through each summary season page and writes season team stats and season game stats 
 (e.g. date, the home team, away team, home team points, away team points etc.) to a csv file.
Game stat data, team stat data, and datetime data are merge later into a feature file (.npz) for the ML algorithm (Lasso Logistic Regression)
Here's below an example team stats data and game stats data for the NFL league.
In the same scripts, After having obtained the raw data set, data is cleaned throughout the script. The script
checked the completeness and validity of all the data files, and eliminated any CSV parsing errors
or erroneous data values.
 
ex of NFL team stat data from the 2000 season to the 2015 season

![Sibyl Logo](Images/nfl_team_stats_from_2000_to_2015.png)

ex of NFL game stat data from the 2000 season to the 2015 season

![Sibyl Logo](Images/nfl_game_stats_from_2000_to_2015.png)

## Predictions

### Data preprocessing

Data preprocessing is made in the Prepare_for_ML.py file. Here is the main idea:
Having validated all our available data, the script then proceeded to load the data from the csv files
into an SQL database using the SQLite single-file database engine and a few Python scripts. The
flexibility of SQL queries allowed one to easily perform complex joins and merges between multiple
tables via the the script.
Instead of using each team’s attribute independently in the analysis, attributes are formed to represent the difference
 between the attribute for the two participating teams in the matchup. For example, in the NBA league the attributes 
 ‘average_blocks_per_game_home’ and ‘average_blocks_per_game_away’ are not used in the analysis, rather, 
 the ratio between the two values is used. 
 
 Thus, the script converts the clean scraped data to data structures that the libraries in scikit-learn can easily use. 
 The ultimate result of the routines included in this file is a numpy array containing all the features and game results
  for the historical game data. The structure 'features.npz' contains this output and is eventually loaded by scikit-learn.
   The features have not been normalized but the next script provide one the ability to easily normalize or standardize the data. 

### Algorithm Tuning and Running

This step is located in the ""RunModelLeague.py""
According to each sport, it uses scikit-learn and historical game results (in the .npz file) to make predictions on the current season games
 that have not been played.
 A logistic regression predictive model with the L1 penalty is created. Analysis of results are output to csv files.

 Here is below an example of the output for the 2017 nba season
 
 ![Sibyl Logo](Images/nba_tableau_output_2017_img.png)
 
 Then, webscraping (through the ScrapeMatchupDatetimeOddsTwoChoicesLeague.py file) is performed  through the betbrain's website so as one can have more information on each league upcoming match.
Thus, the final output give additionnal detail such as odds for both home and away teams, the choice of the bookmaker 
(e.g. the team with the lowest odd if designed to be the bookmaker choice), the choice of the algorithm (Sibyl), if 
there is a divergence or no between Sibyl and the bookmaker ('Y' = yea, 'N' = no).
Here's below an example of the final output for the Ligue 1 soccer league.


 ![Sibyl Logo](Images/final_output_football_ligue1.png)


## Results Presentation
 

### Model Performance Metrics

First of all, webscraping (through the SibylVsBookiesNFL.py file) is performed in order to have sufficient data to make comparison with
bookmakers over the year ([oddsportal's website](http://www.oddsportal.com/)). 
Below you can see an example of output that help one make a clear performance comparison between Sibyl and the bookies 
for the 2016 MLB season.

 ![Sibyl Logo](Images/Sibyl_vs_Bookies_MLB.png)
 
Then, algorithm performance measure is performed through the ModelMetricsLeague.py file
The script provides one for a given league data such as algorithm accuracy (e.g. % of correct predictions) up-to-date, the team of the month to
bet on (team which has performed well when chosen by the algorithm), the worst team of the month, The top teams to bet on 
based on the divergence stategy etc...

### ML one-sport process in a nutshell

For a given league, the entire process described above can be run via the ModelLeague.py file.
Here is an example of the process code for the 


    # coding: utf-8
    
    import numpy as np
    import sys
    
    
    class ModelNHL(object):
        from RunModelNHL import NHLMakePredictions
        from ScrapeMatchupDatetimeOddsTwoChoicesNHL import AcquireMatchupDatetimeOddsTwoChoices
        from SibylVsBookiesNHL import AcquireSibylVsBookiesNHL
        from ModelMetricsNHL import ModelMetricsNHL
    
        def __init__(self, current_season, feature_file, nhl_db_name,
                     betbrain_upcoming_games_url, cs_team_stats_filename, league_name, upcoming_games_output_filename_us,
                     upcoming_games_output_filename_eu, oddsportal_url_fix, oddsportal_url_list_format):
            self.current_season = current_season
            self.feature_file = feature_file
            self.data = np.load(feature_file)
            self.tableau_input_filename = ""nhl_tableau_output_"" + str(current_season) + "".csv""
            self.current_season = current_season
            self.X = self.data['X']
            self.y = self.data['y']
            self.nhl_db_name = nhl_db_name
            self.betbrain_upcoming_games_url = betbrain_upcoming_games_url
            self.cs_team_stats_filename = cs_team_stats_filename
            self.league_name = league_name
            self.upcoming_game_outputs_filename_us = upcoming_games_output_filename_us
            self.upcoming_games_output_filename_eu = upcoming_games_output_filename_eu
            self.oddsportal_url_fix = oddsportal_url_fix
            self.oddsportal_url_list_format = oddsportal_url_list_format
            self.cs_team_stats_filename = cs_team_stats_filename
            self.season_over = 'No'
    
        def __call__(self):
            print ""NHL Machine Learning process execution...""
            x = self.NHLMakePredictions(self.current_season, self.feature_file, self.nhl_db_name)
            x()
            print ""NHL Machine Learning process execution...OK\n""
    
            print ""NHL Scraping odds and datetime from Betbrain.com process execution...""
            w = self.AcquireMatchupDatetimeOddsTwoChoices(
                self.season_over,
                self.betbrain_upcoming_games_url,
                self.cs_team_stats_filename, self.league_name,
                self.tableau_input_filename,
                self.upcoming_game_outputs_filename_us,
                self.upcoming_games_output_filename_eu)
            w()
            print ""NHL Scraping odds and datetime from Betbrain.com process execution...OK\n""
    
            # ----------------------------------------------------------------------------
    
            self.season_over = w.season_over
            print self.league_name + ' season is over? : ' + self.season_over + '=> '
            if self.season_over == 'No':
                print ""Moving on...\n""
            else:
                print ""Season over => Stopping the NHL process\n""
    
            # ----------------------------------------------------------------------------
    
            print ""NHL Sibyl vs Bookies process execution...""
            v = self.AcquireSibylVsBookiesNHL(self.season_over, self.oddsportal_url_fix, self.oddsportal_url_list_format,
                                              self.cs_team_stats_filename, self.tableau_input_filename)
            v()
            print ""NHL Sibyl vs Bookies process execution...OK\n""
    
            print ""NHL ModelMetrics process execution...""
            u = self.ModelMetricsNHL(self.season_over, self.tableau_input_filename, self.upcoming_game_outputs_filename_us,
                                     self.cs_team_stats_filename)
            u()
            print ""NHL ModelMetrics process execution...OK\n""
    
    
    if __name__ == '__main__':
        x = ModelNHL(2017, 'nhl_features_2006_2015.npz', 'nhl_team_data_2017.db',
                     'https://www.betbrain.com/ice-hockey/united-states/nhl/', 'nhl_team_stats_2017_2017.csv', 'NHL',
                     'NHL_Upcoming_Matchups_US_P_df.csv', 'NHL_Upcoming_Matchups_EU_P_df.csv',
                     'http://www.oddsportal.com/hockey/usa/nhl/results/',
                     'http://www.oddsportal.com/hockey/usa/nhl/results/#/page/{}/')
        x()


Nb: the script does not take argument.

## License

The Bet on Sibyl is licensed under the terms of the GPL Open Source
license and is available for free.

## Links
Here are all the website sources for data web scraping:
* [http://www.baseball-reference.com/](http://www.baseball-reference.com/) (Beautiful Soup)
* [http://www.basketball-reference.com/](http://www.basketball-reference.com/) (Selenium/Phantom JS)
* [http://www.pro-football-reference.com/](http://www.pro-football-reference.com/) (Selenium)
* [http://www.hockey-reference.com/](http://www.hockey-reference.com/) (Selenium)
* [http://www.soccerstats.com/](http://www.soccerstats.com/) (Selenium)
* [http://www.coretennis.net/](http://www.coretennis.net/) (Selenium/ Phantom JS)
* [http://www.oddsportal.com](http://www.oddsportal.com) (Selenium)
* [https://www.betbrain.com](https://www.betbrain.com) (Selenium)

Here is the link for the mobile app prototype:
* [https://marvelapp.com/31dgaj4/screen/17384930](https://marvelapp.com/31dgaj4/screen/17384930)

## Notes

All us leagues and soccer leagues models are done. 
Tennis model is ongoing but partially finished. 
Any recommendation, help for the model would be much appreciated.
Enjoy!

Tool used: Ananconda Distribution through Pycharm (Professional version) + Jenkins / Jupyter Notebook / SQLite Browser
"
16,stephanj/basketballVideoAnalysis,Jupyter Notebook,"# Sports Video Analysis

See wiki page for [more details](https://github.com/stephanj/basketballVideoAnalysis/wiki).

## Court Detection

<img width=""548"" alt=""Courts"" src=""https://user-images.githubusercontent.com/179457/71198821-f0e0f400-2294-11ea-8253-3d6ff20fcbf9.png"">

See details on court detection [here](https://github.com/stephanj/basketballVideoAnalysis/tree/master/court-detection).

## Mask R-CNN of persons (mask-rcnn)

See details [here](https://github.com/stephanj/basketballVideoAnalysis/tree/master/mask-rcnn) including online tutorial.

[<img width=""2025"" alt=""defence"" src=""https://user-images.githubusercontent.com/179457/70865878-af81d900-1f62-11ea-85d1-44db19a0f7f3.jpg"">](https://www.youtube.com/watch?v=yEqGTSd5DQU)

Video output example

https://www.youtube.com/watch?v=yEqGTSd5DQU

## Color detection of players (color-detection)

The run script will produce a CSV with the RGB values and percentage of each color.

ToDo:  Classify each color result into two groups, identify hopefully each team by color.

![Colors](https://user-images.githubusercontent.com/179457/71019085-040b8c80-20fa-11ea-8e44-d22759d9352a.jpg)

## Players tracking

See article on [players tracking solutions](https://github.com/stephanj/basketballVideoAnalysis/wiki/Tracking-Players)

See also [YouTube](https://www.youtube.com/watch?v=6b__GMsoW4k) video with different solutions.

## Action Classification

![PoseDetection](https://user-images.githubusercontent.com/179457/71200350-23d8b700-2298-11ea-85eb-37b2c8d07b76.png)

Required so we can classify the game play action of players.

## Homography mapping of court

Maps the 3D court onto a 2D version, required for analysis of movement.

![MiniMap](https://user-images.githubusercontent.com/179457/71530819-2c5e6c80-28ec-11ea-91fe-4dc9d2d19793.jpg)

See also [YouTube video](https://www.youtube.com/watch?v=tpavRDeDlTI)

See details [here](https://github.com/stephanj/basketballVideoAnalysis/tree/master/homography-mapping)
and [article](https://www.linkedin.com/pulse/journey-towards-creating-basketball-mini-map-stephan-janssen/) with [tutorial](https://github.com/stephanj/basketballVideoAnalysis/tree/master/mini-map-tutorial).

"
17,KengoA/fantasy-basketball,Jupyter Notebook,"
Note (March 2022) This repository is under major refactoring.

## NBA Player Performance Prediction and Lineup Optimization

Prediction of NBA player performance defined as Fantasy Points by Draft Kings. This capstone project was conducted and approved by a reviewer as part of Machine Learning Engineer Nanodegree by Udacity. See the final report [here](https://github.com/KengoA/fantasy-basketball/blob/master/report.pdf) for details.

Note that the code was updated since the writing of the report and the content does not necessarily match up. This project is under minor refactoring and documentation as of Jun 2019, feel free to reach out to me via email at kengo@hey.com.

### What We'll Do

The end goal of this project is to generate a series of lineups for a fantasy basketball website [DraftKings](https://www.draftkings.com/). To achieve that, we'll scrape player statististics from each regular season game starting in the 2014-15 season as well as past fantasy salary information. First, we'll build a predictive model for player performance, and then we will use genetic algorithm to construct fantasy lineups to maximize the total fantasy points while satisfying the salary constraint.

### What We Won't Do

Given the complexity of the series structure and difference in nature, we won't be considering playoff games. In addition, a major factor omitted from our analysis is the opponent's defensive ability as a team or at a given position (for instance, Paul George is excellent at stealing the ball), which arguably is one of the most important factors of the game. Tackling this aspect will be an easy improvement to this project.

### Requirements

Along with libraries specified in [requirements.txt](requirements.txt), you need to sign up with Plotly for free to create interactive visualizations.

### Understanding Fantasy Sports

The key to select a good fantasy lineup is to identify players that are consistent performers. This basic intuition comes from Harry Morkowitz's [Modern Portfolio Theory (MPT)](https://www.investopedia.com/terms/m/modernportfoliotheory.asp), and the following scatter plot looks at the relationship between risk and return, where return is the average fantasy points over a given range of games (in this case, past 10 games) and risk is its standard deviation. For a given level of risk (x-axis), a player with a better return is considered to be superior. The plot is based on the late 2018-19 season statistics, where, for instance, Lebron James is shown in the top-left with a 10-game average of a whopping 58.1 fantasy points and a 7.4 standard deviation. The top curve starting from Harden (top right), Lebron, Paul George, Gorbert, Sexton, and Zubac can be considered as [Efficient Frontier](https://www.investopedia.com/terms/e/efficientfrontier.asp) in the framework of the MPT. In general, players on the outer left of the cluster are considered as good assets with low risk and high return. Players are color-coded based on rough positions of PG, SG, F (SF, PF, SF/PF), and C (PF/C, C). A fully interactive version can be accessed [here](https://plot.ly/~KengoA/12/_10-game-risk-return-relationship/#/).

![10-game risk-return](assets/risk_return.gif)

Another important dimension of the game of fantasy basketball is player salary. Fantasy sports websites like DraftKings determine player salary values given their previous performance and roster information in a semi-automatic fashion, such that it is more costly to include ""stud"" players with high expected return (LeBron, Westbrook, Harden) into your lineup. DraftKings has a salary cap of $50,000 for a selection of 8 players, giving each player an average salary of $6250. The graph below shows a scatterplot of a player's salary and his actual performance of the day in the latest games of the 2018-19 season. One striking insight is that while it is easy to identify studs like Westbrook who had a total fantasy poitns of 61.5 for his 11.8k salary April 10, ""value"" players who exceed expectations are much more difficult to find, with a large variance given a salary level. For instance, Jamal Crawford on the top left had monstrous performance for a combined fantasy points of 70.25, despite the low expectation of his \$4300 salary. These ""value"" players are what differentiates winning lineups from those of a typical beginner with a collection of star players and underachieving benchwarmers. This requires deeper insight into who will outperform their expectations. For instance, an injury of a starting player most likely increases minutes for other starting members and the second option player on the bench. A fully interactive version can be accessed [here](https://plot.ly/~KengoA/14/salary-return-relationship/#/).

![salary-return](assets/salary_return.gif)

### Project Structure

This project consists of 9 Jupyter notebooks and functionalities are described below, where the second half consists of construcing machine leanring models and making inference, and optimising lineups for DraftKings.

- [01.data_scraping.ipynb](src/01.data_scraping.ipynb) scrapes games data from Basketball-Reference.com and salary and position information from RotoGuru.

- [02.merging_data.ipynb](src/02.preprocessing.ipynb) merges the two datasets with name standardisation and preliminary preprocessing of data such as calculation of FPTS based on the key statistics.

- [03.exploratory_analysis.ipynb](src/03.exploratory_analysis.ipynb) visually explores relationships between; salary and actual FPTS and; expected FPTS and standard deviation of the past 10 games.

- [04.feature_engineering.ipynb](src/04.feature_engineering.ipynb) constructs the baseline model with simple average along with additional three datasets with weighted average, where several features are engineered and incorporated.

- [05.baseline_models.ipynb](src/05.baseline_models.ipynb) sets up the baseline model with simple season average adopted by DraftKings and linear regression with feature selection models. For notebooks 06-08, we use 5-fold cross validation to approximate model errors.

- [06.lightgbm_bayesian_optimization.ipynb](src/06.lightgbm_bayesian_optimization.ipynb) uses bayesian optimisation method to find the best parameters for a boosting model using lightGBM. Parameters and their results are saved in a text file.

- [07.neural_networks.ipynb](src/07.neural_networks.ipynb) constructs three neural network models using keras, and saves model weights only when there was an improvement. While deep learning models might not suit this dataset of limited size, it shows improvement compared to boosting models.

  ![learning](assets/learning.png)

- [08.predictions.ipynb](src/08.predictions.ipynb) trains on the whole dataset except for the month of March 2019, where each contest's cashline for double up was manually obtained from RotoGrinders. Inference is made on this test data from March 2019.

- [09.lightgbm_bayesian_optimization.ipynb](src/06.lightgbm_bayesian_optimization.ipynb) uses Genetic Algorithms to select best combinations of players on a given set of games ans predictions. Performance of the lineups chosen by the algorithm against other DraftKings users is examined for contests held in March, 2019. Note that the contest data is manually obtained from Rotogrindrs' ResultsDB page without scraping. Predictions from the baseline model and final model are compared to the actual performance. The following figure shows the optimal lineup this model returns, with differences between the actual FPTS and predicted FPTS with neural network and baseline models.

  ![lineup](assets/lineup.png)

Main procedures are coded and explained in markdown using Jupyter Notebook. Although not requred, jupyter nbextentions are highly recommended for convenience and visibility (see link). Useful extensions are Codefolding, ExecuteTime, Collapsible Headings, and Variable Inspector. http://jupyter-contrib-nbextensions.readthedocs.io/en/latest/install.html
"
18,vishaalagartha/basketball_reference_scraper,Python,"# basketball_reference_scraper

[Basketball Reference](https://www.basketball-reference.com/) is a great resource to aggregate statistics on NBA teams, seasons, players, and games. This package provides methods to acquire data for all these categories in pre-parsed and simplified formats.

## Installing
### Via `pip`
I wrote this library as an exercise for creating my first PyPi package. Hopefully, you find it easy to use.
Install using the following command:

```
pip install basketball-reference-scraper
```

### Via GitHub
Alternatively, you can just clone this repo and import the libraries at your own discretion.

## Wait, don't scrapers like this already exist?

Yes, scrapers and APIs do exist. The primary API used currently is for [stats.nba.com](https://stats.nba.com/), but the website blocks too many requests, hindering those who want to acquire a lot of data. Additionally, scrapers for [Basketball Reference](https://www.basketball-reference.com/) do exist, but none of them load dynamically rendered content. These scrapers can only acquire statically loaded content, preventing those who want statistics in certain formats (for example, Player Advanced Stats Per Game).

### API
Currently, the package contains 5 modules: `teams`, `players`, `seasons`, `box_scores`, `pbp`, `shot_charts`, and `injury_report`. 
The package will be expanding to include other content as well, but this is a start.

For full details on the API please refer to the [documentation](https://github.com/vishaalagartha/basketball_reference_scraper/blob/master/API.md).
"
19,neilmj/BasketballData,Groff,
20,xwjdsh/nba-live,Go,"```text
          __                ___          
   ____  / /_  ____ _      / (_)   _____ 
  / __ \/ __ \/ __ `/_____/ / / | / / _ \
 / / / / /_/ / /_/ /_____/ / /| |/ /  __/
/_/ /_/_.___/\__,_/     /_/_/ |___/\___/ 

```
[![Release](http://github-release-version.herokuapp.com/github/xwjdsh/nba-live/release.svg?style=flat)](https://github.com/xwjdsh/nba-live/releases/latest)
[![Build Status](https://travis-ci.org/xwjdsh/nba-live.svg?branch=master)](https://travis-ci.org/xwjdsh/nba-live)
[![Go Report Card](https://goreportcard.com/badge/github.com/xwjdsh/nba-live)](https://goreportcard.com/report/github.com/xwjdsh/nba-live)
[![](https://images.microbadger.com/badges/image/wendellsun/nba-live.svg)](https://microbadger.com/images/wendellsun/nba-live)
[![DUB](https://img.shields.io/dub/l/vibe-d.svg)](https://github.com/xwjdsh/manssh/blob/master/LICENSE)

`nba-live`是一个在终端下观看`NBA&CBA`文字直播的命令行工具.

所有数据来自[手机版直播吧](https://m.zhibo8.cc/).

## 截图
![](https://raw.githubusercontent.com/xwjdsh/nba-live/master/screenshot/nba-live-select.png)
![](https://raw.githubusercontent.com/xwjdsh/nba-live/master/screenshot/nba-live-cui.png)

## 安装运行
#### Go
```shell
go get -u github.com/xwjdsh/nba-live
nba-live
```
#### Homebrew
```shell
brew tap xwjdsh/tap
brew install xwjdsh/tap/nba-live
nba-live
```
#### Docker
```shell
docker pull wendellsun/nba-live
docker run -it --rm wendellsun/nba-live
```
#### Manual
从[releases](https://github.com/xwjdsh/nba-live/releases)下载可执行文件并将其放到`PATH`环境变量对应的路径中，然后在终端输入`nba-live`运行。

## 致谢
* [manifoldco/promptui](https://github.com/manifoldco/promptui)
* [marcusolsson/tui-go](https://github.com/marcusolsson/tui-go)
* [基于Python命令行的NBA文字直播小工具](http://www.jianshu.com/p/b4077b8810bd)

## 协议
[MIT License](https://github.com/xwjdsh/nba-live/blob/master/LICENSE)
"
21,neeilan/DeepPlayByPlay,Python,"# Deep Play-by-Play

This repo contains model and data collection / preprocessing code to label NBA broadcast footage with play-by-play descriptions, using 3D ConvNet-based video classification.

To learn how to scrape labelled videos off NBA.com for similar projects, see [data_utils/README](data_utils/README.md).


### Classification performance
After training on about 3000 training examples (~6000 with augmentation), on a test set with 253 test examples (both sets somewhat evenly divided among 6 classes), the following accuracies were achieved:

| # classes        | Classes           | Accuracy  |
| ------------- |:-------------| :-----|
| 6      | (Inside/Midrange/Three) (Make/Miss) | 66% |
| 4      | (Two/Three) (Make/Miss)      | 74% |
| 2 | (Make/Miss)      | 91% |


### Running the code

You should be able to clone this repo, set up paths appropriately in `config.py`, and run training or inference. All dependencies for this project ship with either the Python 3 standard library or the everyday machine/deep learning toolkit (TensorFlow, keras, scikit-learn). To read videos from disk, I use [scikit-video](http://www.scikit-video.org/stable/io.html) io module, which you may need to install. Training data isn't hosted in this repo because it is quite large even after downsampling, and I don't have the [express written consent](https://www.youtube.com/watch?v=kyj-7bDr7fs) of the NBA.
However, the pre-trained weights file is available in the `weights` directory.


### Examples:

The ultimate goal is continuous video classification, on running broadcast footage. However, I didn't have access to labelled data for non-field goal events (like rebounds, free throws, players running down the court, Javale doing dumb shit, etc). As a result, these examples use 90-frame (at 8 fps, so about 11 seconds long) videos of field-goal make/miss events - the only kind the model can currently identify.

Since all data used for training and testing was from the 2017-18 season, I picked out several plays from [this video](https://www.youtube.com/watch?v=jjX71R69jlA) of the last 5 minutes of Spurs/Rockets Game 5 in the 2017 playoffs to see how accurately plays from a completely different season are classified:

<img src=""assets/PLAY_1.gif"" width=""45%""> <img src=""assets/PROBS_1.png"" width=""50%"">
<img src=""assets/PLAY_2.gif"" width=""45%""> <img src=""assets/PROBS_2.png"" width=""50%"">
<img src=""assets/PLAY_4.gif"" width=""45%""> <img src=""assets/PROBS_4.png"" width=""50%"">
<img src=""assets/PLAY_5.gif"" width=""45%""> <img src=""assets/PROBS_5.png"" width=""50%"">

### Incorrect classification examples:
...because, like most things in life, this isn't perfect:

This Danny Green and-one is best classified as an `INSIDE_MAKE`, but `MIDRANGE_MAKE` is not a terribly bad guess:

<img src=""assets/PLAY_7.gif"" width=""45%""> <img src=""assets/PROBS_7.png"" width=""50%"">


The following play is an offensive foul followed by a `MIDRANGE_MISS`, but is classified as more likely to be an `INSIDE_MAKE` (51%) than a `MIDRANGE_MISS` (27%):

<img src=""assets/PLAY_6.gif"" width=""45%""> <img src=""assets/PROBS_6.png"" width=""50%"">


Sometimes, the classifier flat-out fails confidently :disappointed: :

<img src=""assets/PLAY_3.gif"" width=""45%""> <img src=""assets/PROBS_3.png"" width=""50%"">
<img src=""assets/PLAY_FAIL.gif"" width=""45%""> <img src=""assets/PROBS_FAIL.png"" width=""50%"">

Note that some of these plays are quite difficult to judge properly at this resolution and frame rate, without sound. Now imagine that these videos are also black and white, and that is the kind of data that this model has been trained on. Therefore, it's unsurprising that it isn't very good, but working with higher quality videos requires significantly more computational resources :moneybag:.


### FAQ
I'll fill this out if and when people ask questions.

[Reddit discussion](https://www.reddit.com/r/nba/comments/9oyzhr/oc_a_side_project_ive_been_working_on_using_deep/)
"
22,lbenz730/ncaahoopR,R,"# ncaahoopR <img src=""figures/logo.png"" align=""right"" />

`ncaahoopR` is an R package for working with NCAA Basketball Play-by-Play Data. It scrapes play-by-play data and returns it to the user in a tidy format, allowing the user to explore the data with assist networks, shot charts, and in-game win-probability charts.

For pre-scraped schedules, rosters, box scores, and play-by-play data, check out the [ncaahoopR_data repository](https://github.com/lbenz730/ncaahoopR_data).

To see the lastest changes in version 1.5, view the change log [here](https://lukebenz.com/post/ncaahoopr_v1.5/).

## Installation
You can install `ncaahoopR` from GitHub with:

``` r
# install.packages(""devtools"")
devtools::install_github(""lbenz730/ncaahoopR"")
```

If you encounter installation issues, the following tips have helped a few users successfully install the package:

* If given the option to compile any packages from source rather than installing existing binaries, choose `'No'`.
* Windows users with trouble installing the package should try running the following command before reinstalling the package: `Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS = ""true"")`
* Windows users with trouble installing `devtools` should try first installing the `backports` package via `install.packages(""backports"")`.


## Functions
Several functions use ESPN game_ids. You can find the game_id in the URL for the game summary, 
as shown in the URL for the summary of the UMBC-Virginia game below.
![game_id](figures/espn.png)

### Scraping Data
* ```get_pbp(team, season)```: Get entire current season's worth of play-by-play data for a given team and season. `season` defaults to current season, but can be specified in ""2019-20"" form. 
* ```get_pbp_game(game_ids, extra_parse)```:  Get play-by-play data for a specific vector of ESPN game_ids. `extra_parse` is a logical whether to link shot variables and attempt possesion parsing. Default =   `TRUE`.
* ```get_roster(team, season)```: Get a particular team's roster. `season` defaults to current season, but can be specified in ""2019-20"" form. 
* ```get_schedule(team, season)```: Get a team's schedule. `season` defaults to current season, but can be specified in ""2019-20"" form. 
* ```get_game_ids(team, season)```: Get a vector of ESPN game_ids for all games involving ```team``` specified. `season` defaults to current season, but can be specified in ""2019-20"" form.
* ```get_master_schedule(date)```: Get schedule of all games for given date. Use `YYYY-MM-DD` date formatting.
* `get_boxscore(game_id)`: Returns list of 2 data frames, one with each teams' box score for the game in question. Written by [Jared Andrews](https://github.com/j-andrews7).

* `season_boxscore(team, season = current_season, aggregate = 'average')`: Returns (aggregated) player stats over the course of a season for a given team.
        * `team`: team to return player stats for.
        * `season`: of form YYYY-YY. Defaults to current season.
        * `aggregate`: one of 'average' (per-game average statistics), 'total' (sums of season stats) or 'raw' (just return all box scores binded together). 'average' is the default. Contributed in collaboration with [Kurt Wirth](https://github.com/kurtawirth)

The `team` parameter in the above functions must be a valid team name from the `ids` dataset built into the package. See the __Datasets__ section below for more details.

### Win-Probability and Game-Flow Charts

__Win Probability Charts__

The latest function for plotting win probability charts is `wp_chart_new`. Following the 2021-22 season other win probability chart functions will be deprecated and replaced by this function (it will be renamed to `wp_chart` but I don't want to break any existing pipelines during the season). It no longer requires users to input colors. For best results consider saving via ggsave(filename, height = 9/1.2, width = 16/1.2) (or some other 16/9 aspect ratio.) 

```wp_chart_new(game_id, home_col = NULL, away_col = NULL, include_spread = T, show_legend = T)```

* ```game_id``` ESPN game_id for the desired contest.
* ```home_col``` Chart color for home team (if NULL will default to `ncaa_colors` primary_color field).
* ```away_col```: Chart color for away team (if NULL will default to `ncaa_colors` primary_color field).
* `include_spread`: Logical, whether to include pre-game spread in Win Probability calculations. Default = `TRUE`.
* ```show_legend```: Logical, whether or not to show legend/text on chart. Default = `TRUE`.


A prior version of `wp_chart` used base R while `gg_wp_chart` used the `ggplot2` plotting library. As of the 2020-21 season, both functions call the same `ggplot2` library, and `gg_wp_chart` now simply aliases `wp_chart`

```wp_chart(game_id, home_col, away_col, include_spread = T, show_legend = T)```

* ```game_id``` ESPN game_id for the desired contest.
* ```home_col``` Chart color for home team.
* ```away_col```: Chart color for away team.
* `include_spread`: Logical, whether to include pre-game spread in Win Probability calculations. Default = `TRUE`.
* ```show_legend```: Logical, whether or not to show legend/text on chart. Default = `TRUE`.


```gg_wp_chart(game_id, home_col, away_col, show_labels = T)```

* ```game_id``` ESPN game_id for the desired contest.
* ```home_col``` Chart color for home team.
* ```away_col```: Chart color for away team.
* `include_spread`: Logical, whether to include pre-game spread in Win Probability calculations. Default = `TRUE`.
* `show_labels`: Logical whether Game Excitement Index and Minimum Win Probability metrics should be displayed on the plot. Default = `TRUE`.

__Game Flow Charts__

```game_flow(game_id, home_col, away_col)```

* ```game_id``` ESPN game_id for the desired contest.
* ```home_col``` Chart color for home team.
* ```away_col``` Chart color for away team.

__Game Excitement Index__

```game_exciment_index(game_id, include_spread = T)```

* `include_spread`: Logical, whether to include pre-game spread in Win Probability calculations. Default = `TRUE`.

Returns ```GEI``` (Game Excitement Index) for given ESPN game_id. For more information about how these win-probability charts are fit and how Game Excitement Index is calculated, check out the below links



* [Model Methodology](https://lukebenz.com/post/ncaahoopr_win_prob/)
* [Game Excitement Index](https://lukebenz.com/post/gei/)

__Game Control Measures__

```average_win_prob(game_id, include_spread = T)```

* ESPN game_id for which to compute time-based average win probability (from perspective of home team).
* `include_spread`: Logical, whether to include pre-game spread in Win Probability calculations. Default = `TRUE`.

```average_score_diff(game_id)```

* ESPN game_id for which to compute time-based average score differential (from perspective of home team).



### Assist Networks

__Traditional Assist Networks__

```assist_net(team, season, node_col, three_weights = T, threshold = T, message = NA, return_stats = T)```

* ```team``` is the ESPN team name, as listed in the `ids` data frame.
* ```season``` Options include ""2018-19"" (for entire season), or a vector of ESPN game IDs. 
* ```node_col``` is the node color for the graph.
* ```three_weights``` (default = ```TRUE```): Logical. If TRUE, assisted three-point shots are given a weight of 1.5. If FALSE, assisted three-point shots are given a weight of 1. In both cases, assisted two-point shots are given a weight of 1. 
* `threshold` (default = 0) Number between 0-1 indicating minimum percentage of team's assisted baskets a player needs to be involved in to be included in network graph.
* ```message``` (default = ```NA```) Option for custom message to replace graph title when using a subset of the season (e.g. conference play).
* `return_stats` (default = `TRUE`) Return Assist Network-related statistics

__Circle Assist Networks and Player Highlighting__

```circle_assist_net(team, season, highlight_player = NA, highlight_color = NA, three_weights = T, threshold = 0, message = NA, return_stats = T)```

* ```team``` is the ESPN team name, as listed in the `ids` data frame.
* ```season```: Options include ""YYYY-YY"" (for entire season), or a vector of ESPN game IDs. 
* ```highlight_player``` (default = `NA`) Name of player to highlight in assist network. `NA` yields full-team assist network with no player highlighting.
* ```highlight_color``` (default = `NA`) Color of player links to be highlighted. `NA` if ```highlight_player``` is `NA`.
* ```three_weights``` (default = ```TRUE```): Logical. If TRUE, assisted three-point shots are given a weight of 1.5. If FALSE, assisted three-point shots are given a weight of 1. In both cases, assisted two-point shots are given a weight of 1.  
* `threshold` (default = 0) Number between 0-1 indicating minimum percentage of team's assisted baskets a player needs to be involved in to be included in network graph.
* `message` (default = `NA`) User-supplied plot title to overwrite default plot title, if desired.
* `return_stats` (default = `TRUE`) Return Assist Network-related statistics

### Shot Charts
There are currently three functions for scraping and plotting shot location data. These functions are written by [Meyappan Subbaiah](https://github.com/meysubb).

`get_shot_locs(game_id)`: Returns data frame with shot location data when available. Note that if the `extra_parse` flag in `get_pbp_game` is set to `TRUE`, shot location data will already be included in the play-by-play data (if available).

* `game_id`: ESPN game_id from which shot locations should be scraped.

`game_shot_chart(game_id, heatmap = F)`: Plots shots for a given game.

* `game_id`: ESPN game_id from which shot locations should be scraped.
* `heatmap` (default = `FALSE`): Logical, whether to use density-heat map or plot individual points.
* shot-plotting colors derived from team's primary color listed in `ncaa_colors` data frame.

`team_shot_chart(game_ids, team, heatmap = F)`: Plots shots taken by team during a given set of game(s).

* `game_ids`: Vector of ESPN game_ids from which shot locations should be scraped.
* `team`: Which team to chart shots for.
* `heatmap` (default = `FALSE`): Logical, whether to use density-heat map or plot individual points.
* shot-plotting colors derived from team's primary color listed in `ncaa_colors` data frame.

`opp_shot_chart(game_ids, team, heatmap = F)`: Plots shots against a team during a given set of game(s).

* `game_ids`: Vector of ESPN game_ids from which shot locations should be scraped.
* `team`: Which team to chart opponents' shots for.
* `heatmap` (default = `FALSE`): Logical, whether to use density-heat map or plot individual points.


## Datasets

```dict``` A data frame for converting between team names from various sites.
 
 * ```NCAA```: the name of the team, as listed on the NCAA website
 * ```ESPN```: the name of the team, as listed in ESPN URLs
 * ```ESPN_PBP```: the name of the team, as listed in the ESPN Play-By-Play logs
 * ```Warren_Nolan```: the name of the team, as listed on WarrenNolan.com
 * ```Trank```: the name of the team, as listed on barttorvik.com
 * ```name_247```: the name of the team, as listed on 247Sports.com

```ids``` A data frame for converting between team names from various sites.
 
 * ```team```: the name of the team to be supplied to functions in ncaahoopR package
 * ```id```: team id; used in ESPN URLs
 * ```link```: link; used in ESPN URLs
 
 
 ```ncaa_colors``` A data frame of team color hex codes, pulled from [teamcolorcodes.com](https://teamcolorcodes.com/). Additional data coverage provided by [Luke Morris](https://lukesmorris.com).
 

* `ncaa_name`: The name of the team, as listed on the NCAA website (same as `dict$NCAA`)
* `espn_name`: The name of the team, as listed in ESPN URLs (same as dict$ESPN)}
* `primary_color`: Hexcode for team's primary color.
* `secondary_color`: Hexcode for team's secondary color, when available.
* `tertiary_color`: Hexcode for team's tertiary color, when available.
* `color_4`: Hexcode for team's 4th color, when available.
* `color_5`: Hexcode for team's 5th color, when available.
* `color_6`: Hexcode for team's 6th color, when available.

![Available Colors](figures/colors.png)
_Primary and secondary colors for all 353 teams._


These datasets can be loaded by typing ```data(""ids"")```, `data(""ncaa_colors"")`, or ```data(""dict"")```, respectively.

## Examples
#### Win Probability Charts

![wp3](figures/wp_chart_new.png)
`wp_chart_new(401403405)`

![wp](figures/wp_chart.png)
```wp_chart(game_id = 401082978, home_col = ""gray"", away_col = ""orange"")```

![wp2](figures/wp_chart_2.png)
```wp_chart(game_id = 401168364, home_col = ""#7BAFD4"", away_col = ""#001A57"")```

#### Game Flow Chart
![game_flow](figures/game_flow.png)
```game_flow(game_id = 401082669, home_col = ""blue"", away_col = ""navy"")```

#### Single-Game Assist Network
![Assist Single](figures/oklahoma.png)
```assist_net(team = ""Oklahoma"", node_col = ""firebrick4"", season = 400989185)```

#### Season-Long Assist Network
![Assist All](figures/yale.png)
```assist_net(team = ""Yale"", node_col = ""royalblue4"", season = ""2017-18"")```


#### Circle Assist Networks
![UNC](figures/unc.png)
```circle_assist_net(team = ""UNC"", season = 401082861)```

#### Player Highlighting
![Frankie Ferrari](figures/ferrari.png)
```circle_assist_net(team = ""San Francisco"", season = ""2018-19"", highlight_player = ""Frankie Ferrari"", highlight_color = ""#FDBB30"")```

#### Shot Charts
![heatmap](figures/heat_map.png)
```game_shot_chart(game_id = 401168364, heatmap = T)```

![shotchart](figures/shot_chart.png)
`game_shot_chart(game_id = 401168364)`

## Glossary
Play-by-Play files contain the following variables:

* ```game_id```: ESPN game_id for the game in question.
* ```date```: Date of game.
* ```home```: Name of the home team.
* ```away```: Name of the away team.
* ```play_id```: Unique identifier of play/event in sequence of game events.
* ```half```: Period of action in the game. 1 and 2 denote the first and second halves of play, while 3 denotes OT1, 4 denotes OT2 etc.
* ```time_remaining_half```: Time remaining in the period as it would appear on a scoreboard.
* ```secs_remaining```: Time remaining in regulation, in seconds.
* ```secs_remaining_absolute```: The time remaining until the game is over, in seconds. For example a game that goes to overtime would begin with 2700 seconds remaining (2400 for regulation and 300 for overtime), and regulation would end with 300 seconds remaining.
* ```description```: A description of the play/game event.
* ```home_score```: Home team's score.
* ```away_score```: Away team's score.
* ```score_diff```: Score differential from the home team's perspective (```home_score``` - ```away_score```)
* ```play_length```: Duration of the the given play, in seconds.
* ```win_prob```: Win probability for the home team.
* ```naive_win_prob```: Win probability for the home team not factoring in pre-game point spread. Useful for computation of win probability added (WPA).
* ```home_timeout_remaining```: Number of timeouts remaining for the home team.
* ```away_timeout_remaining```: Number of timeouts remaining for the away team.
* ```home_favored_by```: Number of points by which the home team is favored, prior to tip-off. If Vegas point spread is available on ESPN, that is used as the default. When not available, an attempt is made to impute the pre-game point spread from derived team strengths. Imputed point spreads are not available for games prior to the 2016-17 season or when one of the teams is not in Division 1.
* ```total_line```: Total Vegas over/under for the game, where available.
* ```referees``` Referees for the game.
* `arena_location`: City in which the game was played.
* `arena`: Name of arena where game was played.
* `capacity`: Capacity of arena where game was played.
* `attendance`: Attendance of game, where available.
* `wrong_time`: An attempt to label play-by-play events tagged at the wrong time. These are filtered out of all graphical and statistical helper functions, but may still be useful for certain analyses where time of event is of less importance.

If `extra_parse = TRUE` in `get_pbp_game`, the following variables are also included.

* `shot_x`: The half-court x coordinate of shot. 
* `shot_y`: The half-court y coordinate of shot. (0,0) represents the bottom left corner and (50, 47) represents the top right corner (from persepective of standing under hoop).
* `shot_team`: Name of team taking shot.
* `shot_outcome`: Whether the shot was `made` or `missed`.
* `shooter`: Name of player taking shot.
* `assist`: Name of player asssisting shot (assisted shots only)
* `three_pt`: Logical, if shot is 3-point field goal attempt.
* `free_throw`: Logical, if shot is free throw attempt.

---
Stand-alone shot location data frames contain the following variables.

* `team_name`: Name of shooting team.
* `shot_text`: Description of shot.
* `color`: Color hexcode used to render shot chart graphic on ESPN.
* `date`: Date of game
* `outcome`: Whether the shot was made or missed
* `shooter`: Player attempting the shot
* `assister`: Playing assisting the shot
* `three_pt`: Logical, whether the shot is a 3-point attempt
* `x`: x-coordinate of shot location
* `y`: y-coordinate of shot location

The court is 50 feet by 94 feet, with (0,0) always being placed in the bottom left corner of the shot chart. Any full-court shot chart rendered using `game_shot_chart()` preserves ESPN shot locations as they are found online, while halfcourt charts using `team_shot_chart()` convert all shot locations to to a 50 feet by 47 feet halfcourt. The perspective on the halfcourt shot charts is as if one is standing under the hoop, looking toward the opposition hoop. (0,0) again represents the bottom left corner and (50, 47) represents the top right corner. 
"
23,RobRomijnders/RNN_basketball,Python,"# LSTM with MDN for basketball trajectories

This is the code repository for our paper, [Applying Deep Learning to Basketball Trajectories](http://www.large-scale-sports-analytics.org/Large-Scale-Sports-Analytics/Submissions_files/paperID07.pdf). We also have written a short interactive [summary of the paper](http://tinyurl.com/traj-rnn) or find the full paper on [arXiv](https://arxiv.org/abs/1608.03793).  

This repo contains the data and tensorflow models we used in the paper. To run this code, it is necessary to have installed:  
- Tensorflow > 0.8
- Numpy
- Sklearn

## To create a model
* Unpack the seq_all.csv.tar.gz
* Run __main.py__ (This python script was designed to be run within an IDE, but will function as a standalone script.)
    * Within main.py there are a number of configuration settings that can be modified. These include settings for the model architecture, sequence length, distance to the basket, and performance measures. There is also an option to turn plotting on and see output at different model stages.

## The files
* main.py is the main file
* dataloader.py contains a class to load the data
    * util_*.py are two files with utility functions



"
24,andrewgiessel/basketballcrawler,Jupyter Notebook,"basketballcrawler
==================

[![Join the chat at https://gitter.im/andrewgiessel/basketballcrawler](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/andrewgiessel/basketballcrawler?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)

This is a python module to scrape [basketball-reference.com](http://www.basketball-reference.com/) and convert various
stats into usable data structures for analysis.

[Here](example_notebook.ipynb) is a link to a
sample IPython Notebook file demonstrating the library.


Requirements
------------

- [Beautiful Soup](http://www.crummy.com/software/BeautifulSoup/bs4/doc/#) >= 4.0
- [pandas](http://pandas.pydata.org/) >= 0.11
- [request](http://docs.python-requests.org/en/master/) >= 2.0


Usage
-----

Still developing the API.  Right now you can get a list of all player overview urls, generate a list of game log urls for
a given player, and convert that list into pandas dataframe.


Notes
-----

`players.json` was generated on 02/11/2016 by `buildPlayerDictionary()` and `savePlayerDictionary()`.
I'd recommend building your own, fresh copy. It takes about 10 minutes to scrape from the site.
To create the most recent `players.json`, you can use as follows.

```python
import basketballCrawler as bc
players = bc.buildPlayerDictionary()
bc.savePlayerDictionary(players, '/path/to/file')
```

You can also download generated `players.json`. However, note that it's a pretty large (13M) file.

```python
players = bc.loadPlayerDictionary('/path/to/players.json')
```

In order to search player name, use `searchForName` function, for example,

```python
searched_player = bc.searchForName(players, 'Murphey') # players is player dictionary
```


TODO
----
- Local Database construction.
- League-wide statistics.
"
25,simonefrancia/SpaceJam,,"# SpaceJam: a Dataset for Basketball Action Recognition

You can contribute with 50 cents for Dataset.
[Paypal](https://www.paypal.me/franciasimone)

[Demo Video](https://www.youtube.com/watch?v=PEziTgHx4cA)



<p align=""center"">
    <img src="".github/clip.png?raw=true"" width=""700"">
</p>

This repo contains two datasets (clips->.mp4 files and joints -> .npy files) of basketball single-player actions. In Figure below, a histogram of the number of examples is shown for every class. The size of the two final annotated datasets is about 32'560 examples, which can represent the basis for the subsequent training and testing phases for a classification of basket-like actions through Deep Neural Networks.



You can download the entire Dataset (both joints and clips) from [here](https://drive.google.com/open?id=1hLpbLmLFK2-GIvsmpJelGlEx94yQM2Ts).
Inside ```dataset.zip``` you can find the annotations of all examples and labels annotations, both in JSON format. 

Thesis is available at this [link](https://www.researchgate.net/publication/330534530_Classificazione_di_Azioni_Cestistiche_mediante_Tecniche_di_Deep_Learning/stats). [Soon available also in English]


<p align=""center"">
    <img src="".github/histogram.png?raw=true"" width=""700"">
</p>


Each example of the first dataset (called clip Dataset) consists of 16frame in RGB focused on one player, while each of the second (called joint Dataset) consists of the coordinates (x, y) on the image plane of the player's joints. The identifier of ""parallel"" examples will be the same, while what identifies them is the extension of the files on which they are stored; each clip is compressed into a mp4 file (namefile.mp4), while the joints are stored as sufile vectors numpy (namefile.npy).


"
26,danchyy/Basketball_Analytics,Jupyter Notebook,"# Basketball Analytics

This repository and scripts in it will be focusing on the statistics revolving around NBA and basketball in general.

All code is written in Python using the Jupyter Notebooks which allow live preview of the images and thus making it nice and easy to analyze and visualize data.

Current mini ""projects"":

## 2021-22 Season

* Simple plot which checks if there is correlation between box outs and DRB%: [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2021_22_season/box_outs_drb_pct.ipynb)

* Shotchart [notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2021_22_season/shotcharts.ipynb) with one new plot type - change of shot frequency in each zone

* Finding which players get more of real assists, and which get more fake assists: [notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2021_22_season/real_fake_assists.ipynb) - also uses pbp data

* [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2021_22_season/assist_combos.ipynb) which finds assist combos (in this case, alley oop partners), it uses data retrieved through [Play-by-Play downloader](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2021_22_season/pbp_downloader.ipynb)


## 2020-21 Season

### Playoffs

* Some other stuff can be find in this [FOLDER](https://github.com/danchyy/Basketball_Analytics/tree/master/Scripts/2020_21_season/playoffs)

* AVERAGE PASSES PER SERIES: [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/playoffs/passing_stats.ipynb)

### Regular Season

* LONG DISTANCE ANALYSIS + AVERAGE DISTANCE ARC: Analysis of long distance shooters ([Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/long_distance_shooters.ipynb)) and average [3pt arc](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/three_pt_distance_new.ipynb)

* CALCULATING RIM DETERRENEC AND BLOCK EFFICIENCY: How to calculate Rim deterrence from play-by-play data + block efficiency(recovery): [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/block_efficiency_rim_deterrence.ipynb)

* GOBERT ANALYSIS: Big analysis on Gobert's dominance on defense: [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/gobert_jazz.ipynb)

* ASSIST CHART: Simple assist chare with share of total shots in that area: [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/assist_chart.ipynb)

* DENVER NUGGETS' ANALYSIS: Various charts regarding Denver Nuggets: [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/denver_nuggets.ipynb)

* BIGGEST RA SHARE OF SHOTS: Table which shows Zion's dominant numbers: [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/RA_distribution.ipynb)

* CLUTCH ANALYSIS: Various tables and ""face scatters"" for clutch data: [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/best_in_clutch.ipynb)

* HUSTLE landscape: Simple scatter for hustle data: [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/hustle.ipynb) 

* ALL SHOTS BY KOBE: Every shot generated into a gif per season level: [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/kobe_all.ipynb)

* PACE/TS/FT per seasons: BBRef scraper plus line charts for [TS%, Pace, FGA per game per seasons](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/pace_per_seasons.ipynb) and for [FTAs per game per season](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/free_throws_seasons.ipynb)

* TEAM EFFICIENCY LANDSCAPE: Goldsberry-like plot with Net rating landscape: [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/efficiency_landscape_teams.ipynb)

* GAME LENGTH ANALYZER: [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/game_length.ipynb) -> checking out what part of the game lengthens the game

* PLAYER's FACE IMAGE DOWNLOADER: Simple script which downloads all active players' images (based on nba_api package): [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/get_player_imgs.ipynb)

* STINT FINDER: Notebook which [finds the stint for player - when and how long he's on court](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/pbp_analysis/eff.ipynb)

* PLAY-BY-PLAY DOWNLOADER AND (partial) PARSER: Notebook which [downloads play-by-play data](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/pbp_analysis/stint_finder.ipynb) and finds when player is on/off court

* [Biggest difference in opponent's wide open triples vs all teams and vs target teams](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/opp_wide_shot_outlier.ipynb) - full post available at my [website](https://www.bballytics.co/en/2021/01/09/unlucky-start.html)

* [Best offensive rebounders](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/off_rebounding.ipynb)

* [LOLLIPOP CHART showing the most improved players](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/most_improved_players.ipynb)

* [HIstorical results on Christmas games](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/christmas_results.ipynb)

* [Couple of charts analyzing the (d)evolution of Blake Griffin](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/blake_griffin_downfall.ipynb)

* [3 Point chase for all-time record](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/3_point_chase.ipynb)

### Preseason

* [Preseason analysis of Atlanta Hawks](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/offseason_moves/atlanta_hawks.ipynb)

* [Preseason analysis of Philadelphia 76ers](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/offseason_moves/philly.ipynb)

* [Preseason analysis of Portland Blazers](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/offseason_moves/portland.ipynb)

## 2019-20 Season

### Playoffs 

* [Lakers - Nuggets Radar chart](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/playoff_analysis/lal_den.ipynb), [Boston - Miami Radar Chart](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/playoff_analysis/bos_mia.ipynb), and there are others as well. Basically a ""breakdown"" of their offenses through radar chart, which is a nice way to display numerical values across multiple categories. 

* [Biggest change in unassisted Field Goals](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/playoff_analysis/biggest_change_in_unassisted_assisted.ipynb) This shows how the amount of Unassisted field goal makes changed from regular season to first and 2nd round (will update this with conference finals when finished). 

* [Westbrook's adaptation to Rockets](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/playoff_analysis/westbrook_mini_analysis.ipynb) -> Not really connected to playoffs, but it shows how Russ didn't play as other Rockets' players, but ran his own game...

------

* [Analysis of Anthony Davis' defensive performance in 2019-20](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/anthony_davis_role.ipynb)

* [Analysis of After timeout plays](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/after_timeout_analysis.ipynb)

* [Analysis of Boston Duo of the Future](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/boston_duo.ipynb)

* [The PJ Tucker Paradox](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/tucker_paradox.ipynb), where his average distance of 3pt shot is shorter than three on top of the key.

* [Waffle Chart for James Harden's shot selections](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/waffle/james_harden.ipynb)

* [Defensive Specialists, part 3. Robert Covington](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/defensive%20specialists/covington_houston.ipynb)

* [Defensive Specialists, part 2. Brook Lopez](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/defensive%20specialists/brook_lopez_analysis.ipynb)

* [Defensive Specialists, part 1. Rudy Gobert](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/defensive%20specialists/gobert_analysis.ipynb)

* [Evolution of NBA through shot charts](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/evolution_of_nba.ipynb)

* [Coby White analysis](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/coby_white.ipynb)

* [Duncan Robinson analysis](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/duncan_robinson.ipynb)

* [Assist chart by Bam Adebayo](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/assist_charts/bam_assist_chart.ipynb)

* [Analysis of Trae's long distance shooting](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/three_pt_distance.ipynb)

* [Best januaries](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/januaries.ipynb)

* [Analysis of offense durations](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/offense%20attack%20duration.ipynb)

* [Look at Stockton's records](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/stockton_analysis.ipynb)

* [Analysis of Domantas Sabonis' season](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/sabonis_shotchart.ipynb)

* [Kyrie Irving Shot chart for 2010s](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/kyrie_shotcharts_2010s.ipynb)

* [Bojan Bodanovic Shot Chart](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/bojan_shotchart.ipynb)

* [Shots and assist by Doncic vs Pelicans](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/doncic_shots_asists_first_trip_double.ipynb)

* Mid-Range heavy [Shot chart by DeMar Derozan](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/derozan.ipynb)

## 2018-19 Season

* [Evolution of Brook Lopez](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2018_19_season/brook_lopez_evolution/brook_lopez.ipynb), a look at change of Lopez' shot charts through the seasons

* [Predicting MVP](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2018_19_season/mvp_predictions/Predicting%20MVP.ipynb) for 2018-19 nba season. 

* Here is [notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2018_19_season/clutch_players/ClutchStats.ipynb) which shows players that excel in the clutch.

* Big Luka Dončić analysis, [notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2018_19_season/doncic_analysis/doncic_analysis.ipynb)

* James Harden analysis, [notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2018_19_season/harden_analysis/harden_analysis.ipynb)

## 2017-18 Season

* Assists distribution between each NBA team for 2016/2017 season
	* [Crawler](https://github.com/danchyy/ML-and-DS/blob/master/Scripts/assist_distribution_between_team/assistCrawler.ipynb) which cleans table of assists inside team from basketball-reference site

	* [Notebook](https://github.com/danchyy/ML-and-DS/blob/master/Scripts/assist_distribution_between_team/visualize_assists.ipynb) to visualize assists distribution using heatmaps

* Visualization of best 3 point shooters on very tight, tight, open and wide open defense
	* [Notebook](https://github.com/danchyy/ML-and-DS/blob/master/Scripts/closest_defenders_shot_chart/closest_defenders_percentage.ipynb)  to compare shooters based on closest defender

* Shotcharts from past 2017 Eurobasket comparing Bogdanovics and displaying Markkanen's shooting ability
	* Bojan vs Bogdan comparison on [shot charts](https://github.com/danchyy/ML-and-DS/blob/master/Scripts/eurobasket_shotcharts/Bogdanovic_vs_Bogdanovic.ipynb)

	* Lauri Markkanen's amazing first round [shot chart](https://github.com/danchyy/ML-and-DS/blob/master/Scripts/eurobasket_shotcharts/Lauri_Markkanen_shotchart.ipynb)

* Comparison of clutch vs regular time shooting for top 20 NBA scorers in 2016/2017 season
	* [Notebook](https://github.com/danchyy/ML-and-DS/blob/master/Scripts/nba_clutch_stats/Nba%20clutch%20time%20and%20regular%20time%20shooting%20comparison.ipynb)  for FG%, FT%, TS% comparison in regular vs clutch time

* Various stats analysis using Kaggle's [dataset](https://www.kaggle.com/drgilermo/nba-players-stats) with NBA stats from 1950 season
	* [Notebook](https://github.com/danchyy/ML-and-DS/blob/master/Scripts/nba_players_stats/Nba_players.ipynb) which runs through some regular and advanced stats from last season as well as from previous seasons

	* [Images](https://github.com/danchyy/ML-and-DS/tree/master/Scripts/nba_players_stats/images) which are results of previous notebook
	
* Swarmplot of rookie stats for their first regular game in 2017-18 nba season, as well as comparison of Ben Simmons' and Markelle Fultz' debut with other first round picks

	* [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/young_players_40_point_breaktrough/comparison_of_young_players_season.ipynb) which takes at look at previously described tasks.
	
* Inspired by Aaron Gordon's first 40 point game, I took a look at how other young players his age, or younger, improved during their first 40 point game (only the ones which aren't rookies)

	* [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/young_players_40_point_breaktrough/comparison_of_young_players_season.ipynb) Which visualizes players improvement in points per game during the season in which they scored 40 points or more.
	
* A look at Russell Westbrook's 2016-17 season in which he won MVP award and averaged triple double.

	* [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/westbrook_2016_17/visualization_Westbrook_triple_double_chase.ipynb) with some charts displaying Westbrook's averages through season.
	
* Radar plots which describe player's style.

	* [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/radar_plot/Radar_plot.ipynb) with radar plots showing for Russell Westbrook and Kyrie Irving to view how they adapted to newly added teammates (Westbrook) and new team (for Kyrie).
	
	* [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/radar_plot/Stephen_Curry.ipynb) which shows how Stephen Curry changed his scoring coming from 2015-16 MVP season to 2016-17 season and addition of Kevin Durant.
	
* Analysis of Players of the week/month in the NBA

	* [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/players_of_the_week/week_2/oladipo_cousins_week2.ipynb) for week two.
	
* James Harden's chase for three point heights
	* [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/three_point_race/Harden_comparison.ipynb) where I show the pace of James Harden's three point shooting.
	
* Stephen Curry's chase for three point record
	* [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/three_point_race/curry_record.ipynb) where Stephen Curry's progress in total three pointers made through career games in comparison with other top shooters

* Free throw improvement for some centers
	* Here is [notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/free_throw_comp/free_throw_centers.ipynb) where improvements for some of the players like Clint Capela and Andre Drummond can be seen in comparison to last season
	
* Most improved three point shooters
	* I analyzed which were the most improved three point shooters up to this point in season in this [notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/three_point_improvement/three_point_improvement.ipynb)
	
* Fourth quarter scoring thus far
	* LeBron James has by far the most points thus far in current season, that can be seen [here](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/fourth_quarter_ot_scoring/best_scorers_late.ipynb)
	
"
27,alexnoob/BasketBall-GM-Rosters,,"BasketBall-GM-Rosters
=====================

JSON Rosters for Basketball GM

See you on https://www.reddit.com/r/BasketballGM
"
28,jbkuczma/NBAreact,JavaScript,"<p align=""center"">
  <img src=""https://github.com/jbkuczma/NBAreact/blob/master/media/swish_app.png"">
</p>

![](https://github.com/jbkuczma/NBAreact/blob/master/media/swish_github.png)

<p align=""center"">
  <a href="""">
     <img src=""https://img.shields.io/badge/%F0%9F%8F%80-This%20Is%20Why%20We%20Play-blue.svg?&style=flat-square"" alt=""This Is Why We Play"">
  </a>
  <a href=""https://github.com/jbkuczma/NBAreact/issues"">
    <img src=""https://img.shields.io/github/issues/jbkuczma/NBAreact.svg?style=flat-square"" alt=""GitHub issues"">
  </a>
</p>
<p align=""center"">
  <a href=""https://itunes.apple.com/us/app/swish-basketball-stats/id1361567861"">
    <img alt=""Download on the App Store"" title=""App Store"" src=""http://i.imgur.com/0n2zqHD.png"" width=""200"">
  </a>
</p>

# Swish
An iOS and Android NBA app created with React Native. If you would like to request a feature, find a bug, have a question, or would like to leave feedback, open an [issue](https://github.com/jbkuczma/NBAreact/issues)! ⭐️ this repo to show support!

## Download
- iOS - Download [here](https://itunes.apple.com/us/app/swish-basketball-stats/id1361567861)!
- Android - Coming soon!

## Features
- Scores and stats for in-progress and completed games
- Detailed play by play
- Full team stats for a season
- Full player stats for a season and over their career
- Detailed player game stat graphs
- Conference rankings
- League leaders
- Videos and highlights (coming soon)
- Compare two players (coming soon)

## Libraries Used
[React Native](https://github.com/facebook/react-native)

[React Navigation](https://reactnavigation.org/)

[Redux](https://redux.js.org/)

[Redux Thunk](https://github.com/gaearon/redux-thunk)

[React-Native-SVG-Charts](https://github.com/JesperLekland/react-native-svg-charts)

[React-Native-Modal-Dropdown](https://github.com/sohobloo/react-native-modal-dropdown)

[nba.js](https://github.com/kshvmdn/nba.js) (custom and modified implementation to work with React Native)

## Resources Used
[Set Splash Screen iOS](https://medium.com/the-react-native-log/change-default-launch-screen-in-react-native-ios-app-544f94f1e947)

[Test your React Native App on your iPhone](https://medium.com/react-native-development/deploying-a-react-native-app-for-ios-pt-1-a79dfd15acb8)

[How to Submit to the App Store](https://clearbridgemobile.com/how-to-submit-an-app-to-the-app-store/)

# Getting Started

  - Fork (optional) and clone repo

        git clone https://github.com/jbkuczma/NBAreact.git && cd NBAreact

  - Install and link dependencies

        npm install

        npm link

  - Run

        npm run start:ios

        npm run start:iphoneX

        npm run start:android (an emulator must be running first)
"
29,FranGoitia/basketball_reference,Python,"# Basketball Reference Crawler

To crawl a full season you need to use match_generator script. 
```
  python match_generator.py --league nba --seasons 2003-2004
  python match_generator.py --league nba --seasons 2003-to-2015 (will crawl every season from 2003 to 2015)
  python match_generator.py --league ncaa --seasons 2006-2007 2007-2008
```  

Individual matches are represented as a json in which every information from basketball-reference is scraped, including essential information for safely identifying players
"
30,rajshah4/NBA_SportVu,HTML,"### NBA_SportVu
Code for exploring the NBA SportVu motion data, more information at my [blog](http://projects.rajivshah.com/blog/2016/04/02/sportvu_analysis/). You can download the games from this [repo](https://github.com/rajshah4/BasketballData).

_functions.R - Various functions that I have written.  The functions include *sportvu_convert_json* for importing motion data from a json to a data frame.  Other functions can extract distances players have traveled and create a matrix of player to player distances.
 
EDA_NBA_SportVu.Rmd - A markup document showing basic EDA on the movement data. [Online](http://projects.rajivshah.com/sportvu/EDA_NBA_SportVu.html).

PBP_NBA_SportVu.Rmd - A markup document showing how to merge play by play data with the SportVu movement data. [Online]( http://projects.rajivshah.com/sportvu/PBP_NBA_SportVu.html).

Chull_NBA_SportVu.Rmd - A markup document for measuring player spacing using convex hulls with the SportVu movement data. [Online](http://projects.rajivshah.com/sportvu/Chull_NBA_SportVu.html).

Velocity_NBA_SportVu.RMd - A markup document for measuring player velocity, acceleration, and jerk using the NBA SportVu movement data. [Online](http://projects.rajivshah.com/sportvu/Velocity_NBA_SportVu.html).

Traj_NBA_SportVu.Rmd - A markup document sharing a few different ways to analyzing player and ball trajectories. [Online]( http://projects.rajivshah.com/sportvu/Traj_NBA_SportVu.html).
"
31,gmf05/nba,Jupyter Notebook,"# Scripts to scrape and analyze basketball data.

Scripts scrape NBA.com, Sports Illustrated, etc. and analyze the resulting data.

Newest data collection scripts pull JSON (using the requests module) via the NBA API. For instance, this block of Python code saves data for the first game of the 2014-15 regular season:

    import bb_tools as bb
    gameid = '0021400001'
    bb.write_game_json(gameid) # save to disk (not necessary, but faster)
    box = bb.get_boxscore(gameid) # read from disk -- or web if not saved 
    pbp = bb.get_pbp(gameid)
    shots = bb.get_shots(gameid)
  
Data read/write paths are set in bb_tools.py.

The NBA's Game ID, 0021400001, is a 10-digit code: XXXYYGGGGG, where XXX refers to a season prefix, YY is the season year (e.g. 14 for 2014-15), and GGGGG refers to the game number (1-1230 for a full 30-team regular season).

Season prefixes are...

    001 : Pre Season
    002 : Regular Season
    003 : All-Star
    004 : Post Season

To save all data for the current season, run the following from the command line:

    python nbaupdate.py

To save data from previous seasons, you can pass an entire list of games. For example, the list of regular season games from 1996-97 to 2014-15 is provided in the repo.

    gamelist = bb.REPOHOME + '/data/csv/games_96-14.csv'
    bb.write_gamelist_json(gamelist)

=======

Older data collection scripts parse HTML (using modules re, BeautifulSoup, etc.) into CSV and include:

1. nbagames.py : Given a range of dates & season code (e.g. 00214 = 2014-15 regular season), formulates a text list of all NBA games in the range. [REPLACED BY savegames.py]

2. nbascores.py : Given a list of games, queries NBA.com and writes box score data for each one. Also can query vegasinsider.com to get moneyline odds for each game. [REPLACED BY savejson.py]

3. nbaplays.py : Given a list of games, queries NBA.com and writes play-by-play data for each one. [REPLACED BY savejson.py]

4. nbastats.py : Given a list of play-by-play data, convert certain events (shots attempted/made, fouls, turnovers) into point process data (i.e. list of binary outcomes over time [0 0 0 0 1 ...]) [REPLACED BY parse_possession.py]

=======

Analysis scripts apply machine learning techniques to the resulting data in Python, Matlab, and R. Some simple examples are shown in IPython Notebooks.
"
32,FranGoitia/basketball-analytics,Python,
33,alexmonti19/dagnet,Python,"# DAG-Net: Double Attentive Graph Neural Network for Trajectory Forecasting
This repository contains the PyTorch code for [ICPR 2020](https://www.micc.unifi.it/icpr2020/) paper:

**<a href=""https://arxiv.org/abs/2005.12661v2"">DAG-Net: Double Attentive Graph Neural Network for Trajectory Forecasting</a>**  
*<a href=""https://github.com/alexmonti19"">Alessio Monti</a>,
<a href=""https://aimagelab.ing.unimore.it/imagelab/person.asp?idpersona=110"">Alessia Bertugli</a>,
<a href=""https://aimagelab.ing.unimore.it/imagelab/person.asp?idpersona=38"">Simone Calderara</a>,
<a href=""https://aimagelab.ing.unimore.it/imagelab/person.asp?idpersona=1"">Rita Cucchiara</a>*  

## Model architecture
The model is composed by three main components: the generative model (VRNN) and two graph neural networks.

![dagnet - overview](icpr.png)
 
The first graph network operates on agents' goals, expressed as specific areas of the environment where agents 
will land in the future. The second second graph network operates instead on single agents' hidden states, 
which contain past motion behavioural information. The employing of two separate graph neural networks allows to consider 
and share both past and future information while generating agents' future movements.


## Prerequisites

* Python >= 3.8
* PyTorch >= 1.5
* CUDA 10.0

### Installation

* Clone this repo:
```
git clone https://github.com/alexmonti19/dagnet.git
cd dagnet
```

* Create a new virtual environment using Conda or virtualenv. 
```
conda create --name <envname>
```
* Activate the environment and install the requirements:
```
conda activate <envname>
pip install -r requirements.txt
```


## Datasets
Our proposal is general enough to be applied in different scenarios: the model achieves state-of-the-art results in both
urban environments (*Stanford Drone Dataset*) and sports applications (*STATS SportVU NBA Dataset*).   

For complete information on where to download and how to preprocess the datasets see the relative 
[datasets/README.md](./datasets/README.md).

## Architectures
The repo contains both the final model and the two ablation architectures cited in the paper.
- *VRNN*: the baseline generative architecture
- *A-VRNN*: enhanced version of the baseline with a single graph (on agents' hidden states)
- *DAG-Net*: the complete architecture with two graphs

For more information on how to train the models see the relative [models/README.md](./models/README.md).

## Pre-trained models
We also ship the checkpoints to reproduce the results presented in the paper. 

<table>
    <tbody>
        <tr>
            <th>
            <th align=""center"" colspan=2 style=""text-align:center"">Offense BSK</th>
            <th align=""center"" colspan=2 style=""text-align:center"">Defense BSK</th>
            <th align=""center"" colspan=2 style=""text-align:center"">Stanford Drone</th>
        </tr>
        <tr>
            <td align=""center""></td>
            <td align=""center"" style=""text-align:center; font-weight:bold"">ADE</td>
            <td align=""center"" style=""text-align:center; font-weight:bold"">FDE</td>
            <td align=""center"" style=""text-align:center; font-weight:bold"">ADE</td>
            <td align=""center"" style=""text-align:center; font-weight:bold"">FDE</td>
            <td align=""center"" style=""text-align:center; font-weight:bold"">ADE</td>
            <td align=""center"" style=""text-align:center; font-weight:bold"">FDE</td>
        </tr>
        <tr>
            <td>VRNN</td>
            <td style=""text-align:center"">9,41</td>
            <td style=""text-align:center"">15,56</td>
            <td style=""text-align:center"">7,16</td>
            <td style=""text-align:center"">10,50</td>
            <td style=""text-align:center"">0,58</td>
            <td style=""text-align:center"">1,17</td>
        </tr>
        <tr>
            <td>A-VRNN</td>
            <td style=""text-align:center"">9,48</td>
            <td style=""text-align:center"">15,52</td>
            <td style=""text-align:center"">7,05</td>
            <td style=""text-align:center"">10,34</td>
            <td style=""text-align:center"">0,56</td>
            <td style=""text-align:center"">1,14</td>
        </tr>
        <tr>
            <td>DAG-Net</td>
            <td style=""text-align:center""><em>8,98</em></td>
            <td style=""text-align:center""><em>14,08</em></td>
            <td style=""text-align:center""><em>6,87</em></td>
            <td style=""text-align:center""><em>9,76</em></td>
            <td style=""text-align:center""><em>0,53</em></td>
            <td style=""text-align:center""><em>1,04</em></td>
        </tr>
    </tbody>
</table>

For more information on how to test the models and produce the above results, see the relative 
[models/README.md](./models/README.md).

## Cite
If you have any questions, please contact [alessio.monti@unimore.it](mailto:alessio.monti@unimore.it) or 
[alessia.bertugli@unimore.it](mailto:alessia.bertugli@unimore.it), or open an issue on this repo. 

If you find this repository useful for your research, please cite the following paper:
```bibtex
@proceedings{monti2020dagnet,
    title={DAG-Net: Double Attentive Graph Neural Network for Trajectory Forecasting},
    author={Alessio Monti and Alessia Bertugli and Simone Calderara and Rita Cucchiara},
    booktitle = {25th International Conference on Pattern Recognition (ICPR)},
    year={2020}
}
```
"
34,historicalsource/nba-jam,Assembly,"# nba-jam
"
35,browlm13/Basketball-Shot-Detection,Python,"# Shot Detection

## AI Basketball Shot Detection and Analysis
This program is able to detect when a shot occurs and fill in the balls flight from captured data. It calculates the balls initial velocity and launch angle. It is able to estimate the balls flight perpedicular to the camera plane (The z axis) using a single camera. The program is also able to detect when the balls flight is interupted by another object and will drop those data points.

## Tracking and analysis performed on 
* unstable video

![Unstable Video](shot_1.gif)
#### Program output world coordinates:
![world coordinates](shot_1_trajectory_extrapolation_points_v1.png)

#### Tracking and analysis performed on 
* shot interrupted by person

![Shot with missing datapoints](shot_2.gif)
#### Program output world coordinates:
![world coordinates](shot_2_trajectory_extrapolation_points_v1.png)

### Tracking and analysis performed on 
* shot interrupted by object
* shot angled with component perpendicular to the camera plane

![Hits net piecewise linear regression](shot_16.gif)
#### Program output world coordinates:
![world coordinates](shot_16_trajectory_extrapolation_points_v1.png)



## Formats for representing video frame object bounding boxes detected

### Object Line Format (OL) CSV file
#### Each object's bounding box in a video recoreded on an individual line

| clip_ID | width | height | frame | category | score | x1 | x2 | y1 | y2 | model |
|---------|:-----:|:------:|:-----:|:--------:|:-----:|:--:|:--:|:--:|:--:|:-----:|
| int	  | int   | int    | int   | string   |float  |int |int |int |int |string |

### Mock 1 Frame Line Format (FLM1) CSV file
#### Each frame is represented on an individual line capturing only the highest score bounding box of each category detected
* All frames are represented exactly once
* Designed for videos containing at maximum a single _basketball_ and a single _person_
* Nan values are used with the absence of a detected  _basketball_ or _person_ in a frame

| clip_ID | width | height | frame | x1_basketball | x2_basketball | y1_basketball | y2_basketball | x1_person | x2_person | y1_person | y2_person | 
|---------|:-----:|:------:|:-----:|:-------------:|:-------------:|:-------------:|:-------------:|:---------:|:---------:|:----------:|:-----:|

### Mock 1 Basketball Tracking Format (BTM1) CSV file
#### Each line is an individual frame and contains the centerpoint coordinates of the highest scoring basketball detected as well as the radius and ""free"" column
* All frames are represented exactly once
* The free column is True if the highest scoring basketballs bounding box has no overlap with the highest scoring persons bounding box
* The radius is ``((x2 - x1) + (y2 - y1))/2``
* Nan values are used with the absence of a detected  _basketball_

| clip_ID | width | height | frame | x | y | radius | free |
|---------|:-----:|:------:|:-----:|:-:|:-:|:------:|:----:|
| int	  | int   | int    | int   |int|int| float  | bool |

### LabelImg Annotation Format (LI) XML file
#### [link to LabelImg](https://github.com/tzutalin/labelImg)
#### Each image has a corresponding LI.xml file containing all objects detected
* This is used to verify the accuracy of the models detections
* Multiple objects are possible for each image
```
 <annotation>
            <folder></folder>
            <filename></filename>
            <path></path>
            <source>
                <database></database>
            </source>
            <size>
                <width></width>
                <height></height>
                <depth></depth>
            </size>
            <segmented></segmented>
            <object>
                <name></name>
                <pose></pose>
                <truncated></truncated>
                <difficult></difficult>
                <bndbox>
                    <xmin></xmin>
                    <ymin></ymin>
                    <xmax></xmax>
                    <ymax></ymax>
                </bndbox>
            </object>
        </annotation>
```

### Converting between Object Line Format (OL) and LabelImg Annotation Format (LI)

| OL | LI |
|:--:|:--:|
|clip_ID|folder|
|frame|**file**|
|width|width|
|height|height|
|category|name|
|**score**| |
|x1|xmin|
|x2|xmax|
|y1|ymin|
|y2|ymax|
|**model**| |

* frame in this repository is the **file** name minus its extension
* **score** is ``100.0`` if annotated by a human
* **model** is ""human"" if annotated by a human

### Clip Info Bundel Format (CIB) JSON file
#### output of image_evaluator
```
{
	""PATH/TO/FRAME/IMAGE"" : 

	{

		""image_path"" 		: ""PATH/TO/FRAME/IMAGE"",
		""image_folder"" 		: ""IMAGE_FOLDER""
		""image_filename"" 	: ""IMAGE_FILENAME"",
		""image_height"" 		: HEIGHT_IN_PIXELS (int),
		""image_width"" 		: WIDTH_IN_PIXELS (int),
		""image_items_list"" : 

			[
				""category"" : ""NAME"",
				""score"" : ACCURACY_SCORE (float),
				""box"" : [x1,x2,y1,y2] (ints),
				""model"" : ""EVALUATION_MODEL""
			]
	}
}
```

## Data Directory Structure
```
data
│
└───clips
│   |
│   | CLIP_ID1.mp4
|   | CLIP_ID2.mp4
│   | ...
|
└───verified_li_annotations
│   │
│   └───CLIP_ID1
|   |   │
|   |   └───frames
|   |   |   | 1.jpg
|   |   |   | 2.jpg
|   |   |   | ...
|   |   |
|   |   └───li_annotations
|   |   |   | 1.xml
|   |   |   | 2.xml
|   |   |   | ...
|   |   
│   └───CLIP_ID2
│   ...
│   
└───ol_annotations
    │   ol_annotations.csv
```
"
36,andrewstellman/pbprdf,HTML,"# pbprdf
Generate RDF for NBA or WNBA basketball play-by-play data by reading a folder full of ESPN-style play-by-play HTML pages (eg. [Pacers vs. Cavaliers, April 15, 2018](http://tv5.espn.com/nba/playbyplay?gameId=401029417) or [Mystics vs. Sun, June 5, 2015](http://scores.espn.go.com/wnba/playbyplay?gameId=400610636)), processing each play in each game file, and generating a Turtle file that contains all of the plays from each game.

Here's an article by that explains gives some more detail about the project: *[NBA analytics and RDF graphs: Game, data, and metadata evolution, and Occam's razor](https://www.zdnet.com/article/nba-analytics-and-rdf-graphs-game-data-and-metadata-evolution-and-occams-razor/)*

Here's an example of an analysis that you can do with pbprdf: *[Analysis: 3-point shot percentage after other team makes or misses](https://gist.github.com/andrewstellman/4872dbb9dc7593e56abddbe8b998b509)*

## Running pbprdf

To run pbprdf, download the latest release from the Releases page: https://github.com/andrewstellman/pbprdf/releases and make sure Java 8 or later is in your path.

The release distribution contains an archive with the following files:
* `pbprdf.jar` - the binary
* `pbprdf` - Mac/Unix shell script to run pbprdf
* `pbprdf.bat` - Windows batch file to run pbprdf
* shell scripts to fetch WNBA or NBA play-by-play files

### Example: Analyze a set of games

Step 1: Download a set of play-by-play HTML files
```
$ ./fetch-wnba-play-by-plays.sh
```

This will create a folder called `data/retrieved_*` (with a timestamp at the end of the folder name) with subdirectories for various seasons and playoffs. Move the folder for a season or playoff into the current folder (in this example, the folder with the 2014 playoffs):

```
$ mv data/retrieved_*/wnba-2018-playoffs .
```

Step 2: Run pbprdf and generate the Turtle file for the 2014 WNBA playoffs
```
$ ./pbprdf wnba-2018-playoffs/ wnba-2018-playoffs.ttl
```

Step 3: Import the Turtle file into RDF4J Server
*(see instructions at the bottom for spinning up an RDF4J server, loading data into it, and connecting to it with the RDF4J console)
```
$ console -s http://localhost:8080/rdf4j-server pbprdf-database
Type 'help' for help.
pbprdf-database> load wnba-2014-playoffs.ttl into http://stellman-greene.com/pbprdf/wnba-2014-playoffs
Loading data...
Data has been added to the repository (20410 ms)
```

If your file is large, you can use zip or gzip to compress it. Make sure it has the extension `.ttl.zip`:

```
$ ./fetch-nba-play-by-plays.sh
$ ./pbprdf data/nba-2017-2018-season/ nba-2017-2018-season.ttl
$ zip nba-2017-2018-season.ttl.zip nba-2017-2018-season.ttl
$ console -s http://localhost:8080/rdf4j-server pbprdf-database
Type 'help' for help.
pbprdf-database> load nba-2017-2018-season.ttl.zip into http://stellman-greene.com/pbprdf/nba-2017-2018
Loading data...
Data has been added to the repository (427100 ms)
```

__See 'Setting up RDF4J Server' below for details on setting up RDF4J server__

Step 4: Run SPARQL queries
```
pbprdf-database> SPARQL
enter multi-line SPARQL query (terminate with line containing single '.')
BASE <http://stellman-greene.com/>
SELECT ?teamName (COUNT(*) AS ?foulsDrawn) WHERE { 
  ?fouledPlayer pbprdf:foulDrawnBy ?player .
  ?roster pbprdf:hasPlayer ?player .
  ?roster rdfs:label ?teamName .
}
GROUP BY ?teamName
ORDER BY ?foulsDrawn
.
Evaluating SPARQL query...
+-------------------------------------+-------------------------------------+
| teamName                            | foulsDrawn                          |
+-------------------------------------+-------------------------------------+
| ""Sparks""                            | ""10136""^^<http://www.w3.org/2001/XMLSchema#integer>|
| ""Sun""                               | ""12101""^^<http://www.w3.org/2001/XMLSchema#integer>|
| ""Mystics""                           | ""12882""^^<http://www.w3.org/2001/XMLSchema#integer>|
| ""Lynx""                              | ""13129""^^<http://www.w3.org/2001/XMLSchema#integer>|
| ""Storm""                             | ""13452""^^<http://www.w3.org/2001/XMLSchema#integer>|
| ""Dream""                             | ""13457""^^<http://www.w3.org/2001/XMLSchema#integer>|
| ""Stars""                             | ""13932""^^<http://www.w3.org/2001/XMLSchema#integer>|
| ""Liberty""                           | ""13954""^^<http://www.w3.org/2001/XMLSchema#integer>|
| ""Mercury""                           | ""13992""^^<http://www.w3.org/2001/XMLSchema#integer>|
| ""Fever""                             | ""13997""^^<http://www.w3.org/2001/XMLSchema#integer>|
| ""Shock""                             | ""14329""^^<http://www.w3.org/2001/XMLSchema#integer>|
| ""Sky""                               | ""14909""^^<http://www.w3.org/2001/XMLSchema#integer>|
+-------------------------------------+-------------------------------------+
12 result(s) (1033 ms)
```

NOTE: You may need to add `BASE` and `PREFIX` lines to the top of your query:
```
BASE <http://stellman-greene.com/>
PREFIX pbprdf: <#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
```


### Example: Load the ontology into RDF4J Server

Step 1: Generate the ontology
```
$ ./pbprdf --ontology ontology.ttl
```

Step 2: Load the ontology into its own context
```
pbprdf-database> load ontology.ttl into http://stellman-greene.com/pbprdf/ontology
Loading data...
Data has been added to the repository (18 ms)
```

Step 3: Execute a query that retrieves only the data in the ontology
```
pbprdf-database> SPARQL
enter multi-line SPARQL query (terminate with line containing single '.')
SELECT *
FROM NAMED <http://stellman-greene.com/pbprdf/ontology>
WHERE {
  GRAPH ?graph {
    ?class a owl:Class
  }
}
.
Evaluating SPARQL query...
+-------------------------------------+-------------------------------------+
| graph                               | class                               |
+-------------------------------------+-------------------------------------+
| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:Block                        |
| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:Event                        |
| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:Play                         |
| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:Shot                         |
| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:Ejection                     |
| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:EndOfGame                    |
| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:EndOfPeriod                  |
| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:Enters                       |
| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:FiveSecondViolation          |
| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:Foul                         |
| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:Game                         |
| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:JumpBall                     |
| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:Player                       |
| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:Rebound                      |
| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:Roster                       |
| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:Team                         |
| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:TechnicalFoul                |
| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:Timeout                      |
| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:Turnover                     |
| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:playerEjected                |
+-------------------------------------+-------------------------------------+
20 result(s) (60 ms)
```

## Other Useful Queries

### Clutch Shots

```
SELECT ?playerName ?shotsTaken ?shotsMade ?shotPercentage
WHERE 
{ 
  ?player a pbprdf:Player .
  ?player rdfs:label ?playerName .
  
  # Find the number of shots taken
  {
    SELECT ?player (COUNT(?shot) AS ?shotsTaken)
    WHERE 
    {
      ?shot a pbprdf:Shot .
      ?shot pbprdf:shotBy ?player .
      ?shot pbprdf:secondsLeftInPeriod ?secondsLeftInPeriod .
      FILTER (?secondsLeftInPeriod < 5)
    }
    GROUP BY ?player 
  }

  # Find the number of shots made
  {
    SELECT ?player (COUNT(?shot) AS ?shotsMade)
    WHERE 
    {
      ?shot a pbprdf:Shot .
      ?shot pbprdf:shotBy ?player .
      ?shot pbprdf:shotMade ""true""^^xsd:boolean .
      ?shot pbprdf:secondsLeftInPeriod ?secondsLeftInPeriod .
      FILTER (?secondsLeftInPeriod < 5)
    }
    GROUP BY ?player 
  }
  
  # Calculate the shot percentage
  BIND ( (round((?shotsMade / ?shotsTaken) * 10000)) / 100 AS ?shotPercentage ) .
  
  # Only match players who took more than 10 shots just before the end of the period
  FILTER (?shotsTaken >= 15) .
}
ORDER BY DESC(?shotPercentage)
```

### Shots made and missed at Target Center in the first five minutes

```
SELECT ?game ?gameTime ?shotsTaken ?shotsMade ?shotsMadePercentage ?shotsMissed ?shotsMissedPercentage
WHERE 
{ 
  ?game a pbprdf:Game .
  ?game pbprdf:gameTime ?gameTime .
  ?game pbprdf:gameLocation ""Target Center, Minneapolis, MN"" .

  # Find the number of shots made per game
  {
    SELECT ?game (COUNT(?madeShot) AS ?shotsMade) {
      ?madeShot a pbprdf:Shot .
      ?madeShot pbprdf:inGame ?game .
      ?madeShot pbprdf:shotMade ?made .
      ?madeShot pbprdf:shotMade ""true""^^xsd:boolean .
      ?madeShot pbprdf:secondsIntoGame ?secondsIntoGame .
      FILTER (?secondsIntoGame < 300)
    }
    GROUP BY ?game
  }
  
  # Find the number of shots missed per game
  {
    SELECT ?game (COUNT(?missedShot) AS ?shotsMissed) {
      ?missedShot a pbprdf:Shot .
      ?missedShot pbprdf:inGame ?game .
      ?missedShot pbprdf:shotMade ?made .
      ?missedShot pbprdf:shotMade ""false""^^xsd:boolean .
      ?missedShot pbprdf:secondsIntoGame ?secondsIntoGame .
      FILTER (?secondsIntoGame < 300)
    }
    GROUP BY ?game
  }
  
  BIND ((?shotsMade + ?shotsMissed) AS ?shotsTaken) .
  BIND ( (round((?shotsMade / ?shotsTaken) * 10000)) / 100 AS ?shotsMadePercentage ) .
  BIND ( (round((?shotsMissed / ?shotsTaken) * 10000)) / 100 AS ?shotsMissedPercentage ) .
}
LIMIT 100
```

## Setting up RDF4J Server

One effective way to execute SPARQL queries against these files is to use [RDF4J Server, Workbench, and Console](http://docs.rdf4j.org/server-workbench-console/). RDF4J Server and its GUI, RDF Workbench, are both web applications that run in an application server like Tomcat.

__Step 1: [Download RDF4J](http://rdf4j.org/download/)__

Download and extract the latest RDF4J SDK. It will contain a `bin` folder with the `console` binary, and a `war` folder with the `rdf4j-server.war` and `rdf4j-workbench.war` web applications.

__Step 2: [Install Apache Tomcat](https://tomcat.apache.org/tomcat-7.0-doc/appdev/installation.html)__

This usually just involves downloading and extracting the Tomcat binaries, editing libexec/conf/tomcat-users.xml to add a user with `tomcat` and `manager-gui` permissions, and executing `catalina run` to start the server.

__Step 3: Open the Apache Tomcat App Manager (http://localhost:8080/manager/html) and deploy the web applications__

Use the app manager GUI to deploy the `rdf4j-server.war` and `rdf4j-workbench.war` web applications to your Tomcat installations.

__Step 4: Use the RDF4J console to create a database__

Create a Native database with `spoc`,`sopc`,`opsc`,`ospc`,`posc`, and `psoc` indexes. This will take disk space for the indexes, but will make your queries run much faster.

```
$ cd eclipse-rdf4j-2.3.2/bin/
$ ./console.sh -s http://localhost:8080/rdf4j-server 
Connected to http://localhost:8080/rdf4j-server
RDF4J Console 2.3.2+496af9c

2.3.2+496af9c
Type 'help' for help.
> create native-rdfs
Please specify values for the following variables:
Repository ID [native]: pbprdf-database
Repository title [Native store with RDF Schema inferencing]: PBPRDF Database
Query Iteration Cache size [10000]: 
Triple indexes [spoc,posc]: spoc,sopc,opsc,ospc,posc,psoc
EvaluationStrategyFactory [org.eclipse.rdf4j.query.algebra.evaluation.impl.StrictEvaluationStrategyFactory]: 
Repository created
> open pbprdf-database
Opened repository 'pbprdf-database'
pbprdf-database> 
```

__Step 5: Import your Turtle file__
You can use the instructions above to import your `*.ttl` or `*.ttl.zip` files into your newly created database. You can either use the RDF4J console or RDF4J workbench GUI to execute SPARQL queries.


## Building pbprdf

__Prerequisite: [sbt](http://www.scala-sbt.org/) 1.x and Java 8 or later must be in your path__
* [Installing SBT](https://www.scala-sbt.org/1.x/docs/Setup.html)
* [Install sbt 1.x on Mac](https://www.scala-sbt.org/1.x/docs/Installing-sbt-on-Mac.html)
* [Install sbt 1.x on Unix](https://www.scala-sbt.org/1.x/docs/Installing-sbt-on-Linux.html)
* [Install sbt 1.x on Windows](https://www.scala-sbt.org/1.x/docs/Installing-sbt-on-Windows.html)

Mac or Unix: 
```
$ git clone https://github.com/andrewstellman/pbprdf.git
$ cd pbprdf
$ sbt assembly
$ ./pbprdf
```

Windows:
```
C:\Users\Public\src>git clone https://github.com/andrewstellman/pbprdf.git
C:\Users\Public\src>cd pbprdf
C:\Users\Public\src\pbprdf>sbt assembly
C:\Users\Public\src\pbprdf>pbprdf
```

*(The above commands use [sbt-assembly](https://github.com/sbt/sbt-assembly) to create a fat JAR.)*

### Other useful build commands

Compile the code and run the unit tests:
```
$ sbt compile test
```

Generate Eclipse project files (via [sbteclipse](https://github.com/sbt/sbteclipse):
```
$ sbt eclipse
```

Generate sample Turtle from the unit test data and print it to the console

using the script:
```
$ ./pbprdf src/test/resources/com/stellmangreene/pbprdf/test/htmldata/
```

via SBT:
```
$ sbt ""run src/test/resources/com/stellmangreene/pbprdf/test/htmldata/""
```
"
37,adeshpande3/March-Madness-2017,Jupyter Notebook,"# March-Madness-2017
Kaggle Competition for Predicting NCAA Basketball Tourney Games. [Link](https://adeshpande3.github.io/adeshpande3.github.io/Applying-Machine-Learning-to-March-Madness) to the associated blog post I wrote. 

* **March Madness 2017.ipynb** - File with all the main data anaylsis and machine learning models. 
* **Machine Learning and Data Analysis.ipynb** - More for experimental models and a couple more data visualizations. 
* **Predictions for 2017 Bracket.ipynb** - Shows you how to create the prediction CSV file in a format that is suitable for Kaggle. 
* **Applying Deep Learning.ipynb** - Tried deep learning models (TLDR: They didn't really work)

[Round 2 (March Madness 2018)](https://github.com/adeshpande3/March-Madness-2018)
"
38,octonion/basketball,PLpgSQL,"The shell script ""demo.sh"" loads scraped data alias tables
between the two data sets (NCAA and Basketball Reference)
for schools and players. It then runs sample R code that does
a simple stepwise regression to detect some NCAA features
that impact NBA playing time 1 year out from the draft.

You won't be able to run these without installing PostgreSQL,
R etc., but I've included two text files showing the results. The
first is ""script_output.txt"" which shows the output of the ""demo.sh""
script (including the total time take - about 12 seconds).

The file ""feature_selection.txt"" shows the results of the stepwise
regression.

This is the final model - no surprise, the pick number dominates
in a non-linear way. Also settled on were height, position, games,
assists per game and steals per game. I did not examine any
interaction terms, nor did I look at other measures of NBA value,
but these are straightforward given the database (up to the
limitations of my scraped data, of course).

I haven't adjusted college performance for NCAA strength of
schedule yet.
"
39,skekre98/NBA-Search,Python,"# NBA-Search

This is an NBA Analytics website with multiple components such as a chatbot, blogs, and predictions. All the data for the site is being scraped from [Basketball Reference](https://www.basketball-reference.com). This project is made possible by the hard working members of the open source community!

## System Design
![System Design](static/img/design.png)

## Building locally

1. Clone the repository locally:
   ```
   git clone https://github.com/skekre98/NBA-Search.git
   ```

2. Run the following command to set up all necessary dependencies:
   ```
   ./setup.sh
   ```
   - you will likely need to give the setup script permission to execute

3. Run the following command to deploy the web app on your localhost:
   ```
   python main.py run
   ```
<p align=""center"">
     <img src=""/static/img/site.png"">
</p>

4. Run the following command to run the unit tests:
   ```
   python main.py test
   ```
   You can also add you own unit tests in *test.py*

## Contributing

There is a lot to do so contributions are really appreciated! This is a great project for early stage developers to work with.

To begin it is recommended to start with issues labelled as [good first issue](https://github.com/skekre98/NBA-Search/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22).


How to get started:

1. Fork the NBA-Search repo.
2. Create a new branch in you current repo from the 'master' branch with issue label.
3. 'Check out' the code with Git or [GitHub Desktop](https://desktop.github.com/)
4. Check [contributing.md](CONTRIBUTING.md)
5. Push commits and create a Pull Request (PR) to NBA-Search

## Dependencies
* [Flask](https://flask.palletsprojects.com/en/1.1.x/) - The framework used to build the web app.
* [Beautiful Soup](https://www.crummy.com/software/BeautifulSoup/bs4/doc/) - The HTML parser used for web scraping.
* [Sklearn](https://scikit-learn.org/stable/) - The machine learning library used to implement information retrieval.
* [Pandas](https://pandas.pydata.org/docs/) - The python library used for data manipulation.
"
40,chonyy/basketball-shot-detection,Python,"This is the pure source python version (without Flask) of the main project [AI Basketball Analysis](https://github.com/chonyy/AI-basketball-analysis)

## Judging Basketball Shots
* **Orange:** Detected hoop
* **Blue:** Detected basketball 
* **Purple:** Undetermined shot
* **Red:** Miss
* **Green:** Shot went in
<p align=center>
    <img src=""img/judging.gif"" width=""858"" height=""483.34"">
</p>

## Detected Basketball and Hoop
<p align=center>
    <img src=""img/demo.gif"" width=""717.552"" height=""432.432"">
</p>

## Basketball Trajectory Fit to Curve
<p align=center>
    <img src=""img/trajectory.png"">
</p>

## Connected Basketball Detection Points
<p align=center>
    <img src=""img/trajectory_raw.png"">
</p>
"
41,virajsanghvi/d3.basketball-shot-chart,HTML,"# d3.basketball-shot-chart

This visualization aims to become a generic means of generating charts on a basketball court. Currently it only supports hexbin shot charts, with lots of flexibility, but is alpha quality and will be refactored to support other binning mechanisms and other mark types on top of a basketball court.

Currently customizable:

- Court dimensions/lines
- Binning definition
- Hexagon size range and color range
- Integrating different shot chart datasets
- Titles and labels

## Setup

- Include ```d3.js```
- Include ```hexbin.js``` [d3.hexbin](https://github.com/virajsanghvi/d3-plugins/tree/master/hexbin) - NOTE: this is a fork
- Include ```d3.chart.js``` - [d3.chart](http://misoproject.com/d3-chart/)
- Include ```d3.chart.defaults.js``` [d3.chart.defaults](https://github.com/virajsanghvi/d3.chart.defaults)
- Include ```d3.basketball-shot-chart.js```
- Include ```d3.basketball-shot-chart.css``` (or include the sass file)

## Examples

This library is currently used to generate the shot charts at [tothemean](http://tothemean.com/tools/shot-charts), and there's a [blog post that walks through using this chart](FIXME).

If you clone the repo, you'll also find a simple example in the ```example``` directory.

## To use:

Generally, you likely have some shot chart data that's an array of data points representing shots, including the x, y position on the court, and whether the shot was made: 

```
  var data = [{""x"":2,""y"":9,""made"":1},{""x"":2,""y"":8,""made"":1},...];
```

You can continue with this, or you can also self aggregate to reduce the size/complexity of the data, and capture number of makes and attempts at a location:

```
  var data = [{""x"":2,""y"":9,""made"":3,""attempts"":3},{""x"":2,""y"":8,""made"":0,""attempts"":4},...];
```

NOTE: Even in this scheme, a point for the same location can be repeated, as all points will be aggregated as part of the binning process (which is how we handle the first simple case).

Once we have our data, we can quickly chart it:

```javascript
  var chart = d3.select(el)
    .append(""svg"")
    .chart(""BasketballShotChart"")
      .draw(data); 
```

By default, the shot chart visualization recognizes the data structure above, but that can easily be configured with the options below. Also, by default, the heat chart is based on a range of shooting 0% to 100%. Most shot charts you've probably seen compare to the average, and its up to you to calculate that, but you can use the options below to update the range of values for the heatMap, and to make the hexagon colors or radiuses based on any value from your data you want.

# Options

You can pass any of these options when creating a new chart. You can change them through public setters, but the shot chart won't autoimically pick them up - yet.

These are all defined in the code, and I recommend looking there for more information on how they're actually utilized.

- basketDiameter: basketball hoop diameter (ft) (default: 1.5) 
- basketProtrusionLength: distance from baseline to backboard (ft) (default: 4)
- basketWidth: backboard width (ft) (default: 6)
- colorLegendTitle: title of hexagon color legend (default: 'Efficiency')
- colorLegendStartLabel: label for starting of hexagon color range (default: '< avg')
- colorLegendEndLabel: label for ending of hexagon color range (default: '> avg')
- courtLength: full length of basketball court (ft) (default: 94)  
- courtWidth: full width of basketball court (ft) (default: 50)
- freeThrowLineLength: distance from baseline to free throw line (ft) (default: 19)
- freeThrowCircleRadius: radius of free throw line circle (ft) (default: 6)
- heatScale: d3 scale for hexagon colors (default: d3 quantize scale if [0, 1] domain and colors from Goldsberry's shot charts)
- height: height of svg, specifying won't change scale of chart (default: undefined)
- hexagonBin: method of aggregating points into a bin (e.g. function (point, bin) {...}) (default: bins by aggregating makes and attempts from points) 
- hexagonBinVisibleThreshold: how many points does a bin need to be visualized (default: 1)
- hexagonFillValue: method to determine value to be used with specified heatScale (e.g. function (bin) {...}) (default: returns bin.made/bin.attempts)
- hexagonRadius: bin size with regards to courth width/height (ft) (default: .75)
- hexagonRadiusSizes: discrete hexagon size values that radius value is mapped to, intentionally hides low frequency points (default: [0, .4, .6, .75])
- hexagonRadiusThreshold: how many points in a bin to consider it while building radius scale (default: 2)
- hexagonRadiusValue: method to determine radius value to be used in radius scale (e.g. function (bin) {...}) (default: returns bin.attempts)
- keyMarkWidth: width of key marks (dashes on side of the paint) (ft) (default: .5)
- keyWidth: width the key (paint) (ft) (default: 16)
- restrictedCircleRadius: radius of restricted circle (ft) (default: 4)
- sizeLegendTitle: title of hexagon size legend (default: 'Frequency')
- sizeLegendSmallLabel: label of start of hexagon size legend (default: 'low')
- sizeLegendLargeLabel: label of end of hexagon size legend (default: 'high')
- threePointCutoffLength: distance from baseline where three point line because circular (ft) (default: 14)
- threePointRadius: distance of three point line from basket (ft) (default: 23.75)
- threePointSideRadius: distance of corner three point line from basket (ft) (default: 22)
- title: title of chart (default: 'Shot chart')
- translateX: method to determine x position of a bin on the court (default: x value)
- translateY: method to determine y position of a bin on the court (default: flips y axis to opposite side of court)
- width: width of svg (default: 500)
"
42,OwlTing/AI_basketball_games_video_editor,Python,"# AI Basketball Games Video Editor

![](https://img.shields.io/static/v1?label=python&message=3.6&color=blue)
![](https://img.shields.io/static/v1?label=pytorch&message=1.3&color=<COLOR>)
![](https://img.shields.io/static/v1?label=tensorrt&message=7.0.0&color=%3CCOLOR%3E)
[![](https://img.shields.io/static/v1?label=license&message=Apache2&color=green)](./License.txt)

AI Basketball Games Video Editor is a command-line program to get basketball highlight video by PyTorch YOLOv4 object  detection.
Analyze basketball and basketball hoop locations collected from  object detection.
It can get shot frame index and cut video frame to merge highlight video.

```
├── README.md
├── video_editor.py                   demo to get basketball highlight video
├── pytorch_YOLOv4                    pytorch-YOLOv4 source code
│   ├── weights                       need to download weights
│   └── ...
├── tool
│   ├── utils_basketball.py           detect basketball shots algorithm
│   └── utils.py                  
├── dataset
│   └── your_video_name.mp4
├── result
│   ├── obj_log_name.data             save frame information and object detect result
│   └── your_output_video_name.mp4   
```
<p float=""left"">
  <img src=""https://github.com/OwlTing/AI_basketball_games_video_editor/blob/master/pic/introduction.gif"" width=""267"" height=""225""/>
  <img src=""https://github.com/OwlTing/AI_basketball_games_video_editor/blob/master/pic/introduction.jpg"" width=""267"" height=""225""/>
  <img src=""https://github.com/OwlTing/AI_basketball_games_video_editor/blob/master/pic/gif_highlight.gif"" width=""267"" height=""225""/>
</p>

# 0. Environments

## 0.1 Get a copy
```sh
git clone https://github.com/OwlTing/AI_basketball_games_video_editor.git
```

## 0.2 Create virtual environments
```sh
conda create --name py36_env python=3.6
conda activate py36_env
cd AI_basketball_games_video_editor
```

## 0.3 Requirements
Debian 10  
python 3.6  
numpy  
pandas  
tqdm  
cv2  
pytorch 1.3.0  
Please refer to the official documentation for installing pytorch https://pytorch.org/get-started/locally/  
More details for different cuda version https://pytorch.org/get-started/previous-versions/  
Example:  
conda install pytorch==1.3.0 torchvision==0.4.1 cudatoolkit=10.0 -c pytorch  

Optional (For tensorrt yolov4 object detector engine):  
tensorrt 7.0.0  
Please refer to the official documentation for installing tensorrt with different cuda version  
https://docs.nvidia.com/deeplearning/tensorrt/install-guide/index.html  
Example: (For Debian 10 cuda 10.0)  
1. mkdir tensorrt  
2. From https://developer.nvidia.com/tensorrt, to download 
   `TensorRT-7.0.0.11.Ubuntu-18.04.x86_64-gnu.cuda-10.0.cudnn7.6.tar.gz`  
   (select TensorRT 7.0) in the directory `tensorrt/`  
3. tar xzvf `TensorRT-7.0.0.11.Ubuntu-18.04.x86_64-gnu.cuda-10.0.cudnn7.6.tar.gz`  
4. export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/<path_your_tensorrt>/TensorRT-7.0.0.11/lib  
5. cd TensorRT-7.0.0.11/python/  
6. pip install `tensorrt-7.0.0.11-cp36-none-linux_x86_64.whl`   
7. 
```
sudo cp /<path_your_tensorrt>/TensorRT-7.0.0.11/lib/libnvinfer.so.7 /usr/lib/ ;  
sudo cp /<path_your_tensorrt>/TensorRT-7.0.0.11/lib/libnvonnxparser.so.7 /usr/lib/ ;  
sudo cp /<path_your_tensorrt>/TensorRT-7.0.0.11/lib/libnvparsers.so.7 /usr/lib/ ;  
sudo cp /<path_your_tensorrt>/TensorRT-7.0.0.11/lib/libnvinfer_plugin.so.7 /usr/lib/ ;  
sudo cp /<path_your_tensorrt>/TensorRT-7.0.0.11/lib/libmyelin.so.1 /usr/lib/  
```    
8. pip install pycuda  

# 1. Weights Download

## 1.1 darknet2pytorch
- google(https://drive.google.com/file/d/15waE6I1odd_cR3hKKpm1uXXE41s5q1ax)
- `mkdir pytorch_YOLOv4/weights/`
- download file `yolov4-basketball.weights` in the directory `pytorch_YOLOv4/weights/`

## 1.2 tensorrt
- google(https://drive.google.com/file/d/1_c8uhyi47Krs5gAbRR66zzYKaxGNnzEs)
- `mkdir pytorch_YOLOv4/weights/`
- download file `yolov4-basketball.trt` in the directory `pytorch_YOLOv4/weights/`


# 2. Use AI Basketball Games Video Editor

## 2.1 Prepare your basketball video
- download your basketball video in the directory `dataset/`

## 2.2 Prepare output folder
- `mkdir result`

## 2.3 Run the demo
```sh
python video_editor.py --video_path VIDEO_PATH --output_path OUTPUT_PATH --output_video_name OUTPUT_VIDEO_NAME [OPTIONS]

# example
python video_editor.py --video_path dataset/basketball_demo.mp4 --output_path result/demo --output_video_name out_demo.mp4
```

- It will generate `your_output_video_name.mp4 obj_log_name.data` in the directory `result/`

- If you had finished extracting features. You can use `--read_flag 1` to read log for different output video mode. 

- If you use pytorch yolov4 object detector engine `--inference_detector pytorch`.  
  For image input size, you can select any inference_size = (height, width) in   
  height = 320 + 96 * n, n in {0, 1, 2, 3, ...}  
  width = 320 + 96 * m, m in {0, 1, 2, 3, ...}  
  Exmaple `--inference_size (1184, 1184)` or `--inference_size (704, 704)`  
  Default inference_size is (1184, 1184)
  
- If you use tensorrt yolov4 object detector engine `--inference_detector tensorrt`.  
  For image input size, you only can select `--inference_size (1184, 1184)`.  
  Tensorrt engine 3x faster than pytorch engine fps.

- You can use `--output_mode shot` to select different output video mode.
  ```
  output video mode  
  full            show person basketball basketball_hoop frame_information  
  basketball      show basketball basketball_hoop frame_information  
  shot            show basketball shot frame_information  
  standard        show frame_information  
  clean           only cutting video
  ```
![image](https://github.com/OwlTing/AI_basketball_games_video_editor/blob/master/pic/output_mode_clean.jpg)
![image](https://github.com/OwlTing/AI_basketball_games_video_editor/blob/master/pic/output_mode_full.jpg)
![image](https://github.com/OwlTing/AI_basketball_games_video_editor/blob/master/pic/output_mode_basketball.jpg)
![image](https://github.com/OwlTing/AI_basketball_games_video_editor/blob/master/pic/output_mode_shot.jpg)

- You can refer the command-line options.
  ```
  optional arguments:
  -h, --help                                       show this help message and exit
  
  --video_path VIDEO_PATH                          input video path (default: None)
                                                   
  --output_path OUTPUT_PATH                        output folder path (default: None)
                                                   
  --output_video_name OUTPUT_VIDEO_NAME            output video name (default: None)
                                                   
  --highlight_flag HIGHLIGHT_FLAG                  select 1 with auto-generated highlight or 
                                                   0 without auto-generated highlight (default: 1)
                                                   
  --output_mode OUTPUT_MODE                        output video mode 
                                                   full       show person basketball basketball_hoop frame_information 
                                                   basketball show basketball basketball_hoop frame_information 
                                                   shot       show basketball shot frame_information 
                                                   standard   show frame_information 
                                                   clean      only cutting video (default: shot)
                                                   
  --process_frame_init PROCESS_FRAME_INIT          start processing frame (default: 0)
                                                   
  --process_frame_final PROCESS_FRAME_FINAL        end processing frame. If process_frame_final < 0, 
                                                   use video final frame (default: -1)
                                                   
  --obj_log_name OBJ_LOG_NAME                      save frame information and obj detect result 
                                                   (default: obj_log_name.data)
                                                   
  --save_step SAVE_STEP                            save obj log for each frame step (default: 2000)
                                                   
  --weight_path WEIGHT_PATH                        Yolov4 weight path (default: pytorch_YOLOv4/weights/yolov4-basketball.weights)
                                                   
  --cfg_path CFG_PATH                              Yolov4 cfg path (default: pytorch_YOLOv4/cfg/yolov4-basketball.cfg)
  
  --num_classes NUM_CLASSES                        num classes = 3 (person/basketball/basketball_hoop) (default: 3)
                                                   
  --namesfile_path NAMESFILE_PATH                  Yolov4 class names path (default: pytorch_YOLOv4/data/basketball_obj.names)
                                                   
  --inference_detector INFERENCE_DETECTOR          object detector engine. You can select pytorch or tensorrt (default: pytorch)
                                                   
  --inference_size INFERENCE_SIZE                  Image input size for inference 
                                                   If you use pytorch yolov4 object detector engine 
                                                   height = 320 + 96 * n, n in {0, 1, 2, 3, ...} 
                                                   width = 320 + 96 * m, m in {0, 1, 2, 3, ...} 
                                                   inference_size= (height, width) 
                                                   
                                                   If you use tensorrt yolov4 object detector engine Image input size for
                                                   inference only with inference_size = (1184, 1184) (default: (1184, 1184))
                                                   
  --read_flag READ_FLAG                            read log mode flag If you had finished extracting features. You can use 
                                                   select 1 to read log for different output video mode. (default: 0)
                                                                                                    
  --cut_frame CUT_FRAME                            cut frame range around shot frame index for highlight video (default: 50)  
  ```

Reference:
- https://github.com/Tianxiaomo/pytorch-YOLOv4
- https://github.com/eriklindernoren/PyTorch-YOLOv3
- https://github.com/marvis/pytorch-caffe-darknet-convert
- https://github.com/marvis/pytorch-yolo3

- Paper Yolo v4: https://arxiv.org/abs/2004.10934
- Source code Yolo v4:https://github.com/AlexeyAB/darknet
- More details: http://pjreddie.com/darknet/yolo/

```
@article{yolov4,
  title={YOLOv4: YOLOv4: Optimal Speed and Accuracy of Object Detection},
  author={Alexey Bochkovskiy, Chien-Yao Wang, Hong-Yuan Mark Liao},
  journal = {arXiv},
  year={2020}
}
```

Contact:  
Issues should be raised directly in the repository.  
If you are very interested in this project, please feel free to contact me (george_chen@owlting.com).  
"
43,jflancer/bigballR,R,"# bigballR

###NOTE THIS DOCUMENTATION IS SLIGHTLY OUTDATED FOLLOWING THE LATEST PACKAGE UPDATE 1/13

`bigballR` is an R package for working with NCAA Basketball data. This 
package primarily revolves around the use of schedule, roster, and play-by-play data via stats.ncaa.com, and
additionally has features to calculate lineups, on/off results, and player game and multi-game statistics.

## Installation

First install the package `devtools` if you haven't already
``` r
#install.packages(""devtools"")
devtools::install_github(""jflancer/bigballR"")
```

## Functionality

**Retrieving Game IDs and Other Information**

Manually, game ids can be found in the url when browsing games, for example:
```4674164``` is the game id for ```https://stats.ncaa.org/game/play_by_play/4674164```

- `get_date_games` data frame with game info and game ids for a given date.
- `get_team_schedule` data frame with game info and ids for a given team.
- `get_team_roster` data frame with player roster information for a given team. 

**Game Scraping Functions**
- `scrape_game` the base function, given a game id will return a cleaned play by play file.
- `get_play_by_play` builds off of scrape_game, allows for compiling from multiple game ids formatted in a vector.

**Data Manipulation Functions**
- `get_lineups` given play-by-play data retrieved from game scraping functions, will calculate a variety of stats for all lineups.
- `on_off_generator` calculate on/off statistics for specified players given lineup data from get_lineups().
- `get_player_stats` calculate a variety of player stats from play-by-play data at either a game or multi-game level.
- `get_player_lineups` acts as an easy way to filter lineup data, specifying players to exclude/include from the lineups.

**Datasets**
- `teamids` dataset includes stats.ncaa team name, team conference, season, and team id for 17-18 and 18-19 seasons

### Use

There are many different progressions and ways to use this package. As an example, here are some natural steps you could take.
``` r
# Get team schedule
# Note: if you don't know the proper team.name (case sensitive), you can look it up in data(""teamids"")
schedule <- get_team_schedule(season = ""2018-19"", team.name = ""Duke"")
# Get play by play for all games played so far in season
play_by_play <- get_play_by_play(schedule$Game_ID)
# Generate all lineups and stats from the play by play
lineups <- get_lineups(play_by_play_data = play_by_play, keep.dirty = T, garbage.filter = F)
# Look at Zion Williamson's on/off statistics with lineups that include Reddish and Barrett
zion_comparison <- on_off_generator(""ZION.WILLIAMSON"", lineups, Included = c(""CAM.REDDISH"",""RJ.BARRETT""))
```

### `scrape_game` / `get_play_by_play`
Functions to retrieve play by play data. scrape_game() works for individual games while get_play_by_play can handle a vector of gameids and will aggregate into a single dataframe. Warns users of potential errors and mistakes made by the game trackers. The number of player discrepancies warning counts displays the number of events players committed when it is found they were not on the court at the time of the event. The substitution mistake warning indicates an unclean substitution was entered. (ex. 2 players enter and 1 leaves)
* game_id | string made up of digits given to each unique game. This can be found in the play-by-play url for each game.
* game_ids | same function as above, but can handle character vectors of any length.

### `get_date_games`
This function returns a schedule for the given date and specified conference. Results are included if applicable, as well as the play-by-play game id
* date | a character object containing a date in the format mm/dd/yyyy. Defaults is previous day (yesterday)
* conference | the common name used for a conference, not sensitive to case, spacing, punctuation, etc.
* conference.ID | alternatively, if the conference ID is known it replace the conference name variable.

### `get_team_schedule`
This function returns a data frame of the schedule for the specified team. This will include game ids used for play-by-play scraping if the game has ended, along with the team scores and attendance. Note: currently, the season/team.name parameters can only be used for the 2016-17, 2017-18, 2018-19 seasons.
* team.id | The unique id given to each college/team for each season. This can be found in the url of the team page.
* season | Season following format yyy1-y2, ex ""2018=19""
* team.name | Alternative to using the id, you can use a team name. This follows the format found in data(ids).

### `get_team_roster`
This function returns a data frame of the roster for the specified team. This will include player names and positions as well as jersey number, height and school year. Note: currently, the season/team.name parameters can only be used for the 2016-17, 2017-18, 2018-19 seasons.
* This takes the same parameters and conditions as get_team_schedule() above

### `get_lineups`
This function takes in a play-by-play dataframe, and generates all possible lineups for both teams. It then calculates a variety of statistics/metrics at a lineup level.
* play_by_play_data | play-by-play data from the functions scrape_game() or get_play_by_play()
* keep.dirty | logical to specify whether or not to filter out potentially inaccurrate data. When FALSE, will remove all rows from games where the number of discrepencies is above the desired count.
* garbage.filter | logical variable to specify whether or not to filter out garbage time entries.
* error.thresh | lets user set their preferred discrepancy threshold with the keep.dirty variable. This means when less than the threshold occurs in a game, it will be considered clean. As defined in scrape_game(), a discrepancy occurs when a player registers an event when they are not found to be on the court.

### `on_off_generator`
This function passes in lineup data and calculates the on/off lineup statistics for all lineup combinations of players specified. This allows users to view on/off statistics for individual players, as well as combinations of multiple players. Users can also specify if they'd like specific players to be included or excluded from all lineups in use
* Players | players desired to be compared with on/off
* Lineup_Data | lineups collected from the get_lineups() function
* Included These Players will be on the court for every lineup considered.
* Excluded These players will be off the court for every lineup considered.

### `get_player_lineups`
This function finds all lineups from a given lineup data source that include/exclude certain players. It acts as a quick way to filter lineups for players.
* Takes same parameters as on_off_generator() with exception to the Players parameter

### `get_player_stats`
This function calculates many player stats for either individual games or aggregate to get multi-game stats.
* Takes all parameters described in get_lineups() function
* multi.games | When false stats will be calculated on a game level. When true all games will be aggregated.
"
44,evansloan/sports.py,Python,"[![PyPI](https://img.shields.io/pypi/v/sports.py.svg)](https://pypi.python.org/pypi/sports.py/)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/sports.py.svg)](https://pypi.python.org/pypi/sports.py/)

[![Build Status](https://travis-ci.org/evansloan/sports.py.svg?branch=master)](https://travis-ci.org/evansloan/sports.py)
[![Coveralls github branch](https://img.shields.io/coveralls/github/evansloan/sports.py/master.svg)](https://coveralls.io/github/evansloan/sports.py?branch=master)
[![License](https://img.shields.io/github/license/evansloan/sports.py.svg)](https://github.com/evansloan/sports.py/blob/master/LICENSE)


# sports.py
Gather live up-to-date sports scores. Baseball, basketball, cricket, football, handball, hockey, rugby, soccer, tennis, and volleyball currently functional

Scrapes data from:
- [scorespro.com](https://www.scorespro.com/)
- [pro-football-reference.com](https://www.pro-football-reference.com/)
- [baseball-reference.com](https://www.baseball-reference.com/)
- [basketball-reference.com](https://www.basketball-reference.com/)
- [hockey-reference.com](https://www.hockey-reference.com/)

## Installation
Python >= 3.5

`pip install sports.py`

## Usage

```python
import sports
```

Valid sports:
- Baseball: `sports.BASEBALL`
- Basketball: `sports.BASKETBALL`
- Cricket: `sports.CRICKET`
- Football: `sports.FOOTBALL`
- Handball: `sports.HANDBALL`
- Hockey: `sports.HOCKEY`
- Rugby Union: `sports.RUGBY_U`
- Rugby League: `sports.RUGBY_L`
- Soccer: `sports.SOCCER`
- Tennis: `sports.TENNIS`
- Volleyball: `sports.VOLLEYBALL`

**Get a single match**

`get_match()` takes three parameters:

- `sport`: Name of sport being played (see above for a list of valid sports)
- `team1`: Name of city or team in a match (Not case-sensitive)
- `team2`: Name of city or team in a match (Not case-sensitive)

`get_match()` returns a single Match object which contains the following properties:
- `sport`: Sport of the match
- `league`: League of the match
- `home_team`: Home team
- `away_team`: Away team
- `home_score`: Home team score
- `away_score`: Away team score
- `match_time`: Current match time
- `match_date`: Date the match was played
- `match_link`: Link to an XML file containing match data

```python
match = sports.get_match(sports.TENNIS, 'Murray', 'Federer')
```

**Get multiple matches**

`get_sport()` takes one parameter:
- `sport`: Name of sport (see above for list of valid sports)

`get_sport()` returns a list of Match objects which contain the same properties described above

```python
matches = sports.get_sport(sports.BASKETBALL)
```

**Get all live matches**

`all_matches()` returns a dictionary of Match objects grouped by sport conatining data from all live matches.

```python
all_matches = sports.all_matches()
baseball = all_matches['baseball']
```

**Get extra team info**

*Only works with MLB, NBA, NFL, and NHL teams*

Get team information including overall record, championships won and more.

`get_team()` takes two parameters:
- `sport`: Sport of the team the find
- `team`: Name of city or team to find (Not case-sensitive)

Properties available to all valid teams/sports:
- `name`: Name of the team
- `seasons`: Total number of seasons played
- `record`: Overall regular season record
- `champs`: Number of total championships (Includes pre-merger champs for NFL)
- `leaders`: Overall team leaders for certain statistical categories
- `raw`: Dictionary containing all gathered info

Properties available to only MLB teams:
- `pennants`: Total number of AL/NL championships

Properties available to only NFL teams:
- `super_bowls`: Total number of Super Bowls

Properties available to only NHL teams:
- `points`: Total number of regular season points earned

Properties available to both NFL/NHL teams:
- `playoff_record`: Overall playoff record

Properties available to MLB, NBA, NHL teams:
- `playoff_app`: Total number of playoff appearances

```python
pirates = sports.get_team(sports.BASEBALL, 'pirates')
print(pirates.pennants)

penguins = sports.get_team(sports.HOCKEY, 'penguins')
print(penguins.points)

steelers = sports.get_team(sports.FOOTBALL, 'steelers')
print(steelers.super_bowls)

sixers = sports.get_team(sports.BASKETBALL, '76ers')
print(sixers.playoff_app)
```
"
45,dtarlow/Machine-March-Madness,Python,"DEPENDENCIES:
theano: http://deeplearning.net/software/theano/
numpy
scipy
(optional) matplotlib: http://matplotlib.sourceforge.net/

Note: maccam912 reports that the link above is currently down (Feb 28, 2012) but says, ""I see you can still get it with 'easy_install Theano' or downloading it from http://pypi.python.org/pypi/Theano or the repo on github. Just a heads up. I don't use git or github often so I wasn't sure if the issues section was the place to point this out or not.""


DATA:
Right now, only the aggregate data is really being used.  To check that 
you can load the data properly, run

> python march_madness_data.py

this should output the following:
Skipped 1426 entries due to UNK
After loading simple data
2006-2007: 5125 games
2007-2008: 5248 games
2008-2009: 5332 games
2009-2010: 5363 games
After removing tournament games
2006-2007: 5047 games
2007-2008: 5161 games
2008-2009: 5237 games
2009-2010: 5269 games

So it loaded about 5000 games from each of 4 past seasons.  

If you'd like to dig into the full data, look for 

def load_full_data(self):

in march_madness_data.py.


BRACKET:
We don't have data that specifically identifies which games were a part 
of the tournament, so we do it programmatically.  Most of the code is
called automatically when you make a MarchMadnessData object.  To see the
results, you can run

> python bracket.py

This should output the filled-in tournament bracket for previous seasons.
It should look like this:

2008-2009
nav---nav---nav---nav---nav---nav
raa     |     |     |     |     |   
lav---lav     |     |     |     |   
bav           |     |     |     |   
              |     |     |     |   
gaj---gaj---gaj     |     |     |   
aac     |           |     |     |   
wao---wao           |     |     |   
iae                 |     |     |   
                    |     |     |   
oae---oae---oae---oae     |     |   
mbq     |     |           |     |   
max---max     |           |     |   
cbg           |           |     |   
              |           |     |   
sci---sci---sci           |     |   
scc     |                 |     |   
aar---aar                 |     |   
tad                       |     |   

...

The three-letter code mappings to team names are in ./data/YahooTeamCodeMapping.csv.


LEARNING:
There is also starter code for learning, but this is still in progress.

The simplest thing to try is to run

> python learn_synthetic.py

This will run learning with the simplest model, on synthetic data.  The first run
will take a bit longer at startup, because theano is doing the symbolic differentiation.


You can then move on to

> python learn_real.py

This will learn, but on the real data now.  This code is not finished, but it should be
enough structure to get you started.

In model.py, you can see three different models, of increasing level of complexity.  You
can select between these in the learn_*.py scripts.


Some TODOs for the ambitious:

- Load the full data and verify it against the aggregate data.

- Set up a proper validation/testing framework, so we can evaluate different methods
  properly.  Perhaps we want to do leave-one-out cross validation.

- Try different objective functions in the theano models -- what do we actually
  want to optimize?

- Think about how to better include pace of the game

- Improve the optimization (maybe using momentum, LBFGS, or conjugate gradients?)"
46,chychen/BasketballGAN,Python,"<img align=""right"" src=""https://drive.google.com/uc?export=view&id=1W4h1WA4Lp1c_BrTmPBPwvF1Udf7SdzLO"" width=""200"" title=""A Generated Play""/>

# BasketballGAN

### Generate the ghosting defensive strategies given offensive sketch.

![](https://drive.google.com/uc?export=view&id=1lmxvBG-PTLg4vhEF_hmG1IS20vDEyvyv)

<img align=""right"" src=""https://drive.google.com/uc?export=view&id=1QWN9BtFgaAKA1tvx_ePQku934CeCWIRl"" width=""500"" title=""A Generated Play""/><br>

## [Paper](https://arxiv.org/abs/1909.07088) | [CGVLab](https://people.cs.nctu.edu.tw/~yushuen/)<br>[Video](https://youtu.be/NTir0-znPyw) | [Supplemental](https://drive.google.com/a/nvidia.com/file/d/1dXMA_1AjpPu7J4_Iw1yb6pp-9d9Lp2uN/view?usp=sharing)

### BasketballGAN: Generating Basketball Play Simulation through Sketching

Hsin-Ying Hsieh<sup>1</sup>, Chieh-Yu Chen<sup>2</sup>, Yu-Shuen Wang<sup>1</sup> and Jung-Hong Chuang<sup>1</sup>

<sup>1</sup>National Chiao Tung University, 

<sup>2</sup>NVIDIA Corporation

Accepted paper in [ACMMM 2019](https://www.acmmm.org/2019/).

## Prerequisites

- OS: Linux
- [NVIDIA Dokcer](https://github.com/NVIDIA/nvidia-docker)
- [NVIDIA NGC Tensorflow Docker Image](https://ngc.nvidia.com/catalog/containers/nvidia:tensorflow)
- NVIDIA GPU (V100 16GB)

## Getting Stated

```bash
~$ git clone https://github.com/chychen/BasketballGAN.git
~$ cd BasketballGAN
BasketballGAN$ docker login nvcr.io
BasketballGAN$ docker pull nvcr.io/nvidia/tensorflow:19.06-py2
BasketballGAN$ docker run --runtime=nvidia -it --rm -v $PWD:$PWD --net host nvcr.io/nvidia/tensorflow:19.06-py2 bash
root@c63207c81408:~/BasketballGAN$ apt update
root@c63207c81408:~/BasketballGAN$ apt install ffmpeg
```

### Download Dataset 

- create 'data' folder
- save [dataset](https://drive.google.com/file/d/12DRJBIyN20vwRyfywvCXo-nNDf0UBPjZ/view?usp=sharing) under folder 'data'

```bash
BasketballGAN$ mkdir data
```

### Training

```bash
BasketballGAN$ cd src
BasketballGAN/src$ python Train_Triple.py --folder_path='tmp' --data_path='data'
```

### Logs/Samples/Checkpoints

```bash
- ""BasketballGAN/src/tmp/Log"": training summary for tensorboard.
- ""BasketballGAN/src/tmp/Samples"": generated videos sampled on different epoches.
- ""BasketballGAN/src/tmp/Checkpoints"": tensorflow checkpoints on different iterations.
```

### Monitoring

- Sampled Videos
    - Using Simple HTTP Server to monitor sampled videos while training.
    - [Simple HTTP Server (http://127.0.0.1:8000)](http://127.0.0.1:8000/tmp/Log/Samples)

```bash
BasketballGAN/src$ python -m http.server 8000
```

- Training Logs
    - [Tensorboard (127.0.0.1:6006)](http://127.0.0.1:6006)

```bash
BasketballGAN/src$ tensorboard --logdir='tmp/Log'
```

<img src=""https://drive.google.com/uc?export=view&id=10NNSibWbU0oMr9ziaQeOcgft44NwBVf2"" width=""600"" title=""Earth Moving Distance""/>

### Public Relations

- [AAAS Science News](https://www.sciencemag.org/news/2019/09/watch-ai-help-basketball-coaches-outmaneuver-opposing-team)
- [Deeplearning.ai FB](https://www.facebook.com/deeplearningHQ/posts/1431901466962064)
- [Deeplearning.ai The Batch](https://info.deeplearning.ai/the-batch-google-achieves-quantum-supremacy-amazon-aims-to-sway-lawmakers-ai-predicts-basketball-plays-face-detector-preserves-privacy)
- [NVIDIA GTC 2020 Poster](https://www.nvidia.com/content/dam/en-zz/Solutions/gtc/conference-posters/gtc2020-posters/Deep_Learning_Data_Science_05_P21206_Jay_Chen_Web.pdf)

## Citation
If you find this useful for your research, please use the following.

``` 
@article{hsieh2019basketballgan,
  title={BasketballGAN: Generating Basketball Play Simulation Through Sketching},
  author={Hsieh, Hsin-Ying and Chen, Chieh-Yu and Wang, Yu-Shuen and Chuang, Jung-Hong},
  journal={arXiv preprint arXiv:1909.07088},
  year={2019}
}
```
"
47,skakac/2d-basketball-unity3d,C#,"# 2D Ball Shootout Unity3d [Source Code]

If you have any questions -> http://twitter.com/skakac
<br /><br />
https://play.google.com/store/apps/details?id=com.skakac.bshootout<br />
Ball Shootout game <br />
Super simple basketball game, using popular idea with some changes.<br />
You can try out 2 player multiplayer mode, and compete on global leaderboard.<br />

<br />
How to play:<br />
1. Touch the screen.<br />
2. Drag to change predicted path.<br />
3. Release. <br />
4. You can always drag and release behind the basket to release without shooting the ball. <br />
5. In options menu you can change shoot power. <br />
Follow on twitter: http://twitter.com/skakac<br />

"
48,VamshiIITBHU14/BasketBallARKit,Swift,"# BasketBallARKit
Hello Everyone, This project talks about basics of ARKit introduced by Apple in iOS11. Please note that ARKit is only capable wih 
devices which use A9, A10, A11 chips and the devices that use these chips are:

a) iPhone 6s and 6s Plus 
b) iPhone 7 and 7 Plus 
c) iPhone SE
d) iPad Pro (9.7, 10.5 or 12.9) – both first-gen and 2nd-gen
e) iPad (2017)
f) iPhone 8 and 8 Plus
g) iPhone X

Now coming to the project, it shows how to build a basic BasketBall app using ARKit. Taking it step by step:

PS: Please note that we have to choose Augmented Reality App as template when you create the project.

1) Camera Permission:

This step involves asking for permission from user for his Camera access. This can be done by adding 'Privacy - Camera Usage Description : This application will use the camera for Augmented Reality' as key-value in pair in info.plist

2) Adding the hoop:

After you launch the app, you just see the world infront of you through phone's camera. Now you can augment a Basketball hoop by just adding the code below:

```
func addBackboard(){
        guard  let backboardScene = SCNScene(named:""art.scnassets/hoop.scn"") else{return}
        guard let backboardNode = backboardScene.rootNode.childNode(withName: ""backboard"", recursively: false) else{return}
        backboardNode.position = SCNVector3(x:0.0, y:0.5, z:-3)
        
        let physicsShape = SCNPhysicsShape(node: backboardNode, options: [SCNPhysicsShape.Option.type : SCNPhysicsShape.ShapeType.concavePolyhedron])
        let physicsBody = SCNPhysicsBody(type: .static, shape: physicsShape)
        backboardNode.physicsBody = physicsBody
        
        sceneView.scene.rootNode.addChildNode(backboardNode)
        currentNode = backboardNode
    }
```

<img width=""462"" alt=""screen shot 2017-12-11 at 1 55 52 pm"" src=""https://user-images.githubusercontent.com/21070922/33821763-1db1e81e-de7b-11e7-8ac2-16fe006176b0.png"">


Then we add a Tap Gesture onto the SceneView to aim the ball at the basket. 

```
func registerTapGestureRecogniser(){
        let tap = UITapGestureRecognizer(target: self, action: #selector(handleTap(gesture:)))
        sceneView.addGestureRecognizer(tap)
    }
    
    @objc func handleTap(gesture:UIRotationGestureRecognizer){
        //scene view to be accessed
        //access the center point of the sceneview
        guard let sceneView = gesture.view as? ARSCNView else{return}
        guard let centerPoint = sceneView.pointOfView else{return}
        
        let cameraTransform = centerPoint.transform
        let cameraLocation = SCNVector3(x:cameraTransform.m41, y: cameraTransform.m42, z:cameraTransform.m43)
        let cameraOrientation = SCNVector3(x: -cameraTransform.m31, y: -cameraTransform.m32, z: -cameraTransform.m33)
        let cameraPosition = SCNVector3Make(cameraLocation.x + cameraOrientation.x, cameraLocation.y + cameraOrientation.y , cameraLocation.z + cameraOrientation.z)
        
        let ball = SCNSphere()
        let material = SCNMaterial()
        material.diffuse.contents = UIImage(named:""basketballSkin.png"")
        ball.materials = [material]
        
        let ballNode = SCNNode(geometry:ball)
        ballNode.position = cameraPosition
        
        let physcisShape = SCNPhysicsShape(geometry: ball, options: nil)
        let physicsBody = SCNPhysicsBody(type: .dynamic, shape: physcisShape)
        
        ballNode.physicsBody = physicsBody
        let forceVector:Float = 6
        ballNode.physicsBody?.applyForce(SCNVector3(x:cameraOrientation.x * forceVector, y:cameraOrientation.y * forceVector, z: cameraOrientation.z * forceVector), asImpulse:true)
        
        sceneView.scene.rootNode.addChildNode(ballNode)
        
    }
```

>diffuse property of SCNMaterial deals with how light is rendered on the material and contents property deals with the actual parents of the material
    

<img width=""454"" alt=""screen shot 2017-12-11 at 3 23 44 pm"" src=""https://user-images.githubusercontent.com/21070922/33825353-5c0ed228-de87-11e7-85ff-6890906c38c8.png"">

Optional:

Moving objects in AR Space is really straight forward. Here I am posting two methods to move the hoop in XY plane in a horizontal and circuit manner:

```
func horizontalAction (node:SCNNode){
        let leftAction = SCNAction.move(by: SCNVector3(x:-1, y:0, z:0), duration: 2)
        let rightAction = SCNAction.move(to: SCNVector3(x:1, y:0, z:0), duration: 2)
        let actionSequence = SCNAction.sequence([leftAction , rightAction])
        node.runAction(SCNAction.repeat(actionSequence, count: 2))
    }
 ```
 
 ```
 func roundAction(node:SCNNode){
        let upright = SCNAction.move(by: SCNVector3(x:1, y:1, z:0), duration: 2)
        let downright = SCNAction.move(to: SCNVector3(x:1, y:-1, z:0), duration: 2)
        let downLeft = SCNAction.move(by: SCNVector3(x:-1, y:-1, z:0), duration: 2)
        let upLeft = SCNAction.move(to: SCNVector3(x:-1, y:1, z:0), duration: 2)
        let actionSequence = SCNAction.sequence([upright , downright , downLeft , upLeft])
        node.runAction(SCNAction.repeat(actionSequence, count: 2))
    }
 ```

"
49,AdaRoseCannon/basketball-demo,HTML,"# basketball-demo
"
50,lbenz730/NCAA_Hoops,R,"# NCAA_Hoops

All the code that powers my NCAA Men's Basketball R Shiny Web Application [application](https://lbenz730.shinyapps.io/recspecs_basketball_central/).


### Application Files:
* __ui.R:__ User Interface for web application
* __sever.R:__ Backend for web application
* __global.R:__ Pre-loads data/helper functions for web application.

### Other Files:
__Model_3.0.R:__ Control panel for everything NCAA Hoops related that the application ultimately shows:

* Power Rankings
* Predictions
* Conference simulations and distributions
* Bracketology
* Ivy League simulations/playoff swing factor (not in application)

__ncaa_hoop_scraper.R:__ An algorithim to scrape game schedule/result data from the NCAA website. This script is mostly copied (with slight modifications) from a scrape written by Prof. Jay Emerson and used in STAT 230: Introductory Data Analysis (Spring 2016).

__3.0_Files/:__ A collection of files that are essentially the ""inner workings"" of everything done in this project. Every script in this directory contains functions. Those functions are executed in the master file, __Model_3.0.R__.
* __Ivy_Sims.R:__ Simulates the Ivy League Basketball season in order to estimate playoff odds and calcuates the ""Playoff Swing Factor"" of each conference game.
* __bracketology.R:__ Assembles the predicted bracket:
* __helpers.R:__ A file with miscellanious functions used throughout the project.
* __powerrankings.R:__ Computes the team rankings.
* __record_evaluator.R:__ Examines the quality of each team's resume by computing Quality Wins (as recently redefinined by the NCAA tournament selection committee), Strength of Record, and Wins Above Bubble.
* __rpi.R:__ Predictions end of season RPI for each team.
* __tourney_sim.R:__ Function for simulating college basketball tournaments with parameters left to the user. The user specifies ```teams``` (from best seed to worst seed), along with a vector of ```seeds```. Note that after games have been played, the ```seeds``` vector must be entered in the order of highest possible seed for each given slot. For example, if we have quarterfinals where the matchups are 1 vs. 9, 2 vs. 7, 3 vs. 14, and 4 vs. 12, we'd set ```seeds``` = (1, 2, 3, 4, 12, 14, 7, 9), as 5, 6, 7, 8 are the ""chalk"" seeds occupied by 12, 14, 7, and 9 in this hypothetical 15 team tournament. The user must also enter the number of single ```byes```, the number of ```double_byes```, the number of simulations to run ```nsims```, and a parameter for home court advantage, ```hca```. If the tournament is played at a neutral site, set ```hca = NA```. If the higher seed is always given home court advantage, set ```hca = ""seed""```. If one team hosts the tournament (even if not the top seed), set ```hca = INSERT_TEAM_NAME```.
* __Bracketology/:__ Collection of .csv files used in bracket creation
  * __bids.csv:__ Table of tournament bids broken down by conference.
  * __bracket.csv:__ The final bracket produced.
  * __bracket_math.csv:__ Table of bracket metrics for all 357 Division-1 teams.
  * __bubble.csv:__ Bracket metrics for the first 16 teams missing the field as at-large bids.
  * __resumes.csv:__ Subset of bracket metrics (resume evaluation, strength of record, wins above bubble) produced by __record_evaluator.R__. 
  * __rpi.csv:__ Projected end of season RPI for each team. Produced by __rpi.R__.
  * __historical/:__ A collection of files used to predict NCAA Tournament seed from the various metrics in this directory.
* __Info/:__ A collection of information used to adjust model weights and determine postseason status.
  * __conferences.csv:__ List of teams with their conference, postseason eligibility status, and elimination status from automatic bid contention.
  * __mins_YYYY.csv:__ Percentage of team's minutes returning during the next season. Acquired from [Bart Tovrik](http://www.barttorvik.com/returningmins.php).
  * __recruiting.csv:__ [247Sports recruiting scores](http://247sports.com/Season/2017-Basketball/CompositeTeamRankings) for each team's incoming freshman class.
  * __transfers.csv:__ Data on transfers eligible to play in the 2017-18 season, pulled from http://www.barttorvik.com/trankpre.php.
* __History/:__ Some historical files of interest.
* __Power_Rankings/:__ Collection of .csv files produced by __powerrankings.R__.
  * __power_rankings.csv:__ Ranking of all 357 teams
  * __conf_summary.csv:__ Ranking of the 32 Division 1 conferences, by median ranking.
  * __pr_by_conf.csv:__ Ranking of teams by YUSAG Coefficient, sorted by conference.
* __Predictions/:__ 
  * __playoffs.csv:__ Ivy League playoff odds.
  * __psf.csv:__ [Playoff Swing Factor](http://yaledailynews.com/downthefield/2017/01/31/by-the-numbers-ivy-hoops-games-to-watch/) for most recent week of Ivy League conference games.
* __Results/:__ Complete NCAA Basketball schedule/results through a given date. Sub-directories indicate the year/season, with .csv files given in NCAA_Hoops_results_day_month_year.csv format.
"
51,sportsdataverse/hoopR,R,"---
output: github_document
---

#

# hoopR <a href='https://hoopR.sportsdataverse.org/'><img src=""https://raw.githubusercontent.com/sportsdataverse/hoopR/main/logo.png"" align=""right""  width=""20%"" min-width=""100px""/></a>
```{r setup, include = FALSE}
require(knitr)
if (!requireNamespace('pacman')){
  install.packages('pacman')
}
pacman::p_load(dplyr)

opts_template$set(stripfigure = list(fig.height = 8, out.width = ""95%""))

```


<!-- badges: start -->

[![CRAN status](https://img.shields.io/badge/dynamic/json?style=for-the-badge&color=success&label=CRAN%20version&prefix=v&query=%24.Version&url=https%3A%2F%2Fcrandb.r-pkg.org%2FhoopR)](https://CRAN.R-project.org/package=hoopR)
[![CRAN downloads](https://img.shields.io/badge/dynamic/json?style=for-the-badge&color=success&label=Downloads&query=%24%5B0%5D.downloads&url=https%3A%2F%2Fcranlogs.r-pkg.org%2Fdownloads%2Ftotal%2F2021-10-26%3Alast-day%2FhoopR)](https://CRAN.R-project.org/package=hoopR)
[![Version-Number](https://img.shields.io/github/r-package/v/sportsdataverse/hoopR?label=hoopR&logo=R&style=for-the-badge)](https://github.com/sportsdataverse/hoopR)  [![R-CMD-check](https://img.shields.io/github/workflow/status/sportsdataverse/hoopR/R-CMD-check?label=R-CMD-Check&logo=R&logoColor=white&style=for-the-badge)](https://github.com/sportsdataverse/hoopR/actions/workflows/R-CMD-check.yaml) [![Lifecycle:maturing](https://img.shields.io/badge/lifecycle-maturing-blue.svg?style=for-the-badge&logo=github)](https://github.com/sportsdataverse/hoopR/) [![Twitter Follow](https://img.shields.io/twitter/follow/saiemgilani?color=blue&label=%40saiemgilani&logo=twitter&style=for-the-badge)](https://twitter.com/saiemgilani) [![Twitter Follow](https://img.shields.io/twitter/follow/SportsDataverse?color=blue&label=%40SportsDataverse&logo=twitter&style=for-the-badge)](https://twitter.com/SportsDataverse)  [![Contributors](https://img.shields.io/github/contributors/sportsdataverse/hoopR?style=for-the-badge)](https://github.com/sportsdataverse/hoopR/graphs/contributors)
<!-- badges: end -->

[**`hoopR`**](https://hoopR.sportsdataverse.org/) is an R package for working with men's basketball data. 

The package has functions to access **live play by play and box score** data from ESPN with shot locations when available. As of version 1.3.0, [**`hoopR`**](https://hoopR.sportsdataverse.org/) is also a full NBA Stats API wrapper with 127 functions added in this release.

It is additionally a scraping and aggregating interface for Ken Pomeroy's men's college basketball statistics website, [kenpom.com](https://kenpom.com/). It provides users with an active subscription the capability to scrape the website tables and analyze the data for themselves.

## Installation

You can install the CRAN version of [**```hoopR```** ](https://CRAN.R-project.org/package=hoopR) with:
```{r readme_cran_install, eval=FALSE}
install.packages(""hoopR"")
```

You can install the released version of [**`hoopR`**](https://github.com/sportsdataverse/hoopR/) from [GitHub](https://github.com/sportsdataverse/hoopR) with:

```{r readme_pacman_install, eval=FALSE}
# You can install using the pacman package using the following code:
if (!requireNamespace('pacman', quietly = TRUE)){
  install.packages('pacman')
}
pacman::p_load_current_gh(""sportsdataverse/hoopR"", dependencies = TRUE, update = TRUE)
```

## Quick Start

### **NBA full play-by-play seasons (2002-2022) ~ 1-2 minutes**
```{r nba_load_pbp_readme}
tictoc::tic()
progressr::with_progress({
  nba_pbp <- hoopR::load_nba_pbp()
})
tictoc::toc()
```
```{r nba_pbp_message, echo = FALSE}
glue::glue(""{nrow(nba_pbp)} rows of NBA play-by-play data from {length(unique(nba_pbp$game_id))} games."")
```

### **Men's college basketball full play-by-play seasons (2006-2022) ~ 2-3 minutes**
```{r mbb_load_pbp_readme}

tictoc::tic()
progressr::with_progress({
  mbb_pbp <-  hoopR::load_mbb_pbp()
})
tictoc::toc()
```

```{r mbb_pbp_message, echo = FALSE}
glue::glue(""{nrow(mbb_pbp)} rows of men's college basketball play-by-play data from {length(unique(mbb_pbp$game_id))} games."")
```

## **Documentation**

For more information on the package and function reference, please see the  [**`hoopR`** documentation website](https://hoopR.sportsdataverse.org).

## **Breaking Changes**

[**Full News on Releases**](https://hoopR.sportsdataverse.org/news/index.html)


## Follow the [SportsDataverse](https://twitter.com/SportsDataverse) on Twitter and star this repo

[![Twitter Follow](https://img.shields.io/twitter/follow/SportsDataverse?color=blue&label=%40SportsDataverse&logo=twitter&style=for-the-badge)](https://twitter.com/SportsDataverse) 

[![GitHub stars](https://img.shields.io/github/stars/sportsdataverse/hoopR.svg?color=eee&logo=github&style=for-the-badge&label=Star%20hoopR&maxAge=2592000)](https://github.com/sportsdataverse/hoopR/stargazers/)


## **Our Authors**

-   [Saiem Gilani](https://twitter.com/saiemgilani)       
<a href=""https://twitter.com/saiemgilani"" target=""blank""><img src=""https://img.shields.io/twitter/follow/saiemgilani?color=blue&label=%40saiemgilani&logo=twitter&style=for-the-badge"" alt=""@saiemgilani"" /></a>
<a href=""https://github.com/saiemgilani"" target=""blank""><img src=""https://img.shields.io/github/followers/saiemgilani?color=eee&logo=Github&style=for-the-badge"" alt=""@saiemgilani"" /></a>

## **Our Contributors (they're awesome)**

-   [Jason Lee](https://twitter.com/theFirmAISports)       
<a href=""https://twitter.com/theFirmAISports"" target=""blank""><img src=""https://img.shields.io/twitter/follow/theFirmAISports?color=blue&label=%40theFirmAISports&logo=twitter&style=for-the-badge"" alt=""@theFirmAISports"" /></a>
<a href=""https://github.com/papagorgio23"" target=""blank""><img src=""https://img.shields.io/github/followers/papagorgio23?color=eee&logo=Github&style=for-the-badge"" alt=""@papagorgio23"" /></a>

-   [Billy Fryer](https://twitter.com/_b4billy_)       
<a href=""https://twitter.com/_b4billy_"" target=""blank""><img src=""https://img.shields.io/twitter/follow/_b4billy_?color=blue&label=%40_b4billy_&logo=twitter&style=for-the-badge"" alt=""@_b4billy_"" /></a>
<a href=""https://github.com/billyfryer"" target=""blank""><img src=""https://img.shields.io/github/followers/billyfryer?color=eee&logo=Github&style=for-the-badge"" alt=""@billyfryer"" /></a>

## **Citations**

To cite the [**`hoopR`**](https://hoopR.sportsdataverse.org) R package in publications, use:

BibTex Citation
```bibtex
@misc{gilani_2021_hoopR,
  author = {Gilani, Saiem},
  title = {hoopR: The SportsDataverse's R Package for Men's Basketball Data.},
  url = {https://hoopR.sportsdataverse.org},
  year = {2021}
}
```
"
52,rtelmore/ballr,R,"# ballr <img src=""man/figures/court-3.png"" width = ""200"" align=""right"" />

An R API for basketball-reference.com.  The correct pronounciation for this 
package is **baw**-ler. 

[![Project Status: Active – The project has reached a stable, usable state and is being actively developed.](http://www.repostatus.org/badges/latest/active.svg)](http://www.repostatus.org/#active)
[![Build Status](https://travis-ci.org/rtelmore/ballr.svg?branch=master)](https://travis-ci.org/rtelmore/ballr)
[![Coverage Status](https://img.shields.io/codecov/c/github/rtelmore/ballr/master.svg)](https://codecov.io/github/rtelmore/ballr?branch=master)
[![CRAN_Status_Badge](http://www.r-pkg.org/badges/version/ballr)](https://cran.r-project.org/package=ballr)
[![CRAN RStudio mirror downloads](http://cranlogs.r-pkg.org/badges/ballr)](http://www.r-pkg.org/pkg/ballr)
[![DOI](https://zenodo.org/badge/45419870.svg)](https://zenodo.org/badge/latestdoi/45419870)

## To install

(Update: It's not on CRAN as of July 2020.)
From CRAN:
```r
install.packages(""ballr"")
```

The development version from GitHub:
```r
install.packages(""devtools"")
library(devtools)
install_github(""rtelmore/ballr"")
```
 
"
53,lbenz730/NCAA_Hoops_Play_By_Play,R,"# NCAA_Hoops_Play_By_Play
Men's College Basketball Play by Play Data

__NOTE:__ As of 8/8/2018, the majority of functionality, including development of Play-by-Play scrapers, assist networks, and 
win probability charts has moved to my new R package, [ncaahoopR](https://github.com/lbenz730/ncaahoopR). Data and other miscellaneous
files will still be stored here, but core scripts whose functionally has been incorporated into the  ```ncaahoopR``` package will be updated with the package, not in this repository.



__NCAA_Hoops_PBP_Scraper.R:__ An R file used to scrape data from ESPN. The following functions are available.

* ```get_pbp(team)```: Game entire 2017-18 Season's worth of play-by-play data for a given team.
* ```get_pbp_game(gameIDS)```:  Get play-by-play data for a specific vector of ESPN game ids. 
* ```get_roster(team)```: Get a particular team's roster. 
* ```get_schedule(team)```: Get a team's schedule.
* ```get_game_ids(team)```: Get a vector of ESPN Game IDs for all games in which ```team``` plays in.
* ```get_date(gameID)```: Gets the date of a game given an ESPN Game ID.
* ```is.nit(gameID)```: Returns logical ```T/F``` whether or not the game was part of the NIT

Note that team names must adhere to ESPN naming conventions. A full dictionary of team names used by ESPN is provided in __ids.csv__  Note that play by play data is not available for all games.

__pbp_2016_17/:__ A folder containing play by play csv files for each team for the 2016-17 season. Additionally, the file [all_games.csv](https://drive.google.com/open?id=0BzSws2ZDOraxbXF0aWNJNmxCdnM) (too large for GitHub) contains all games scraped for the 2016-17 season. Each team's .csv file contains the following variables:
   * __play_id__: The index of a play in a given game
   * __half:__ Overtimes denoted by 3, 4, etc.
   * __time_remaining_half:__ Time left in a given period of play, as it would appear on a scoreboard.
   * __secs_remaining:__ The number of seconds left in a given game.
   * __description:__ A description of what happened on the given play.
   * __home_score/away_score:__ Scores for the home and away teams, as denoted by ESPN. Even for neutral site games, a ""home team"" is denoted by choosing the team listed second in ESPN box scores.
   * __away/home:__ Home and Away teams. See above for treatment of neutral site games.
   * __home_favored_by:__ Number of points the home team is favored by, if available. (i.e. 6 corresponds with traditional Vegas line of -6.0)
   
__pbp_2017_18/:__ Same as above for 2017-18 season.

__Assist_Network.R:__ The function ```assist_net(team, node_col, season, rmv_bench)```, used to create college basketball assist networks. 
  * ```team``` is the ESPN team name
  * ```node_col``` is the node color for the graph
  * ```season```: Options include ""2016-17"", ""2017-18"", or a vector of ESPN game IDs. 
  * ```rmv_bench```: Logical. If TRUE, removes all players who aren't in the network. 
  * ```tree```: Logical. If TRUE, draws graph in tree structure. If FALSE, draws graph in circle
  * ```three_weights```: Logical. If TRUE, assisted three point shots are given 1.5 weight. If FALSE, assisted three point shots are given weight 1. In both cases, assisted 2 point shots are given weight 1. 
  * ```Message``` (default = ```NA```) Option for custom message to replace graph title when using a subset of the season (e.g. conference play).
  
__rosters_2016_17/:__ 2016-17 rosters for each team.

__rosters_2017_18/:__ 2017-18 rosters for each team.

__schedules_2017_18/:__ 2017-18 schedules for each team.

__wp_model.R:/__ Prepares data and builds win probability model (coefficients saved as object __wp_hoops.csv__). Requires [all_games.csv](https://drive.google.com/open?id=0BzSws2ZDOraxbXF0aWNJNmxCdnM) and [2017_18_mid_season.csv](https://drive.google.com/file/d/1b7P-p1loGIghL0zDpzaox255X93Mqgkg/view?usp=sharing).

__wp_charts.R:/__ Plots win probability chart for given game. Usage:```wp_chart(ESPN_Game_ID, home_color, away_color, show_legend = T)```. The ```show_legend``` parameter is defaulted to ```TRUE```. I recommend turning this parameter off when plotting more than one win probability charts on a single graph.

__shiny_app:/__ Code for the [R Shiny App version of Assist Networks](https://lbenz730.shinyapps.io/assist_networks).

__network_metric_leaders.R:__ A script for computing weighted/unweighted assist network metrics for all 351 Division 1 teams. The mid-season leaderboad for the 2017-18 season is stored in __1_2_2018_assist_leaderboard.csv__. 

__kenpom_scraper.R:__ Scrapes data from [kenpom.com](https://kenpom.com) main page and store results in __kenpom.csv__.

__ncaa_color_scraper.R:__ Scrapes color hexcodes from http://teamcolorcodes.com for use in the [ncaahoopR](https://github.com/lbenz730/ncaahoopR) package.

# Examples
### Assist Networks
* Weighted Assist Network
![Yale Weighted Assist Network](pics/Yale_Weighted_Network.png)
```assist_net(""Yale"", ""royalblue1"", ""2017-18"", rmv_bench = T, tree = F, three_weights = T, message = NA)```

* Tree Assist Network
![Yale Tree Assist Network](pics/Yale_Tree.png)
```assist_net(""Yale"", ""royalblue1"", ""2017-18"", rmv_bench = T, tree = T, three_weights = F, message = NA)```

### Win Probability Charts
* Texas A&M vs. Northern Iowa, March 20, 2016
![Texas A&M vs. Northern Iowa, March 20, 2016](pics/WinProb.png)
```wp_chart(400872229, ""maroon"", ""purple"")```
* Cincinnati vs. Houston, March 11, 2018 (2018 AAC Championship Game)
![Cincinnati vs. Houston, March 11, 2018 (2018 AAC Championship Game)](pics/GEI_example.png)
Update 3/13/2018: Added Game Excitement Index (GEI) to charts. 
"
54,rodzam/ncaab-stats-scraper,Python,"NCAA Basketball Stats Scraper
=============================
Author: Rodrigo Zamith  
Version: 1.1


Usage
-----
First, edit the scraper settings in `scrapersettings.py`. In particular, be sure to change the two variables at the top, `academic_year` and `year_index`, using the information provided in that file. You can also set what kind of data you'd like saved, and where you'd like it saved.

Then, execute either `ncaab_stats_scraper.sh` or `ncaab_stats_scraper.bat`, depending on your operating system. Alternatively, you can just execute the python files, preferably in this order:

1. create_team_mappings.py
2. create_schedule_mappings.py
3. create_player_mappings_and_agg_stats.py
4. create_ind_stats.py


Requirements
------------
This script requires Python, as well as the urllib2 and BeautifulSoup libraries.


License
--------
This script is licensed under the Mozilla Public License Version 2.0 (see LICENSE file in root folder). TL;DR: feel free to use it commercially, modify it, and distribute it, provided you disclose both the source code and any modifications you make to it.
"
55,aoru45/LFFD-Pytorch,Python,"# BasketNet

This is a demo of a LFFD model for a Basketball Recognition Competition.

The demo is based on SSD and LFFD.
## Install
```[cmd]
git clone https://github.com/aoru45/LFFD-Pytorch.git
```

## Usage
Download or make your own dataset and modify the dataset.py file.
```[cmd]
python train.py
```

## rf and erf visualize:
![rf_erf_visualize.png](rf_erf_visualize.png)

The visulaization code is avaliable here: https://github.com/aoru45/LFFD-Pytorch/blob/master/visualize_demo.py

## Network Structure

![demo](demo.png)


## demo result

![a](a.jpg)

## Reference

SSD:https://arxiv.org/abs/1512.02325

LFFD:https://arxiv.org/pdf/1904.10633.pdf


"
56,octonion/basketball-m,Ruby,"basketball-m
============

Men's basketball tools, data and analytics.
"
57,wcrasta/ESPN-Fantasy-Basketball,Python,"# ESPN-Fantasy-Basketball

https://espnfantasy.warrencrasta.com

An application that calculates and displays various statistics for ESPN Fantasy Basketball leagues. The code/application works for (public) leagues of any size that use H2H Most Cat. scoring. It may or may not work for other scoring systems. A Yahoo equivalent is [here](https://github.com/wcrasta/yahoo-fantasy-basketball).

If you liked this project, please consider starring the repository.

Due to performance limitations that occur when the code is deployed on the website, there are some useful features that **only exist locally** but are not available through the website. To view these, run the code in the [more-features branch](https://github.com/wcrasta/ESPN-Fantasy-Basketball/tree/more-features).

## Installation
1. Create a virtual environment using [venv and Python 3.5](https://docs.python.org/3/library/venv.html) (optional, but highly recommended). Activate the virtual environment.
2. Run **pip install -r requirements.txt** to install the dependencies for this project.
3. Open your favorite IDE and configure the project so that the Python interpreter + package sources comes from your virtual environment (optional, but highly recommended).
4. Download [ChromeDriver](http://chromedriver.chromium.org/downloads) and put it in your path, preferably somewhere within your virtual environment. Instructions vary by OS. You might have to Google where to properly place ChromeDriver to get it working.
5. Run or debug the program!

## Improvements/Possible Added Features
Feel free to contribute to this project! There are many improvements that can be made, both in terms of code quality and in terms of whole new ideas that can be implemented. Both the front-end and back-end are simple and can be enhanced.

If you do contribute, be advised that it may take some time to get your PR merged in. If you're interested in being a collaborator, e-mail me.

## Credits

Author: Warren Crasta (warrencrasta@gmail.com)

Collaborator: Wayne Crasta (wayne.crasta@gmail.com)

Collaborator: [richiehu17](https://github.com/richiehu17)
"
58,srlesrle/betting,PHP,"# betting
betting script, bet on games, football bet, soccer bet, basketball bet, add any game at any moment
This project has been written with codeigniter 2.1 php framework and mySQL database, frontend is bootstrap 2
"
59,kjaisingh/march-madness-2019,Python,"# March Madness Tournament Outcome Prediction

### A Machine Learning system to guide your March Madness bracket.

A Machine Learning project providing a solution to the Google Cloud & NCAA® Machine Learning Competition 2019 (https://www.kaggle.com/c/mens-machine-learning-competition-2019).

The project provides a solution to both Stage 1 and Stage 2 of the Kaggle competition, predicting the winner of historical fixtures and predicting the winners of all possible March Madness 2019 matchups respectively. 

The submission files for these solutions can be found in 'SubmissionStage1.csv' and 'SubmissionStage2.csv' respectively. The project predicts the probability that the first team specified will beat the second team specified for each matchup listed in the Sample Submission file for both Stage 1 and Stage 2.

The project also creates a predicted bracket for the 2019 NCAA Men's March Madness basketball tournament based on the predictions made in Stage 2, and uses the tournament seedings and slots. This bracket can be found in the file 'output.png'.


**Required Dependencies:**
* Numpy
* Pandas
* Matplotlib
* Pickle
* Random
* Ski Kit Learn
* Keras
* Bracketeer


**Execution Instructions:**
1. Create dataset that holds details for each team for every season.
~~~~
python createTeamDetails.py
~~~~~~~~ 

2. Create dataset that contains details about every past matchup, which is used as the training dataset.
~~~~
python createTrainingDataset.py
~~~~~~~~ 

3. Create predictive models that can be used to predict the outcomes of future fixtures.
~~~~
python createPredictionModel.py
~~~~~~~~ 

4. Create dataset that holds the data used by the model for matchups that must be predicted in the Stage 1 submission.
~~~~
python createStage1PredictionsDataset.py
~~~~~~~~ 

5. Use the most accurate model created to create Stage 1 predictions, and write these to a submission file.
~~~~
python createStage1Predictions.py
~~~~~~~~ 

6. Submit the Stage 1 predictions to the Kaggle competition (requires setting up of the Kaggle library and Kaggle API).
~~~~
kaggle competitions submit -c mens-machine-learning-competition-2019 -f SubmissionStage1.csv -m ""My Stage 1 submission""
~~~~~~~~ 

7. Create dataset that holds the data used by the model for matchups that must be predicted in the Stage 2 submission.
~~~~
python createStage2PredictionsDataset.py
~~~~~~~~ 

8. Use the most accurate model created to create Stage 2 predictions, and write these to a submission file.
~~~~
python createStage2Predictions.py
~~~~~~~~ 

9. Create a visual representation of the predictions made for the 2019 tournament.
~~~~
python createBracket.py
~~~~~~~~ 

10. Submit the Stage 2 predictions to the Kaggle competition (requires setting up of the Kaggle library and Kaggle API).
~~~~
kaggle competitions submit -c mens-machine-learning-competition-2019 -f SubmissionStage2.csv -m ""My Stage 2 submission""
~~~~~~~~ 


**File Details:** \
Other files included or created in this repository include (in order of creation/access):
* *data/RegularSeasonDetailedResults.csv*: Holds data from NCAA Regular Season matchups since 1985.
* *data/NCAATourneyDetailedResults.csv*: Holds data from NCAA March Madness matchups since 2003.
* *data/TeamConferences.csv*: Holds data regarding the team ID's of each team part of the dataset for each year.
* *data/all_teamData.csv*: Holds per-season data for each NCAA team since 2003.
* *data/2019_teamData.csv*: Holds regular season data for 2019 NCAA teams.
* *data/all_dataset.csv*: Holds data for all NCAA matchups since 2003 in a format suitable for use as training data.
* *scaler.save*: Holds the scaler that is used to preprocess data before it is used for predictions.
* *predictor.pkl*: Holds the most accurate classifier created during the training phase.
* *data/stage1_dataset.csv*: Holds data for matchups identified in Stage 1 in a format suitable for making predictions with.
* *data/stage2_dataset.csv*: Holds data for matchups identified in Stage 2 in a format suitable for making predictions with.
* *SampleSubmissionStage1.csv*: Holds details regarding which matchups should be predicted for Stage 1.
* *SampleSubmissionStage2.csv*: Holds details regarding which matchups should be predicted for Stage 2.
* *SubmissionStage1.csv*: Holds the submissions for Stage 1 of the Kaggle competition, as it stores the matchup predictions.
* *SubmissionStage2.csv*: Holds the submissions for Stage 2 of the Kaggle competition, as it stores the matchup predictions.
* *data/Teams.csv*: Holds data regarding the team name of each team based on their team ID. 
* *data/NCAATourneySeeds.csv*: Holds data regarding the NCAA seed of each team.
* *data/NCAATourneySlots.csv*: Holds data regarding the NCAA slot of each team.
* *bracket.png*: Holds a visual representation of the predictions made in the form of a bracket for the 2019 tournament.


**Predictor Details:** \
The features in an input instance for this model are:	
* 0: Team 1 Home or Away (1: Home, 0: Neutral, -1: Away)
* 1: Team 1 Points per game - Team 2 Points per game
* 2: Team 1 Points Allowed per game - Team 2 Points Allowed per game
* 3: Team 1 Field Goals Made per game - Team 2 Field Goals Made per game
* 4: Team 1 Field Goals Attempted per game - Team 2 Field Goals Attempted per game
* 5: Team 1 3-Pointers Made per game - Team 2 3-Pointers Attempted per game
* 6: Team 1 Free-Throws Made per game - Team 2 Free-Throws Attempted per game
* 7: Team 1 Offensive Rebounds per game - Team 2 Offensive Rebounds per game
* 8: Team 1 Defensive Rebounds per game - Team 2 Defensive Rebounds per game
* 9: Team 1 Assists per game - Team 2 Assists per game
* 10: Team 1 Turnovers per game - Team 2 Turnovers per game
* 11: Team 1 Steals per game - Team 2 Steals per game
* 12: Team 1 Blocks per game - Team 2 Blocks per game
* 13: Team 1 Personal Fouls per game - Team 2 Personal Fouls per game

The output for an input instance for this model is the probability that Team 1 wins.


**NCAA 2019 Tournament Predictions:** \
<img src = ""bracket.png""/>


**Reflection on the Competition, the Model and the Results:** \
With March Madness 2019 now over, I thought it would be a great time to reflect on my first time entering Google's competition, which saw entries from some of the leading universities and academic teams in the world. So, let's get to it.
* In terms of its simplicity to implement, the model turned out to be decent. It predicted the right winner of each matchup that occurred in this tournament with an accuracy of about 78%, which isn't too bad. Better still, it was able to predict the correct winner of the entire tournament - the Virginia Cavaliers. This indicates that it did, to an extend, understand what was important in winning - in the case of Virginia, it seemed to be great defense and solid three-point shooting (which is probably why the model didn't even predict pre-tournament favourites Duke to make the finals).
* The main flaw that I saw in the model was the fact that it did not take seedings into account. While the seeding would be the basis for most people's predictions in fixtures, as there tends to be a relatively strong correlation between the higher seed and the winning team, my model did not consider the seeding of the two teams in a matchup. This resulted in the model often making extremely risky predictions that were purely stats-based - I believe that the imposition of the seedings of the two teams will reduce the number of these risky predictions. The reason why it was difficult to incorporate seedings into the model was that the large majority of training data was from regular NCAA matches rather than the March Madness Championships. The large majority of teams playing in these NCAA matches, however, do not ever get assigned a seed - this is because they do not qualify for the Championships  itself. To get around this issue, I plan to utilize seedings in future predictive models with one slight tweak - I would assign a seeding of 16, which is the lowest possible seed in the Championships, to all teams that do not end up ever getting a seed. This indicates that they would be the weakest in the pool of teams if they qualified the Championships, which is valid given that they did not even make it.
* Another shortcoming of the model, in my eyes, was that it didn't consider any of the previous matchups between the two teams considered. Head-to-head is usually a pretty good indicative of which team will win, since it is derived from experience. Adding this in future editions shouldn't be too difficult - it'll just require a data point that represents the yearly matchup details between two teams.
* The project largely focused on the data side of the model, so little time was spent on optimizing the model - only a GridSearch was applied for the neural network. Optimization is, however, a clear distinguishing factor between average and great models. In order to improve on this next year, I would have to spend more time reading about about the latest advancements in the domain, and apply techniques that generate improvements which optimize the model. This may, however, require the implementation of techniques from new research papers.
"
60,ayushpai/Basketball-Detector,Python,"# Basketball-Detector
https://youtu.be/3UeoKxw8UYs
"
61,BonbonLemon/basketball,HTML,"# Basketball

![Alt text](assets/images/demo_pic.png?raw=true)

[Basketball][basketball]

A remake of Facebook Messenger's basketball game! This game is a frontend browser game built with JavaScript, Phaser, and Canvas.

## Features
- Ball is shot in a direction based on the cursor's movement
- Ball changes size to make experience 3D like
- Sound effects make experience like REAL LIFE!
- Ball collides with and bounces on/off rim
- Motion tweens of happy or sad emojis appear based on success of the shot
- Besides the first shot, ball spawns in random locations

[basketball]: http://bonbonlemon.github.io/basketball/
"
62,arbues6/BueStats,Python,"# 0. BueStats
Advanced statistics have proven to be a crucial tool for basketball coaches in order to improve training skills. Indeed, the performance of the team can be further optimized by studying the behaviour of players under certain conditions, thus NBA teams already created highly skilled data science departments to handle tons of information, such as tracking data or the output of other advanced computer vision algorithms. However, European teams are far behind in this field, and tracking data is completely otherworldly for the 97% of them, but the worst thing is that there is not an existing culture-data tradition, which creates the need for data. Coaches have a solid point when they say that their job includes not only practice preparation, but also video sessions, individual meetings, or even physical and conditioning stuff, so they have basically no time to start digging for data for a rough analysis a posteriori. 
The goal of BueStats is fulfilling these couple of gaps:
1. Provide coaches with a basic tool that automatically extracts advanced-statistics reports. 
2. Help coaches understand and handle data in order to create a natural habit. Reports' data will not have complex information, but game conditioning factors and metrics that are easy to understand (tutorials are coming soon!), as it is important to establish a solid numerical basis before moving forward. 

In particular, at the moment, BueStats can provide advanced statistics reports of FEB teams (Spanish Basketball Federation), which include any team/player from: 
- **Liga Femenina Endesa** (1st female Spanish division)
- **Leb Oro** (2nd male Spanish division)
- **Liga Femenina 2** (2nd female Spanish division)
- **Leb Plata** (3rd male Spanish division)
- **Liga EBA** (4th male Spanish division)

BueStats is a non-lucrative Python-based project out of the scope of my PhD, and it has been tested with Ubuntu 16.04, MacOS 10.15.2 and Windows 10. I really hope you like it! 

## 1. Requirements
### 1.a. ChromeDriver
BueStats does not only compute advanced basketball metrics, but it is also a web scraper that gets information from the HTML code of FEB websites (in a cool and legal way, of course). However, FEB's website is not that easy to scrap, given that there are dropdown menus that have to be changed, but these actions do not modify the general website link; for this reason, a remote browser controller has to be installed: [Chromedriver](https://chromedriver.chromium.org/). It is vital to install a Chromedriver version that matches your Google Chrome browser version, which can be find in Settings, and clicking About Chrome. Once installed, make sure that the downloaded chromedriver exectuable file is placed in the main BueStats folder. 

### 1.b. Python Dependencies
As exepected, some Open-Source Python libraries have to be installed as well for a proper running of this program. This dependencies are included in *Requirements.txt* in case you want to build a virutal environment; otherwise, these libraries can be easily installed with pip: 
```
pip3 install numpy
pip3 install selenium
pip3 install lxml
pip3 install pandas
pip3 install requests
pip3 install bs4
```

## 2. Interface
BueStats has a simple straight-forward interface (Stats_GUI) as seen in the following screenshot: 
![alt text](BueStats_Interface.png)
- **1. Team / Equipo:** target team you want to scout or analyze. The name of the team must be a **single unique word** with no spaces belonging the the team original name; this is, the name of the team according to FEB. In the given example, Melilla's data will be extracted; note that Melilla is a unique team name, whereas ""Baloncesto"" or ""Club"" would not be. 
- **2. Season / Temporada:** season you want to scout; in this case, 2018 indicates the 2018-2019 season (2019 would indicate 2019-2020 and so on). 
- **3. Division / Categoria:** FEB division of the corresponding team. In order to unify groups and names, and bearing in mind that the program is case-sensitive, the following nomenclature has to be followed: 
  - **3.a. Liga Femenina Endesa** can be written as *Endesa* or *LF*.
  - **3.b. Leb Oro** has to be written as *ORO*.
  - **3.c. Liga Femenina 2** has to be written as *LF2*, but given that there are 2 groups (A or B), the group must be included in the encoding after a comma: for example, *LF2,A* belongs to a team compeiting in the group A of Liga Femenina 2.
  - **3.d. Leb Plata** is by far the most complex one, as it has two competition phases: the first one is geographically defined (Este / Oeste), while the second one depends on the previous results (A2). For this reason, a basic encoding has to be followed: *PLATA,F1,F2* , where *F1* belongs to the first phase and can be *ESTE* or *OESTE*, and *F2* belongs to the second one and can be expressed as *A1* and *A2*. An example could be: *PLATA,ESTE,A1*, or *PLATA,OESTE,A2*. However, if you want to output data just from one phase, you should encode it as: *PLATA,F*, where *F* could be one of the mentioned options (*ESTE* / *OESTE* / *A1* / *A2*).  
  - **3.e. Liga EBA** has to be written as *EBA*, but as happened with Liga Femenina 2, the name of the group has to be included as well after a comma with either one or two characters: for instance, if the team plays in group C, which has division CA and division CB, the encoding would be *EBA,CA* or *EBA,CB*, but if the team plays in division B, which has no subdivisions, the encoding would be *EBA,B*.
- **4. First Round / Primera Jornada** is the first (included) round to be taken into account while extracting data.
- **5. Last Round / Última Jornada** is the last (included) round to be taken into account while extracting data.
- **6. Top Teams / Equipos Top** (optional) can be filled with the top teams of the competition, which might help to see how players perform against powerful teams. The set of teams has to be included with commas and no spaces. 
- **7. Bottom Teams / Equipos Cola** (optional) can be filled with the bottom teams of the competition. It has to be mentioned that both Top and Bottom Teams might be filled with any set of teams as well (all sizes). 
- **8. Intervals / Intervalos** will pack the performance of players/team in groups of N games, being N the number written in Intervals text box. For instance, if we split in groups of 5 the performance of a team that has played 13 games, statistics are separated for the 1-5, 5-10, and 10-13 games. 
- **9. Players / Jugadores** (optional) can be filled with a set of players that you want to scout by writting unique surnames. For example, both Josep Franch De Pablo and Felipe Dos Anjos De Paula play in Melilla; if we write *FRANCH* in the text box, only stats from Josep Franch will be extracted, whereas if we write *DE*, the performance of both players will be analyzed (De Pablo / De Paula). Again, more than one player can be added: (i.e) *FRANCH, AGADA*. 
- **Extract All Rounds / Extraer Todas las Jornadas** is a checkbox that (when checked) extracts the stats of the analyzed players for every single game in the given season.
- **Extract Team Stats / Extraer Estadísticas de Equipo** is a checkbox that (when checked) extracts statistics not only at a player-level but also at a team-level. 
- **Extract Rankings / Extraer Rankings** is a checkbox that (when checked) extracts sorted rankings of the given team for each particular stat. This checkbox is related with the Textbox of **Minimum Games / Minimo Partidos** (optional), which can be set in order to set a threshold to include (or not to include) players in the rankings according to the games they have played; if the box is empty, this threshold is automatically set to half the number of games. 
- **Configuration Folder / Carpeta Configuración** (optional) will be explained in Section 4 (Configuration Files).
- **Output Folder / Carpeta Destino** is the path where the output files will be stored. By default, it is a folder called ""Reports"" in the same ""BueStats"" main folder (you might create it for simplicity). 
- **Change Language / Cambiar Idioma** switches languages between Spanish and English; not only the interface will be affected, but also the output result. 
- **Load Configuration / Cargar Configuración** will be also explained in Section 4 (Configuration Files).

Finally...
**Extract Statistics / Extraer Estadísticas** is the main button to start gathering data from FEB. Once you press this button, you just have to be a little patient; Chromedriver will keep popping up and closing FEB sites automatically while extracting information. **Don't interact with these windows**, but you can keep using your computer as usual.  

### Scouting the whole league! 
A ""hidden"" feature of BueStats (useful for scouts) is that not only teams and players can be analyzed, but also the entire league! For doing so, you just have to change the text in team for *LIGA* (in the given example, Melilla should be substituted by LIGA). Again, the names of players can be filtered as well. Please note that it might take a while to generate the outputs since there's much more information. 

## 3. Output

BueStats produces quite a bunch of outputs in a .csv format, don't be overwhelmed because of that! The main reason for generating different statistic files is that the criteria to handle data changes among coaches and analysts, so there is not a best nor established way to do it! For a better visualization of the results, I would strongly suggest to mix the output files as you desire in a Google Spreadsheet file (by importing data), using different sheets and fixing the first row and the first two columns.  <br/>
<br/>
All those files starting with a letter *p* belong to *Player* stats, whilst files starting with letters *t* and *r* correspond to *Team* and *Ranking* files. 
  - The files that does NOT end with *Phases.csv* or *Rounds.csv* contain all player/team stats depending on several game-conditioning factors, such as Home / Away, Won / Lost, Initial-5 / Bench, Easy / Tough, Last3 games, and even the performance of the player against the desired teams included in Top/Bottom teams. 
  - The files that end with *Phases.csv* contain the player/team stats clustered into the N-game groups indicated in the above-mentioned intervals.
  - The files that end with *Rounds.csv* contain the performance of the player/team in each round of the season. 
  - Rankings (file that starts with *r*) includes the sorting of players from better to worst. <br/>

Apart from the game conditioning factors, the following advanced statistics are included: <br/> 
- **Player Level**: playerAST%. eFG%, TS%, GScored, Possessions, Floor Percentage, Points per Shot, %REB, %DRB, %ORB, STL%, Touches, Versatility, Usage, Win Scores, OER, DER, Net Points.  
- **Team Level**: Pace, OER, DER, eFG%, TS%,Play%, FTR%, %DRB, %ORB, %ASST, %TOV.  
  

## 4. Configuration Files
The amount of filters and text boxes of BueStats is not small, and since the whole purpose of building this program is to automatize processes, configuration files might be used in order to save time. This files are simple .txt files (such as the ones included, i.e. *ValoresDefectoORO.txt*), where you can set a default configuration and load it in the interface with a simple click; this feature might be useful for coaches that want to analyze their own team every single week. As it can observe, the text template follows this pattern:
```
team=UNICAJA
season=2018
division=EBA,DA
firstRound=1
lastRound=18
topTeams=MONTETUCCI,FRAMASA,JAEN
botTeams=NOVASCHOOL,MARBELLA,INTERIOR
intervals=7
players=
outputFolder=/mnt/DATA/FCBScrapping/Reports
```
By clicking the *Load Configuration* button (and making sure the *Configuration Folder* is properly set), the information in the text file is loaded. 

## 5. Plotting Interface
(NEW FEATURES! March 22nd)
As you might see, another GUI has been included in the source code (Graphics_GUI.py). 
Following the same nomenclature as the one seen in the previous Sections, simple 2D graphics with team logos can be extracted for any desired statistic (in both the X and Y axes), which can be classical ones / advanced / stats of the opponents. In order to do so, just create a folder called ""Images"" inside the existing ""Reports"" one (e.g. mkdir /mnt/DATA/FCBScrapping/Reports/Images) and copy and extract the images of ""Logos.zip"", which include (thanks to FEB and Muevetebasket) all 2019 logos splitted by divisions. 
Then, you just have to choose the desired rounds and statistics, and the plot will be automatically stored in your folder. Moreover, some npy files are also stored automatically to speed up the process. For instance, the first time you want to plot a specific graphic for (eg) 22 rounds, the scraper will browse around FEB website until getting all data; this process might take a while, but by storing these .npy arrays, it will be fully automatic the next time, without having to wait or whatsoever. Note that I included some default NPY files in a zip file (which are the ones corresponding to team data of some of the competitions before the covid-19 interruption - NpysGraphicAux.zip).

## 6. Data Ownership
All extracted BueStats' data belong to the Spanish Basketball Federation (FEB) and their corresponding boxscores, which are available online only for non-lucrative purposes. Please cite this GitHub or BueStats ifself if you are using this tool for writing scientific publications or sports articles (researchers and journalists). 

## 7. Contact
You can reach me by email (adria.arbues@upf.edu) or by Twitter (@arbues6), and any suggestion or doubt will be kindly addressed! However, I have a thesis to finish in less than 2 years, so I won't have the chance of adding brand new features quickly. <br/>
Executable files for Mac, Windows, and Linux, and tutorials are available in my [UPF Website](https://www.upf.edu/web/adria-arbues/buestats).
"
63,fivethirtyeight/nba-player-advanced-metrics,,"# nba-player-advanced-metrics

`nba-data-historical.csv` contains historical RAPTOR and other NBA data.

Note: The following columns are not included for the 2019-20 season or later: `tmRtg`, `MP%`, `P/36`, `A/36`, `R/36`,	`SB/36`, `TO/36`, `PIE%`, `AWS%`, `ORtg`, `%Pos`, `DRtg`, `2P%`,	`3P%`, and `FT%`. These values are also not included for playoffs in any year.

|  Category   |                     Description                     |
|-------------|-----------------------------------------------------|
| player_id   | Basketball-Reference.com player ID                  |
| name_common | Name of player                                      |
| year_id     | Season (i.e., 2019-20 is ""2000"")                    |
| type        | Regular season (RS) or playoffs (PO)                |
| age         | Age on Feb. 1 of season                             |
| team_id     | Team played for                                     |
| pos         | Primary position                                    |
| tmRtg       | Team efficiency margin                              |
| franch_id   | Franchise played for                                |
| G           | Games played                                        |
| Min         | Minutes played                                      |
| MP%         | Share of team minutes played                        |
| MPG         | Minutes per game                                    |
| P/36        | Pace-adjusted points per 36 minutes                 |
| TS%         | True Shooting Percentage                            |
| A/36        | Pace-adjusted assists per 36 minutes                |
| R/36        | Pace-adjusted rebounds per 36 minutes               |
| SB/36       | Pace-adjusted steals plus blocks per 36 minutes     |
| TO/36       | Pace-adjusted turnovers per 36 minutes              |
| Raptor O    | Offensive RAPTOR rating                             |
| Raptor D    | Defensive RAPTOR rating                             |
| Raptor+/-   | Total RAPTOR rating                                 |
| Raptor WAR  | Total RAPTOR wins above replacement                 |
| PIE%        | Player Impact Estimate                              |
| AWS%        | PIE% using Alternate Win Score                      |
| USG%        | Usage Rate                                          |
| AST%        | Assist Rate                                         |
| TOV%        | Turnover Rate                                       |
| ORB%        | Offensive Rebound Rate                              |
| DRB%        | Defensive Rebound Rate                              |
| TRB%        | Total Rebound Rate                                  |
| STL%        | Steal Rate                                          |
| BLK%        | Block Rate                                          |
| ORtg        | Offensive Rating (points produced per 100 poss.)    |
| %Pos        | Share of team possessions used                      |
| DRtg        | Defensive Rating (points allowed per 100 poss.)     |
| 2P%         | 2-point field goal percentage                       |
| 3P%         | 3-point field goal percentage                       |
| FT%         | Free throw percentage                               |
| 3PAr        | Share of field goal attempts that were 3-pointers   |
| FTAr        | Ratio of free throw attempts to field goal attempts |
| Pace +/-    | Player's effect on team pace                        |

"
64,leerichardson/game_simulation,TeX,"NBA Predictions 
===============

This is the repository used for our NBA Predictions project for Machine Learning 701 at Carnegie Mellon. 

- The final paper is displayed in the main repository, which summarizes all of our work 

- Our best SQLite database is located in the nba_rRegression_chi/nba.db

- All of the data and code used to scrape it are located in the data/ directory

- Scripts used to create our training/testing datasets as well as simulate the seasons are located in the scripts/ directory

- regressionTrial_chi/nbaRegression.py has the code to create the figure which compares our algorithms "
65,zachwill/ESPN-Basketball,Python,"ESPN Basketball
===============

**Warning**: This is a very outdated project. I would recommend you look to build
your scrapers with something like [Scrapy](http://scrapy.org) instead.


About
-----

As a huge fan of both basketball and BeautifulSoup 4 (currently in alpha), I
decided to rewrite an earlier module I'd been using to scrape games from ESPN.
In order to use this package, you will need `lxml`, `mock`, and `bs4`
installed.

I've found it parses pages and data pretty fast &mdash; around a second to
parse a game, rearrange the data into a tuple, and then spit it back out. On
average, most games normally consist of 400 to 460 individual plays (timeouts
and interruptions are counted as an Offical Play).

The tuple returned consists of the away team, home team, and a list of
dictionaries (each one represents an individual play in the game). You can
always read the source code to find out more.

Also, the library does have numerous unit tests that you can check out.


Usage
-----

Using the datetime module.

    >>> import datetime
    >>> from espn import get_games
    >>> yesterday = datetime.date.today() - datetime.timedelta(1)
    >>> for game in get_games(yesterday, iterable=True):
    ...     print game

Alternatively you can just use a string in `YYYYMMDD` format.

    >>> yesterday_string = ""20110330""
    >>> for game in get_games(yesterday_string, iterable=True):
    ...     print game

You don't have to use the `iterable=True` argument &mdash; a list will be passed
back to you.

    >>> april_fools_last_year = ""20100401""
    >>> games = get_games(april_fools_last_year)

You can also scrape NCAA Men's Basketball games by passing in a
`league='ncb'` argument.

    >>> march_1 = '20110301'
    >>> for ncb_game in get_games(march_1, league='ncb', iterable=True):
    ...     print ncb_game

The `daterange` function can also come in handy for generating days between two
specific dates.

    >>> import datetime
    >>> from espn import daterange, get_games
    >>> yesterday = datetime.date.today() - datetime.timedelta(1)
    >>> week_ago = yesterday - datetime.timedelta(7)
    >>> for day in daterange(week_ago, yesterday):
    ...     for game in get_games(day):
    ...         print game
"
66,lujinzhong/Live_basketball_room,PHP,"# Live_basketball_room
跟着singwa老师做的一个高性能篮球赛况直播室，主要包含实时直播模块和多人聊天模块，采用TP5整合原生swoole拓展编写。入门swoole最佳实战

高性能直播赛事平台-这是慕课swoole实战的项目,有些必要功能已完善,开发环境基于

Linux (Ubuntu 16.04LTS) 

PHP-7.2.5 

swoole-2.1.2

Redis-4.0.9

nginx-1.13.12

mysql-5.7.18

thinkphp-5.1

layer

本项目主要有两个版本，其中alpha测试版只包含基础功能，即只到第九章的内容，而beta测试版则有了alpha版没有的功能，包含：

1.请求访问写入日志功能

2.nginx转发功能

3.nginx多台服务器负载均衡配置

4.平滑重启脚本

5.多请求过滤

6.服务报警监控

其中的thinkphp是主要项目文件，其余的demo都是测试swoole代码用的。注释写的不少。认真的看应该都能看懂。

如何使用：
1.环境要求（基本）：项目只能运行在linux系统，并确保安装了PHP环境以及安装了swoole拓展，并且swoole开启了异步redis，还有普通的redis也要安装，因为项目中中也有同步redis，tp5的对swoole的适配已经在源码中做好，最好直接按我的开发环境来，其中你下载的在extend中如果没有ali这个文件夹，请将首页的ali放进去，不然使用不了短信服务。

2.如何调试：首先开启redis服务器端,再进入到thinkphp/script/bin/server/中,使用命令行执行：php ws_server.php,如果环境正确则不会报错。如果你使用的beta版的，因为添加了日志功能，所以每当有请求命令行会打印出日志信息，此时你应该执行一个脚本将日志输出到指定位置：
//这里可以使nohub来后台执行脚本，并且把输出的内容指定到一个文档中
 //nuhub /home/xiaolu/php/bin/php  /home/xiaolu/web/swoole_imooc/thinkphp/script/monitor/server.php >/home/xiaolu/web/swoole_imooc/thinkphp/script/monitor/log.text &
 websocket的默认端口为8811，监听的IP地址为127.0.0.1，在浏览器中使用地址：http://127.0.0.1:8811/live/login.html 进入了登录界面后 ，通过阿里的手机验证码可以正常的进行登录，这里是使用redis作为登录凭证的，redis存储的格式为sms_电话号码，因为我在源码中把阿里的短信验证凭证改了（文件在app\common\lib\ali\Sms类中），你需要正确配置你自己的凭证，或者直接在redis中执行 set sms_你的电话 123456,这样的话你就可以直接用123456作为你的验证码直接登录了.同样可以用这种方式这样多用户登录，多个用户登录后，可以直接测试聊天室功能，这个功能是属于不写入数据库的，因为实在没必要写这些重复性增删改查操作，你在聊天室输入内容后直接回车，其他用户便会实时收到你的信息，这时注意如果强刷页面就会消失了，实际上的聊天室是会记录到mysql数据库中的，但是这里我只是把收到的信息使用js让其显示到页面上而已。后台主持人功能使用浏览器访问：http://127.0.0.1/live/admin/live.html 界面比较粗糙，毕竟是测试版的。这里的话是默认指定了两支球队，实际上应该是从数据库进行动态显示的，写入内容选择发布即可，这时所有连接的客户端都会收到你发出的内容。核心代码都已经写好，数据库建表的文件也在那里，实际上需要完善的话只要建好数据库，把球队信息啥的录入进去，在完善一下页面，通信的模块基本不用改，需要改的都是普通的操作，懂tp5的很简单就能完成了。

这里我将安装环境所需的各类源码包也上传了。需要的话可以用。

我知道你们还是想看效果图的，那我还是放一下吧：
（客户端界面基于移动端，后台页面基于PC端）

登录界面：
![](https://github.com/lujinzhong/Live_basketball_room/blob/master/image/login.png)

登录后界面：
![](https://github.com/lujinzhong/Live_basketball_room/blob/master/image/登录完.png)

聊天室界面：
![](https://github.com/lujinzhong/Live_basketball_room/blob/master/image/聊天室.png)

主持人界面：
![](https://github.com/lujinzhong/Live_basketball_room/blob/master/image/主持人.png)


建议环境自己搭建，不要说学swoole的PHPer连基本环境都不会搭，遇到坑就多查资料，没有过不去的坑。实在不行，没办法了，那就用我的导出虚拟机系统包把，用vmware导入即可，源码和环境都有了。最后祝大家swoole学习愉快。虚拟机导出系统分享：链接：https://pan.baidu.com/s/140PLiqkDaiPHaUHPBOit8Q 密码：95ko
"
67,rizkyikhwan/miracle-basketball,Vue,"# Miracle Store ID

Apa itu Miracle Store ID?

Miracle Store ID adalah dalah web penjualan sepatu basket layaknya situs E-Commerce dengan fitur yang masih **sangat sederhana banget**.

> Reminder! there is a my personal project.
>
> 

[View Demo](https://miracle-basketball.firebaseapp.com/)

## Technology i use

Jadi, teknologi yang saya gunakan untuk membangun projek ini adalah :

1. Vue JS 2
2. Vue Router
3. Vuex (saya sangant pemula di Vuex sebenarnya)
4. Firebase

Beberapa library yang saya gunakan :

1. Bootstrap / Bootstrap-vue
2. Gsap
3. Font Awesome
4. vue-toast-notification
5. vue-form-wizard
6. little bit vuesax (hanya untuk select kategori brand)

Untuk menambahkan barang ke keranjang harus sudah memiliki akun dan login terlebih dahulu. Pada bagian nomor hp dan email di form pendaftaran, boleh sembarang aja, asalkan email yang mau didaftarkan harus sesuai dengan format email.
Juga dapat reset password, dapat mengubah nama profil kamu.

> Tidak dapat mengunggah foto profil

## Some Screenshot

Screenshot dari profile page dan cart page :

![Screenshot 2021-09-30 235112](https://user-images.githubusercontent.com/79355239/135501458-0dc42b1b-44d5-48c8-95ba-21195571ed9d.jpg)
![Screenshot 2021-09-30 235215](https://user-images.githubusercontent.com/79355239/135501593-cb976a63-c14c-4be3-be90-0a294b062770.jpg)
"
68,sndmrc/BasketballAnalyzeR,R,"# BasketballAnalyzeR
Contains data and code to accompany the book  
**P. Zuccolotto and M. Manisera (2020) Basketball Data Science. Applications with R. CRC Press. ISBN 9781138600799.**

### Developers 
Marco Sandri, Paola Zuccolotto, Marica Manisera  
Big and Open Data Innovation Laboratory (BODaI-Lab)  
https://bodai.unibs.it/  
University of Brescia, Italy

### Installation
```
# From CRAN:
install.packages(""BasketballAnalyzeR"")

# From Github (development version):
install.packages(""devtools"")
devtools::install_github(""sndmrc/BasketballAnalyzeR"""")
```

### Warning
If you want to reproduce the figures contained in the book of *Zuccolotto and Manisera (2020)* and if the version of your R machine is >= 3.6.0, you need to type  
```
RNGkind(sample.kind = ""Rounding"")
```
at the beginning of your working session.

### Links
[https://bdsports.unibs.it/basketballanalyzer/](https://bdsports.unibs.it/basketballanalyzer/)  
[https://cran.r-project.org/web/packages/BasketballAnalyzeR/](https://cran.r-project.org/web/packages/BasketballAnalyzeR/)

"
69,sportsdataverse/sportsdataverse-js,JavaScript,"# **sportsdataverse** <a href='https://js.sportsdataverse.org/'><img src='https://raw.githubusercontent.com/saiemgilani/sportsdataverse-js/main/docs2/static/img/sdv-js-logo.png' align=""right"" width=""20%"" min-width=""100px""/></a>

![Lifecycle:maturing](https://img.shields.io/badge/lifecycle-maturing-blue.svg?style=for-the-badge&logo=github)
![Contributors](https://img.shields.io/github/contributors/saiemgilani/sportsdataverse-js?style=for-the-badge)
[![npm](https://img.shields.io/npm/v/sportsdataverse?style=for-the-badge)](https://www.npmjs.com/package/sportsdataverse)  [![npm](https://img.shields.io/npm/dm/sportsdataverse?style=for-the-badge)](https://www.npmjs.com/package/sportsdataverse)
[![Twitter Follow](https://img.shields.io/twitter/follow/SportsDataverse?color=blue&label=%40SportsDataverse&logo=twitter&style=for-the-badge)](https://twitter.com/SportsDataverse) [![Twitter Follow](https://img.shields.io/twitter/follow/SaiemGilani?color=blue&label=%40SaiemGilani&logo=twitter&style=for-the-badge)](https://twitter.com/SaiemGilani)
[![NPM](https://nodei.co/npm/sportsdataverse.png)](https://npmjs.org/package/sportsdataverse)


## **Installation**

```bash
npm install sportsdataverse
```
## **Documentation**

For more information on the package and function reference, please see the [sportsdataverse node.js documentation website](https://js.sportsdataverse.org/)

## **Breaking Changes**

[**Full News on Releases**](https://js.sportsdataverse.org/CHANGELOG)

## Follow the [SportsDataverse](https://twitter.com/SportsDataverse) on Twitter and star this repo

[![Twitter Follow](https://img.shields.io/twitter/follow/SportsDataverse?color=blue&label=%40SportsDataverse&logo=twitter&style=for-the-badge)](https://twitter.com/SportsDataverse) 

[![GitHub stars](https://img.shields.io/github/stars/saiemgilani/sportsdataverse-js.svg?color=eee&logo=github&style=for-the-badge&label=Star%20sportsdataverse-js&maxAge=2592000)](https://github.com/saiemgilani/sportsdataverse-js/stargazers/)

## **Our Authors**

-   [Saiem Gilani](https://twitter.com/saiemgilani)

<a href=""https://twitter.com/saiemgilani"" target=""blank""><img src=""https://img.shields.io/twitter/follow/SaiemGilani?color=blue&label=%40SaiemGilani&logo=twitter&style=for-the-badge"" alt=""@SaiemGilani"" /></a>
<a href=""https://github.com/saiemgilani"" target=""blank""><img src=""https://img.shields.io/github/followers/saiemgilani?color=eee&logo=Github&style=for-the-badge"" alt=""@saiemgilani"" /></a>


## **Citations**

To cite the [**`sportsdataverse`**](https://js.sportsdataverse.org) Node.js package in publications, use:

BibTex Citation
```bibtex
@misc{gilani_2021_sportsdataverse_js,
  author = {Gilani, Saiem},
  title = {sportsdataverse-js: The SportsDataverse's Node.js Package for Sports Data.},
  url = {https://js.sportsdataverse.org},
  year = {2021}
}
```

## **Overview of Services**

Support for the following data from ESPN's endpoints:

- play-by-play (including shot location data when available)
- scores
- schedule
- standings
- rankings (not available for professional sports)

Recruiting data from 247Sports available for:

- men's college basketball
- college football

The following sports are available from ESPN:

- Men's College Basketball
- Women's College Basketball
- College Football
- WNBA
- NBA
- NFL
- NHL
- All team sports on the NCAA website:
  - 'football'
  - 'basketball-men'
  - 'basketball-women'
  - 'soccer-men'
  - 'soccer-women'
  - 'fieldhockey'
  - 'volleyball-women'
  - 'icehockey-men'
  - 'icehockey-women'
  - 'baseball'
  - 'beach-volleyball'
  - 'lacrosse-men'
  - 'lacrosse-women'
  - 'volleyball-men'

## **API Reference**

Operations for College Football.

**Kind**: global namespace  

* [cfb](#cfb) : <code>object</code>
    * [.getPlayByPlay(id)](#cfb.getPlayByPlay) ⇒
    * [.getBoxScore(id)](#cfb.getBoxScore) ⇒
    * [.getSummary(id)](#cfb.getSummary) ⇒
    * [.getPicks(id)](#cfb.getPicks) ⇒
    * [.getPlayerRankings(year, page, group, state)](#cfb.getPlayerRankings) ⇒
    * [.getSchoolRankings(year, page)](#cfb.getSchoolRankings) ⇒
    * [.getSchoolCommits(year, school)](#cfb.getSchoolCommits) ⇒
    * [.getRankings(year, week)](#cfb.getRankings) ⇒
    * [.getSchedule(year, month, day, group, seasontype)](#cfb.getSchedule) ⇒
    * [.getScoreboard(year, month, day, group, seasontype, limit)](#cfb.getScoreboard) ⇒
    * [.getConferences(year, group)](#cfb.getConferences) ⇒
    * [.getStandings(year, group)](#cfb.getStandings) ⇒
    * [.getTeamList(group)](#cfb.getTeamList) ⇒
    * [.getTeamInfo(id)](#cfb.getTeamInfo) ⇒
    * [.getTeamPlayers(id)](#cfb.getTeamPlayers)

<a name=""cfb.getPlayByPlay""></a>

### cfb.getPlayByPlay(id) ⇒
Gets the College Football game play-by-play data for a specified game.

**Kind**: static method of [<code>cfb</code>](#cfb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Game id. |

**Example**  
```js
const result = await sdv.cfb.getPlayByPlay(401256194);
```
<a name=""cfb.getBoxScore""></a>

### cfb.getBoxScore(id) ⇒
Gets the College Football game box score data for a specified game.

**Kind**: static method of [<code>cfb</code>](#cfb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Game id. |

**Example**  
```js
const result = await sdv.cfb.getBoxScore(401256194);
```
<a name=""cfb.getSummary""></a>

### cfb.getSummary(id) ⇒
Gets the College Football game summary data for a specified game.

**Kind**: static method of [<code>cfb</code>](#cfb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Game id. |

**Example**  
```js
const result = await sdv.cfb.getSummary(401256194);
```
<a name=""cfb.getPicks""></a>

### cfb.getPicks(id) ⇒
Gets the College Football PickCenter data for a specified game.

**Kind**: static method of [<code>cfb</code>](#cfb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Game id. |

**Example**  
```js
const result = await sdv.cfb.getPicks(401256194);
```
<a name=""cfb.getPlayerRankings""></a>

### cfb.getPlayerRankings(year, page, group, state) ⇒
Gets the College Football Player recruiting data for a specified year, page, position, state and institution type if available.

**Kind**: static method of [<code>cfb</code>](#cfb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| year | <code>\*</code> | Year (YYYY) |
| page | <code>number</code> | Page (50 per page) |
| group | <code>&quot;HighSchool&quot;</code> \| <code>&quot;JuniorCollege&quot;</code> \| <code>&quot;PrepSchool&quot;</code> | Institution Type |
| state | <code>string</code> | State of recruit |

**Example**  
```js
const result = await sdv.cfb.getPlayerRankings({year: 2016});
```
<a name=""cfb.getSchoolRankings""></a>

### cfb.getSchoolRankings(year, page) ⇒
Gets the College Football School recruiting data for a specified year and page if available.

**Kind**: static method of [<code>cfb</code>](#cfb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| year | <code>\*</code> | Year (YYYY) |
| page | <code>number</code> | Page (50 per page) |

**Example**  
```js
const result = await sdv.cfb.getSchoolRankings({year: 2016});
```
<a name=""cfb.getSchoolCommits""></a>

### cfb.getSchoolCommits(year, school) ⇒
Gets the College Football School commitment data for a specified school and year.

**Kind**: static method of [<code>cfb</code>](#cfb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| year | <code>\*</code> | Year (YYYY) |
| school | <code>string</code> | School |

**Example**  
```js
const result = await sdv.cfb.getSchoolCommits({school: 'Florida State', year: 2021});
```
<a name=""cfb.getRankings""></a>

### cfb.getRankings(year, week) ⇒
Gets the CFB rankings data for a specified year and week if available.

**Kind**: static method of [<code>cfb</code>](#cfb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| year | <code>\*</code> | Year (YYYY) |
| week | <code>\*</code> | Week |

**Example**  
```js
const result = await sdv.cfb.getRankings(year = 2020, week = 4)
```
<a name=""cfb.getSchedule""></a>

### cfb.getSchedule(year, month, day, group, seasontype) ⇒
Gets the College Football schedule data for a specified date if available.

**Kind**: static method of [<code>cfb</code>](#cfb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| year | <code>\*</code> | Year (YYYY) |
| month | <code>\*</code> | Month (MM) |
| day | <code>\*</code> | Day (DD) |
| group | <code>number</code> | Group is 80 for FBS, 81 for FCS |
| seasontype | <code>number</code> | Pre-Season: 1, Regular Season: 2, Postseason: 3, Off-season: 4 |

**Example**  
```js
const result = await sdv.cfb.getSchedule(year = 2019, month = 11, day = 16, group=80)
```
<a name=""cfb.getScoreboard""></a>

### cfb.getScoreboard(year, month, day, group, seasontype, limit) ⇒
Gets the College Football scoreboard data for a specified date if available.

**Kind**: static method of [<code>cfb</code>](#cfb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| year | <code>\*</code> | Year (YYYY) |
| month | <code>\*</code> | Month (MM) |
| day | <code>\*</code> | Day (DD) |
| group | <code>number</code> | Group is 80 for FBS, 81 for FCS |
| seasontype | <code>number</code> | Pre-Season: 1, Regular Season: 2, Postseason: 3, Off-season: 4 |
| limit | <code>number</code> | Limit on the number of results @default 300 |

**Example**  
```js
const result = await sdv.cfb.getScoreboard(year = 2019, month = 11, day = 16, group=80)
```
<a name=""cfb.getConferences""></a>

### cfb.getConferences(year, group) ⇒
Gets the list of all College Football conferences and their identification info for ESPN.

**Kind**: static method of [<code>cfb</code>](#cfb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| year | <code>number</code> | Season |
| group | <code>number</code> | Group is 80 for FBS, 81 for FCS |

**Example**  
```js
const yr = 2021;const result = await sdv.cfb.getConferences(year = yr, group = 80);
```
<a name=""cfb.getStandings""></a>

### cfb.getStandings(year, group) ⇒
Gets the team standings for College Football.

**Kind**: static method of [<code>cfb</code>](#cfb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| year | <code>number</code> | Season |
| group | <code>number</code> | Group is 80 for FBS, 81 for FCS |

**Example**  
```js
const yr = 2020;const result = await sdv.cfb.getStandings(year = yr);
```
<a name=""cfb.getTeamList""></a>

### cfb.getTeamList(group) ⇒
Gets the list of all College Football teams their identification info for ESPN.

**Kind**: static method of [<code>cfb</code>](#cfb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| group | <code>number</code> | Group is 80 for FBS, 81 for FCS |

**Example**  
```js
const result = await sdv.cfb.getTeamList(group=80);
```
<a name=""cfb.getTeamInfo""></a>

### cfb.getTeamInfo(id) ⇒
Gets the team info for a specific College Football team.

**Kind**: static method of [<code>cfb</code>](#cfb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Team Id |

**Example**  
```js
const teamId = 52;const result = await sdv.cfb.getTeamInfo(teamId);
```
<a name=""cfb.getTeamPlayers""></a>

### cfb.getTeamPlayers(id)
Gets the team roster information for a specific College Football team.

**Kind**: static method of [<code>cfb</code>](#cfb)  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Team Id |

**Example**  
```js
const teamId = 52;const result = await sdv.cfb.getTeamPlayers(teamId);
```

Operations for Men's College Basketball.

**Kind**: global namespace  

* [mbb](#mbb) : <code>object</code>
    * [.getPlayByPlay(id)](#mbb.getPlayByPlay) ⇒
    * [.getBoxScore(id)](#mbb.getBoxScore) ⇒
    * [.getSummary(id)](#mbb.getSummary) ⇒
    * [.getPicks(id)](#mbb.getPicks) ⇒
    * [.getRankings(year, week)](#mbb.getRankings) ⇒
    * [.getPlayerRankings(year, page, group)](#mbb.getPlayerRankings) ⇒
    * [.getSchoolRankings(year, page)](#mbb.getSchoolRankings) ⇒
    * [.getSchoolCommits(year, school)](#mbb.getSchoolCommits) ⇒
    * [.getSchedule(year, month, day, group, seasontype)](#mbb.getSchedule) ⇒
    * [.getScoreboard(year, month, day, group, seasontype, limit)](#mbb.getScoreboard) ⇒
    * [.getConferences(year, group)](#mbb.getConferences) ⇒
    * [.getStandings(year, group)](#mbb.getStandings) ⇒
    * [.getTeamList(group)](#mbb.getTeamList) ⇒
    * [.getTeamInfo(id)](#mbb.getTeamInfo) ⇒
    * [.getTeamPlayers(id)](#mbb.getTeamPlayers) ⇒

<a name=""mbb.getPlayByPlay""></a>

### mbb.getPlayByPlay(id) ⇒
Gets the Men's College Basketball game play-by-play data for a specified game.

**Kind**: static method of [<code>mbb</code>](#mbb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Game id. |

**Example**  
```js
const result = await sdv.mbb.getPlayByPlay(401260281);
```
<a name=""mbb.getBoxScore""></a>

### mbb.getBoxScore(id) ⇒
Gets the Men's College Basketball game box score data for a specified game.

**Kind**: static method of [<code>mbb</code>](#mbb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Game id. |

**Example**  
```js
const result = await sdv.mbb.getBoxScore(401260281);
```
<a name=""mbb.getSummary""></a>

### mbb.getSummary(id) ⇒
Gets the Men's College Basketball game summary data for a specified game.

**Kind**: static method of [<code>mbb</code>](#mbb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Game id. |

**Example**  
```js
const result = await sdv.mbb.getSummary(401260281);
```
<a name=""mbb.getPicks""></a>

### mbb.getPicks(id) ⇒
Gets the Men's College Basketball game PickCenter data for a specified game.

**Kind**: static method of [<code>mbb</code>](#mbb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Game id. |

**Example**  
```js
const result = await sdv.mbb.getPicks(401260281);
```
<a name=""mbb.getRankings""></a>

### mbb.getRankings(year, week) ⇒
Gets the Men's College Basketball rankings data for a specified year and week if available.

**Kind**: static method of [<code>mbb</code>](#mbb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| year | <code>\*</code> | Year (YYYY) |
| week | <code>\*</code> | Week |

**Example**  
```js
const result = await sdv.mbb.getRankings(year = 2020, week = 15)
```
<a name=""mbb.getPlayerRankings""></a>

### mbb.getPlayerRankings(year, page, group) ⇒
Gets the Men's College Basketball Player recruiting data for a specified year, page, position and institution type if available.

**Kind**: static method of [<code>mbb</code>](#mbb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| year | <code>\*</code> | Year (YYYY) |
| page | <code>number</code> | Page (50 per page) |
| group | <code>&quot;HighSchool&quot;</code> \| <code>&quot;JuniorCollege&quot;</code> \| <code>&quot;PrepSchool&quot;</code> | Institution Type |

**Example**  
```js
const result = await sdv.mbb.getPlayerRankings({year: 2016});
```
<a name=""mbb.getSchoolRankings""></a>

### mbb.getSchoolRankings(year, page) ⇒
Gets the Men's College Basketball School recruiting data for a specified year, page, position and institution type if available.

**Kind**: static method of [<code>mbb</code>](#mbb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| year | <code>\*</code> | Year (YYYY) |
| page | <code>number</code> | Page (50 per page) |

**Example**  
```js
const result = await sdv.mbb.getSchoolRankings({year: 2016});
```
<a name=""mbb.getSchoolCommits""></a>

### mbb.getSchoolCommits(year, school) ⇒
Gets the Men's College Basketball School commitment data for a specified school and year.

**Kind**: static method of [<code>mbb</code>](#mbb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| year | <code>\*</code> | Year (YYYY) |
| school | <code>string</code> | School |

**Example**  
```js
const result = await sdv.mbb.getSchoolCommits({school: 'Clemson', year: 2016});
```
<a name=""mbb.getSchedule""></a>

### mbb.getSchedule(year, month, day, group, seasontype) ⇒
Gets the Men's College Basketball schedule data for a specified date if available.

**Kind**: static method of [<code>mbb</code>](#mbb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| year | <code>\*</code> | Year (YYYY) |
| month | <code>\*</code> | Month (MM) |
| day | <code>\*</code> | Day (DD) |
| group | <code>number</code> | Group is 50 for Division-I, 51 for Division-II, 52 for Division-III |
| seasontype | <code>number</code> | Pre-Season: 1, Regular Season: 2, Postseason: 3, Off-season: 4 |

**Example**  
```js
const result = await sdv.mbb.getSchedule(year = 2021, month = 02, day = 15, group=50)
```
<a name=""mbb.getScoreboard""></a>

### mbb.getScoreboard(year, month, day, group, seasontype, limit) ⇒
Gets the Men's College Basketball scoreboard data for a specified date if available.

**Kind**: static method of [<code>mbb</code>](#mbb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| year | <code>\*</code> | Year (YYYY) |
| month | <code>\*</code> | Month (MM) |
| day | <code>\*</code> | Day (DD) |
| group | <code>number</code> | Group is 50 for Division-I, 51 for Division-II, 52 for Division-III |
| seasontype | <code>number</code> | Pre-Season: 1, Regular Season: 2, Postseason: 3, Off-season: 4 |
| limit | <code>number</code> | Limit on the number of results @default 300 |

**Example**  
```js
const result = await sdv.mbb.getScoreboard(year = 2021, month = 02, day = 15, group=50)
```
<a name=""mbb.getConferences""></a>

### mbb.getConferences(year, group) ⇒
Gets the Men's College Basketball Conferences.

**Kind**: static method of [<code>mbb</code>](#mbb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| year | <code>number</code> | Season |
| group | <code>number</code> | Group is 50 for Division-I, 51 for Division-II, 52 for Division-III |

**Example**  
```js
const yr = 2021;const result = await sdv.mbb.getConferences(year = yr, group = 50);
```
<a name=""mbb.getStandings""></a>

### mbb.getStandings(year, group) ⇒
Gets the team standings for Men's College Basketball.

**Kind**: static method of [<code>mbb</code>](#mbb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| year | <code>number</code> | Season |
| group | <code>number</code> | Group is 50 for Division-I, 51 for Division-II, 52 for Division-III, see wbb.getConferences() for more info |

**Example**  
```js
const yr = 2020;const result = await sdv.mbb.getStandings(year = yr);
```
<a name=""mbb.getTeamList""></a>

### mbb.getTeamList(group) ⇒
Gets the list of all College Football teams their identification info for ESPN.

**Kind**: static method of [<code>mbb</code>](#mbb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| group | <code>number</code> | Group is 50 for Division-I, 51 for Division-II, 52 for Division-III |

**Example**  
```js
const result = await sdv.mbb.getTeamList(group=50);
```
<a name=""mbb.getTeamInfo""></a>

### mbb.getTeamInfo(id) ⇒
Gets the team info for a specific College Basketball team.

**Kind**: static method of [<code>mbb</code>](#mbb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Team Id |

**Example**  
```js
const teamId = 52;const result = await sdv.mbb.getTeamInfo(teamId);
```
<a name=""mbb.getTeamPlayers""></a>

### mbb.getTeamPlayers(id) ⇒
Gets the team roster information for a specific Men's College Basketball team.

**Kind**: static method of [<code>mbb</code>](#mbb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Team Id |

**Example**  
```js
const teamId = 52;const result = await sdv.mbb.getTeamPlayers(teamId);
```

Operations for NBA.

**Kind**: global namespace  

* [nba](#nba) : <code>object</code>
    * [.getPlayByPlay(id)](#nba.getPlayByPlay) ⇒
    * [.getBoxScore(id)](#nba.getBoxScore) ⇒
    * [.getSummary(id)](#nba.getSummary) ⇒
    * [.getPicks(id)](#nba.getPicks) ⇒
    * [.getSchedule(year, month, day)](#nba.getSchedule) ⇒
    * [.getScoreboard(year, month, day, limit)](#nba.getScoreboard) ⇒
    * [.getStandings(year, group)](#nba.getStandings) ⇒
    * [.getTeamList()](#nba.getTeamList) ⇒
    * [.getTeamInfo(id)](#nba.getTeamInfo) ⇒
    * [.getTeamPlayers(id)](#nba.getTeamPlayers) ⇒

<a name=""nba.getPlayByPlay""></a>

### nba.getPlayByPlay(id) ⇒
Gets the NBA game play-by-play data for a specified game.

**Kind**: static method of [<code>nba</code>](#nba)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Game id. |

**Example**  
```js
const result = await sdv.nba.getPlayByPlay(401283399);
```
<a name=""nba.getBoxScore""></a>

### nba.getBoxScore(id) ⇒
Gets the NBA game box score data for a specified game.

**Kind**: static method of [<code>nba</code>](#nba)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Game id. |

**Example**  
```js
const result = await sdv.nba.getBoxScore(401283399);
```
<a name=""nba.getSummary""></a>

### nba.getSummary(id) ⇒
Gets the NBA game summary data for a specified game.

**Kind**: static method of [<code>nba</code>](#nba)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Game id. |

**Example**  
```js
const result = await sdv.nba.getSummary(401283399);
```
<a name=""nba.getPicks""></a>

### nba.getPicks(id) ⇒
Gets the NBA game PickCenter data for a specified game.

**Kind**: static method of [<code>nba</code>](#nba)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Game id. |

**Example**  
```js
const result = await sdv.nba.getPicks(401283399);
```
<a name=""nba.getSchedule""></a>

### nba.getSchedule(year, month, day) ⇒
Gets the NBA schedule data for a specified date if available.

**Kind**: static method of [<code>nba</code>](#nba)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| year | <code>\*</code> | Year (YYYY) |
| month | <code>\*</code> | Month (MM) |
| day | <code>\*</code> | Day (DD) |

**Example**  
```js
const result = await sdv.nba.getSchedule(year = 2016, month = 04, day = 15)
```
<a name=""nba.getScoreboard""></a>

### nba.getScoreboard(year, month, day, limit) ⇒
Gets the NBA scoreboard data for a specified date if available.

**Kind**: static method of [<code>nba</code>](#nba)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| year | <code>\*</code> | Year (YYYY) |
| month | <code>\*</code> | Month (MM) |
| day | <code>\*</code> | Day (DD) |
| limit | <code>number</code> | Limit on the number of results @default 300 |

**Example**  
```js
const result = await sdv.nba.getScoreboard(year = 2019, month = 11, day = 16)
```
<a name=""nba.getStandings""></a>

### nba.getStandings(year, group) ⇒
Gets the team standings for the NBA.

**Kind**: static method of [<code>nba</code>](#nba)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| year | <code>number</code> | Season |
| group | <code>string</code> | acceptable group names: 'league','conference','division' |

**Example**  
```js
const yr = 2016;const result = await sdv.nba.getStandings(year = yr);
```
<a name=""nba.getTeamList""></a>

### nba.getTeamList() ⇒
Gets the list of all NBA teams their identification info for ESPN.

**Kind**: static method of [<code>nba</code>](#nba)  
**Returns**: json  
**Example**  
```js
const result = await sdv.nba.getTeamList();
```
<a name=""nba.getTeamInfo""></a>

### nba.getTeamInfo(id) ⇒
Gets the team info for a specific NBA team.

**Kind**: static method of [<code>nba</code>](#nba)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Team Id |

**Example**  
```js
const teamId = 16;const result = await sdv.nba.getTeamInfo(teamId);
```
<a name=""nba.getTeamPlayers""></a>

### nba.getTeamPlayers(id) ⇒
Gets the team roster information for a specific NBA team.

**Kind**: static method of [<code>nba</code>](#nba)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Team Id |

**Example**  
```js
const teamId = 16;const result = await sdv.nba.getTeamPlayers(teamId);
```

Operations for NCAA Sports.

**Kind**: global namespace  

* [ncaa](#ncaa) : <code>object</code>
    * [.getRedirectUrl(url)](#ncaa.getRedirectUrl) ⇒
    * [.getInfo(game)](#ncaa.getInfo) ⇒
    * [.getBoxScore(game)](#ncaa.getBoxScore) ⇒
    * [.getPlayByPlay(game)](#ncaa.getPlayByPlay) ⇒
    * [.getTeamStats(game)](#ncaa.getTeamStats) ⇒
    * [.getScoringSummary(game)](#ncaa.getScoringSummary) ⇒
    * [.getScoreboard(sport, division, year, month, day)](#ncaa.getScoreboard) ⇒
    * [.getSports()](#ncaa.getSports) ⇒
    * [.getSeasons(sport)](#ncaa.getSeasons) ⇒
    * [.getDivisions(sport, season)](#ncaa.getDivisions) ⇒
    * [.getSportDivisionData(sport, season, division, rankingPeriod, type, gameHigh, category)](#ncaa.getSportDivisionData) ⇒
    * [.getPlayerData(sport, season, division, rankingPeriod, gameHigh, category)](#ncaa.getPlayerData) ⇒
    * [.getTeamData(sport, season, division, rankingPeriod, gameHigh, category)](#ncaa.getTeamData) ⇒

<a name=""ncaa.getRedirectUrl""></a>

### ncaa.getRedirectUrl(url) ⇒
Gets the gameId for older games whose url redirects to the current url pattern using thegame url fragment (relative to [https://ncaa.com](https://ncaa.com)) pulled from ncaaScoreboard

**Kind**: static method of [<code>ncaa</code>](#ncaa)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| url | <code>string</code> | Game url as pulled from ncaaScoreboard.getNcaaScoreboard. |

**Example**  
```js
const result = await sdv.ncaaScoreboard.getNcaaScoreboard(sport = 'basketball-men', division = 'd3', year = 2019, month = 02, day = 15)const urlGame = result[""games""][16][""game""][""url""]const gameId = await sdv.ncaa.getRedirectUrl(url=urlGame);
```
<a name=""ncaa.getInfo""></a>

### ncaa.getInfo(game) ⇒
Gets the gameInfo data for a specified game.

**Kind**: static method of [<code>ncaa</code>](#ncaa)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| game | <code>number</code> | Game id. |

**Example**  
```js
const result = await sdv.ncaa.getInfo(5764053);
```
<a name=""ncaa.getBoxScore""></a>

### ncaa.getBoxScore(game) ⇒
Gets the box score data for a specified game if available.

**Kind**: static method of [<code>ncaa</code>](#ncaa)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| game | <code>number</code> | Game id. |

**Example**  
```js
const result = await sdv.ncaa.getBoxScore(5764053);
```
<a name=""ncaa.getPlayByPlay""></a>

### ncaa.getPlayByPlay(game) ⇒
Gets the play-by-play data for a specified game if available.

**Kind**: static method of [<code>ncaa</code>](#ncaa)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| game | <code>number</code> | Game id. |

**Example**  
```js
const result = await sdv.ncaa.getPlayByPlay(5764053);
```
<a name=""ncaa.getTeamStats""></a>

### ncaa.getTeamStats(game) ⇒
Gets the team stats data for a specified game if available.

**Kind**: static method of [<code>ncaa</code>](#ncaa)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| game | <code>number</code> | Game id. |

**Example**  
```js
const result = await sdv.ncaa.getTeamStats(5764053);
```
<a name=""ncaa.getScoringSummary""></a>

### ncaa.getScoringSummary(game) ⇒
Gets the scoring summary data for a specified game if available.

**Kind**: static method of [<code>ncaa</code>](#ncaa)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| game | <code>number</code> | Game id. |

**Example**  
```js
const result = await sdv.ncaa.getScoringSummary(5764053);
```
<a name=""ncaa.getScoreboard""></a>

### ncaa.getScoreboard(sport, division, year, month, day) ⇒
Gets the scoreboard data for a specified date and team sport if available.

**Kind**: static method of [<code>ncaa</code>](#ncaa)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| sport | <code>string</code> | Sport name. Acceptable values: 'football','basketball-men', 'basketball-women', 'baseball', 'softball', 'soccer-men','soccer-women', 'fieldhockey', 'icehockey-men','icehockey-women', 'lacrosse-men','lacrosse-women', 'beach-volleyball', 'volleyball-women', 'volleyball-men' |
| division | <code>string</code> | Division of teams desired.  Acceptable values: Football - ['fbs','fcs','d2','d3'] All others - ['d1','d2','d3'] |
| year | <code>\*</code> | Year (YYYY) |
| month | <code>\*</code> | Month (MM) |
| day | <code>\*</code> | Day (DD) |

**Example**  
```js
const result = await sdv.ncaa.getScoreboard(sport = 'basketball-men', division = 'd3', year = 2019, month = 02, day = 15)
```
<a name=""ncaa.getSports""></a>

### ncaa.getSports() ⇒
Retrieves the set of sports and their abbreviations.

**Kind**: static method of [<code>ncaa</code>](#ncaa)  
**Returns**: json  
**Example**  
```js
const result = sdv.ncaa.getSports();
```
<a name=""ncaa.getSeasons""></a>

### ncaa.getSeasons(sport) ⇒
Retrieves the seasons for the selected sport.

**Kind**: static method of [<code>ncaa</code>](#ncaa)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| sport | <code>string</code> | Sport abbreviation. Acceptable values: 'MBA' = Baseball, 'MBB' = Men's basketball, 'MFB' = Men's Football, 'MIH' = Men's Ice-hockey, 'MLA' = Men's Lacrosse', 'MSO' = Men's Soccer, 'MTE' = Men's Tennis, 'MVB' = Men's Volleyball, 'MWP' = Men's Water Polo, 'WBB' = Women's Basketball, 'WBW' = Women's Bowling, 'WFH' = Field Hockey, 'WIH' = Women's Ice-Hockey, 'WLA' = Women's Lacrosse, 'WSB' = Women's Softball, 'WSO' = Women's Soccer, 'WSV' = Women's Beach Volleyball, 'WTE' = Women's Tennis, 'WVB' = Women's Volleyball, 'WWP' = Women's Water Polo |

**Example**  
```js
const result = sdv.ncaa.getSeasons(sport='MBB');
```
<a name=""ncaa.getDivisions""></a>

### ncaa.getDivisions(sport, season) ⇒
Retrieves the Divisions for the selected sport and season.

**Kind**: static method of [<code>ncaa</code>](#ncaa)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| sport | <code>string</code> | Sport abbreviation. Acceptable values: 'MBA' = Baseball, 'MBB' = Men's basketball, 'MFB' = Men's Football, 'MIH' = Men's Ice-hockey, 'MLA' = Men's Lacrosse', 'MSO' = Men's Soccer, 'MTE' = Men's Tennis, 'MVB' = Men's Volleyball, 'MWP' = Men's Water Polo, 'WBB' = Women's Basketball, 'WBW' = Women's Bowling, 'WFH' = Field Hockey, 'WIH' = Women's Ice-Hockey, 'WLA' = Women's Lacrosse, 'WSB' = Women's Softball, 'WSO' = Women's Soccer, 'WSV' = Women's Beach Volleyball, 'WTE' = Women's Tennis, 'WVB' = Women's Volleyball, 'WWP' = Women's Water Polo |
| season | <code>string</code> | Season for sport |

**Example**  
```js
const result = sdv.ncaa.getDivisions(sport='MBB', season='2017');
```
<a name=""ncaa.getSportDivisionData""></a>

### ncaa.getSportDivisionData(sport, season, division, rankingPeriod, type, gameHigh, category) ⇒
Request the data from the NCAA Stats website.

**Kind**: static method of [<code>ncaa</code>](#ncaa)  
**Returns**: json  

| Param | Description |
| --- | --- |
| sport | Sport abbreviation. Acceptable values: 'MBA' = Baseball, 'MBB' = Men's basketball, 'MFB' = Men's Football, 'MIH' = Men's Ice-hockey, 'MLA' = Men's Lacrosse', 'MSO' = Men's Soccer, 'MTE' = Men's Tennis, 'MVB' = Men's Volleyball, 'MWP' = Men's Water Polo, 'WBB' = Women's Basketball, 'WBW' = Women's Bowling, 'WFH' = Field Hockey, 'WIH' = Women's Ice-Hockey, 'WLA' = Women's Lacrosse, 'WSB' = Women's Softball, 'WSO' = Women's Soccer, 'WSV' = Women's Beach Volleyball, 'WTE' = Women's Tennis, 'WVB' = Women's Volleyball, 'WWP' = Women's Water Polo |
| season | Season of query, value for 2016-2017 season would be 2017. |
| division | Division, for college football: 11 for FBS, 12 for FCS, otherwise 1 for Division-I, 2 for Division-II, 3 for Division-III. |
| rankingPeriod | Integer value indicating the ranking period, options can be found from using the @function ncaa.getSportDivisionData function. |
| type | Individual or Team type of statistics |
| gameHigh | logical, indicating whether the statistic desired is of the game-high variety |
| category | Value for the stat category, can also be found using the @function ncaa.getSportDivisionData |

**Example**  
```js
const sportDivisionData = sdv.ncaa.getSportDivisionData(sport='MFB',season='2016',division=12,type='team',gameHigh=true);
```
<a name=""ncaa.getPlayerData""></a>

### ncaa.getPlayerData(sport, season, division, rankingPeriod, gameHigh, category) ⇒
Get the Player Data from the NCAA Stats website.

**Kind**: static method of [<code>ncaa</code>](#ncaa)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| sport |  | Sport abbreviation. Acceptable values: 'MBA' = Baseball, 'MBB' = Men's basketball, 'MFB' = Men's Football, 'MIH' = Men's Ice-hockey, 'MLA' = Men's Lacrosse', 'MSO' = Men's Soccer, 'MTE' = Men's Tennis, 'MVB' = Men's Volleyball, 'MWP' = Men's Water Polo, 'WBB' = Women's Basketball, 'WBW' = Women's Bowling, 'WFH' = Field Hockey, 'WIH' = Women's Ice-Hockey, 'WLA' = Women's Lacrosse, 'WSB' = Women's Softball, 'WSO' = Women's Soccer, 'WSV' = Women's Beach Volleyball, 'WTE' = Women's Tennis, 'WVB' = Women's Volleyball, 'WWP' = Women's Water Polo |
| season |  | Season of query, value for 2016-2017 season would be 2017. |
| division |  | Division, for college football: 11 for FBS, 12 for FCS, otherwise 1 for Division-I, 2 for Division-II, 3 for Division-III. |
| rankingPeriod |  | Integer value indicating the ranking period, options can be found from using the @function ncaa.getSportDivisionData function. |
| gameHigh | <code>&#x27;Y&#x27;</code> \| <code>&#x27;N&#x27;</code> | logical, indicating whether the statistic desired is of the game-high variety |
| category |  | Value for the stat category, can also be found using the @function ncaa.getSportDivisionData |

**Example**  
```js
const players =  await sdv.ncaa.getPlayerData(sport = 'MFB', year = '2017', division = '11',rankingPeriod = '52', gameHigh='N', category = '20')
```
<a name=""ncaa.getTeamData""></a>

### ncaa.getTeamData(sport, season, division, rankingPeriod, gameHigh, category) ⇒
Get the Team Data from the NCAA Stats website.

**Kind**: static method of [<code>ncaa</code>](#ncaa)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| sport |  | Sport abbreviation. Acceptable values: 'MBA' = Baseball, 'MBB' = Men's basketball, 'MFB' = Men's Football, 'MIH' = Men's Ice-hockey, 'MLA' = Men's Lacrosse', 'MSO' = Men's Soccer, 'MTE' = Men's Tennis, 'MVB' = Men's Volleyball, 'MWP' = Men's Water Polo, 'WBB' = Women's Basketball, 'WBW' = Women's Bowling, 'WFH' = Field Hockey, 'WIH' = Women's Ice-Hockey, 'WLA' = Women's Lacrosse, 'WSB' = Women's Softball, 'WSO' = Women's Soccer, 'WSV' = Women's Beach Volleyball, 'WTE' = Women's Tennis, 'WVB' = Women's Volleyball, 'WWP' = Women's Water Polo |
| season |  | Season of query, value for 2016-2017 season would be 2017. |
| division |  | Division, for college football: 11 for FBS, 12 for FCS, otherwise 1 for Division-I, 2 for Division-II, 3 for Division-III. |
| rankingPeriod |  | Integer value indicating the ranking period, options can be found from using the @function ncaaSports.getSportDivisionData function. |
| gameHigh | <code>&#x27;Y&#x27;</code> \| <code>&#x27;N&#x27;</code> | logical, indicating whether the statistic desired is of the game-high variety |
| category |  | Value for the stat category, can also be found using the @function ncaaSports.getSportDivisionData |

**Example**  
```js
const teams =  await sdv.ncaa.getTeamData(sport = 'MFB', year = '2017', division = '11', rankingPeriod = '52', gameHigh='N', category = '20')
```

Operations for NFL.

**Kind**: global namespace  

* [nfl](#nfl) : <code>object</code>
    * [.getPlayByPlay(id)](#nfl.getPlayByPlay) ⇒
    * [.getBoxScore(id)](#nfl.getBoxScore) ⇒
    * [.getSummary(id)](#nfl.getSummary) ⇒
    * [.getPicks(id)](#nfl.getPicks) ⇒
    * [.getSchedule(year, month, day)](#nfl.getSchedule) ⇒
    * [.getScoreboard(year, month, day, limit)](#nfl.getScoreboard) ⇒
    * [.getStandings(year, group)](#nfl.getStandings) ⇒
    * [.getTeamList()](#nfl.getTeamList)
    * [.getTeamInfo(id)](#nfl.getTeamInfo) ⇒
    * [.getTeamPlayers(id)](#nfl.getTeamPlayers) ⇒

<a name=""nfl.getPlayByPlay""></a>

### nfl.getPlayByPlay(id) ⇒
Gets the NFL game play-by-play data for a specified game.

**Kind**: static method of [<code>nfl</code>](#nfl)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Game id. |

**Example**  
```js
const result = await sdv.nfl.getPlayByPlay(401220403);
```
<a name=""nfl.getBoxScore""></a>

### nfl.getBoxScore(id) ⇒
Gets the NFL game box score data for a specified game.

**Kind**: static method of [<code>nfl</code>](#nfl)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Game id. |

**Example**  
```js
const result = await sdv.nfl.getBoxScore(401220403);
```
<a name=""nfl.getSummary""></a>

### nfl.getSummary(id) ⇒
Gets the NFL game summary data for a specified game.

**Kind**: static method of [<code>nfl</code>](#nfl)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Game id. |

**Example**  
```js
const result = await sdv.nfl.getSummary(401220403);
```
<a name=""nfl.getPicks""></a>

### nfl.getPicks(id) ⇒
Gets the NFL PickCenter data for a specified game.

**Kind**: static method of [<code>nfl</code>](#nfl)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Game id. |

**Example**  
```js
const result = await sdv.nfl.getPicks(401220403);
```
<a name=""nfl.getSchedule""></a>

### nfl.getSchedule(year, month, day) ⇒
Gets the NFL schedule data for a specified date if available.

**Kind**: static method of [<code>nfl</code>](#nfl)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| year | <code>\*</code> | Year (YYYY) |
| month | <code>\*</code> | Month (MM) |
| day | <code>\*</code> | Day (DD) |

**Example**  
```js
const result = await sdv.nfl.getSchedule(year = 2019, month = 11, day = 17)
```
<a name=""nfl.getScoreboard""></a>

### nfl.getScoreboard(year, month, day, limit) ⇒
Gets the NFL scoreboard data for a specified date if available.

**Kind**: static method of [<code>nfl</code>](#nfl)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| year | <code>\*</code> | Year (YYYY) |
| month | <code>\*</code> | Month (MM) |
| day | <code>\*</code> | Day (DD) |
| limit | <code>number</code> | Limit on the number of results @default 300 |

**Example**  
```js
const result = await sdv.nfl.getScoreboard(year = 2019, month = 11, day = 17)
```
<a name=""nfl.getStandings""></a>

### nfl.getStandings(year, group) ⇒
Gets the team standings for the NFL.

**Kind**: static method of [<code>nfl</code>](#nfl)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| year | <code>number</code> | Season |
| group | <code>string</code> | acceptable group names: 'league','conference','division' |

**Example**  
```js
const yr = 2021;const result = await sdv.nfl.getStandings(year = yr);
```
<a name=""nfl.getTeamList""></a>

### nfl.getTeamList()
Gets the list of all NFL teams their identification info for ESPN.

**Kind**: static method of [<code>nfl</code>](#nfl)  
**Example**  
```js
const result = await sdv.nfl.getTeamList();
```
<a name=""nfl.getTeamInfo""></a>

### nfl.getTeamInfo(id) ⇒
Gets the team info for a specific NFL team.

**Kind**: static method of [<code>nfl</code>](#nfl)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Team Id |

**Example**  
```js
const teamId = 16;const result = await sdv.nfl.getTeamInfo(teamId);
```
<a name=""nfl.getTeamPlayers""></a>

### nfl.getTeamPlayers(id) ⇒
Gets the team roster information for a specific NFL team.

**Kind**: static method of [<code>nfl</code>](#nfl)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Team Id |

**Example**  
```js
const teamId = 16;const result = await sdv.nfl.getTeamPlayers(teamId);
```

Operations for NHL.

**Kind**: global namespace  

* [nhl](#nhl) : <code>object</code>
    * [.getPlayByPlay(id)](#nhl.getPlayByPlay) ⇒
    * [.getBoxScore(id)](#nhl.getBoxScore) ⇒
    * [.getSummary(id)](#nhl.getSummary) ⇒
    * [.getPicks(id)](#nhl.getPicks) ⇒
    * [.getSchedule(year, month, day)](#nhl.getSchedule) ⇒
    * [.getScoreboard(year, month, day, limit)](#nhl.getScoreboard) ⇒
    * [.getStandings(year, group)](#nhl.getStandings) ⇒
    * [.getTeamList()](#nhl.getTeamList)
    * [.getTeamInfo(id)](#nhl.getTeamInfo) ⇒
    * [.getTeamPlayers(id)](#nhl.getTeamPlayers) ⇒

<a name=""nhl.getPlayByPlay""></a>

### nhl.getPlayByPlay(id) ⇒
Gets the NHL game play-by-play data for a specified game.

**Kind**: static method of [<code>nhl</code>](#nhl)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Game id. |

**Example**  
```js
const result = await sdv.nhl.getPlayByPlay(401272446);
```
<a name=""nhl.getBoxScore""></a>

### nhl.getBoxScore(id) ⇒
Gets the NHL game box score data for a specified game.

**Kind**: static method of [<code>nhl</code>](#nhl)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Game id. |

**Example**  
```js
const result = await sdv.nhl.getBoxScore(401272446);
```
<a name=""nhl.getSummary""></a>

### nhl.getSummary(id) ⇒
Gets the NHL game summary data for a specified game.

**Kind**: static method of [<code>nhl</code>](#nhl)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Game id. |

**Example**  
```js
const result = await sdv.nhl.getSummary(401272446);
```
<a name=""nhl.getPicks""></a>

### nhl.getPicks(id) ⇒
Gets the NHL PickCenter data for a specified game.

**Kind**: static method of [<code>nhl</code>](#nhl)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Game id. |

**Example**  
```js
const result = await sdv.nhl.getPicks(401272446);
```
<a name=""nhl.getSchedule""></a>

### nhl.getSchedule(year, month, day) ⇒
Gets the NHL schedule data for a specified date if available.

**Kind**: static method of [<code>nhl</code>](#nhl)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| year | <code>\*</code> | Year (YYYY) |
| month | <code>\*</code> | Month (MM) |
| day | <code>\*</code> | Day (DD) |

**Example**  
```js
const result = await sdv.nhl.getSchedule(year = 2019, month = 11, day = 17)
```
<a name=""nhl.getScoreboard""></a>

### nhl.getScoreboard(year, month, day, limit) ⇒
Gets the NHL scoreboard data for a specified date if available.

**Kind**: static method of [<code>nhl</code>](#nhl)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| year | <code>\*</code> | Year (YYYY) |
| month | <code>\*</code> | Month (MM) |
| day | <code>\*</code> | Day (DD) |
| limit | <code>number</code> | Limit on the number of results @default 300 |

**Example**  
```js
const result = await sdv.nhl.getScoreboard(year = 2019, month = 11, day = 16)
```
<a name=""nhl.getStandings""></a>

### nhl.getStandings(year, group) ⇒
Gets the team standings for the NHL.

**Kind**: static method of [<code>nhl</code>](#nhl)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| year | <code>number</code> | Season |
| group | <code>string</code> | acceptable group names: 'league','conference','division' |

**Example**  
```js
const yr = 2016;const result = await sdv.nhl.getStandings(year = yr);
```
<a name=""nhl.getTeamList""></a>

### nhl.getTeamList()
Gets the list of all NHL teams their identification info for ESPN.

**Kind**: static method of [<code>nhl</code>](#nhl)  
**Example**  
```js
const result = await sdv.nhl.getTeamList();
```
<a name=""nhl.getTeamInfo""></a>

### nhl.getTeamInfo(id) ⇒
Gets the team info for a specific NHL team.

**Kind**: static method of [<code>nhl</code>](#nhl)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Team Id |

**Example**  
```js
const teamId = 16;const result = await sdv.nhl.getTeamInfo(teamId);
```
<a name=""nhl.getTeamPlayers""></a>

### nhl.getTeamPlayers(id) ⇒
Gets the team roster information for a specific NHL team.

**Kind**: static method of [<code>nhl</code>](#nhl)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Team Id |

**Example**  
```js
const teamId = 16;const result = await sdv.nhl.getTeamPlayers(teamId);
```

Operations for WBB.

**Kind**: global namespace  

* [wbb](#wbb) : <code>object</code>
    * [.getPlayByPlay(id)](#wbb.getPlayByPlay) ⇒
    * [.getBoxScore(id)](#wbb.getBoxScore) ⇒
    * [.getSummary(id)](#wbb.getSummary) ⇒
    * [.getRankings(year, week)](#wbb.getRankings) ⇒
    * [.getSchedule(year, month, day, group, seasontype, limit)](#wbb.getSchedule) ⇒
    * [.getScoreboard(year, month, day, group, seasontype, limit)](#wbb.getScoreboard) ⇒
    * [.getConferences(year, group)](#wbb.getConferences) ⇒
    * [.getStandings(year, group)](#wbb.getStandings) ⇒
    * [.getTeamList(group)](#wbb.getTeamList) ⇒
    * [.getTeamInfo(id)](#wbb.getTeamInfo) ⇒
    * [.getTeamPlayers(id)](#wbb.getTeamPlayers) ⇒

<a name=""wbb.getPlayByPlay""></a>

### wbb.getPlayByPlay(id) ⇒
Gets the Women's College Basketball game play-by-play data for a specified game.

**Kind**: static method of [<code>wbb</code>](#wbb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Game id. |

**Example**  
```js
const result = await sdv.wbb.getPlayByPlay(401260565);
```
<a name=""wbb.getBoxScore""></a>

### wbb.getBoxScore(id) ⇒
Gets the Women's College Basketball game box score data for a specified game.

**Kind**: static method of [<code>wbb</code>](#wbb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Game id. |

**Example**  
```js
const result = await sdv.wbb.getBoxScore(401260565);
```
<a name=""wbb.getSummary""></a>

### wbb.getSummary(id) ⇒
Gets the Women's College Basketball game summary data for a specified game.

**Kind**: static method of [<code>wbb</code>](#wbb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Game id. |

**Example**  
```js
const result = await sdv.wbb.getSummary(401260565);
```
<a name=""wbb.getRankings""></a>

### wbb.getRankings(year, week) ⇒
Gets the WBB rankings data for a specified year and week if available.

**Kind**: static method of [<code>wbb</code>](#wbb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| year | <code>\*</code> | Year (YYYY) |
| week | <code>\*</code> | Week |

**Example**  
```js
const result = await sdv.wbb.getRankings(year = 2021, week = 4)
```
<a name=""wbb.getSchedule""></a>

### wbb.getSchedule(year, month, day, group, seasontype, limit) ⇒
Gets the Women's College Basketball schedule data for a specified date if available.

**Kind**: static method of [<code>wbb</code>](#wbb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| year | <code>\*</code> | Year (YYYY) |
| month | <code>\*</code> | Month (MM) |
| day | <code>\*</code> | Day (DD) |
| group | <code>number</code> | Group is 50 for Division-I, 51 for Division-II, 52 for Division-III |
| seasontype | <code>number</code> | Pre-Season: 1, Regular Season: 2, Postseason: 3, Off-season: 4 |
| limit | <code>number</code> | Limit on the number of results @default 300 |

**Example**  
```js
const result = await sdv.wbb.getSchedule(year = 2021, month = 02, day = 15, group=50)
```
<a name=""wbb.getScoreboard""></a>

### wbb.getScoreboard(year, month, day, group, seasontype, limit) ⇒
Gets the Women's College Basketball scoreboard data for a specified date if available.

**Kind**: static method of [<code>wbb</code>](#wbb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| year | <code>\*</code> | Year (YYYY) |
| month | <code>\*</code> | Month (MM) |
| day | <code>\*</code> | Day (DD) |
| group | <code>number</code> | Group is 50 for Division-I, 51 for Division-II, 52 for Division-III |
| seasontype | <code>number</code> | Pre-Season: 1, Regular Season: 2, Postseason: 3, Off-season: 4 |
| limit | <code>number</code> | Limit on the number of results @default 300 |

**Example**  
```js
const result = await sdv.wbb.getScoreboard(year = 2019, month = 02, day = 15, group=50)
```
<a name=""wbb.getConferences""></a>

### wbb.getConferences(year, group) ⇒
Gets the list of all Women's College Basketball conferences and their identification info for ESPN.

**Kind**: static method of [<code>wbb</code>](#wbb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| year | <code>number</code> | Season |
| group | <code>number</code> | Group is 50 for Division-I, 51 for Division-II, 52 for Division-III |

**Example**  
```js
const yr = 2021;const result = await sdv.wbb.getConferences(year = yr, group = 50);
```
<a name=""wbb.getStandings""></a>

### wbb.getStandings(year, group) ⇒
Gets the team standings for Women's College Basketball.

**Kind**: static method of [<code>wbb</code>](#wbb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| year | <code>number</code> | Season |
| group | <code>number</code> | Group is 50 for Division-I, 51 for Division-II, 52 for Division-III, see wbb.getConferences() for more info |

**Example**  
```js
const yr = 2020;const result = await sdv.wbb.getStandings(year = yr);
```
<a name=""wbb.getTeamList""></a>

### wbb.getTeamList(group) ⇒
Gets the list of all Women's College Basketball teams their identification info for ESPN.

**Kind**: static method of [<code>wbb</code>](#wbb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| group | <code>number</code> | Group is 50 for Division I, 51 for Division II, 52 for Division III |

**Example**  
```js
get list of teamsconst result = await sdv.wbb.getTeamList(group=50);
```
<a name=""wbb.getTeamInfo""></a>

### wbb.getTeamInfo(id) ⇒
Gets the team info for a specific WBB team.

**Kind**: static method of [<code>wbb</code>](#wbb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Team Id |

**Example**  
```js
const teamId = 52;const result = await sdv.wbb.getTeamInfo(teamId);
```
<a name=""wbb.getTeamPlayers""></a>

### wbb.getTeamPlayers(id) ⇒
Gets the team roster information for a specific WBB team.

**Kind**: static method of [<code>wbb</code>](#wbb)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Team Id |

**Example**  
```js
const teamId = 52;const result = await sdv.wbb.getTeamPlayers(teamId);
```

Operations for WNBA.

**Kind**: global namespace  

* [wnba](#wnba) : <code>object</code>
    * [.getPlayByPlay(id)](#wnba.getPlayByPlay) ⇒
    * [.getBoxScore(id)](#wnba.getBoxScore) ⇒
    * [.getSummary(id)](#wnba.getSummary) ⇒
    * [.getSchedule(year, month, day)](#wnba.getSchedule) ⇒
    * [.getScoreboard(year, month, day, limit)](#wnba.getScoreboard) ⇒
    * [.getStandings(year, group)](#wnba.getStandings) ⇒
    * [.getTeamList()](#wnba.getTeamList) ⇒
    * [.getTeamInfo(id)](#wnba.getTeamInfo) ⇒
    * [.getTeamPlayers(id)](#wnba.getTeamPlayers) ⇒

<a name=""wnba.getPlayByPlay""></a>

### wnba.getPlayByPlay(id) ⇒
Gets the WNBA game play-by-play data for a specified game.

**Kind**: static method of [<code>wnba</code>](#wnba)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Game id. |

**Example**  
```js
const result = await sdv.wnba.getPlayByPlay(401244185);
```
<a name=""wnba.getBoxScore""></a>

### wnba.getBoxScore(id) ⇒
Gets the WNBA game box score data for a specified game.

**Kind**: static method of [<code>wnba</code>](#wnba)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Game id. |

**Example**  
```js
const result = await sdv.wnba.getBoxScore(401244185);
```
<a name=""wnba.getSummary""></a>

### wnba.getSummary(id) ⇒
Gets the WNBA game summary data for a specified game.

**Kind**: static method of [<code>wnba</code>](#wnba)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Game id. |

**Example**  
```js
const result = await sdv.wnba.getSummary(401244185);
```
<a name=""wnba.getSchedule""></a>

### wnba.getSchedule(year, month, day) ⇒
Gets the WNBA schedule data for a specified date if available.

**Kind**: static method of [<code>wnba</code>](#wnba)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| year | <code>\*</code> | Year (YYYY) |
| month | <code>\*</code> | Month (MM) |
| day | <code>\*</code> | Day (DD) |

**Example**  
```js
const result = await sdv.wnba.getSchedule(year = 2019, month = 07, day = 15)
```
<a name=""wnba.getScoreboard""></a>

### wnba.getScoreboard(year, month, day, limit) ⇒
Gets the WNBA scoreboard data for a specified date if available.

**Kind**: static method of [<code>wnba</code>](#wnba)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| year | <code>\*</code> | Year (YYYY) |
| month | <code>\*</code> | Month (MM) |
| day | <code>\*</code> | Day (DD) |
| limit | <code>number</code> | Limit on the number of results @default 300 |

**Example**  
```js
const result = await sdv.wnba.getScoreboard(year = 2019, month = 07, day = 15)
```
<a name=""wnba.getStandings""></a>

### wnba.getStandings(year, group) ⇒
Gets the team standings for the WNBA.

**Kind**: static method of [<code>wnba</code>](#wnba)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| year | <code>number</code> | Season |
| group | <code>string</code> | acceptable group names: 'league','conference' |

**Example**  
```js
const yr = 2016;const result = await sdv.wnba.getStandings(year = yr);
```
<a name=""wnba.getTeamList""></a>

### wnba.getTeamList() ⇒
Gets the list of all WNBA teams their identification info for ESPN.

**Kind**: static method of [<code>wnba</code>](#wnba)  
**Returns**: json  
**Example**  
```js
const result = await sdv.wnba.getTeamList();
```
<a name=""wnba.getTeamInfo""></a>

### wnba.getTeamInfo(id) ⇒
Gets the team info for a specific WNBA team.

**Kind**: static method of [<code>wnba</code>](#wnba)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Team Id |

**Example**  
```js
const teamId = 16;const result = await sdv.wnba.getTeamInfo(teamId);
```
<a name=""wnba.getTeamPlayers""></a>

### wnba.getTeamPlayers(id) ⇒
Gets the team roster information for a specific WNBA team.

**Kind**: static method of [<code>wnba</code>](#wnba)  
**Returns**: json  

| Param | Type | Description |
| --- | --- | --- |
| id | <code>number</code> | Team Id |

**Example**  
```js
const teamId = 16;const result = await sdv.wnba.getTeamPlayers(teamId);
```

* * *

&copy; 2020-21 <a href=""https://js.sportsdataverse.org/"">sportsdataverse.js</a>, developed by <a href='https://twitter.com/saiemgilani'>Saiem Gilani</a>, part of the <a href='https://sportsdataverse.org'>SportsDataverse</a>"
70,solmos/eurolig,R,"---
output: github_document
---

<!-- README.md is generated from README.Rmd. Please edit that file -->

```{r setup, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = ""#>"",
  fig.path = ""man/figures/README-""
)
```
# eurolig

[![lifecycle](https://img.shields.io/badge/lifecycle-experimental-orange.svg)](https://www.tidyverse.org/lifecycle/#experimental)

The eurolig package provides a set of tools to obtain and analyze basketball generated data from the Euroleague.

## Overview

* API wrapper around the official website of the [Euroleague](https://www.euroleague.net/).

* Functions to obtain stats, play-by-play data and shot location data in a tidy format within R.

* Tools to analyze and visualize the data.


## Installation

```{r, eval = FALSE}
# install.packages(""devtools"")
devtools::install_github(""solmos/eurolig"")
```


## Example

Let's say we want to analyze play-by-play data from the Championship game of the 2017-2018 season between Real Madrid and Fenerbache Dogus Istanbul. We can obtain the data by entering the game code and the season to the function `extractPbp()`. The game code for the game can be found in the game's [URL](https://www.euroleague.net/main/results/showgame?gamecode=260&seasoncode=E2017).

```{r}
library(eurolig)
pbp <- extractPbp(game_code = 260, season = 2017)
pbp
```

From these data we can extract information about the assists in that game from, say, Real Madrid (MAD):
```{r}
assists <- getAssists(pbp, team = ""MAD"")
assists
```

Shot location data can also be retrieved and visualized:
```{r}
shots <- extractShots(260, 2017)
plotShotchart(shots)
```

"
71,zhaoyu611/basketball_trajectory_prediction,Python,"# basketball_trajectory_prediction
This repo is an open source of paper : Applying bidirectional LSTM and Mixture Density Network for Basketball Trajectory Prediction.
I strongly recommend you to review Rajiv and Rob's repo at first.  the URL is https://github.com/RobRomijnders/RNN_basketball. 
I think they made cool job and details about basketball prediction. Also you can find their paper and referrences in the repo.
Based on their contribution, I set up a new repo, which proposed Bidirectional LSTM and Mixture Density Network (BLSTM-MDN) for the same prediction problem.
I did 2 jobs in the main, Hit or miss classification and trajecotry generating.
In the first job, users can choose one of models, including CNN, LSTM, BLSTM, LSTM-MDN and BLSTM-MDN. And trajectory genarating only works for LSTM-MDN and BLSTM-MDN.

# Setup
* TesnsorFlow 1.0 <br>
* sklearn <br>
* hyperopt <br>

# The files
* data: the original data is in 'seq_all.csv.tar.gz', and the 'seq_all.csv' is the unziped dataset.
* plot_staff: the scripts and final figures based on the models
* dataloader.py: data pre-process
* model.py: build model by TensorFlow
* util_MDN: utility functions for building model
* sample.py: functions used for generating trajectory
* main.py: main steps for classification and generating

# Run
Simply run file ""main.py"" in terminal with default argpases: python main.py
Here is the explanation of each argpase.
~~~python

  paser.add_argument(""--hidden_layers"", type=int,
                     default=2, help=""number of hidden layer "")
  paser.add_argument(""--seq_len"", type=int, default=12,
                     help=""sequence length"")
  paser.add_argument(""--dist"", type=float, default=5.0,
                     help=""distance from point to center"")
  paser.add_argument(""--hidden_size"", type=int, default=64,
                     help=""units num in each hidden layer"")
  paser.add_argument(""--drop_out"", type=float, default=0.7,
                     help=""drop out probability"")
  paser.add_argument('--learning_rate', type=float, default=0.005,
                     help=""learning_rate"")
  paser.add_argument('--epoch', type=int, default=1,
                     help=""epoch"")
  paser.add_argument('--batch_size', type=int, default=64,
                     help=""batch size"")
  paser.add_argument('--model_type', type=str, default='BLSTM_MDN_model',
                     help='the model type should be LSTM_model, \
                       bidir_LSTM_model, CNN_model, Conv_LSTM_model, \
                       LSTM_MDN_model or BLSTM_MDN_model.')
~~~
                       
If you want to generate some trajetories, please set ""generate_trajectory"" as True in code. Because it is False in default.
It should be noted that it only generates traejctory with BLSTM-MDN or LSTM-MDN.

# Contact me
Be free the ust the code for studying. But please contact me if you want for commercial applying. <br>
You are welcome to pull requests or issues. <br>
E-mail: zhaoyuafeu@gmail.com <br>
Facebook: zhaoyuafeu <br>




"
72,basketballrelativity/basketball_data_science,Jupyter Notebook,"# basketball_data_science
Working through Basketball Data Science using py_ball and Python

## Agenda

My goal is to work through the book [Basketball Data Science with Applications in R](https://www.amazon.com/Basketball-Data-Science-Applications-Chapman/dp/1138600814) (BDS) by Zuccolotto and Manisera. The twist is that this repository will leverage [py_ball](https://github.com/basketballrelativity/py_ball) to source all of the data and the analysis will be done in Python. The hope is that this effort will expose a wider audience to the work presented in BDS and the available data. This repository will work through the following chapters:

* [Chapter 2: Data and Basic Statistical Analyses](https://github.com/basketballrelativity/basketball_data_science/tree/master/Chapter%202)
  - [Pace and Ratings](https://github.com/basketballrelativity/basketball_data_science/blob/master/Chapter%202/Pace%20and%20Ratings.ipynb)
  - [Inequality Analysis](https://github.com/basketballrelativity/basketball_data_science/blob/master/Chapter%202/Inequality%20Analysis.ipynb)
  - [Shot Charts](https://github.com/basketballrelativity/basketball_data_science/blob/master/Chapter%202/Shot%20Charts.ipynb)
* [Chapter 3: Discovering Patterns in Data](https://github.com/basketballrelativity/basketball_data_science/blob/master/Chapter%203)
  - [Assist Networks](https://github.com/basketballrelativity/basketball_data_science/blob/master/Chapter%203/Assist%20Networks.ipynb)
  - [Shot Density](https://github.com/basketballrelativity/basketball_data_science/blob/master/Chapter%203/Shot%20Density.ipynb)
* [Chapter 4: Finding Groups in Data](https://github.com/basketballrelativity/basketball_data_science/blob/master/Chapter%204)
  - [Shot Clustering](https://github.com/basketballrelativity/basketball_data_science/blob/master/Chapter%204/Shot%20Clustering.ipynb)
* Chapter 5: Modeling Relationships in Data

Each chapter is decently long, so there may be multiple Jupyter notebooks per chapter, depending on how things shake out.

Feel free to reach out with any questions by opening an issue here or [tweeting me](https://twitter.com/py_ball_).
"
73,ed-word/Activity-Recognition,Python,"# Activity-Recognition

![enter image description here](https://lh3.googleusercontent.com/WJ5Gmfr6hUWr9b9Q8-4U9aAB9gnG4sWrMh64WSbFNRLuSComqQfvLnyrYLdtDpQ4IHyJhWdmYIho=s0 ""Pipeline.jpg"")
"
74,historicalsource/nba-jam-tournament-edition,Assembly,"# nba-jam-tournament-edition
"
75,mbjoseph/bbr,R,"---
output: github_document
---

# bbr: basketball-reference data in R

[![Travis-CI Build Status](https://travis-ci.org/mbjoseph/bbr.svg?branch=master)](https://travis-ci.org/mbjoseph/bbr) 
[![Coverage Status](https://img.shields.io/codecov/c/github/mbjoseph/bbr/master.svg)](https://codecov.io/github/mbjoseph/bbr?branch=master)
[![CRAN_Status_Badge](http://www.r-pkg.org/badges/version/bbr)](https://cran.r-project.org/package=bbr)
[![Licence](https://img.shields.io/badge/licence-GPL--3-blue.svg)](https://www.gnu.org/licenses/old-licenses/gpl-3.0.html)
[![Last-changedate](https://img.shields.io/badge/last%20change-`r gsub('-', '--', Sys.Date())`-brightgreen.svg)](/commits/master)

<!-- README.md is generated from README.Rmd. Please edit that file -->

The bbr package is designed to quickly fetch tidy data from www.basketball-reference.com. 
This package is actively under development and the interface will change as new features are added.

## Installation

```{r, eval = FALSE}
devtools::install_github(""mbjoseph/bbr"")
```

## Example usage

The `get_season` function retrieves season summary data for one season. 

```{r, echo = TRUE}
library(bbr)

ninetyone <- get_season(1991)
str(ninetyone)
```

The `get_players` function gets player data for individuals by last initial.

```{r, echo = TRUE}
a_data <- get_players(""A"")
str(a_data)
```

The `get_player_data` function returns data for each season that a player 
played. As an argument, this function takes a slug for the player you're 
interested in. This can be found using the `get_players()` function, and is 
part of the URL to the data of a player, e.g., if the URL is 
https://www.basketball-reference.com/players/a/abdelal01.html then the slug is 
abdelal01.

```{r, echo = TRUE}
abdelnaby_d <- get_player_data('abdelal01')
str(abdelnaby_d)
```"
76,owenauch/NBA-Fantasy-Optimizer,Python,"# The Porzingis Project

A script that scrapes stats for each player in the NBA from Basketball Reference, TeamRankings, and Rotowire, and generates an expected points value for each player. These expected points are then fed to a greedy algorithm that maximizes the total expected fantasy points while staying under a salary cap using a heuristic of preferencing undervalued players.

## How to Run

Clone the repo and run 
```
python NBAFantasyStats.py
```

##### Requires:
* [BeautifulSoup](https://www.crummy.com/software/BeautifulSoup/#Download)

Shoutout to Kristaps Porzingis for being the algorithm MVP
"
77,cfahlgren1/Bounce,CSS,"# Bounce - Basketball Court Finder
##### Project Email: bounceapp@protonmail.com
##### URL: https://bouncemap.com
 
# What is Bounce?

Bounce is a web app built in Django that locates and displays the nearest basketball courts in the area. With over 48,000 documented basketball across North America, there is bound to be one near you. The goal of this project is to build a community for basketball and other sports enthusiasts.

![Image](https://i.ibb.co/Mp1dxwB/readme.jpg)

# Contributing
### Visit [Contributing.md](https://github.com/cfahlgren1/Bounce/blob/postgis/CONTRIBUTING.md)

# Features
  - Basketball court listing of outdoor courts near specified address/location
  - Light and Dark Theme for Maps
  - GraphQL / REST API endpoint
  
 # Next Steps
  - Implement more testing and test coverage (API, Model, End to End Testing with [Cypress.io](https://cypress.io)
  - Building CI/CD pipeline and linting for better code reviewing and deployment
  - Interfaces for User Feedback
  - Ensure pages are mobile friendly

# Future Plans!
  - Load courts through REST / GraphQL API
  - User Accounts
    - Court Ratings
    - Save frequently visited courts
    - Submit Court to be added to Map
  - Decouple front and backend

# Tech
Bounce uses a number of open source projects and APIs to work properly:
* [Heroku](https://www.heroku.com/) - PAAS to Host Bounce
* [Django](https://www.djangoproject.com/) - Python Web Framework
* [LocationIQ API](https://locationiq.com/) - used to get reverse geocoding results for markers
* [Mapbox API](https://www.mapbox.com) - used to provide forward-geocoding results and mapping
* [PostgreSQL](https://www.postgresql.org/) - SQL database for scalability, modularity, and geoquerying support

# Setup

## Docker

0. Install [Docker](https://docs.docker.com/get-docker/) and [Docker Compose](https://docs.docker.com/compose/install/)

1.  Make `docker_entrypoint.sh` executable
    ```bash
    # Linux
    chmod +x docker_entrypoint.sh
    ```

2.  Start and build the 2 containers

    -   `--build` builds the images defined in the `docker-compose.yml` file.
    -   `-d` dettaches the terminal from the building process.
    -   Finally the script from (`docker_entrypoint.sh`) is executed.

    ```bash
    # In the same directory as `docker-compose.yml`
    docker-compose up -d --build
    ```

    - If there are errors you can see the logs
    ```bash
    docker-compose logs
    ```

3. Load Initial Database Models

    - It's also necessary to load in the fixtures when setting up the database:
    ```bash
    docker-compose exec web python manage.py loaddata bounce_data.json
    ```

4. Go to http://localhost:8000

    - You should see the frontend of the project

    <img src=""https://i.imgur.com/JDQp06y.png"" width=""800"">

5. Enter a shell within the Docker container

    - To enter an interactive shell (in this case for the ""web"" service), you can use
    ```bash
    docker-compose exec web bash
    ```

6. Create a superuser (Optional)

    - You may enter an interactive shell within the Docker container
     (in this case the container corresponding to the ""web"" service)
    - In the same directory as `docker-compose.yml` run
    ```bash
    # This open a bash shell inside the container
    docker-compose exec web bash
    ```

    - Then run `python manage.py createsuperuser`
    
    - Run `exit` to exit the container. It will keep running.

7. To stop the containers run `docker-compose stop`

    - :warning: Be careful with [`docker-compose down`](https://docs.docker.com/compose/reference/down/) which stops the container but also **removes** them.
=======


## Troubleshooting

Ensure that your .env file is present and the required variables are set. 
Sometimes starting fresh can help, since things like volumes will persist
even after a container is removed, which can cause issues. You can remove all 
docker containers and volumes using the command:
```bash
docker-compose down && docker rm -f $(docker ps -a -q) && docker volume rm $(docker volume ls -q)
```
and then trying the above steps again."
78,JonnyBurger/basketball-tracker,TypeScript,"# React + Remotion basketball tracker

<img src=""thumbnail.gif"" style=""width: 100%"">

**See tutorial (8min)**: https://youtu.be/A8miHLSf_BI

Since this is a fun project, no issues / pull requests are accepted.

## Commands

**Install Dependencies**

```console
npm i
```

**Start Preview**

```console
npm start
```

**Render video**

```console
npm run build
```

**Upgrade Remotion**

```console
npm run upgrade
```

## Docs

Get started with Remotion by reading the [fundamentals page](https://www.remotion.dev/docs/the-fundamentals).

## Help

We provide help [on our Discord server](https://discord.gg/6VzzNDwUwV).

## Issues

Found an issue with Remotion? [File an issue here](https://github.com/remotion-dev/remotion/issues/new).

## License

Notice that for some entities a company license is needed. Read [the terms here](https://github.com/remotion-dev/remotion/blob/main/LICENSE.md).
"
79,nguyenank/shot-plotter,HTML,"# Shot Plotter

![A screenshot of the web application.](./resources/ice-hockey-screenshot.png)

**09/13/22: Soccer (NCAA) has been added as a playing area**

A [web application](https://shot-plotter.netlify.app/) for plotting events on a sport's playing area with a single click, while keeping track of any other details. The application supports download and upload of .csv files to retrieve that plotted data.

Currently 13 different playing areas across 9 different sports are supported: ice hockey (NHL, IIHF), floorball (IFF), handball (IHF), volleyball (NCAA), basketball (NBA, NCAA, WNBA), men's lacrosse (NCAA), women's lacrosse (NCAA), American football (NFL, NCAA), and soccer (NCAA).

![A screenshot of the main page of the web application allowing you to pick between sports.](./resources/sport-select-screenshot.png)

The web application is primarily built using D3.js.

### How to Use and Additional Information

From the main page, click on the sport/playing area you want. Each option has information about the specifications that describe that particular playing area, and its dimensions, which correspond to the coordinates.

#### Event Details

By default, four pieces of information can be specified for each event.

The period of the event can be logged through radio buttons.

The team can be specified through radio buttons and a text field that allows custom team names to be entered. The first team, which defaults to Home, corresponds to teal dots, and the second team, which defaults to Away, corresponds to orange dots. The legend below the rink clarifies which color corresponds to which team.

The player can be specified through a text field. If the player entry is 2 characters or less (for a player number, say), the player will appear on the event dot on the playing area.

The type of event can be specified, under Type or Outcome.Additional options can be specified by typing in the dropdown and selecting the new option that appears by clicking or pressing Enter. Each option corresponds to a different dot shape, as indicated by the legend below the rink.

Details logged for each event can be customized by clicking on the _Customize Details_ button at the bottom of the details panel. Details can only be customized when there are noevents recorded.

##### Customizing Setup

Clicking the _Customize Setup_ button will bring up a modal with a list of the current details. Drag-and-drop detail names to reorder them. Click on the eye icon to toggle whether it is visible. Click on the trash can icon to delete details. For created details, click on the pencil-in-a-square icon to edit those details. Reordering details changes their position in both the details panel and the table. The _X_ and _Y_ details cannot be hidden or deleted.

Special details can be added, which are details that do not take inputs but are specially calculated. Currently there a 3 types of special details:

-   **2-Location Events:** Using the _Enable 2-Location Events_ toggle, the ability to have 2-location events can be enabled. When enabled, _X2_ and _Y2_ details are added to the list of details. Like the _X_ and _Y_ details, the _X2_ and _Y2_ details cannot be hidden or deleted. When 2-location events are enabled, 2-location events can be plotted by either holding down the SHIFT button and clicking on two points in the playing area or by switching between 1-location and 2-location mode using the toggle above the playing area. This option is incompatible with Heat Map View.
-   **Distance:** For 1-location events, this detail will be the distance between the event and the closest net/hoop/end zone line center/etc. For 2-location events, this detail will be the be the distance between the two indicated locations.
-   **Shot Value (basketball only):** This detail is the number of points (2 or 3) a shot from the indicated location would be worth. For 2-location events, it will be the number of points for the second location.

There are several appearance options, which modify the appearance of the application but do not impact the data tracked. There are currently 3 appearance options:

-   **Widgets per Panel Row:** The number of widgets can be changed from its default value of 2 to 1 or 3 by choosing a new value in the dropdown labelled _Widgets per Panel Row_.
-   **Rows per Table Page:** The default number of events per table page can be modified by changing the number in the field labelled _Rows Per Table Page_. The default number is 10; the number must be an integer between 1 and 999 (inclusive).
-   **Heat Map View:** By toggling on the option labelled _Heat Map View_, the option for heat maps (2D density plots) view is enabled. This adds a toggle above the playing area that allows switching between the traditional view with event dots and view that shows the location density of events per team (if Team is a current detail). Two checkboxes below the toggle allow hiding and showing the heat map for each team. This option is incompatible with 2-Location Events.

Default details can be restored by clicking on the _Reset to Defaults_ button.

Details configurations can be saved or restored through download/upload. When a detail configuration is downloaded, it stores the current order and visibility of details, as well as any newly created details. Also, currently selected/entered options in the details panel are made the default options when the configuration is uploaded; if a detail is not visible, it preserves its original default value.

Clicking on the _Add Details_ Button allows creation of new details. There are four options for types of new details: radio buttons, text field, dropdown, and time widget. The name of all details must be 1-16 characters.

Radio buttons are limited to at most 5 options; each option must be between 1-32 characters and all options must be unique. The default value can be selected by checking the appropriate radio button.

For a text field, a default value can be entered and can be up to 32 characters.

For a dropdown, options are entered in a text area, with each option on a new line. Each option must be between 1-50 characters. The first option is the default selection. Unlike with the _Type_ detail, new options cannot be added from the details panel, though options can still be searched.

A time widget is a timer you can choose to have count up or countdown. The starting time can be inputted when creating the detail; times must be in the format MM:SS or M:SS, where (M)M is minutes and SS is seconds. When using the time widget in the details panel, the time can be edited any time the time widget is paused. The timer can be paused/started by clicking on the button next to the time.

#### Playing Area

To plot events, simply click on the playin area where the event happened. When clicked, a dot will be added of the appropriate color based on team, shape based on type, and text based on player, and a row will be made in the table.

The playing area matches the specifications from the governing body as specified on the main page. For all playing areas, the center of the playing area has coordinates (0,0), the positive x-axis is to the right, and the positive y-axis is upward.

Credit to [Bill Tran's guide on creating the NHL rink using TidyVerse](https://thewincolumn.ca/2021/01/15/r-tutorial-creating-an-nhl-rink-using-the-tidyverse/) for aid in interpreting the rule descriptions for the ice hockey rink and for the hex codes for the colors.

Massive credit to the [sportyR package](https://github.com/rossdrucker/sportyR) created by [Ross Drucker](https://twitter.com/rossdrucker9), using which the American Football fields (NFL and NCAA) were constructed.

The playing area size is not pinned to the window size. This allows you to zoom in and place the event exactly where you want it, but does mean the layout can become strange if you change your window size. Refreshing will readjust the size to match the current window size.

#### Table

The table logs the information for each event, as well as the row number of the event in the table. Events can be highlighted by clicking on the check box for the appropriate row. This will highlight the row in the matching team color, and both enlarge the dot on the rink and move it to the front if it was previously covered by other dots. Multiple events can be highlighted at once. Events can be deleted by clicking on the trash can in the appropriate row. All events can be deleted by clicking on the trash can in the header of the table; a prompt will confirm this choice.

The table, by default, shows the last page, which has the last 10 events recorded. Pages can be navigated using the _Prev_(ious) and _Next_ buttons at the lower-right of the table. The currently shown events and the total number of events recorded can be seen in the bottom-left of the table.

By click on the funnel icon in the header of the table, the filters become visible beneath the table headers and apply to the column in question. Multiple filters can be active at once; if there are multiple filters, only events that fit the criteria of all filters are visible. Events are filtered from both the table and playing area - in other words, events that do not fit the filter criteria are not visible as a row in the table or as a dot in the playing area. The form of the filter varies by the detail type:

-   **Numeric/Time (e.g. X, Y, #):** Numeric or time details will have a filter that takes a _minimum_ and a _maximum_ value and filters out any events with values for that detail not in the range specified. The range is inclusive of the minimum and maximum. If no value is specified for either the minimum or maximum, it is treated as if there is no limit in that direction. For example, if the minimum is indicated to be 4 and there is no maximum value indicated, only rows with a value of 4 or greater will be visible.
-   **Radio Buttons/Dropdown (e.g. Period, Team, Type):** Radio button and dropdown details will have a filter that takes the form of a dropdown and filters out any events with values not selected in the dropdown. If the dropdown has no selected options, it is as if the filter does not exist. It is possible to select multiple options in the dropdown filter; in this case, events with values corresponding to any currently selected in the dropdown will be visible. For example, if a dropdown filter currently has the values _Shot_ and _Goal_ selected, events with the value _Shot_ OR the value _Goal_ for that detail will be visible.
-   **Text (e.g. Player):** Text details will have a filter that is just a text box: any string that contains the string in the text box filter will satisfy the filter. If the string is surrounded in quote marks, double or single, instead only exact matches for the string satisfy the filter. For example, for the filter value _hat_, both _hate_ and _chat_ will be visible, but for the filter value _'hat'_ only the value 'hat' will suffice. It is also possible to use regular expressions in the text box filter for more complex text queries.

Clicking on the funnel icon will toggle whether the filters are visible. Filters are applied regardless of whether the filters are visible or not; hiding them does not remove all filters. When at least one filter is active and the filters are visible, a small X-in-a-square icon will appear near the funnel icon; clicking this X icon will clear all filters.

The number of currently filtered rows is also visible in the bottom left of the table.

#### Download/Upload Table

The event table information can be downloaded by pressing the _Download_ button. There is a text-field to customize the name of the file; otherwise, it defaults to the day and time when the web app was opened. Files are in .csv format, using comma separators, with the header row as it appears on the table, excluding _\#_, included in the file. When filters are active, only currently visible events that satisfy the filters are included in the file; this is indicated by the text of the button saying _Download Filter_ rather than just _Download_.

To initialize the table, a .csv file can be uploaded using the _Choose File_ button next to the Upload label. Only .csv files are permitted. The header row must exactly match the header row of the table, excluding _\#_, including order. Any custom shot types will be added in shot order. Custom teams will be added in order as they appear, alternating between the teal and orange team. This means if a shot by the orange team is logged first, when the file is downloaded and later uploaded, the team will be blue, but besides color there is no impact to the web app. _When a file is uploaded, any shots previously in the table are erased._

### Running Locally

To run the application locally, any method of running an HTTP server is needed to prevent browser issues with CORS (cross-origin requests - essentially not allowing the JS files to be loaded using the file:// protocol). Some methods include [http-server in Node.js](https://www.npmjs.com/package/http-server), [http.server in Python](https://docs.python.org/3/library/http.server.html), or even some browser-based options like the [Web Server for Chrome extension](https://chrome.google.com/webstore/detail/web-server-for-chrome/ofhbbkphhbklhfoeikjpcbhemlocgigb?hl=en), but any option will do.

Then, clone this repository; for most methods, it is sufficient to navigate into the repository folder and run the server, but check the exact way of starting a server for the chosen method. No additional packages need to be installed; additional packages are automatically acquired using CDNs.
"
80,oussamabonnor1/Ball-Fall-game-Unity2D,C#,"# Ball-Fall-Android-game 
![Downloads](https://img.shields.io/badge/Aptoide%20store-3k--5k-orange.svg)
![Jetlight studio](https://img.shields.io/badge/Made%20by-Jetlight%20studio-blue.svg?color=082544)

Ball Fall is an addictive catch game. Keep your eyes open and your fingers ready.

## Aptoide store link:
[Download here](https://jetlight-studio-ball-fall.en.aptoide.com/)

## screenshots:
<img src=""https://cloud.githubusercontent.com/assets/17766221/22110122/e1a1a010-de5a-11e6-85cd-f67e63ddea79.PNG"" width=""250""/> <img src=""https://cloud.githubusercontent.com/assets/17766221/22110210/28964b38-de5b-11e6-8b0c-ce92b55fc2f4.png"" width =""250""/>

## Tools used:
* Visual studio (IDE)
* C# (logic)
* Unity (game engine)
* Paint.Net (Image editting)

## Contributing

Feel free to `fork` this project and add whatever you like. If you have any suggestions or any comments please feel free to contact me or to open an issue.

## Team:
[Jetlighters](https://github.com/JetLightStudio) having fun.
"
81,llimllib/ncaa-bracket-randomizer,Jupyter Notebook,"# NCAA Bracket Randomizer

Generates a reasonable bracket for you, based on <a href=""http://kenpom.com/"">Ken Pomeroy's</a>
college basketball ratings.

This code was a hack when I first wrote it 14 years ago, another hack when I
re-wrote it 8 years ago, and even worse today. I use it once a year though, and
it works just fine even though it's still using jQuery and an ancient d3.

For each matchup, it compares the two teams in the game, calculates the odds of the favorite
winning the game, and chooses the winner. There are three settings that determine how it
does so:

#### No randomness

Always picks the favorite

#### Some

Picks the underdog if they win twice in a row.

If team A has a 75% chance of beating team B, the program will generate two random numbers
between 0 and 100; if both of them are greater than 75, team B will advance. Otherwise,
team A will advance.

#### Lots of randomness

Picks the underdog if they win once

If team A has a 75% chance of beating team B, the program will generate a random number
between 0 and 100; if it's greater than 75, team B will advance. Otherwise,
team A will advance.

## Calculating the Odds

[This ipython notebook](https://github.com/llimllib/ncaa-bracket-randomizer/blob/master/fitting_kenpom/fitting%20kenpom.ipynb) shows how I fit a very simple exponential curve to kenpom's predictions to reverse-engineer his win percentages. I then use the curve that fitted his predctions to decide how likely one team is to beat another, based on the difference between their kenpom ratings.
"
82,brettfazio/CVBallTracking,Python,"# Basketball Tracking 🏀⛹🏻‍♀️⛹🏿‍♂️

Created by [Brett Fazio](http://linkedin.com/in/brett-fazio/) and [William Chen](https://www.linkedin.com/in/william-chen-6474a216b/)

![](assets/bron.gif)

![](assets/davis.gif)

## Overview
Read our paper [here](https://github.com/brettfazio/CVBallTracking/blob/main/assets/Ball_Tracking.pdf).
## Requirements 

The libraries to run the code are [cv2](https://pypi.org/project/opencv-python/), [numpy](https://numpy.org/), [pandas](https://pandas.pydata.org/), and [h5py](https://www.h5py.org/) (if trying to run/evaluate on the A2D dataset). 

An extended version of cv2, ```opencv-contrib-python```, is required. Make sure this is the only cv2 package installed. ```opencv-python``` is a different package that does not include support for the trackers. Do not install multiple different opencv packages in the same environment.
```
pip install opencv-contrib-python
```

Additionally access to the YOLO tracker is required but this is already included in the `/src/yolo` folder. However, you must download the weights for the YOLO model. It can be done as follows:

```
cd src/yolo/weights/
bash download_weights.sh
```

If you wish to use the GOTURN tracker instead of the CSRT tracker (we recommend CSRT) you must download the GOTURN model [here](https://github.com/Mogball/goturn-files) and place it within the `src` folder.

To run on the A2D dataset, the Release of the dataset itself is also required. It is available [here](https://web.eecs.umich.edu/~jjcorso/r/a2d/) and the unzipped folder entitled `Release` should be placed in the `/a2d` directory.

## Usage

The main entry point for this project is `main.py`. To avoid errors, please run it from the `src` directory. 

The most basic usage for the project would be to run on a single input video. It can be done as follows:

```
python3 main.py --video PATH
```

Where `PATH` is a path to a video file, for example:

```
python3 main.py --video ../sample_data/lebron_on_court.mp4
```

Adding the `--fast` flag only tracks the ball in frames after the first detection. 
```
python3 main.py --video ../sample_data/lebron_on_court.mp4 --fast
```

Adding the `--live` flag allows for real-time tracking. Live tracking is only available when used with the `--fast` flag.
Note: performance may be vary depending on CPU/GPU.
```
python3 main.py --video ../sample_data/lebron_on_court.mp4 --fast --live
```

To run A2D add the `--a2d` flag, and then to specify the number of samples use `--a2d_amt`. For example:

```
python3 main.py --a2d --a2d_amt 5
```

### Forward Pass Only
![](assets/forwards.gif) 

### Track Backwards + Forwards
![](assets/full.gif)

## References / Credit

This project builds on the work of eriklindernoren's PyTorch Yolo implementation as a base, specifically the pre-trained model. The repository can be found [here](https://github.com/eriklindernoren/PyTorch-YOLOv3).
"
83,sunkuo/joi-router,JavaScript,"# joi-router
:basketball: Input &amp; Output validated routing for Express

[![npm version](https://badge.fury.io/js/joi-router.svg)](https://badge.fury.io/js/joi-router) [![Build Status](https://travis-ci.org/sunkuo/joi-router.svg?branch=master)](https://travis-ci.org/sunkuo/joi-router) [![Coverage Status](https://coveralls.io/repos/github/sunkuo/joi-router/badge.svg?branch=master)](https://coveralls.io/github/sunkuo/joi-router?branch=master) [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

## Todo List
- :white_check_mark: Input Validated Routing
- :white_check_mark: Output Validated Routing
- :white_check_mark: Examples to show how to use joi-router
- :white_check_mark: Self-contained Test
- :white_check_mark: Continuous integration
- :white_check_mark: Code coverage
- :ballot_box_with_check: Joi-router to api documents

## How to install

`yarn add joi-router`

## Get Started

### Input Validaiton
```
const express = require('express')
const Joi = require('joi')
require('joi-router')
const app = express()

app.get('/foo', {query: {
  userId: Joi.string().alphanum().min(3).max(30).required()
}}, function (req, res, next) {
  res.json({
    result: 'success'
  })
})
```

#### Output Validation
```
app.get('/foo', {
  output: {
    '200': { content: Joi.string().alphanum().min(3).max(30).required() }
  }
}, function (req, res, next) {
  res.json({
    content: 'Lorem'
  })
})

app.listen(3000, () => {
  console.log('Server Run!')
})
```

## Node compatibility

NodeJS `>= 6.0` is required.

## Performance

Joi-router only run once to add validation middleware when express start, so it does not make express slow.

## LICENSE

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)"
84,hubsif/kodi-magentasport,Python,"Kodi Magenta Sport Addon (ehem. Telekom Sport)
==============================================

Über
----

Mit diesem Addon kann man die Sportstreams von [Magenta Sport][1] (ehem.
Telekom Sport) ansehen.

Installation
------------

Das zipfile von der [Releases Seite][2] downloaden und in Kodi unter Addons
installieren.

Bei Problemen gerne ein Github-Issue aufmachen oder eine E-Mail an
hubsif@gmx.de.

About
-----

This addon let's you watch the sports streams from [Magenta Sport][1]
(formerly Telekom Sport).

Installation
------------

Download the addon zipfile from the [releases page][2] and install it in
Kodi -> Addons.

[1]: https://www.magentasport.de
[2]: https://github.com/hubsif/kodi-magentasport/releases
"
85,ngbede/hoop,Dart,"# Hoop

An NBA sporting app built with flutter(Googles UI framework) and the NBA-API.


## Requirements
Note: Its important to get your API Key, the below steps explain how you can acheive this. Always take care to keeping your Api keys a secret.

- log on to https://rapidapi.com/ and register an account if you don't have one.
- After registering your account, go to the Api marketplace and subscribe to the Api-NBA @ https://rapidapi.com/api-sports/api/api-nba
- Select a free plan which allows you to make a 100 calls per day.
- Once subscribed to the Api on a free plan, get your API key.
- Now Navigate to this file path on this project repo i.e lib/services/apikey
- create a new dart file called ""key.dart""
- paste below code in the dart file:

```
class NbaApi {
  static final key = ""YOUR-API-KEY-GOES-HERE"";
}
```

- Save the file, you should now be able to run the app on your device.

## Screenshots

![hoop image1](https://github.com/ngbede/hoop/blob/master/screenshot/screenshot1.png?raw=false)
![hoop image2](https://github.com/ngbede/hoop/blob/master/screenshot/screenshot2.png?raw=false)
![hoop image3](https://github.com/ngbede/hoop/blob/master/screenshot/screenshot3.png?raw=false)
![hoop image4](https://github.com/ngbede/hoop/blob/master/screenshot/screenshot4.png?raw=false)
![hoop image5](https://github.com/ngbede/hoop/blob/master/screenshot/screenshot5.png?raw=false)"
86,liang3472/BasketBall,JavaScript,"##1 搭建项目开发环境
1.1 安装 CocosCreator

##2 打开项目
2.1 选择打开其他项目，然后选择本项目目录

2.2 项目初始化后你会看到

![Image][1]

##3 运行项目
3.1 可以选择浏览器和模拟器运行项目

![Image][5]

3.2 点击小三角运行项目

![Image][2]

*浏览器运行*

![Image][4]

*模拟器运行*

![Image][3]

[1]: https://raw.githubusercontent.com/liang3472/BasketBall/master/screenshot/screenshot1.png
[2]: https://raw.githubusercontent.com/liang3472/BasketBall/master/screenshot/screenshot2.png
[3]: https://raw.githubusercontent.com/liang3472/BasketBall/master/screenshot/screenshot3.png
[4]: https://raw.githubusercontent.com/liang3472/BasketBall/master/screenshot/screenshot4.png
[5]: https://raw.githubusercontent.com/liang3472/BasketBall/master/screenshot/screenshot5.png
"
87,rukmal/Scoreboard,JavaScript,"# Scoreboard

![Scoreboard landing page](bin/landing_page.png)

Scoreboard is a simple, secure and easy to use Scoreboard application built on [Node.js](http://nodejs.org) and [Socket.io](http://socket.io).

Scoreboard uses Socket.io's real time bidirectional event based communication system to integrate the scoreboard to the mobile-ready remote in real time.

## Usage

Clone the repository from GitHub by running the following in the terminal.
```bash
$ git clone https://github.com/rukmal/Scoreboard.git
```

All of the Scoreboard configuration is stored in the ```config.json``` file. It must have the following data:

```JSON
{
	""_comment"": ""All times must be in milliseconds"",
	""tournament_logo"": """",
	""team_home"": """",
	""team_away"": """",
	""password"": """",
	""half_length"": 0,
	""timeout_length"": 0,
	""halftime_length"": """",
	""shot_clock_length"": 0
}
```

*Note: all fields filled with a '0' must be numbers. Also note that the configuration file is loaded when the application starts, so if any changes are made, the app must be restarted.*

Next, install all dependencies using npm (the Node.js package manager) and run the application.
```bash
$ cd Scoreboard
$ npm install
$ node app.js
```

Navigate to ```localhost:3000``` in your browser and enjoy!

## Screenshots

- Main scoreboard
![Scoreboard main page](bin/scoreboard_screenshot.png)

- Remote on an iPhone 5

![Remote on iPhone 5](bin/iphone_remote_screenshot.png)

## Contact

This is an open source project released under the [MIT License](LICENSE). Contact me if you want to suggest an improvement, or fork and send a pull request!

Follow me on Twitter ([@rukmal](http://twitter.com/rukmal_w)) and [GitHub](http://github.com/rukmal).

http://rukmal.me"
88,imadmali/bball-hmm,R,"
# Tagging Basketball Events with HMM

This case study shows how to implement Hidden Markov Models (HMM) in Stan using basketball player tracking data for the purpose of tagging events. The document `doc/hmm.html` discusses what a HMM is, how we fit HMMs in Stan, and how we apply this class of models to basketball data. We used a small sample of historical NBA player tracking data (see https://github.com/sealneaward/nba-movement-data for the raw data).

The workflow is separated into three parts (or model types):
1. Example HMM
2. Tagging a Drive Event
3. Defensive Assignment

An outline of the project directory is provided below.

* `hmm_example_fit.R`
  * Simple HMM with 2 states and 1 output
* `hmm_example_bad_fit.R`
  * Above model without enforced ordering of parameters
* `drive_0.R`
  * Drive HMM with exponential likelihood
* `drive_1.R`
  * Drive HMM with normal likelihood
* `defense_0a.R`
  * Defensive assignment HMM example with fixed convex combination parameters
* `defense_0b.R`
  * Defensive assignment HMM example with estimated convex combination parameters
* `defense_1_low_res.R`
  * Defensive assignment HMM on player tracking data with estimated convex combination parameters
* `defense_2_low_res.R`
  * Defensive assignment HMM on player tracking data with fixed convex combination parameters
* `graphics.R`
  * Functions for plotting court/players/etc
* `data/`
  * Data scripts and data files
* `doc/`
  * Documentation
* `media/`
  * Video clips and plots of model output
* `models/`
  * Stan models
* `results/`
  * Stan model fits
"
89,thunky-monk/kawhi,Haskell,"# Kawhi : stats.NBA.com library 🏀

[![Stackage](http://www.stackage.org/package/kawhi/badge/lts-9)](http://stackage.org/package/kawhi)
[![Hackage](https://img.shields.io/hackage/v/kawhi.svg)](https://hackage.haskell.org/package/kawhi) [![Build Status](https://travis-ci.org/thunky-monk/kawhi.svg?branch=development)](https://travis-ci.org/thunky-monk/kawhi)

A Haskell library for working with [NBA Stats](http://stats.nba.com) data. NBA Stats contains rich data, but accessing it is difficult and tedious. Kawhi helps to automate the data retrieval, allowing users to focus on statistics.

It's named after [Kawhi Leonard](http://cdn2.vox-cdn.com/assets/5039756/Kawhi-Leonard-portrait-oil.JPG).

## Jump Ball

To get started:

1. [Get Haskell](https://haskell-lang.org/get-started). If you've never done any computer programming, this could be challenging. [Never give up!](https://www.instagram.com/p/BENA9hpN_wL/)
2. Read the [guide](https://github.com/thunky-monk/kawhi/blob/master/guide.md).
3. Check out the [example](https://github.com/thunky-monk/kawhi/tree/master/example).
"
90,EddM/boxscorereplay,Ruby,"boxscorereplay.com
==============

This is the source code for boxscorereplay.com, a dynamic, replayable box score for the NBA. It's not very good, but apparently people love the product.
"
91,elwan9880/Yahoo_fantasy_basketball_analyzer,Python,"## Yahoo Fantasy Basketball Analyzer

* Description
  * Average stats and Z-scores for teams in your Yahoo Fantasy Basketball league.
  * Average stats and Z-scores for NBA players.
  * Trade Analyzer for your Yahoo Fantasy Basketball league.

* Requires
  * python3.7

* Installation
  ```
  git clone https://github.com/elwan9880/Yahoo_fantasy_basketball_analyzer.git
  cd Yahoo_fantasy_basketball_analyzer
  python setup.py install
  ```

* How to use
  1. Create `oauth2.json` (https://yahoo-fantasy-api.readthedocs.io/en/latest/authentication.html).
     1. Apply Yahoo API key (https://developer.yahoo.com/apps/create/). Select all read/write permission. It will give you `consumer_key` and `consumer_secret`.
     2. Create `oauth.json` under the same directory with `yahoo_fantasy_basketball_analyzer.py` with your api key:
        ```
        {""consumer_key"": <your consumer_key>, ""consumer_secret"": <your consumer_secret>}
        ```
  2. Run the script: `python yahoo_fantasy_basketball_analyzer.py`.
     1. It will pop a web browser window with your verifier. Enter the verifier in terminal.
     2. Enter the `year` and the `league_id` you would like to reference.
  3. Choose the mode for analysis:
     * `Fantasy Team Performance Analyzer`: Create `<season>_<league_name>_teams.csv`: Team performance with average stats and z-scores in your league
     * `Fantasy Trade Analyzer`: create `<season>_<league_name>_<team_A>_<team_B>.csv`: Trade Analysis
     * `NBA Players Performance Analyzer`: create `<season>_players.csv`: Players performance with average stats and z-scores
  4. Import CSV files to google sheet or excel as CSV format (comma separated) to see the results.

* Example:
  ```
  Chun-Tses-MacBook-Pro:Yahoo_fantasy_basketball_analyzer cshao$ python3 yahoo_fantasy_basketball_analyzer.py
  ? Please choose a mode:  NBA Players Performance Analyzer
  ? And a NBA season:  2018-2019
  ? Select categories for analysis (default 9CAT):  done (9 selections)
  Parsing Basketball Reference NBA players total stats ... Done
  Calculating player performace ... Done
  Finished! please import ""2018-2019_players.csv"" to excel as CSV format to see the results.
  ```
"
92,Franpanozzo/nba-api-rest,JavaScript,"<p align=""center""><img width=""600"" height=""300"" src=""https://elordenmundial.com/wp-content/uploads/2020/10/NBA-logo-baloncesto-historia-deporte-estados-unidos.jpg""></p>

<h1 align=""center"">NBA REST API</h1>

<h3 align=""center"">
Open Source REST API for the best league in the world!
</h3>

<p align=""center"">
<img src=""https://img.shields.io/badge/release-v1.0.0-1DA4D5"">
<img src=""https://img.shields.io/badge/uptime-100%25-369011"">
<img src=""https://img.shields.io/badge/interface-REST-brightgreen.svg?longCache=true&style=flat-square"">
</p>

<h4 align=""center"">
  <i>
    We are not affiliated, associated, authorized, endorsed by, or in any way officially connected with NBA, or any of its subsidiaries or its affiliates. The names NBA as well as related names, marks, emblems and images are registered trademarks of their respective owners.
  </i>
</h4>

<br>
<br>

<div>
 <b>Technologies used in this project: </b> 
 <br />
 <br />
<img src=""https://img.shields.io/badge/JavaScript-323330?style=for-the-badge&logo=javascript&logoColor=F7DF1E"" />
<img src=""https://img.shields.io/badge/Node.js-339933?style=for-the-badge&logo=nodedotjs&logoColor=white"" />
<img src=""https://img.shields.io/badge/Express.js-000000?style=for-the-badge&logo=express&logoColor=white"" />
<img src=""https://img.shields.io/badge/MongoDB-4EA94B?style=for-the-badge&logo=mongodb&logoColor=white"" />
<img src=""https://img.shields.io/badge/Jest-C21325?style=for-the-badge&logo=jest&logoColor=white"" />
<img src=""https://img.shields.io/badge/AWS_Lambda-FF9900?style=for-the-badge&logo=amazonaws&logoColor=white"" />
<img src=""https://img.shields.io/badge/GitHub_Actions-2088FF?style=for-the-badge&logo=github-actions&logoColor=white"" />
  <br />
  <br />
  
  
# Documentation
  
[![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/16013993-caf084a3-b439-4b43-9b9f-67a9fcf1d298?action=collection%2Ffork&collection-url=entityId%3D16013993-caf084a3-b439-4b43-9b9f-67a9fcf1d298%26entityType%3Dcollection%26workspaceId%3Daa0bb4e2-e714-4968-bd39-d9d56f9c0f3d)
<br/>
<br/>

## Players
  ### Get All Players
  This endpoint retrieves all players from all seasons.
  
  - #### HTTP Request: 
  `GET https://klqn0hf9bk.execute-api.us-east-1.amazonaws.com/prod/v1/players`
  
  - #### Query parameters
  
| Parameter               | Default   | Description  |
|-------------------------|-----------|--------------|
| page       |1 | The page number used for pagination |
| limit      | 20 | the number of results returned per call, used for pagination. Max 100    | 
| search   | | Used to filter players based on their name. For example, ?search=davis will return players that have 'davis' in their first or last name.  |

  
 ### Post Player
  This endpoint let´s you post a new player (for example to upload a new draft class) - You need a special API-KEY to do this.
  - #### HTTP Request
  `POST https://klqn0hf9bk.execute-api.us-east-1.amazonaws.com/prod/v1/players`
  
  - #### Body example
  ![image](https://user-images.githubusercontent.com/62455934/165942148-d881a7c3-0595-461f-a5b8-f21838f36274.png)

  
  - #### Headers
  `x-api-key: secretValue`
  
  ### Delete Player
  This endpoint let's you delete a player (for example a player retires) - You need a special API-KEY to do this.
  
  - #### HTTP Request
  `DELETE https://klqn0hf9bk.execute-api.us-east-1.amazonaws.com/prod/v1/players/<ID>`
  
  - #### URL Parameters
  | Parameter | Description  |
  |----------|--------------|
  | ID        | ID of the player to Delete |
  
  - #### Headers
  `x-api-key: secretValue`
  
  ## Teams
  ### Get All Teams
  This endpoint retrieves all teams for the current season.

  - #### HTTP Request 
  `GET https://klqn0hf9bk.execute-api.us-east-1.amazonaws.com/prod/v1/teams`

  ### Get Specific Team

  - #### HTTP Request
  `GET https://klqn0hf9bk.execute-api.us-east-1.amazonaws.com/prod/v1/teams/<ID>`

  - #### URL Parameters
  | Parameter | Description  |
  |----------|--------------|
  | ID        | ID of the team to retrieve |
  
  
  
  
  

  
"
93,arbues6/Euroleague-ML,Jupyter Notebook,"# Euroleague-ML
The aim of this repository is to publish several Python Notebooks to see how Machine Learning (ML) can be applied to basketball-based European Datasets. Although the given examples are quite simple (build-in scikit-learn functions), I expect these models to provide coaches/analysts/GM's with concrete baseline examples. 
In particular, at the moment (January 12th 2020), three tutorials about ML gold-standards have been included:
1. **Clustering**, where K-Means is used to group similar types of shooters based on shotchart-based features. 
2. **Classification**, where SVM is used to build a model able to classify player positions. 
3. **Regression**, where linear models are used in order to predict several statistics, as well as suggesting potentially interesting players for a given lineup. 

I really hope you find it useful. If you have any questions / suggestions, feel free to send me an email (adria.arbues@upf.edu) or a Twitter DM (@arbues6).
Big shoutout also to Nacho Gámez (@ngamezj), who provided me with a notable dataset to get started. 

## Required Dependencies
All code has been written in Python (3.7); the following libraries should be installed (all of the are included in pip3):
```
pip3 install numpy
pip3 install opencv-python
pip3 install pandas
pip3 install matplotlib
pip3 install scikit-learn
```

## Other Interesting Links and Resources
- Andrew Patton's Repository ""Basic NBA Tutorials"": https://github.com/anpatton/basic-nba-tutorials
- Talk ""Beyond the 4 Factors"" with Seth Partnow, Todd Whitehead and Justin Jacobs: https://www.youtube.com/watch?v=DKv-1n5OHEc&&ab_channel=Adri%C3%A0Arbu%C3%A9s
- Some non-technical deep Euroleague reports: https://medium.com/@adria.arbues
"
94,minimaxir/ncaa-basketball,R,"# ncaa-basketball
![](ncaa_count_attempts.png)

R Code + R Notebook on how to process and visualize NCAA basketball data.

This repository is the complement to my blog post [Visualizing One Million NCAA Basketball Shots](http://minimaxir.com/2018/03/basketball-shots/).

## Maintainer
Max Woolf ([@minimaxir](http://minimaxir.com))

*Max's open-source projects are supported by his [Patreon](https://www.patreon.com/minimaxir). If you found this project helpful, any monetary contributions to the Patreon are appreciated and will be put to good creative use.*

## Special Credits

Ewen Gallic, for his implementation of a [basketball court in ggplot2](http://egallic.fr/en/drawing-a-basketball-court-with-r/), which saved me a lot of time.

## License
MIT"
95,kpascual/basketball-data-scraper,PLpgSQL,"# PLAY BY PLAY AND BOX SCORE SCRAPING LIBRARY


## Requirements


This library was created on a Mac, so the setup instructions are geared toward a *nix environment (sorry Windows users)

* Python 2.5 or greater
* BeautifulSoup4 (pip install beautifulsoup4)
* lxml (used within BeautifulSoup) (pip install lxml)


## Instructions


* Clone the repository to your local machine (change your_folder_path to whatever folder you want to put the repo)

```
cd your_folder_path
git clone git@github.com:kpascual/basketball-data-scraper.git
```

* Add this new directory to your PYTHONPATH in ~/.bash_profile

```
PYTHONPATH=""/your_folder_path/basketball-data-scraper:$PYTHONPATH""
export PYTHONPATH
```

* Run the build.sh script


```
sh build.sh database_username database_password database_name
```

To actually do scraping, run the scrape.py file. You will be asked what league you want to run.

```
python scrape.py
```

"
96,gabarlacchi/MASK-CNN-for-actions-recognition-,Python,"# MASK R-CNN  sport actions fine tuning

Mask R-CNN is a powerful framework developed by facebook ([here more](https://arxiv.org/abs/1703.06870)), main features are:
- General and flexible for object instance segmentation 
- Part of Detectron, a state-of-the-art object detection algorithm collection
- Powered in python and natively Coffe2 
- Also available a [Keras + TensorFlow version](https://github.com/matterport/Mask_RCNN) (here you can find all the requirements)

## Aims of this repo

Address the network towards Sport activities detection using fine tuning technique.
We want that the new will be able to detect only main subjects labelled as activity name (i.e. only people)

![Aims](https://github.com/barloccia/MASK-CNN-for-actions-recognition-/blob/master/images/aims.png)

## Dataset

Dataset used is ucf24 (subset of ucf101): a set for Action Recognition that consists of 3194 videos from 4 kind of action. Resolution of each video is 320x240 px.
We intending to work frame-by-frame, and also need an annotated groundtruth:
A frame annotated version of this dataset it's available from this [repo by Gurkit](https://github.com/gurkirt/realtime-action-detection)
#### but:
Not whole dataset is annotated, only “frame of interest”: this produces the 70% of useless data.
Only bboxes groundtruth is available and no masks are annotated: so we produced a mask gt by ourselves.

![Data distribution](https://github.com/barloccia/MASK-CNN-for-actions-recognition-/blob/master/images/data.png)


## Getting Started
Here we propose a bief explenation of the files and their usages (we strongly refer to ucf24 dataset above mentioned!):
Coco weights used are available [here](https://arxiv.org/abs/1703.06870)

- **actionCLSS_config.py**: extends and override net configuration.
- **actionCLSS_dataset.py** and **actionCLSS_dataset_partitioned.py**: offers two dataset classes: the first can be instantiated specifying the number of samples which compose it, the second read the samples from `testList.txt` and `validationList.txt`.
- **actionCLSS_training.py**: obviouslly, is the routine that manage the train.
- **evaluation.py** : evaluate the model on the whole testSet and iteratively save local results.
- **printPR.py**: use results produced by `evaluation.py` to compute Precision and Recall for each class.
- **createMasks.py**: produce person masks for each frame of the dataset, like exposed below.

![Mask Groundthrut generation](https://github.com/barloccia/MASK-CNN-for-actions-recognition-/blob/master/images/masks.png)

## Results

A brief argue can be over the divergence between a quantitative and a qualitative analysis on the maks and bb produced.
Below an example is showed: predictedion surclass the groundtruth, but numerically this means a penalization!
![Qualitative Vs Quantitative](https://github.com/barloccia/MASK-CNN-for-actions-recognition-/blob/master/images/gtVsPred.png)

- mAP without considering masks:  84.5%
- mAP considering masks IoU=25: 37.4%
- mAP considering masks IoU=50:  28.7%

| Class        | No Mask           | IoU = 25  | IoU = 50  |
| ------------ |:-----------------:| :--------:| :--------:|
| WalkingWithDog	| 85.8% | 57.2% | 48.9% |
| BasketballDunk	| 62.1% | 1.7% | 0.2% |
| Biking	| 92.4% | 38.3% | 27.5% |
| CliffDiving	| 22.7% | 3.2% | 0.0% |
| CricketBowling	| 47.2% | 3.8% | 2.7% |
| Diving	| 83.0% | 2.3% | 1.4% |
| Fencing	| 97.9% | 19.5% | 14.0% |
| FloorGymnastics	| 64.8% | 34.0% | 28.5% |
| GolfSwing	| 81.0% | 71.8% | 67.6% |
| HorseRiding	| 95.3% | 27.7% | 16.2% |
| IceDancing	| 93.7% | 68.8% | 64.3% |
| LongJump	| 59.9% | 25.1% | 22.1% |
| PoleVault	| 54.7% | 2.6% | 1.6% |
| RopeClimbing	| 90.6% | 30.8% | 20.5% |
| SalsaSpin	| 86.4% | 48.5% | 22.7% |
| SkateBoarding	| 86.7% | 46.9% | 34.2% |
| Skiing	| 80.7% | 46.3% | 37.2% |
| Skijet	| 87.8% | 21.9% | 13.0% |
| SoccerJuggling	| 85.8% | 58.3% | 52.8% |
| Surfing	| 78.2% | 18.1% | 12.7% |
| TennisSwing	| 64.9% | 59.3% | 56.1% |
| TrampolineJumping	| 83.5% | 16.3% | 13.8% |
| VolleyballSpiking	| 39.5% | 0.7% | 0.3% |

## Requirements
Python 3.4, TensorFlow 1.3, Keras 2.0.8 and other common packages listed in `requirements.txt`.

### MS COCO Requirements:
To train or test on MS COCO, you'll also need:
* pycocotools (installation instructions below)
* [MS COCO Dataset](http://cocodataset.org/#home)
* Download the 5K [minival](https://dl.dropboxusercontent.com/s/o43o90bna78omob/instances_minival2014.json.zip?dl=0)
  and the 35K [validation-minus-minival](https://dl.dropboxusercontent.com/s/s3tw5zcg7395368/instances_valminusminival2014.json.zip?dl=0)
  subsets. More details in the original [Faster R-CNN implementation](https://github.com/rbgirshick/py-faster-rcnn/blob/master/data/README.md).

If you use Docker, the code has been verified to work on
[this Docker container](https://hub.docker.com/r/waleedka/modern-deep-learning/).


## Installation
1. Install dependencies
   ```bash
   pip3 install -r requirements.txt
   ```
2. Clone this repository
3. Run setup from the repository root directory
    ```bash
    python3 setup.py install
    ``` 
3. Download pre-trained COCO weights (mask_rcnn_coco.h5) from the [releases page](https://github.com/matterport/Mask_RCNN/releases).
4. (Optional) To train or test on MS COCO install `pycocotools` from one of these repos. They are forks of the original pycocotools with fixes for Python3 and Windows (the official repo doesn't seem to be active anymore).

    * Linux: https://github.com/waleedka/coco
    * Windows: https://github.com/philferriere/cocoapi.
    You must have the Visual C++ 2015 build tools on your path (see the repo for additional details)"
97,dsscollection/basketball,R,"Repository for dsscollection submission ""Modeling Offensive Player Movement in Professional Basketball"" by Steven Wu and Luke Bornn.

Below are descriptions of the subdirectories of this repo:
- analysis: contains all code and materials required to create the PDF of the paper submission. To create the PDF, you will need `knitr`, `dplyr`, `ggplot2`, `raster`, `grid`, `gridExtra` installed. Then, either (1) open 'article.Rnw' in RStudio and click 'File -> Preview' or (2) open up a Terminal and type 

> Rscript -e ""library(knitr); knit('./EPV_demo.Rnw')"".

- data: contains .Rdata files of intermediate data that is helpful for testing changes to the implementation of functions
- plots: contains static plots that the article uses, namely plots that were generated over a season's worth of data

We would like to acknowledge STATS, LLC for consenting the inclusion of a full-game data sample.
"
98,gogonzo/sport,R,"---
title: ""`sport` an R package for Online Ranking Methods""
output:
  github_document:
    pandoc_args: --webtex
---
```{r, echo = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = ""#>"",
  fig.path = ""man/figures/README-""
)
```

# sport <img src=""man/figures/hexlogo.png"" align=""right"" />

<!-- badges: start -->
[![CRAN badge](https://cranlogs.r-pkg.org/badges/sport)](https://cran.r-project.org/web/packages/sport/index.html)
[![Travis-CI Build Status](https://travis-ci.org/gogonzo/sport.svg?branch=master)](https://travis-ci.org/gogonzo/sport)
[![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/github/gogonzo/sport?branch=master&svg=true)](https://ci.appveyor.com/project/gogonzo/sport)
[![License: GPL v2](https://img.shields.io/badge/License-GPL%20v2-blue.svg)](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html)
[![Coverage status](https://codecov.io/gh/gogonzo/sport/branch/master/graph/badge.svg)](https://codecov.io/gh/gogonzo/sport)
<!-- badges: end -->

# About
Name `sport` is an abbreviation for Sequential Pairwise Online Rating Techniques. Package contains functions calculating ratings for two-player or multi-player matchups. Methods included in package are able to estimate ratings (players strengths) and their evolution in time, also able to predict output of challenge. 
Algorithms are based on Bayesian Approximation Method, and they don't involve any matrix inversions nor likelihood estimation. `sport` incorporates methods such glicko, glicko2, bayesian Bradley-Terry, dynamic logistic regression. Parameters are updated sequentially, and computation doesn't require any additional RAM to make estimation feasible. Additionally, base of the package is written in `C++` what makes `sport` computation even faster.

# Package Usage

## Installation
Install package from CRAN or development version from github.

```{r eval=FALSE}
devtools::install_github(""gogonzo/sport"")
install.packages(""sport"",repos = ""https://cloud.r-project.org/"")
```

## Available Data
Package contains actual data from Speedway Grand-Prix. There are two data.frames: 

1. `gpheats` - results SGP heats. Column `rank` is a numeric version of column `position` - rider position in race.
2. `gpsquads` - summarized results of the events, with sum of point and final position.

```{r echo=TRUE, message=FALSE, warning=FALSE}
library(sport) 
str(gpheats)
```

Data used in `sport` package must be in so called long format. Typically data.frame contains at least `id`, `name` and `rank`, with one row for one player within specific match. Package allows for any number of players within event and allows ties also. For all games, *output needs to be a rank/position in event*. Don't mix up rank output with typical 1-win, 0-lost. In `sport` package output for two player game is 1-winner 2-looser. Below example of two matches with 4 players each.

```{r echo=FALSE}
gpheats[1:8,c(""id"",""rider"",""rank"")]
```

## Estimate dynamic ratings

To compute ratings using each algorithms one has to specify formula. Form `rank | id ~ name` is required, which estimates `name` - rating of a player, by observing outputs - `rank`, nested within particular event - `id`. Variable names in formula are unrestricted, but model structure remains the same. All methods are named `method_run`.
`formula = rank|id ~ name` 

```{r warning=FALSE, message=FALSE}
glicko  <- glicko_run(formula = rank|id ~ player(rider), data = gpheats)
glicko2 <- glicko2_run(formula = rank|id ~ player(rider), data = gpheats)
bbt     <- bbt_run(formula = rank|id ~ player(rider), data = gpheats)
dbl     <- dbl_run(formula = rank|id ~ player(rider), data = gpheats)

print(dbl)
```

## Output

Objects returned by `method_run` are of class `rating` and have their own `print`
`summary` which provides most important informations. -`print.sport` shows 
condensed informations about model performance like accuracy and consistency of 
model predictions with observed probabilities. More profound summary are given 
by `summary` by showing ratings, ratings deviations and comparing model win 
probabilities with observed.

```{r message=FALSE}
summary(dbl)
```

To visualize top n ratings with their 95% confidence interval one can use 
dedicated `plot.rating` function. For DBL method top coefficients are presented 
not necessarily ratings. It's also possible to examine ratings evolution in time, 
by specifying `players` argument.

```{r message=FALSE, fig.show='hold', out.width = ""50%""}
plot(glicko, n = 15)
plot(glicko, 
     players = c(""Greg HANCOCK"",""Tomasz GOLLOB"",""Tony RICKARDSSON""))
```

Except dedicated `print`,`summary` and `plot` there is possibility to extract more detailed information to be analyzed. `rating` object contains following elements:

```{r message=FALSE}
names(glicko)
```

* `rating$final_r` and `rating$final_rd` contains ratings and ratings deviations estimations.
* `r` contains data.frame with sequential ratings estimations from first event to the last. Number of rows in `r` equals number of rows in input data.
* `pairs` pairwise combinations of players in analyzed events with prior probability and result of a challenge. 

```{r message=FALSE}
tail(glicko$r)
tail(glicko$pairs)
```"
99,kgilbert-cmu/basketball-gm,JavaScript,"# Basketball GM 4.0.0

A single-player basketball simulation game. Make trades, set rosters, draft
players, and try to build the next dynasty, all from within your web browser.
The game is implemented entirely in client-side JavaScript, backed by IndexedDB.

Copyright (C) Jeremy Scheff. All rights reserved.

* Email: commissioner@basketball-gm.com
* Website: <https://basketball-gm.com/>
* Development: <https://github.com/dumbmatter/basketball-gm>
* Discussion: <http://www.reddit.com/r/BasketballGM/>

**Basketball GM is NOT open source, but it is also not completely closed. Please
see LICENSE.md for details.**

## Development Info

If you just want to play the game, go to <http://basketball-gm.com/>.
Instructions below are for developers who want to run a copy locally so they can
make changes to the code.

If you want to contribute but get stuck somewhere, please contact me! I'm happy
to help.

### License and Contributor License Agreement

**Basketball GM is NOT open source, but it is also not completely closed. Please
see LICENSE.md for details.**

If you want to contribute code to Basketball GM, you must sign a contributor
license agreement. There are separate forms for individuals and entities (such
as corporations):

* [Individual CLA](CLA-individual.md) (this is probably what you want)
* [Entity CLA](CLA-entity.md)

Make a copy of the form, fill in your information at the bottom, and send an
email to commissioner@basketball-gm.com with the subject line, ""Contributor
License Agreement from YOUR_NAME_HERE (GITHUB_USERNAME_HERE)"".

### Step 1 - Installing

First, make sure you're using [Node.js](https://nodejs.org/) v6 or higher, older
versions probably won't work. Then, all of the tooling used in development can
be set up by simply installing [npm](https://www.npmjs.com/) and running

    npm install

from within this folder.

### Step 2 - Building

Basketball GM uses Browserify for JS minification and clean-css for
CSS minification. To build the app along with all its assets, run

    npm run build

However during development, you probably would rather do

    npm run start-watch

which will start the server and watch JS and CSS files for changes and
recompile. This simply runs both `npm start` and `npm run watch` together, which
alternatively can be run separately if you wish.

Open `package.json` to see all available scripts.

### Step 3 - Running

To run the game locally, you need some way of running a web server to display
the content. There are currently two ways to do it. It doesn't matter which
you use as long as you can get it to run on your computer.

#### 1. Node.js (easiest)

Run

    npm start

and point your browser to <http://localhost:3000/>. If you use the command
`npm run start-watch` from above, then running the command `npm start` is not
necessary.

#### 2. Apache

The mod_rewrite rules in `.htaccess` can be used to make Apache run Basketball
GM. Everything should work if you point it at the `build` folder with
mod_rewrite enabled. That's how it's done on play.basketball-gm.com.

### Step 4 - Testing

ESLint, Flow, and, stylelint are used to enforce some coding standards. To run
them on the entire codebase, run

    npm run lint

Integration and unit tests are bunched together in the `js/test` folder.
Coverage is not great. They can be run from the command line in Karma with

    npm test

or

    npm run test-watch

or manually within a web browser by running `npm run build-test` (or
`npm run watch-test`) and going to <http://localhost:3000/test> (this might be
broken currently).

### Code Overview

Basketball GM is a single-page app that runs almost entirely client-side by
storing data in IndexedDB. The core of the game runs inside a Shared Worker (or
a Web Worker in crappy browsers that don't support Shared Workers), and then
each open tab runs only UI code that talks to the worker. The UI code is in the
`src/js/ui` folder and the core game code is in the `src/js/worker` folder. They
communicate through the `toUI` and `toWorker` functions.

The UI is built with React and Bootstrap.

In the worker, data is ultimately stored in IndexedDB, but for performance and
cross-browser compatibility reasons, a cache (implemented in
`src/js/worker/db/Cache.js`) sits on top of the database containing all commonly
accessed data. The idea is that IndexedDB should only be accessed for uncommon
situations, like viewing stats from past seasons. For simulating games and
viewing current data, only the cache should be necessary.

The cache is overly complicated because (1) the values it returns are mutable,
so you better not mess with them accidentally, and (2) when you do purposely
mutate a value (like updating a player's stats), you need to remember to always
write it back to the cache manually by calling `idb.cache.*.put`.

Also in the worker, there is a global variable `self.bbgm` which gives you
access to many of the internal functions of Basketball GM from within your
browser.

### Git Workflow

If you want to contribute changes back to the project, first create a fork on
GitHub. Then make your changes in a new branch. Confirm that the tests
(hopefully including new ones you wrote!) and ESLint all pass. Finally, send me
a pull request.

It's also probably a good idea to create an [issue on
GitHub](https://github.com/dumbmatter/basketball-gm/issues) before you start
working on something to keep me in the loop.

## Less Important Development Info

### Bootstrap

Basketball GM's layout is currently based on Bootstrap 3.1.1 with the following
options:

* @font-size-base set to 13px

### Basketball stuff

Abbreviations of stats should be done like basketball-reference.com stat pages.
For instance, ""defensive rebounds"" is ""drb"".

### Cordova

The game runs equally well within a web browser and within Cordova (Android
4.4+). The codebase is designed to handle both situations (the main difference
is absolute vs relative paths, governed by window.inCordova in index.html).

Warning: This hasn't been tested in a while and is probably broken by now.

### Thank you BrowserStack

Shout out to [BrowserStack](https://www.browserstack.com/) for helping with
cross-browser testing.
"
100,nlgcat/sport_sett_basketball,Ruby,"# SportSett:Basketball

This resource is designed to allow for research into Natural Language Generation.  In particular, with neural data-to-text approaches although it is not limited to these.  This page will be updated with more detail, as soon as I have time and am able to post examples of other work I am doing with this.  For the moment, see our [IntelLanG2020](https://intellang.github.io/papers/) paper [SportSett:Basketball - A robust and maintainabledataset for Natural Language Generation](https://intellang.github.io/papers/5-IntelLanG_2020_paper_5.pdf).

# Denormalized Tables
To make things easier for people, I have uploaded on [Google Drive](https://drive.google.com/file/d/1CN74cxLrlBQpcStJIF1GQJO0TcTE6y2T/view?usp=sharing) a SQL script which will add some denormalized tables created from the core tables.  This provides things like:

* Per player/team on game/period statistics, with each player/time-period on one row.
* The same, except for some name information about each row.

On the statistics tables, each stat has a count, then also a ""_double"" column, which is one if it is ""double digits"", zero otherwise.  There are also columns at the end for whether the player had a ""double-double"" or ""triple-double"" etc.  These columns are included for teams, and per-period data as well, even though it does not always make sense to use it that way.

These have not been thoroughly tested yet, and I will at some point release the SQL scripts I used to make these tables.  I know the underlying table structure can seem daunting/obtuse.  It has been designed to allow for multiple sports and leagues whilst maintaining a high level of normalization.  It is like this, because I find it easier to work with, although I acknowledge that not everyone does.  For NLG research I am looking at simpler ways this data can be made available, and these 8 new tables are a first step in that direction.  You should be bale to just run the sql file with the psql command and write these tables atop your existing database.

## Quick Start
You will need a working [PostgreSQL](https://www.postgresql.org/) installation, as well as a working Ruby environment if you want to use the ORM.  I suggest using [RVM](https://rvm.io/), you will also need [Bundler](https://bundler.io/).  The ORM are written in [Ruby Sequel](https://github.com/jeremyevans/sequel) rather than ActiveRecord.  Whilst this is all in a Rails app, there is no front-end implemented, it is just a convenient way for me to create scripts using rake tasks.  Note that this resource is not meant to be efficient.  If you require high data throughput for some reason, you can use the raw SQL.  The Ruby code is meant to provide a simple way to write scripts to export data, this might take an hour or two to run but it is simple to code and the training of models takes way longer than that anyway, so I find it to be acceptable.

You will need to set the password etc in config/database.yml
```
development:
	adapter: postgresql
	database: sport_sett_development
	user: postgres # Also accept 'username' as key, if both are present 'username' is used
	password: postgrespassword
	host: 127.0.0.1 # Optional
	port: 5432 # Optional

```
ATTENTION!
The original SQL file contained a but where the team_in_games.winner column was often wrong.  This was a convenience column, the scores appear to all be correct.  The file has now been updated, using the score fields to derive then correct the winner column.

Then navigate to root directory of repo, download database archive file, and ensure you have the correct ruby environment set (if using something like RVM).  Large files can be found in [Google Drive](https://drive.google.com/file/d/1NUEHzNmwlG-TQB6dAxSiTUQQ7z6vbkNL/view?usp=sharing).
```
bundle install
tar -xvjpf db_after_statistics_2018.sql.tar.bz2
psql -U postgres -d sport_sett_development < db_after_statistics_2018.sql
```

You can now generate output files in the format required for the [system of Rebuffel et al.](https://github.com/KaijuML/data-to-text-hierarchical).  This takes about 1 hour to run.  The result of the below command has been uploaded to [Google Drive](https://drive.google.com/drive/folders/11MG7uVDi5tB8By9WT_OqqqZ1NbiEaS3Y?usp=sharing) if you just want the OpenNMT training data without changing anything.

```
rake export:rebuffel
```
This will place several files in the **./exported_files** directory.  In order to create the partitions from these files as per our paper you need to combine the yearly files.  The yearly files contain data for just one season.
```
cd ./exported_files
cat D1_2014_data.txt D1_2015_data.txt D1_2016_data.txt > D1_training_data.txt
cat D1_2014_text.txt D1_2015_text.txt D1_2016_text.txt > D1_training_text.txt
cp D1_2017_data.txt D1_valid_data.txt
cp D1_2017_text.txt D1_valid_text.txt
cp D1_2018_data.txt D1_test_data.txt
cp D1_2018_text.txt D1_test_text.txt
```

or run

```
sh combine.sh
```

You can of course combine these in other ways.  This is just the partition scheme we used in our paper.

## Dimensions
Please see **app/models/rebuffel_open_nmt_record.rb** for code which creates this data.  If you wanted to change the data for each input sample, this is where you would do it, either by editing this file or creating your own similar class which is used in the rake script.

Notice how the class names follow the dimensions highlighted in our paper.  The UML diagram shows these relationships.

WARNING:  There are some issues with the play-by-play statistics.  Sometimes, they do not line up with what is reported in the box score.  I am working on scripts to automatically resolve these, although early investigation suggests there is only about 1 mistake every other game.  A mistake is commonly just one basket being attributed to the wrong player.  You can use the play-by-play, there is a lot of data there, but there are discrepancies.  Given this is such a large dataset, with original data entry likely by humans, it will not be 100% perfect.  My current plan for this is to take the game data, game period data, and play-by-play, then resolve discrepancies automatically where 2/3 of the sources agree on a correct answer, and the error can be resolved a net-zero effect (same team totals, points etc).

## Playoff / Preseason Games
Whilst some of these games are in the original Rotowire dataset, they are not yet included here.  The database is designed in such a way that they can be added later.  There are several reasons for not including them yet.  Firstly, it takes time to import this stuff.  Secondly, just doing regular season games makes the machine learning problem simpler (and it is still very, very difficult).  Finally, preseason games are played in all kinds of places, even against teams from different leagues.

## A Note on Generated Files
Some functions in Ruby such as sort_by are not deterministic beyond their given arguments.  This means that items which are of equal value when sorted are not always presented in the same order (just together).  The code has also been changed slightly to make it simpler (it used to be several different functions doing similar things).  I only mention this here so you know that the dataset generated is not the exact one used in the paper.  This is no bad thing, running on the exact same dataset over and over again is a bad idea.

## This is a work in progress
This is code from an academic research project, trying to get us closer to a sensible data solution in this domain.  It is not finished, it is not a commercial product.  I am happy to answer questions if you are doing research, but please have reasonable expectations.

## UML DIagram
Some attributes are missing for this and it needs a general update and tidy, but it is mostly right.  You can find all attributes by looking at the SQL tables.  Rails Sequel naming conventions have been followed.
![UML Diagram](https://raw.githubusercontent.com/nlgcat/sport_sett_basketball/master/class_diagram.png)


"
101,dimgold/Artificial_Curiosity,Jupyter Notebook,"# Artificial Curiosity
## Adaptive Reinforcement Learning of curious AI basketball agents

![](/robot.jpg?style=centerme)


A machine learning project of learning NBA shots success ratio based on  410,000 records of [NBA players shots stats](http://stats.nba.com).

The project implements various ML techniques in order to create a ""Curious"" AI agent, which learns success ratios and implements the knowledge in [**exploration-exploitaition**](http://www.indigosim.com/tutorials/exploration/t0s1.htm) game simulation enviroment.

## Part 1 - [Bayesian Inference and Information Gain](part1-bayes/cur_project_bayes.ipynb)
After an [EDA](https://en.wikipedia.org/wiki/Exploratory_data_analysis) stage and preprocessing of shots data into categorical features we implemented a [bayesian inference](https://en.wikipedia.org/wiki/Bayesian_inference) algorithm and evaluated the feature selection with Expected [Information Gain](https://en.wikipedia.org/wiki/Information_gain_ratio) criteria.


## Part 2 - [Neural Network Learning and Optimization](Part2-NN/cur_neural.ipynb)

Manual Neural Network implementation with numpy and SGD method. This part required new preprocess methods (to continuous features) and network structure optimization by improving [prediction AUC](https://en.wikipedia.org/wiki/Receiver_operating_characteristic#Area_under_the_curve) to 70%.

### Extra:
  - [Genetic algorithm optimization](Part2-NN/Genetic.ipynb)
  
    Implementation of a genetic algorithm for network structure optimization.
    
  - [Random Forest, SVM and PCA methods](Part2-NN/Other_models.ipynb)
  
    Benchmarks methods for accuracy estimation and feature selection.

## Part 3 - [Curiosity Loop with Adaptive Reinforcement Learning](/Part3-RL/Artificial_Curiosity_Loop.ipynb)
Implementaion of a Curosity Loop, using [Actor-Critic Method](https://cs.wmich.edu/~trenary/files/cs5300/RLBook/node66.html) and Bayesian Inference.

### The Curiosity Loop:
![](Part3-RL/loop.PNG)

A ""new-born"" AI agent takes shots from different positions and learns the success of each shot, while trying to both learn the environment and score as much as possible.

## Project Presentation:
[Link to project presentation (pdf)](Pres.pdf)
![presentation](presentation.png)

## More Links:

- [Big Data Lab @ TAU](http://bigdatalab.tau.ac.il/research/)
- [Curiosity Lab @ TAU](http://gorengordon.wixsite.com/gorengordon)

"
102,JKH-HCA2/BasketballRecLeague,JavaScript,"# BasketballRecLeague

## About

The purpose of this project is to demonstrate a combination of programming strategies we've learned over the duration of the bootcamp. The app will be basketball themed, and it will display a list of leagues, teams, and members registered with the site. Users will also be able to register, edit, and delete new teams or members.

## Tech

The webpage will be written in HTML, CSS, and JavaScript. Additionally, the page will utilize a server file to dynamically pull data from a local JSON file.

## How To

To launch the server, navigate to the parent folder BasketballRecLeague in your file directory. Drag that folder into your command line and change to that directory. Once there, perform a 'node server.js' to initialize the webserver. Then, enter 'http://localhost:8081/' in your browser's address bar.

## Website

![](public/images/screenshot.png)"
103,devinmancuso/nba-start-active-players-bot,Python,"## nba-start-active-players-bot

**What**

Python Selenium script that logs into your Yahoo fantasy basketball account and starts active players for today and upcoming days. Accepts arguments username, password, the number of days you would like the bot to process into the future and whether you want to see what the browser is running (useful for debugging) or run in headless mode.

**Why**

1. Never leave a player on the bench because you forgot to set your lineup
2. Why not

**Dependencies**

* Python 2.7
* [Click](http://click.pocoo.org/)
* Selenium WebDriver
* [ChromeDriver](https://sites.google.com/a/chromium.org/chromedriver/downloads)
* PhantomJS

**How**

1. Download script
2. Install dependencies

```bash
pip install selenium click 
brew install node
curl https://www.npmjs.org/install.sh | sh
npm install phantomjs
```

You'll have to grab ChromeDriver manually.

3. Run the program

To run the program

`python start-active-players.py`

You will be prompted to enter the number of days you want the script to process, your Yahoo credentials and whether you want the script to run in headless mode (you can't watch what it's doing in the browser). 

You can include these details as options to avoid having to fill them in each time. For example to start active players for the next week including today.

`python start-active-players.py --days=7 --username=YahooUsername@yahoo.com.au --password=Y0urYah00Passw0rd --headless=False`

use `--help` for help documentation.

**To-Do**

- [x] Try / Except for missing command line argv.
- [x] Add headless support for PhantomJS
- [ ] Try / Excepts for key UI elements to ensure Selenium can find them before we click them.
- [ ] Put more asserts in places to tighten it all up
- [x] Include confirmations for each date as they are processed

**Contribute**

If you think this is a cool idea, but kind of inefficient, please submit a PR and let's make this better.

© 2015, Devin Mancuso · MIT License you know the deal
"
104,cryptopunksnotdead/punks.bodies,,"
[Vol. 1 - Heads](https://github.com/cryptopunksnotdead/punks.blocks) ·
[Vol. 2 - Bodies & More](https://github.com/cryptopunksnotdead/punks.bodies)

# Punk Building Block Series  Vol 2 - Bodies & More


## Basic Punk Body Series (32×32)


Humans (m/f) - 3 skin tones (dark/mid/light)

Male -
xs - ![](basic/human1-male-xs.png)
![](basic/human2-male-xs.png)
![](basic/human3-male-xs.png),
mid -
![](basic/human1-male-m.png)
![](basic/human2-male-m.png)
![](basic/human3-male-m.png).


Female -
mid - ![](basic/human1-female-m.png)
![](basic/human2-female-m.png)
![](basic/human3-female-m.png),
large - ![](basic/human1-female-l.png)
![](basic/human2-female-l.png)
![](basic/human3-female-l.png),
big xxl -
![](basic/human1-female-xxl.png)
![](basic/human2-female-xxl.png)
![](basic/human3-female-xxl.png).



More -
Zombies (m/f)
![](basic/zombie-male-xs.png) ![](basic/zombie-male-m.png) ![](basic/zombie-female-m.png)  ![](basic/zombie-female-l.png) ![](basic/zombie-female-xxl.png),
Apes (m/f),
![](basic/ape-male-xs.png) ![](basic/ape-male-m.png) ![](basic/ape-female-m.png) ![](basic/ape-female-l.png) ![](basic/ape-female-xxl.png),
Aliens (m/f)
![](basic/alien-male-xs.png) ![](basic/alien-male-m.png) ![](basic/alien-female-m.png) ![](basic/alien-female-l.png) ![](basic/alien-female-xxl.png).



### Men in Black Series (32×32)

_(Black) Smoking & Dinner Jackets_

![](meninblack/suit1-black.png)
![](meninblack/suit2-black.png)


###  Hoodies Series (32×32)

_Brudda (& Sista), Welcome to the Hood_

![](hoodies/m/hoodie1-black.png)
![](hoodies/m/hoodie1-cream.png)
![](hoodies/m/hoodie1-sky.png) <br>
![](hoodies/m/hoodie2-dark.png)
![](hoodies/m/hoodie2-pharoah.png)




###  Football Jersey Series (32×32)

_National (Selection) Teams & Football Clubs From Around the World_

National (Selection) Teams -
![](football/argentina.png)
![](football/brazil.png)
![](football/france.png)
![](football/portugal.png)

Football Clubs -
![](football/arsenal.png)
![](football/liverpool.png)
![](football/manchester_city.png)
![](football/barcelona.png)
![](football/internazionale.png)
![](football/juventus.png)
![](football/lille.png)
![](football/bayern.png)
![](football/austria_wien.png)
![](football/rapid_wien.png)




### Basketball Jersey Series  (32×32)

U.S. National Basketball Association (NBA) -
![](basketball/atlanta_hawks.png)
![](basketball/boston_celtics.png)
![](basketball/brooklyn_nets.png)
![](basketball/charlotte_hornets.png)
![](basketball/chicago_bulls.png)
![](basketball/chicago_bulls2.png)
![](basketball/cleveland_cavaliers.png)
![](basketball/dallas_mavericks.png)
![](basketball/denver_nuggets.png)
![](basketball/golden_state_warriors.png)
![](basketball/golden_state_warriors2.png)
![](basketball/los_angeles_lakers.png)
![](basketball/los_angeles_lakers2.png)
![](basketball/new_york_knicks.png)





### Hotties in Bras Series (32×32)

_Hot or Not?_

![](hotties/bra-black.png)
![](hotties/bra-cyan.png)
![](hotties/bra-pink.png)
![](hotties/bra-yellow.png)




## Questions? Comments?

Post them on the [D.I.Y. Punk (Pixel) Art reddit](https://old.reddit.com/r/DIYPunkArt). Thanks.

"
105,tutsplus/BasketballFreeThrowUnity,,"Create a Basketball Free Throw Game with Unity
==============================================
This repository includes the sample project used in [Create a Basketball Free Throw Game with Unity](https://code.tutsplus.com/tutorials/create-a-basketball-free-throw-game-with-unity--cms-21203).
"
106,chrisdesilva/pickup,JavaScript,"# [Shoot For Teams](https://shootforteams.com)

App designed to find nearby basketball courts for pick-up games. Starting off as an Austin-based project with plans for expansion to other areas as development continues.

# Description

Shoot For Teams is designed to take the hassle out of finding nearby basketball courts. With user-generated information about courts, you get a much more detailed experience than traditional search sites. We make it easy to find the place so you can get out and play.

# Install

When accessing the [page](https://shootforteams.com) with your Android smartphone, you may select the ""Add to Home Screen"" button on the Chrome menu to access it as a regular app. For desktop Chrome you may go to Menu and then ""Install Shoot For Teams"" to add it to your desktop. As for iOS support, it is still just starting out, but you may access the site, then go to the menu, then ""Share"", and ""Add to Homescreen"" and you will be good to go.

# Usage

Just click on the ""Find a Court"" button, enable location access, and see the courts nearby you. The orange ball represents courts with scheduled games, the black ones represents free courts. Clicking on the ball let you see photos, location, current weather and future games. You may signin or login to be able to submit new court entries and schedule matches.

# [License](https://github.com/chrisdesilva/pickup/blob/master/LICENSE)

# Contribute

I'd love to have your help with this project. The steps [here](https://github.com/chrisdesilva/pickup/blob/master/Contributing.md) should get you going. If not, make a contribution by updating the docs!
"
107,alfremedpal/PandasBasketball,Python,"# PandasBasketball
PandasBasketball is a small module intended to scrape data from [basketball-reference](https://www.basketball-reference.com/) and convert it to useful pandas data structures, such as data frames, for future analytical purposes. The use of jupyter notebooks is encouraged.

# Installation
```
pip install PandasBasketball
```

After installation you can then import it to your environment like this:
```
from PandasBasketball import pandasbasketball as pb
```

## Requirements
Please make sure you meet the following rquirements:
- Python 3.6+
- requests
- pandas
- Beautiful Soup 4

All the requirements can easily be met with the installation of the [Anaconda](https://www.anaconda.com/download/) distribution.

# Usage
## :basketball: Players
Inside a player's page on the basketball-reference website you can find several tables, and most of these tables can be obtained as a pandas data frame by calling `get_player(player, stat)`. The 'player' refers to the name of the html file used by basketball-reference inside the url, and the 'stat' means the type of table.

The currently supported tables are:
- Per Game (`per_game`)
- Totals (`totals`)
- Per 36 Minutes (`per_minute`)
- Per 100 Poss (`per_poss`)
- Advanced (`advanced`)
- Playoffs Per Game (`playoffs_per_game`)
- Playoffs Totals (`playoffs_totals`)
- Playoffs Per 36 Minutes (`playoffs_per_minute`)
- Playoffs Per 100 Poss (`playoffs_per_poss`)
- Playoffs Advanced (`playoffs_advanced`)

The rest of the tables will come in the future.

### Example
To get the 'Per Game' table for LeBron James you would do something like this:
```
df = pb.get_player(""jamesle01"", ""per_game"")
```

### Optional Arguments
The `get_player()` method supports two optional arguments:
- `numeric` - returns the data frame with its columns alreay converted to numeric
- `s_index` - returns the data frame with its column 'Season' as the index

Both are set to `False` by deault.

### Considerations
- The resulting data frame **does not** include the table's footer.
- The resulting data frame will have the same column names as the table's header but it will not have a set index. To set the 'Season' column as index set the argument `s_index` to `True`. 
- The columns will be of type 'object', so in order to perform arithmetic functions on them you will need to convert them to numeric. You can do something like this:
```
lbj_pg = pb.get_player(""jamesle01"", ""per_game"")
lbj_pg[lbj_pg.columns] = lbj_pg[lbj_pg.columns].apply(pd.to_numeric, errors=""ignore"")
```
Or you cant set the optional argument `numeric` to `True`.

## :basketball: Player Game Logs
You can get all of a player's games in a season by calling `get_player_gamelog(player, season)`. The `season` argument must be the last year in which the season took place. 

### Example
To get all of Kawhi Leonard's games during the 2017-2018 season:
```
df = pb.get_player_gamelog(""leonaka01"", ""2018"")
```

### Optional Arguments
The function `get_player_gamelog` supports one optional argument:
- `playoffs` - returns **only** the playoffs games if set to `True`

Set to `False` by default.

### Considerations
- The resulting data frame will use the 'Rk' column as its index
- The data frame does not include those rows which are just the header again
- If the player missed a game, the row will be filled with blanks ("""")

## :basketball: Last n days
Get a data frame with all the season's available players stats over the last n days by calling `get_n_days(days)`.

### Example
```
df = pb.get_n_days(10)
```
### Optional arguments
`get_n_days` supports one optional argument: 
- `player` - returns a pandas series with the stats of the specifed player

`player` is set to `all` by default.

### Considerations
- The resulting data frame will have the column 'Players' as its index by default
- The data frame is in descending order by GmSc

## :basketball: Teams
You can call a team's seasons table with `get_team(name)`. The argument `name` is the team's three-letter abbreviation (e.g. OKC, MAV).

### Example
To get OKC's table:
```
df = pb.get_team(""OKC"")
```

## :basketball: Generate player code
Baskteball-reference uses a special code to build each player's unique html page. As of now, *almost* all functions in `PandasBasketball` expect that code to get the stats for the specified athlete. If you don't want to copy and paste the code from the URL into the function you can try calling `pb.generate_code(player)`. 

**Note:** this is not fully tested, so it is possible to get an incorrect code.

### Example
To get the player code for LeBronJames:
```
pb.generate_code(""LeBron James"")
```
This will output `'jamesle01'` 

Using it with other functions:
```
df = pb.get_player(pb.generate_code(""Donovan Mitchell""), ""per_game"")
```


# Future
- ~~Make this project pip-installable~~
- Add support for the rest of tables on a player's page
- Implement function to obtain team stats per season
- ~~Implement function to get the last n days stats~~
- Implement function to obtain game results by date

# Contributions & Known Issues
If you notice an issue or want to contribute open an issue over at the [issues section](https://github.com/alfremedpal/PandasBasketball/issues)."
108,chenyukang/Basketball_demo,C++,"this is a basketball game demo, base on OpenGL for grapic render,
some simple AI technology.

now this is the first version, it is just an framework,
later I will add some funny things.

Programming language: C++

lib file related:
glu, glut, glui.

TODO list:

1 More detailed AI in game, more real than now.
2 Read some parameters from conf file, this is going to be implemented through Lua.
3 User control from keyboard, so user can play with computer.
4 ...


#snapshot

![snapshot](https://github.com/chenyukang/Basketball_demo/blob/master/imgs/basketball.png?raw=true)
"
