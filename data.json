[
 {
  "repo": "homerchen19/nba-go",
  "language": "JavaScript",
  "readme_contents": "<p align=center>\n<img src=\"https://user-images.githubusercontent.com/12113222/32413609-ea673d3e-c24f-11e7-935b-0a2a86be0ee2.png\">\n</p>\n<p align=center>\n<a target=\"_blank\" href=\"https://npmjs.org/package/nba-go\" title=\"NPM version\"><img src=\"https://img.shields.io/npm/v/nba-go.svg\"></a>\n<a target=\"_blank\" href=\"https://travis-ci.org/xxhomey19/nba-go\" title=\"Build Status\"><img src=\"https://travis-ci.org/xxhomey19/nba-go.svg?branch=master\"></a>\n<a target=\"_blank\" href=\"http://nodejs.org/download/\" title=\"Node version\"><img src=\"https://img.shields.io/badge/node.js-%3E=_6.0-green.svg\"></a>\n<a target=\"_blank\" href=\"https://opensource.org/licenses/MIT\" title=\"License: MIT\"><img src=\"https://img.shields.io/badge/License-MIT-blue.svg\"></a>\n<a target=\"_blank\" href=\"http://makeapullrequest.com\" title=\"PRs Welcome\"><img src=\"https://img.shields.io/badge/PRs-welcome-brightgreen.svg\"></a>\n</p>\n\n> The finest NBA CLI.\n\nWatch NBA live play-by-play, game preview, box score and player information on your console.  \nBest CLI tool for those who are both **NBA fans** and **Engineers**.\n\nAll data comes from [stats.nba.com](http://stats.nba.com/) APIs.\n\n## Install\n\nIn order to use nba-go, make sure that you have [Node](https://nodejs.org/) version 6.0.0 or higher.\n\n```\n$ npm install -g nba-go\n```\n\nOr in a Docker Container:\n\n```\n$ docker build -t nba-go:latest .\n$ docker run -it nba-go:latest\n```\n\nBy default, the docker container will run `nba-go game -t`, but you can\noverride this command at run time.  \nFor example:\n\n```\n$ docker run -it nba-go:latest nba-go player Curry -i\n```\n\nOr download the latest version [pkg](https://github.com/zeit/pkg) binaries in [releases](https://github.com/xxhomey19/nba-go/releases). It can be run on Linux, macOs and Windows.  \nFor example:\n\n```\n./nba-go-macos game -h\n```\n\n## Usage\n\n`nba-go` provides two main commands.\n\n1. [`game` or `g`](#game)\n2. [`player` or `p`](#player)\n\n### Game\n\nThere are two things to do.\n\n1. [**Check schedule**](#check-schedule).\n2. Choose one game which you want to watch.\n\nDepending on the status of the game you chose, a different result will be shown. There are three kinds of statuses that may be displayed.\n\n| Status              | Example                                                                                                                                                                 | Description                                                                                                                                                             |\n| ------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [Pregame](#pregame) | <img alt=\"screen shot 2017-11-06 at 8 57 02 am\" src=\"https://user-images.githubusercontent.com/12113222/32421167-8a3521d4-c2d0-11e7-9ae3-be1c0def1b71.png\">             | It shows **when the game starts**. <br> Selecting this will show the comparison between two teams, including average points, field goal percents, average assists, etc. |\n| [Live](#live)       | <img alt=\"screen shot 2017-11-06 at 8 56 50 am\" src=\"https://user-images.githubusercontent.com/12113222/32421177-adc7ae5a-c2d0-11e7-9824-a4de7c40a5e4.png\">             | It shows **live game clock**. <br> **Most powerful feature!** Selecting this will show the live page which includes scoreboard, play-by-play and box score.             |\n| [Final](#final)     | <img width=\"600\" alt=\"screen shot 2017-11-06 at 8 56 14 am\" src=\"https://user-images.githubusercontent.com/12113222/32421166-8a08dde0-c2d0-11e7-8a38-69f646786653.png\"> | Selecting this will show scoreboard, detailed box score, etc.                                                                                                           |\n\n#### Check schedule\n\nIn order to show the schedule on some days, `nba-go` provides the command `nba-go game` with some options.\n\n#### Options\n\n##### `-d <date>` or `--date <date>`\n\nEnter a specific date to check the schedule on that day.\n\n```\n$ nba-go game -d 2017/11/02\n```\n\n![game -d gif](https://user-images.githubusercontent.com/12113222/32413795-0e7d75c2-c254-11e7-8a77-eeabed3c11f2.gif)\n\n##### `-y` or `--yesterday`\n\nCheck **yesterday's** schedule.\n\n```\n$ nba-go game -y\n```\n\n![game -y gif](https://user-images.githubusercontent.com/12113222/32414094-8bd4ba98-c25a-11e7-84f0-4fc473dc7144.gif)\n\n##### `-t` or `--today`\n\nCheck **today's** schedule.\n\n```\n$ nba-go game -t\n```\n\n![game -t gif](https://user-images.githubusercontent.com/12113222/32414115-f1a1ad72-c25a-11e7-8c79-a8b9b1ee0599.gif)\n\n##### `-T` or `--tomorrow`\n\nCheck **tomorrow's** schedule.\n\n```\n$ nba-go game -T\n```\n\n![game -T gif](https://user-images.githubusercontent.com/12113222/32414142-7897dfe0-c25b-11e7-9acf-d50ade5379fd.gif)\n\n##### `-n` or `--networks`\n\nDisplay on schedule home team and away team television network information.\n\n```\n$ nba-go game -n\n```\n\n#### Pregame\n\n\u2b50\ufe0f\u2b50\ufe0f  \nCheck the detailed comparison data between two teams in the game.\n\n![pregame](https://user-images.githubusercontent.com/12113222/32414253-ad64df82-c25d-11e7-9076-4da800f3c701.gif)\n\n#### Live\n\n\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f  \n**Best feature!** Realtime updated play-by-play, scoreboard and box score. Turn on fullscreen mode for better experience.  \nBtw, play-by-play is scrollable!.\n\n![live](https://user-images.githubusercontent.com/12113222/32420915-3ca6b34a-c2cd-11e7-904d-bf41cc4b93f7.gif)\n\n#### Final\n\n\u2b50\ufe0f\u2b50\ufe0f  \nCheck two teams' detailed scoreboard and box score.\n\n![final](https://user-images.githubusercontent.com/12113222/32436783-1e7ad7b8-c320-11e7-97af-29d95732581c.gif)\n\n#### Filter\n\nFilter results to quickly jump to the info you care about\n\n#### Options\n\n##### `-f` or `--filter`\n\nCurrently only supports filtering the results by team but more options on the way\n\n```\nnba-go game --filter team=Detroit\n```\n\n### Player\n\nGet player's basic information, regular season data and playoffs data.\n\n**Note.** Must place **player's name** between `nba-go player` and options.\n\n#### Options\n\n##### `-i` or `--info`\n\nGet player's basic information.\n\n```\n$ nba-go player Curry -i\n```\n\n![player -i gif](https://user-images.githubusercontent.com/12113222/32416941-7cfc49e6-c28c-11e7-8a79-15601a44554e.gif)\n\n##### `-r` or `--regular`\n\nGet player's basic information.\n\n```\n$ nba-go player Curry -r\n```\n\n![player -r gif](https://user-images.githubusercontent.com/12113222/32416897-bb82af9e-c28b-11e7-827f-0f0d67d80364.gif)\n\n##### `-p` or `--playoffs`\n\nGet player's basic information.\n\n```\n$ nba-go player Curry -p\n```\n\n![player -p gif](https://user-images.githubusercontent.com/12113222/32500032-234e8fba-c40f-11e7-87c0-6e42a66a52dc.gif)\n\n##### `-c` or `--compare`\n\nGet and compare the stats from multiple players. The better stat will be highlighted in green to make comparing easier.\nWhen listing the multiple names they must be in quotes and seperated by commas. Can be combined with the -i, -r, and -p flags.\n\n```\n$ nba-go player \"Lebron James, Stephen Curry, James Harden\" -c -i -r -p\n```\n\n![player -c gif](https://user-images.githubusercontent.com/12113222/37696809-1fd54306-2d14-11e8-9261-4d9b6a08588a.gif)\n\n#### Mixed them all\n\nGet all data at the same time.\n\n```\n$ nba-go player Curry -i -r -p\n```\n\n![player mixed gif](https://user-images.githubusercontent.com/12113222/32416928-5054d48a-c28c-11e7-84d3-bc17681e1a5e.gif)\n\n## Development\n\n* It's simple to run `nba-go` on your local computer.  \n* The following is step-by-step instruction.\n\n```\n$ git clone https://github.com/xxhomey19/nba-go.git\n$ cd nba-go\n$ yarn\n$ NODE_ENV=development node bin/cli.js <command>\n```\n\n## Related repo:\n\n- [nba-bar](https://github.com/xxhomey19/nba-bar)\n- [watch-nba](https://github.com/chentsulin/watch-nba)\n- [nba-color](https://github.com/xxhomey19/nba-color)\n\n## License\n\nMIT \u00a9 [xxhomey19](https://github.com/xxhomey19)\n"
 },
 {
  "repo": "hegaojian/JetpackMvvm",
  "language": "Kotlin",
  "readme_contents": "[![Platform][1]][2] [![GitHub license][3]][4]  [![GitHub license][5]][6] \n\n[1]:https://img.shields.io/badge/platform-Android-blue.svg  \n[2]:https://github.com/hegaojian/JetpackMvvm\n[3]:https://img.shields.io/github/release/hegaojian/JetpackMvvm.svg\n[4]:https://github.com/hegaojian/JetpackMvvm/releases/latest\n[5]:https://img.shields.io/badge/license-Apache%202-blue.svg\n[6]:https://github.com/hegaojian/JetpackMvvm/blob/master/LICENSE\n\n# :chicken::chicken::chicken:JetPackMvvm\n- **\u57fa\u4e8eMVVM\u6a21\u5f0f\u96c6\u6210\u8c37\u6b4c\u5b98\u65b9\u63a8\u8350\u7684JetPack\u7ec4\u4ef6\u5e93\uff1aLiveData\u3001ViewModel\u3001Lifecycle\u3001Navigation\u7ec4\u4ef6**\n- **\u4f7f\u7528kotlin\u8bed\u8a00\uff0c\u6dfb\u52a0\u5927\u91cf\u62d3\u5c55\u51fd\u6570\uff0c\u7b80\u5316\u4ee3\u7801**\n- **\u52a0\u5165Retrofit\u7f51\u7edc\u8bf7\u6c42,\u534f\u7a0b\uff0c\u5e2e\u4f60\u7b80\u5316\u5404\u79cd\u64cd\u4f5c\uff0c\u8ba9\u4f60\u5feb\u901f\u8bf7\u6c42\u7f51\u7edc**  \n\n## \u6f14\u793aDemo\n \u5df2\u7528\u8be5\u5e93\u91cd\u6784\u4e86\u6211\u4e4b\u524d\u7684\u73a9\u5b89\u5353\u9879\u76ee\uff0c\u5229\u7528Navigation\u7ec4\u4ef6\u4ee5\u5355Activity+Fragment\u67b6\u6784\u7f16\u5199\uff0c\u4f18\u5316\u4e86\u5f88\u591a\u4ee3\u7801\uff0c\u5bf9\u6bd4\u4e4b\u524d\u7684mvp\u9879\u76ee\uff0c\u5f00\u53d1\u6548\u7387\u4e0e\u8212\u9002\u5ea6\u8981\u63d0\u9ad8\u4e86\u4e0d\u5c11\uff0c\u60f3\u770b\u4e4b\u524dMVP\u7684\u9879\u76ee\u53ef\u4ee5\u53bb [https://github.com/hegaojian/WanAndroid](https://github.com/hegaojian/WanAndroid) \n \n#### \u6548\u679c\u56fe\u5c55\u793a \n![\u9879\u76ee\u6548\u679c\u56fe](https://upload-images.jianshu.io/upload_images/9305757-818106225dd01e65.gif?imageMogr2/auto-orient/strip)\n \n#### APK\u4e0b\u8f7d\uff1a\n\n- [Github\u4e0b\u8f7d](https://github.com/hegaojian/JetpackMvvm/releases/download/1.2.6/app-release.apk)\n\n- [firm\u4e0b\u8f7d(\u63a8\u8350)](http://d.6short.com/v9q7)\n\n- \u626b\u7801\u4e0b\u8f7d(\u63a8\u8350)\n\n![](https://upload-images.jianshu.io/upload_images/9305757-8ca8324f5690198e.png?imageMogr2/auto-orient/strip|imageView2/2/format/webp)\n  \n  \n## 1.\u5982\u4f55\u96c6\u6210\n\n- **1.1 \u5728root's build.gradle\u4e2d\u52a0\u5165Jitpack\u4ed3\u5e93**\n\n``` gradle\nallprojects {\n    repositories {\n        ...\n        maven { url 'https://jitpack.io' }\n    }\n}\n```\n\n- **1.2 \u5728app's build.gradle\u4e2d\u6dfb\u52a0\u4f9d\u8d56**\n\n``` gradle\ndependencies {\n  ...\n  implementation 'com.github.hegaojian:JetpackMvvm:1.2.7'\n}\n```\n\n- **1.3 \u5728app's build.gradle\u4e2d\uff0candroid \u6a21\u5757\u4e0b\u6309\u9700\u5f00\u542fDataBinding\u4e0eViewBinding**\n\n``` gradle\nAndroidStudio 4.0 \u4ee5\u4e0b\u7248\u672c------>\nandroid {\n    ...\n    dataBinding {\n        enabled = true \n    }\n    viewBinding {\n        enabled = true\n    }\n}\n\nAndroidStudio 4.0\u53ca\u4ee5\u4e0a\u7248\u672c ------>\nandroid {\n    ...\n   buildFeatures {\n        dataBinding = true\n        viewBinding = true\n    }\n}\n \n```\n\n## 2.\u7ee7\u627f\u57fa\u7c7b\n\u4e00\u822c\u6211\u4eec\u9879\u76ee\u4e2d\u90fd\u4f1a\u6709\u4e00\u5957\u81ea\u5df1\u5b9a\u4e49\u7684\u7b26\u5408\u4e1a\u52a1\u9700\u6c42\u7684\u57fa\u7c7b ***BaseActivity/BaseFragment***\uff0c\u6240\u4ee5\u6211\u4eec\u7684\u57fa\u7c7b\u9700\u8981**\u7ee7\u627f\u672c\u6846\u67b6\u7684Base\u7c7b**\n\n- \u4e0d\u60f3\u7528Databinding\u4e0eViewBinding-------\u53ef\u4ee5\u7ee7\u627f BaseVmActivity/BaseVmFragment\n- \u7528Databinding-----------\u53ef\u4ee5\u7ee7\u627fBaseVmDbActivity/BaseVmDbFragment**\n- \u7528Viewbinding-----------\u53ef\u4ee5\u7ee7\u627fBaseVmVbActivity/BaseVmVbFragment**\n\n**Activity\uff1a**\n\n``` kotlin \nabstract class BaseActivity<VM : BaseViewModel, DB : ViewDataBinding> : BaseVmDbActivity<VM, DB>() {\n     /**\n     * \u5f53\u524dActivity\u7ed1\u5b9a\u7684\u89c6\u56fe\u5e03\u5c40Id abstract\u4fee\u9970\u4f9b\u5b50\u7c7b\u5b9e\u73b0\n     */\n    abstract override fun layoutId(): Int\n    /**\n     * \u5f53\u524dActivityc\u521b\u5efa\u540e\u8c03\u7528\u7684\u65b9\u6cd5 abstract\u4fee\u9970\u4f9b\u5b50\u7c7b\u5b9e\u73b0\n     */\n    abstract override fun initView(savedInstanceState: Bundle?)\n\n    /**\n     * \u521b\u5efaliveData\u6570\u636e\u89c2\u5bdf\n     */\n    override override fun createObserver()\n\n\n    /**\n     * \u6253\u5f00\u7b49\u5f85\u6846 \u5728\u8fd9\u91cc\u5b9e\u73b0\u4f60\u7684\u7b49\u5f85\u6846\u5c55\u793a\n     */\n    override fun showLoading(message: String) {\n       ...\n    }\n\n    /**\n     * \u5173\u95ed\u7b49\u5f85\u6846 \u5728\u8fd9\u91cc\u5b9e\u73b0\u4f60\u7684\u7b49\u5f85\u6846\u5173\u95ed\n     */\n    override fun dismissLoading() {\n       ...\n    }\n}\n```\n**Fragment\uff1a**\n``` kotlin\nabstract class BaseFragment<VM : BaseViewModel,DB:ViewDataBinding> : BaseVmDbFragment<VM,DB>() {\n   \n    abstract override fun initView(savedInstanceState: Bundle?)\n\n    /**\n     * \u61d2\u52a0\u8f7d \u53ea\u6709\u5f53\u524dfragment\u89c6\u56fe\u663e\u793a\u65f6\u624d\u4f1a\u89e6\u53d1\u8be5\u65b9\u6cd5 abstract\u4fee\u9970\u4f9b\u5b50\u7c7b\u5b9e\u73b0\n     */\n    abstract override fun lazyLoadData()\n\n    /**\n     * \u521b\u5efaliveData\u6570\u636e\u89c2\u5bdf \u61d2\u52a0\u8f7d\u4e4b\u540e\u624d\u4f1a\u89e6\u53d1\n     */\n    override override fun createObserver()\n  \n    /**\n     * Fragment\u6267\u884conViewCreated\u540e\u89e6\u53d1\u7684\u65b9\u6cd5 \n     */\n    override fun initData() {\n\n    }\n    \n   /**\n     * \u6253\u5f00\u7b49\u5f85\u6846 \u5728\u8fd9\u91cc\u5b9e\u73b0\u4f60\u7684\u7b49\u5f85\u6846\u5c55\u793a\n     */\n    override fun showLoading(message: String) {\n       ...\n    }\n\n    /**\n     * \u5173\u95ed\u7b49\u5f85\u6846 \u5728\u8fd9\u91cc\u5b9e\u73b0\u4f60\u7684\u7b49\u5f85\u6846\u5173\u95ed\n     */\n    override fun dismissLoading() {\n       ...\n    }\n}\n```\n\n## 3.\u7f16\u5199\u4e00\u4e2a\u767b\u5f55\u529f\u80fd\n\n- **3.1 \u521b\u5efaLoginViewModel\u7c7b\u7ee7\u627fBaseViewModel**\n\n``` xml\nclass LoginViewModel : BaseViewModel() {\n  \n}\n```\n\n- **3.2 \u521b\u5efaLoginFragment \u7ee7\u627f\u57fa\u7c7b\u4f20\u5165\u76f8\u5173\u6cdb\u578b,\u7b2c\u4e00\u4e2a\u6cdb\u578b\u4e3a\u4f60\u521b\u5efa\u7684LoginViewModel,\u7b2c\u4e8c\u4e2a\u6cdb\u578b\u4e3aViewDataBind\uff0c\u4fdd\u5b58fragment_login.xml\u540edatabinding\u4f1a\u751f\u6210\u4e00\u4e2aFragmentLoginBinding\u7c7b\u3002\uff08\u5982\u679c\u6ca1\u6709\u751f\u6210\uff0c\u8bd5\u7740\u70b9\u51fbBuild->Clean Project\uff09**\n``` kotlin\nclass LoginFragment : BaseFragment<LoginViewModel, FragmentLoginBinding>() {\n    \n    /**\n     *  \u521d\u59cb\u5316\u64cd\u4f5c\n     */\n    override fun initView(savedInstanceState: Bundle?) {\n        ...\n    }\n    \n    /**\n     *  fragment \u61d2\u52a0\u8f7d\n     */\n    override fun lazyLoadData() { \n        ...\n    }\n}\n```\n\n## 4.\u7f51\u7edc\u8bf7\u6c42\uff08Retrofit+\u534f\u7a0b\uff09\n\n- **4.1 \u65b0\u5efa\u8bf7\u6c42\u914d\u7f6e\u7c7b\u7ee7\u627f BaseNetworkApi \u793a\u4f8b\uff1a**\n``` kotlin\nclass NetworkApi : BaseNetworkApi() {\n\n   companion object {\n         \n        val instance: NetworkApi by lazy(mode = LazyThreadSafetyMode.SYNCHRONIZED) { NetworkApi() }\n\n        //\u53cc\u91cd\u6821\u9a8c\u9501\u5f0f-\u5355\u4f8b \u5c01\u88c5NetApiService \u65b9\u4fbf\u76f4\u63a5\u5feb\u901f\u8c03\u7528\n        val service: ApiService by lazy(mode = LazyThreadSafetyMode.SYNCHRONIZED) {\n            instance.getApi(ApiService::class.java, ApiService.SERVER_URL)\n        }\n    }\n   \n    /**\n     * \u5b9e\u73b0\u91cd\u5199\u7236\u7c7b\u7684setHttpClientBuilder\u65b9\u6cd5\uff0c\n     * \u5728\u8fd9\u91cc\u53ef\u4ee5\u6dfb\u52a0\u62e6\u622a\u5668\uff0c\u53ef\u4ee5\u5bf9 OkHttpClient.Builder \u505a\u4efb\u610f\u4f60\u60f3\u8981\u505a\u7684\u9a9a\u64cd\u4f5c\n     */\n    override fun setHttpClientBuilder(builder: OkHttpClient.Builder): OkHttpClient.Builder {\n        builder.apply {\n            //\u793a\u4f8b\uff1a\u6dfb\u52a0\u516c\u5171heads\uff0c\u53ef\u4ee5\u5b58\u653etoken\uff0c\u516c\u5171\u53c2\u6570\u7b49\uff0c \u6ce8\u610f\u8981\u8bbe\u7f6e\u5728\u65e5\u5fd7\u62e6\u622a\u5668\u4e4b\u524d\uff0c\u4e0d\u7136Log\u4e2d\u4f1a\u4e0d\u663e\u793ahead\u4fe1\u606f\n            addInterceptor(MyHeadInterceptor())\n            // \u65e5\u5fd7\u62e6\u622a\u5668\n            addInterceptor(LogInterceptor())\n            //\u8d85\u65f6\u65f6\u95f4 \u8fde\u63a5\u3001\u8bfb\u3001\u5199\n            connectTimeout(10, TimeUnit.SECONDS)\n            readTimeout(5, TimeUnit.SECONDS)\n            writeTimeout(5, TimeUnit.SECONDS)\n        }\n        return builder\n    }\n\n    /**\n     * \u5b9e\u73b0\u91cd\u5199\u7236\u7c7b\u7684setRetrofitBuilder\u65b9\u6cd5\uff0c\n     * \u5728\u8fd9\u91cc\u53ef\u4ee5\u5bf9Retrofit.Builder\u505a\u4efb\u610f\u9a9a\u64cd\u4f5c\uff0c\u6bd4\u5982\u6dfb\u52a0GSON\u89e3\u6790\u5668\uff0cprotobuf\u7b49\n     */\n    override fun setRetrofitBuilder(builder: Retrofit.Builder): Retrofit.Builder {\n        return builder.apply {\n            addConverterFactory(GsonConverterFactory.create(GsonBuilder().create()))\n            addCallAdapterFactory(CoroutineCallAdapterFactory())\n        }\n    }\n}\n```\n\n\n- **4.2\u5982\u679c\u4f60\u8bf7\u6c42\u670d\u52a1\u5668\u8fd4\u56de\u7684\u6570\u636e\u6709\u57fa\u7c7b\uff08\u6ca1\u6709\u53ef\u5ffd\u7565\u8fd9\u4e00\u6b65\uff09\u4f8b\u5982:**\n``` kotlin\n{\n    \"data\": ...,\n    \"errorCode\": 0,\n    \"errorMsg\": \"\"\n}\n```\n\u8be5\u793a\u4f8b\u683c\u5f0f\u662f [\u73a9Android Api](https://www.wanandroid.com/blog/show/2)\u8fd4\u56de\u7684\u6570\u636e\u683c\u5f0f\uff0c\u5982\u679cerrorCode\u7b49\u4e8e0 \u8bf7\u6c42\u6210\u529f\uff0c\u5426\u5219\u8bf7\u6c42\u5931\u8d25\n\u4f5c\u4e3a\u5f00\u53d1\u8005\u7684\u89d2\u5ea6\u6765\u8bf4\uff0c\u6211\u4eec\u4e3b\u8981\u662f\u60f3\u5f97\u5230\u8131\u58f3\u6570\u636e-data\uff0c\u4e14\u4e0d\u60f3\u6bcf\u6b21\u90fd\u5224\u65aderrorCode==0\u8bf7\u6c42\u662f\u5426\u6210\u529f\u6216\u5931\u8d25\n\u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u5728\u670d\u52a1\u5668\u8fd4\u56de\u6570\u636e\u57fa\u7c7b\u4e2d\u7ee7\u627fBaseResponse\uff0c\u5b9e\u73b0\u76f8\u5173\u65b9\u6cd5\uff1a\n\n``` kotlin\ndata class ApiResponse<T>(var errorCode: Int, var errorMsg: String, var data: T) : BaseResponse<T>() {\n\n    // \u8fd9\u91cc\u662f\u793a\u4f8b\uff0cwanandroid \u7f51\u7ad9\u8fd4\u56de\u7684 \u9519\u8bef\u7801\u4e3a 0 \u5c31\u4ee3\u8868\u8bf7\u6c42\u6210\u529f\uff0c\u8bf7\u4f60\u6839\u636e\u81ea\u5df1\u7684\u4e1a\u52a1\u9700\u6c42\u6765\u7f16\u5199\n    override fun isSucces() = errorCode == 0\n\n    override fun getResponseCode() = errorCode\n\n    override fun getResponseData() = data\n\n    override fun getResponseMsg() = errorMsg\n\n}\n```\n- **4.3 \u5728ViewModel\u4e2d\u53d1\u8d77\u8bf7\u6c42\uff0c\u6240\u6709\u8bf7\u6c42\u90fd\u662f\u5728viewModelScope\u4e2d\u542f\u52a8\uff0c\u8bf7\u6c42\u4f1a\u53d1\u751f\u5728IO\u7ebf\u7a0b\uff0c\u6700\u7ec8\u56de\u8c03\u5728\u4e3b\u7ebf\u7a0b\u4e0a\uff0c\u5f53\u9875\u9762\u9500\u6bc1\u7684\u65f6\u5019\uff0c\u8bf7\u6c42\u4f1a\u7edf\u4e00\u53d6\u6d88\uff0c\u4e0d\u7528\u62c5\u5fc3\u5185\u5b58\u6cc4\u9732\u7684\u98ce\u9669\uff0c\u6846\u67b6\u505a\u4e862\u79cd\u8bf7\u6c42\u4f7f\u7528\u65b9\u5f0f**  \n\n**1\u3001\u5c06\u8bf7\u6c42\u6570\u636e\u5305\u88c5\u7ed9ResultState\uff0c\u5728Activity/Fragment\u4e2d\u53bb\u76d1\u542cResultState\u62ff\u5230\u6570\u636e\u505a\u5904\u7406**\n\n``` kotlin\nclass RequestLoginViewModel: BaseViewModel {\n\n  //\u81ea\u52a8\u8131\u58f3\u8fc7\u6ee4\u5904\u7406\u8bf7\u6c42\u7ed3\u679c\uff0c\u81ea\u52a8\u5224\u65ad\u7ed3\u679c\u662f\u5426\u6210\u529f\n    var loginResult = MutableLiveData<ResultState<UserInfo>>()\n    \n  //\u4e0d\u7528\u6846\u67b6\u5e2e\u8131\u58f3\n    var loginResult2 = MutableLiveData<ResultState<ApiResponse<UserInfo>>>()\n    \n  fun login(username: String, password: String){\n   //1.\u5728 Activity/Fragment\u7684\u76d1\u542c\u56de\u8c03\u4e2d\u62ff\u5230\u5df2\u8131\u58f3\u7684\u6570\u636e\uff08\u9879\u76ee\u6709\u57fa\u7c7b\u7684\u53ef\u4ee5\u7528\uff09\n        request(\n            { HttpRequestCoroutine.login(username, password) }, //\u8bf7\u6c42\u4f53\n            loginResult,//\u8bf7\u6c42\u7684\u7ed3\u679c\u63a5\u6536\u8005\uff0c\u8bf7\u6c42\u6210\u529f\u4e0e\u5426\u90fd\u4f1a\u6539\u53d8\u8be5\u503c\uff0c\u5728Activity\u6216fragment\u4e2d\u76d1\u542c\u56de\u8c03\u7ed3\u679c\uff0c\u5177\u4f53\u53ef\u770bloginActivity\u4e2d\u7684\u56de\u8c03\n            true,//\u662f\u5426\u663e\u793a\u7b49\u5f85\u6846\uff0c\uff0c\u9ed8\u8ba4false\u4e0d\u663e\u793a \u53ef\u4ee5\u9ed8\u8ba4\u4e0d\u4f20\n            \"\u6b63\u5728\u767b\u5f55\u4e2d...\"//\u7b49\u5f85\u6846\u5185\u5bb9\uff0c\u53ef\u4ee5\u9ed8\u8ba4\u4e0d\u586b\u8bf7\u6c42\u7f51\u7edc\u4e2d...\n        )\n        \n   //2.\u5728Activity/Fragment\u4e2d\u7684\u76d1\u542c\u62ff\u5230\u672a\u8131\u58f3\u7684\u6570\u636e\uff0c\u4f60\u53ef\u4ee5\u81ea\u5df1\u6839\u636ecode\u505a\u4e1a\u52a1\u9700\u6c42\u64cd\u4f5c\uff08\u9879\u76ee\u6ca1\u6709\u57fa\u7c7b\u7684\u53ef\u4ee5\u7528\uff09\n        requestNoCheck(\n          {HttpRequestCoroutine.login(username,password)},\n          loginResult2,\n          true,\n          \"\u6b63\u5728\u767b\u5f55\u4e2d...\") \n}\n\n\nclass LoginFragment : BaseFragment<LoginViewModel, FragmentLoginBinding>() {\n    \n    private val requestLoginRegisterViewModel: RequestLoginRegisterViewModel by viewModels()\n    \n    /**\n     *  \u521d\u59cb\u5316\u64cd\u4f5c\n     */\n    override fun initView(savedInstanceState: Bundle?) {\n        ...\n    }\n    \n    /**\n     *  fragment \u61d2\u52a0\u8f7d\n     */\n    override fun lazyLoadData() { \n        ...\n    }\n    \n    override fun createObserver(){\n      //\u8131\u58f3\n       requestLoginRegisterViewModel.loginResult.observe(viewLifecycleOwner,\n            Observer { resultState ->\n                parseState(resultState, {\n                    //\u767b\u5f55\u6210\u529f \u6253\u5370\u7528\u6237\n                    it.username.logd()\n                }, {\n                    //\u767b\u5f55\u5931\u8d25(\u7f51\u7edc\u8fde\u63a5\u95ee\u9898\uff0c\u670d\u52a1\u5668\u7684\u7ed3\u679c\u7801\u4e0d\u6b63\u786e...\u5f02\u5e38\u90fd\u4f1a\u8d70\u5728\u8fd9\u91cc)\n                    showMessage(it.errorMsg)\n                })\n            })\n    \n       //\u4e0d\u8131\u58f3\n       requestLoginRegisterViewModel.loginResult2.observe(viewLifecycleOwner, Observer {resultState ->\n               parseState(resultState,{\n                   if(it.errorCode==0){\n                       //\u767b\u5f55\u6210\u529f \u6253\u5370\u7528\u6237\u540d\n                       it.data.username.logd()\n                   }else{\n                       //\u767b\u5f55\u5931\u8d25\n                       showMessage(it.errorMsg)\n                   }\n               },{\n                   //\u8bf7\u6c42\u53d1\u751f\u4e86\u5f02\u5e38\n                   showMessage(it.errorMsg)\n               })\n           })\n   } \n}\n```\n\n**2\u3001 \u76f4\u63a5\u5728\u5f53\u524dViewModel\u4e2d\u62ff\u5230\u8bf7\u6c42\u7ed3\u679c**\n\n``` kotlin\nclass RequestLoginViewModel : BaseViewModel() {\n    \n  fun login(username: String, password: String){\n   //1.\u62ff\u5230\u5df2\u8131\u58f3\u7684\u6570\u636e\uff08\u9879\u76ee\u6709\u57fa\u7c7b\u7684\u53ef\u4ee5\u7528\uff09\n     request({HttpRequestCoroutine.login(username,password)},{\n             //\u8bf7\u6c42\u6210\u529f \u5df2\u81ea\u52a8\u5904\u7406\u4e86 \u8bf7\u6c42\u7ed3\u679c\u662f\u5426\u6b63\u5e38\n             it.username.logd()\n         },{\n             //\u8bf7\u6c42\u5931\u8d25 \u7f51\u7edc\u5f02\u5e38\uff0c\u6216\u8005\u8bf7\u6c42\u7ed3\u679c\u7801\u9519\u8bef\u90fd\u4f1a\u56de\u8c03\u5728\u8fd9\u91cc\n             it.errorMsg.logd()\n         },true,\"\u6b63\u5728\u767b\u5f55\u4e2d...\")\n        \n   //2.\u62ff\u5230\u672a\u8131\u58f3\u7684\u6570\u636e\uff0c\u4f60\u53ef\u4ee5\u81ea\u5df1\u6839\u636ecode\u505a\u4e1a\u52a1\u9700\u6c42\u64cd\u4f5c\uff08\u9879\u76ee\u6ca1\u6709\u57fa\u7c7b\u6216\u8005\u4e0d\u60f3\u6846\u67b6\u5e2e\u5fd9\u8131\u58f3\u7684\u53ef\u4ee5\u7528\uff09\n       requestNoCheck({HttpRequestCoroutine.login(username,password)},{\n            //\u8bf7\u6c42\u6210\u529f \u81ea\u5df1\u62ff\u5230\u6570\u636e\u505a\u4e1a\u52a1\u9700\u6c42\u64cd\u4f5c\n            if(it.errorCode==0){\n                //\u7ed3\u679c\u6b63\u786e\n                it.data.username.logd()\n            }else{\n                //\u7ed3\u679c\u9519\u8bef\n                it.errorMsg.logd()\n            }\n        },{\n            //\u8bf7\u6c42\u5931\u8d25 \u7f51\u7edc\u5f02\u5e38\u56de\u8c03\u5728\u8fd9\u91cc\n            it.errorMsg.logd()\n        },true,\"\u6b63\u5728\u767b\u5f55\u4e2d...\")\n}\n \n```\n### \u6ce8\u610f\uff1a\u4f7f\u7528\u8be5\u8bf7\u6c42\u65b9\u5f0f\u65f6\u9700\u8981\u6ce8\u610f\uff0c\u5982\u679c\u8be5ViewModel\u5e76\u4e0d\u662f\u8ddfActivity/Fragment\u7ed1\u5b9a\u7684\u6cdb\u578bViewModel\uff0c\u800c\u662f\nval mainViewModel:MainViewModel by viewModels()\n\u6216\u8005\nval mainViewModel\uff1aMainViewModel by activityViewModels()\n\u83b7\u53d6\u7684\n\u5982\u679c\u8bf7\u6c42\u65f6\u8981\u5f39\u51faloading\uff0c\u4f60\u9700\u8981\u5728Activity | Fragment\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801\uff1a\n### addLoadingObserve(viewModel)\n\n## 4.4 \u5f00\u542f\u6253\u5370\u65e5\u5fd7\u5f00\u5173\n\u8bbe\u7f6e\u5168\u5c40jetpackMvvmLog\u53d8\u91cf \u662f\u5426\u6253\u5f00\u8bf7\u6c42\u65e5\u5fd7\uff0c\u9ed8\u8ba4false\u4e0d\u6253\u5370\uff0c\u5982\u9700\u8981\u6253\u5370\u65e5\u5fd7\u529f\u80fd\uff0c\u8bf7\u8bbe\u503c\u4e3a true\n\n## 5.\u83b7\u53d6ViewModel\n- **5.1\u6211\u4eec\u7684activity/fragment\u4f1a\u6709\u591a\u4e2aViewModel\uff0c\u6309\u4f20\u7edf\u7684\u5199\u6cd5\u611f\u89c9\u6709\u70b9\u7d2f**\n``` kotlin\n val mainViewModel = ViewModelProvider(this,\n            ViewModelProvider.AndroidViewModelFactory(application)).get(MainViewModel::class.java)\n```\n**\u73b0\u5728\u5b98\u65b9Ktx\u6709\u62d3\u5c55\u51fd\u6570\u53ef\u4ee5\u8f7b\u677e\u8c03\u7528\n``` kotlin\n//\u5728activity\u4e2d\u83b7\u53d6\u5f53\u524dActivity\u7ea7\u522b\u4f5c\u7528\u57df\u7684ViewModel\n private val mainViewModel:MainViewModel by viewModels()\n \n//\u5728activity\u4e2d\u83b7\u53d6Application\u7ea7\u522b\u4f5c\u7528\u57df\u7684ViewModel\uff08\u6ce8\uff0c\u8fd9\u4e2a\u662f\u672c\u6846\u67b6\u63d0\u4f9b\u7684\uff0cApplication\u7c7b\u7ee7\u627f\u6846\u67b6\u7684BaseApp\u624d\u6709\u7528\uff09\n private val mainViewModel by lazy { getAppViewModel<MainViewModel>()}\n\n//\u5728fragment\u4e2d\u83b7\u53d6\u5f53\u524dFragment\u7ea7\u522b\u4f5c\u7528\u57df\u7684ViewModel\n private val mainViewModel:MainViewModel by viewModels()\n\n//\u5728fragment\u4e2d\u83b7\u53d6\u7236\u7c7bActivity\u7ea7\u522b\u4f5c\u7528\u57df\u7684ViewModel\nprivate val mainViewModel\uff1aMainViewModel by activityViewModels()\n\n//\u5728fragment\u4e2d\u83b7\u53d6Application\u7ea7\u522b\u4f5c\u7528\u57df\u7684ViewModel\uff08\u6ce8\uff0c\u8fd9\u4e2a\u662f\u672c\u6846\u67b6\u63d0\u4f9b\u7684\uff0cApplication\u7c7b\u7ee7\u627f\u6846\u67b6\u7684BaseApp\u624d\u6709\u7528\uff09\nprivate val mainViewModel by lazy { getAppViewModel<MainViewModel>()}\n```\n## 6.\u5199\u4e86\u4e00\u4e9b\u5e38\u7528\u7684\u62d3\u5c55\u51fd\u6570\n``` kotlin\n \u7b97\u4e86\u4e0d\u5199\u4e86\uff0c\u8fd9\u4e2a\u4e0d\u91cd\u8981\uff0c\u60f3\u5177\u4f53\u770b\u7684\u8bdd\u53ef\u4ee5\u5728\n me.hgj.jetpackmvvm.ext.util\n me.hgj.jetpackmvvm.ext.view\n \u7684\u5305\u4e2d\u770b\uff0c\u53cd\u6b63\u4f60\u4e5f\u53ef\u4ee5\u81ea\u5df1\u5199\uff0c\u6309\u7167\u81ea\u5df1\u7684\u559c\u597d\u4e0e\u9700\u6c42\u6765\n```\n\n## 7.\u6df7\u6dc6\n\n``` kotlin \n-keep class me.hgj.jetpackmvvm.**{*;}\n################ ViewBinding & DataBinding ###############\n-keepclassmembers class * implements androidx.viewbinding.ViewBinding {\n  public static * inflate(android.view.LayoutInflater);\n  public static * inflate(android.view.LayoutInflater, android.view.ViewGroup, boolean);\n  public static * bind(android.view.View);\n}\n```\n\n## \u8054\u7cfb\n- QQ\u4ea4\u6d41\u7fa4\uff1a419581249\n\n## License\n``` license\n Copyright 2019, hegaojian(\u4f55\u9ad8\u5efa)       \n  \n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at \n \n       http://www.apache.org/licenses/LICENSE-2.0 \n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n"
 },
 {
  "repo": "naoyashiga/Dunk",
  "language": "Swift",
  "readme_contents": "# Dunk\n![](https://raw.githubusercontent.com/naoyashiga/Dunk/master/demo.gif)  \nDunk is a Dribbble client.\n"
 },
 {
  "repo": "chonyy/AI-basketball-analysis",
  "language": "Python",
  "readme_contents": "<p align=center>\n    <img src=\"./static/img/analysis.gif\" width=\"960\" height=\"300\">\n</p>\n\n<p align=center>\n    <a target=\"_blank\" href=\"https://travis-ci.com/chonyy/AI-basketball-analysis\" title=\"Build Status\"><img src=\"https://travis-ci.com/chonyy/AI-basketball-analysis.svg?branch=master\"></a>\n    <a target=\"_blank\" href=\"#\" title=\"language count\"><img src=\"https://img.shields.io/github/languages/count/chonyy/AI-basketball-analysis\"></a>\n    <a target=\"_blank\" href=\"#\" title=\"top language\"><img src=\"https://img.shields.io/github/languages/top/chonyy/AI-basketball-analysis?color=orange\"></a>\n    <a target=\"_blank\" href=\"https://img.shields.io/github/pipenv/locked/python-version/chonyy/daily-nba\" title=\"Python version\"><img src=\"https://img.shields.io/github/pipenv/locked/python-version/chonyy/daily-nba?color=green\"></a>\n    <a target=\"_blank\" href=\"https://opensource.org/licenses/MIT\" title=\"License: MIT\"><img src=\"https://img.shields.io/badge/License-MIT-blue.svg\"></a>\n    <a target=\"_blank\" href=\"#\" title=\"repo size\"><img src=\"https://img.shields.io/github/repo-size/chonyy/AI-basketball-analysis\"></a>\n    <a target=\"_blank\" href=\"http://makeapullrequest.com\" title=\"PRs Welcome\"><img src=\"https://img.shields.io/badge/PRs-welcome-brightgreen.svg\"></a>\n</p>\n\n> \ud83c\udfc0 Analyze basketball shots and shooting pose with machine learning!\n\nThis is an artificial intelligence application built on the concept of **object detection**. Analyze basketball shots by digging into the data collected from object detection. We can get the result by simply uploading files to the web App, or submitting a **POST request** to the API. Please check the [features](#features) below. There are more features coming up! Feel free to follow.\n\nAll the data for the shooting pose analysis is calculated by implementing [OpenPose](https://github.com/CMU-Perceptual-Computing-Lab/openpose). Please note that this is an implementation only for noncommercial research use only. Please read the [LICENSE](https://github.com/chonyy/AI-basketball-analysis/blob/master/LICENSE), which is exaclty same as the [CMU's OpenPose License](https://github.com/CMU-Perceptual-Computing-Lab/openpose/blob/master/LICENSE).\n\nIf your are interested in the concept of human pose estimation, I have written a [research paper **summary**](https://towardsdatascience.com/openpose-research-paper-summary-realtime-multi-person-2d-pose-estimation-3563a4d7e66) of OpenPose. Check it out!\n\n## Getting Started\n\nThese instructions will get you a copy of the project up and running on your local machine.\n\n### Get a copy\n\nGet a copy of this project by simply running the git clone command.\n\n``` git\ngit clone https://github.com/chonyy/AI-basketball-analysis.git\n```\n\n### Prerequisites\n\nBefore running the project, we have to install all the dependencies from requirements.txt\n\n``` pip\npip install -r requirements.txt\n```\n\nPlease note that you need a GPU with proper CUDA setup to run the video analysis, since a CUDA device is required to run OpenPose.\n\n### Hosting\n\nLast, get the project hosted on your local machine with a single command.\n\n``` python\npython app.py\n```\n\n<p align=center>\n    <img src=\"./static/img/index_page.PNG\" width=\"551.1\" height=\"278.7\">\n</p>\n\n#### Alternatives\n\n##### Google Colab\n\n[<img src=\"https://colab.research.google.com/assets/colab-badge.svg\" align=\"center\">](https://colab.research.google.com/github/hardik0/AI-basketball-analysis-on-google-colab/blob/master/AI_basketball_analysis_google_colab.ipynb)\n\nThanks to [hardik0](https://github.com/hardik0/AI-basketball-analysis-on-google-colab). Now we can play around with it without a GPU machine!\n\n##### Heroku\n\nThis project is also hosted on [Heroku](https://ai-basketball-analysis.herokuapp.com/). However, the heavy computation of TensorFlow may cause Timeout error and crash the app (especially for video analysis). Therefore, hosting the project on your local machine is more preferable.\n\nPlease note that the shooting pose analysis won't be running on the Heroku hosted website, since a CUDA device is required to run OpenPose.\n\n## Project Structure\n\n<p align=center>\n    <img src=\"./static/img/structure.png\">\n</p>\n\n## Features\n\nThis project has three main features, [shot analysis](#shot-analysis), [shot detection](#shot-detection), [detection API](#detection-api).\n\n### Shot and Pose analysis\n\n#### Shot counting\n\n<p align=center>\n    <img src=\"./static/img/analysis_result.PNG\">\n</p>\n\nCounting shooting attempts and missing, scoring shots from the input video.\nDetection keypoints in different colors have different meanings listed below:\n* **Blue:** Detected basketball in normal status\n* **Purple**: Undetermined shot\n* **Green:** Shot went in\n* **Red:** Miss\n\n#### Pose analysis\n\n<p align=center>\n    <img src=\"./static/img/curry_pose.gif\" width=\"800\" height=\"450\">\n</p>\n\nImplementing [OpenPose](https://github.com/CMU-Perceptual-Computing-Lab/openpose) to calculate the angle of elbow and knee during shooting.\n\n<p align=center>\n    <img src=\"https://2.bp.blogspot.com/_xaY-4TqFF6s/SgDgFQeGI6I/AAAAAAAAANk/I83JeZ89MOU/w1200-h630-p-k-no-nu/Basketball+Free+Throw+Side+On1-031509.jpg\">\n</p>\n\nRelease angle and release time are calculated by all the data collected from shot analysis and pose analysis. Please note that there will be a relatively big **error** for the release time since it was calculated as the total time when the ball is in hand.\n\n### Shot detection\n\n<p align=center>\n    <img src=\"./static/img/detection.PNG\">\n</p>\n\nDetection will be shown on the image. The confidence and the coordinate of the detection will be listed below.\n\n### Detection API\n\n<p align=center>\n    <img src=\"./static/img/API.PNG\" width=\"861.6\" height=\"649.6\">\n</p>\n\nGet the JSON response by submitting a **POST** request to (./detection_json) with \"image\" as KEY and input image as VALUE.\n\n## Detection model\n\n<p align=center>\n    <img src=\"https://jkjung-avt.github.io/assets/2018-03-30-making-frcn-faster/FRCN_architecture.png\" width=\"558\" height=\"560.5\">\n</p>\n\nThe object detection model is trained with the [Faster R-CNN model architecture](https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/detection_model_zoo.md#coco-trained-models), which includes pretrained weight on COCO dataset. Taking the configuration from the model architecture and train it on my own dataset.\n\n\n## Future plans\n- [ ] Change the model to a more efficient YOLOv4\n- [ ] Implement SORT Tracking algorithm to filter out false detection\n- [ ] Improve the visual effect\n- [ ] Improve the efficiency, making it executable on web app services.\n"
 },
 {
  "repo": "hegaojian/WanAndroid",
  "language": "Kotlin",
  "readme_contents": "[![Platform][1]][2] [![GitHub license][3]][4]  [![GitHub license][5]][6] \n\n[1]:https://img.shields.io/badge/platform-Android-blue.svg  \n[2]:https://github.com/hegaojian/WanAndroid\n[3]:https://img.shields.io/github/release/hegaojian/WanAndroid.svg\n[4]:https://github.com/hegaojian/WanAndroid/releases/latest\n[5]:https://img.shields.io/badge/license-Apache%202-blue.svg\n[6]:https://github.com/hegaojian/WanAndroid/blob/master/LICENSE\n\n# \u901a\u77e5 \u8be5\u9879\u76ee\u5df2\u505c\u6b62\u7ef4\u62a4\n\n  \u5df2\u4f7f\u7528JetPack+MVVM\u91cd\u6784\u8be5\u9879\u76ee \u65b0\u5730\u5740\uff1a [https://github.com/hegaojian/JetpackMvvm](https://github.com/hegaojian/JetpackMvvm)\n\n# WanAndroid\n\u4e00\u4f4d\u7ec3\u4e60\u65f6\u957f\u4e24\u5e74\u534a\u7684\u5b89\u5353\u7ec3\u4e60\u751f\u6839\u636e\u9e3f\u795e\u63d0\u4f9b\u7684[WanAndroid\u5f00\u653eApi](https://www.wanandroid.com/blog/show/2)\u6765\u5236\u4f5c\u7684\u4ea7\u54c1\u7ea7App,\u57fa\u672c\u5b9e\u73b0\u4e86\u6240\u6709\u7684\u529f\u80fd\uff0c\u4f7f\u7528Kotlin\u8bed\u8a00\uff0c\u57fa\u4e8eMaterial Design+AndroidX + MVP + RxJava + Retrofit\u7b49\u4f18\u79c0\u7684\u5f00\u6e90\u6846\u67b6\u5f00\u53d1,\u6ce8\u91ca\u8d85\u8be6\u7ec6\uff0c\u65b9\u4fbf\u5927\u5bb6\u7ec3\u624b\n\n\u5982\u679c\u4f60\u89c9\u5f97\u672c\u9879\u76ee\u505a\u7684\u8fd8\u4e0d\u9519\u5bf9\u4f60\u6709\u5e2e\u52a9\uff0c**\u5bb9\u6211\u5351\u5fae\u5730\u5411\u4f60\u8981\u4e2astar**\uff0c\u6709\u4efb\u4f55\u95ee\u9898\u6216\u5efa\u8bae\uff0c\u6b22\u8fce\u63d0\u4ea4[issues](https://github.com/hegaojian/WanAndroid/issues)\n\n# \u524d\u8a00\n\u524d\u6bb5\u65f6\u95f4\u5b66\u4e60\u4e86 **Kotlin** \uff0c\u4e8e\u662f\u6253\u7b97\u5199\u4e00\u4e2a\u9879\u76ee\u6765\u7ec3\u7ec3\u624b\u5237\u5237\u719f\u7ec3\u5ea6\uff0c\u56e0\u4e3a\u7ecf\u5e38\u901b\u9e3f\u795e\u7684[WanAndroid](https://www.wanandroid.com)\u7f51\u7ad9\uff0c\u89c9\u5f97\u5f88\u4e0d\u9519\uff0cApi\u4e5f\u5f88\u4e30\u5bcc\u5065\u5168\uff0c \u867d\u7136\u6839\u636e[WanAndroid](https://www.wanandroid.com)APi\u5f00\u53d1\u51fa\u7684app\u591a\u5982\u725b\u6bdb\uff0c\u6709\u8bf8\u591a\u4f18\u79c0\u7684app,\u4f46\u662f\u6bcf\u4e2a\u4eba\u7684\u559c\u597d\u4e0e\u5ba1\u7f8e\u4e0d\u4e00\u6837\uff0c\u6240\u4ee5\u90fd\u6ca1\u6709\u505a\u5230\u6211\u5fc3\u76ee\u4e2d\u7684\u6700\u5b8c\u7f8e\uff0c\u4e8e\u662f\u6211\u5c31\u60f3\u81ea\u5df1\u8bbe\u8ba1\u5f00\u53d1\u4e00\u4e2a\u8ba9\u81ea\u5df1\u89c9\u5f97\u6ee1\u610f\u7684\u73a9\u5b89\u5353App\u3002\u754c\u9762\u7684\u8bdd\u53c2\u8003\u4e86\u4e00\u4e9b\u5e02\u573a\u4e0aApp\u7684\u98ce\u683c\u642d\u914d\u5b9e\u73b0\n\n## \u5b9e\u73b0\u7684\u529f\u80fd\n\n- \u9996\u9875\u4e94\u5927\u6a21\u5757\uff1a\u9996\u9875 / \u9879\u76ee / \u4f53\u7cfb/ \u516c\u4f17\u53f7 / \u6211\u7684\n- \u767b\u5f55\u6ce8\u518c\u529f\u80fd\n- \u5bfc\u822a\u529f\u80fd\n- \u641c\u7d22\u529f\u80fd \u70ed\u95e8\u641c\u7d22\u63a8\u8350 \u641c\u7d22\u5386\u53f2\u8bb0\u5f55\n- \u79ef\u5206\u529f\u80fd \u79ef\u5206\u6392\u884c \u79ef\u5206\u83b7\u53d6\u8bb0\u5f55\n- \u6536\u85cf\u529f\u80fd \u6536\u85cf\u6587\u7ae0 \u6536\u85cf\u7f51\u5740 \n- \u5f85\u529e\u6e05\u5355 \u6dfb\u52a0\u6e05\u5355 \u7f16\u8f91\u6e05\u5355 \u5220\u9664\u6e05\u5355\n- \u5e7f\u573a\u529f\u80fd\n- \u53d1\u5e03\u81ea\u5df1\u7684\u6587\u7ae0\u3001\u67e5\u8be2\u3001\u5220\u9664\u6587\u7ae0\n- \u6587\u7ae0\u7f51\u5740\u8be6\u60c5 \u8be6\u60c5\u4e2d\u6536\u85cf \u5206\u4eab \u6d4f\u89c8\u5668\u6253\u5f00\n- \u5168\u5c40\u4fee\u6539\u5e94\u7528\u4e3b\u9898\u8272\n- \u5168\u5c40\u4fee\u6539\u5217\u8868\u7684\u52a0\u8f7d\u52a8\u753b\n- \u6587\u7ae0\u5728\u4efb\u4f55\u5730\u65b9\u6536\u85cf\u4e0e\u53d6\u6d88\uff0c\u5176\u4ed6\u754c\u9762\u76f8\u5bf9\u5e94\u7684\u6570\u636e\u4e5f\u4f1a\u53d8\u5316\n- \u5e03\u5c40\u4f18\u5316\uff0c\u5927\u91cf\u4f7f\u7528ConstraintLayout\n- \u96c6\u6210Bugly\u6536\u96c6bug\u5e76\u5b9e\u73b0App\u66f4\u65b0\n- \u5168\u5c40\u6355\u6349\u5f02\u5e38\u9632\u6b62\u5d29\u6e83\n\n## APP\u4e0b\u8f7d\n\n- [GitHub\u4e0b\u8f7d](https://github.com/hegaojian/WanAndroid/releases/download/1.0.9/app-release.apk)\n\n- [fir.im\u4e0b\u8f7d](http://d.6short.com/4ybt)\n\n- [\u5c0f\u7c73\u5e94\u7528\u5e02\u573a\u4e0b\u8f7d](http://app.mi.com/download/933598?id=me.hegj.wandroid&ref=search&nonce=2368478985935143674%3A26235470&appClientId=2882303761517485445&appSignature=T49mZxF9fm7r1qKDSyN68zGb37Ar0wJUK_9EQK6PC2s)\n\n- \u626b\u7801\n\n![](https://upload-images.jianshu.io/upload_images/9305757-a915f9e674931aa7.png?imageMogr2/auto-orient/strip|imageView2/2/w/500/format/webp)\n \n\n## \u5e94\u7528\u622a\u56fe\n\n![](https://upload-images.jianshu.io/upload_images/9305757-cfe71359e8b28283.png?imageMogr2/auto-orient/strip|imageView2/2/w/986/format/webp)\n![](https://upload-images.jianshu.io/upload_images/9305757-1e7f1d3b963681ce.png?imageMogr2/auto-orient/strip|imageView2/2/w/987/format/webp)\n![](https://upload-images.jianshu.io/upload_images/9305757-29f7facf2c51304f.png?imageMogr2/auto-orient/strip|imageView2/2/w/980/format/webp)\n![](https://upload-images.jianshu.io/upload_images/9305757-85ce00bc6e56fc4c.png?imageMogr2/auto-orient/strip|imageView2/2/w/976/format/webp)\n![](https://upload-images.jianshu.io/upload_images/9305757-017b33c24c2fa8ed.png?imageMogr2/auto-orient/strip|imageView2/2/w/991/format/webp)\n\n## \u9879\u76ee\u4e2d\u7528\u5230\u7684\u5f00\u6e90\u5e93\n- [\u4e00\u4e2a\u5728 Java VM \u4e0a\u4f7f\u7528\u53ef\u89c2\u6d4b\u7684\u5e8f\u5217\u6765\u7ec4\u6210\u5f02\u6b65\u7684\u3001\u57fa\u4e8e\u4e8b\u4ef6\u7684\u7a0b\u5e8f\u7684\u6846\u67b6-RxJava2](https://github.com/ReactiveX/RxJava)\n- [\u4e00\u4e2a\u4f9d\u8d56\u6ce8\u5165\u6846\u67b6-Dagger2](https://github.com/square/dagger)\n- [\u5904\u7406\u7f51\u7edc\u8bf7\u6c42\u7684\u6846\u67b6-Okhttp](https://github.com/square/okhttp)\n- [\u4e00\u4e2a\u57fa\u4e8eOKHttp\u5c01\u88c5\u7684\u7f51\u7edc\u52a0\u8f7d\u6846\u67b6-Retrofit](https://github.com/square/retrofit)\n- [\u8f6c\u6362json\u6570\u636e\u7684\u5b98\u65b9\u6846\u67b6-Gson](https://github.com/google/gson)\n- [Android\u7684\u4e8b\u4ef6\u53d1\u5e03-Eventbus](https://github.com/greenrobot/EventBus)\n- [\u9879\u76ee\u6838\u5fc3\u5e93MVP\u6846\u67b6-MVPArms](https://github.com/JessYanCoding/MVPArms)\n- [\u5c4f\u5e55\u9002\u914dAndroidAutoSize](https://github.com/JessYanCoding/AndroidAutoSize)\n- [\u4e00\u4e2a\u7f8e\u4e3d\u7684\u3001\u6d41\u4f53\u548c\u53ef\u6269\u5c55\u7684\u5bf9\u8bdd\u6846-Material-dialogs](https://github.com/afollestad/material-dialogs)\n- [\u4e00\u4e2a\u5f3a\u5927\u7684Fragment\u7ba1\u7406\u5e93-Fragmentation](https://github.com/YoKeyword/Fragmentation)\n- [\u4e00\u4e2a\u589e\u5f3aBottomNavigationView\u7684\u5b89\u5353\u5e93-BottomNavigationViewEx](https://github.com/ittianyu/BottomNavigationViewEx)\n- [\u5f3a\u5927\u3001\u53ef\u5b9a\u5236\u3001\u6613\u6269\u5c55\u7684 ViewPager \u6307\u793a\u5668\u6846\u67b6-MagicIndicator](https://github.com/hackware1993/MagicIndicator)\n- [\u4e00\u4e2a\u5f3a\u5927\u7684\u8f6e\u64ad\u5e93-BGABanner-Android](https://github.com/bingoogolapple/BGABanner-Android)\n- [\u4e00\u4e2a\u5f3a\u5927\u5e76\u4e14\u7075\u6d3b\u7684RecyclerViewAdapter-BaseRecyclerViewAdapterHelper](https://github.com/CymChad/BaseRecyclerViewAdapterHelper)\n- [RecyclerView\u4fa7\u6ed1\u83dc\u5355\uff0cItem\u62d6\u62fd\uff0c\u6ed1\u52a8\u5220\u9664Item\uff0c\u81ea\u52a8\u52a0\u8f7d\u66f4\u591a\uff0cHeaderView\uff0cFooterView\uff0cItem\u5206\u7ec4\u9ecf\u8d34-SwipeRecyclerView](https://github.com/yanzhenjie/SwipeRecyclerView)\n- [\u63ed\u793a\u6548\u679c\u5e03\u5c40-RevealLayout](https://github.com/goweii/RevealLayout)\n- [\u4f18\u96c5\u5730\u5904\u7406\u52a0\u8f7d\u4e2d\uff0c\u91cd\u8bd5\uff0c\u65e0\u6570\u636e-Loadsir](https://github.com/KingJA/LoadSir)\n- [\u57fa\u4e8eAndroid WebView\u7684\u4e00\u4e2a\u5f3a\u5927\u7684\u5e93-Agentweb](https://github.com/Justson/AgentWeb)\n- [Android\u6d41\u5f0f\u5e03\u5c40-FlowLayout](https://github.com/hongyangAndroid/FlowLayout)\n- [\u57fa\u4e8emmap\u5185\u5b58\u6620\u5c04\u7684\u79fb\u52a8\u7aef\u901a\u7528 key-value \u7ec4\u4ef6-MMKV](https://github.com/Tencent/MMKV)\n- [\u5168\u5c40\u6355\u6349\u5f02\u5e38\u9632\u6b62\u5d29\u6e83-CustomActivityOnCrash](https://github.com/Ereza/CustomActivityOnCrash)\n## \u7d20\u6750\u6765\u6e90\n- [\u963f\u91cc\u5df4\u5df4\u77e2\u91cf\u56fe\u6807\u5e93](http://www.iconfont.cn/)\n- \u501f\u9274\u4e86[\u82b1\u74e3APP](https://huaban.com/)\u7684\u767b\u5f55\u9875\n- [\u4e2a\u4eba\u4e2d\u5fc3\u754c\u9762\u501f\u9274](https://www.ui.cn/detail/495986.html)\n- [goweii](https://github.com/goweii/WanAndroid)\u9879\u76ee\u4e2d\u7684Launch\u56fe\u6807\n\n## \u7279\u522b\u611f\u8c22\n- \u611f\u8c22[\u9e3f\u6d0b\u5927\u795e](https://github.com/hongyangAndroid)\u63d0\u4f9b\u7684[WanAndroid\u5f00\u653eAPI](https://www.wanandroid.com/blog/show/2)\uff0c\u6211\u5728issues\u63d0\u4e86\u4e00\u4e9b\u81ea\u5df1\u7684\u9700\u6c42\uff0c\u9e3f\u795e\u90fd\u8010\u5fc3\u7684\u5e2e\u5fd9\u6dfb\u52a0\u4e86\uff0c\u8c22\u8c22\n\n# \u66f4\u65b0\u65e5\u5fd7\n\n## v 1.0.9 (2019-12-6)\n- 1.\u6dfb\u52a0kotlin\u62d3\u5c55\u51fd\u6570\uff0c\u4f18\u5316\u8bbe\u7f6e\u63a7\u4ef6\u4e3b\u9898\uff0c\u8df3\u8f6c\u62e6\u622a\u4ee3\u7801\n- 2.\u8bf7\u6c42\u7f51\u7edc\u5199\u6cd5\u7ea0\u6b63\uff0c\u5177\u4f53\u770b[#11](https://github.com/hegaojian/WanAndroid/issues/11)\n\n## v 1.0.8 (2019-11-12)\n- 1.\u6dfb\u52a0Bugly\u6821\u9a8c\n- 2.\u6211\u7684-\u52a0\u5165\u6211\u4eec \u4fee\u6539\u4e86\u7fa4\u53f7\u4e3a\u4f5c\u8005\u81ea\u5df1\u7684\n- 3.\u5220\u9664build\u4e2d\u7684signingConfigs\u7f16\u8bd1\u4fe1\u606f\n\n## v 1.0.7 (2019-10-18)\n- 1.\u6dfb\u52a0\u79ef\u5206\u89c4\u5219\n- 2.\u6dfb\u52a0\u5206\u4eab\u6587\u7ae0\u63d0\u793a\n- 3.\u4fee\u590d5.1\u624b\u673a\u6253\u5f00webview\u62a5\u9519bug\n- 4.\u4fee\u590drecyclerview\u5728\u52a0\u8f7d\u66f4\u591a\u65f6\uff0c\u70b9\u51fb\u4f1a\u8c03\u7528\u591a\u6b21\u63a5\u53e3bug\n- 5.\u5347\u7ea7gradle\u7248\u672c\u81f33.5.1,SDK\u63d0\u5347\u81f329\n\n## v 1.0.6 (2019-10-9)\n- 1.\u6dfb\u52a0\u5e7f\u573a\u529f\u80fd\n- 2.\u81ea\u5df1\u7684\u6587\u7ae0-\u5220\u9664\u3001\u67e5\u8be2\u3001\u6dfb\u52a0\n- 3.\u53ef\u4ee5\u67e5\u770b\u4ed6\u4eba\u7684\u4fe1\u606f\n- 4.\u4e2a\u4eba\u4e2d\u5fc3\u754c\u9762\u6539\u7248\n\n## v 1.0.5 (2019-9-28)\n- \ud83d\ude0d\ud83d\ude0d\ud83d\ude0d\u4e3a\u7956\u56fd\u6bcd\u4eb2\u5e86\u751f\uff0c\u6dfb\u52a0\u56fd\u5e86\u4e3b\u9898\n\n## v 1.0.4 (2019-9-25)\n- 1.\u4fee\u590dbug\u4f53\u7cfb-\u5e7f\u573a\u4e2d\u7684\u5217\u8868\u6570\u636e\u6ca1\u6709\u663e\u793a\u4f5c\u8005\n- 2.\u4fee\u590d\u90e8\u5206tab\uff0c\u6807\u9898\uff0c\u6587\u672c\u6570\u636e\u663e\u793a\u4e86\u7f51\u9875\u6807\u7b7ebug\n- 3.\u4fee\u6539\u4f53\u7cfb\u4e2dtab\u4f4d\u7f6e\u8d77\u59cb\u4f4d\u5de6\u4fa7\u663e\u793a\n\n## v 1.0.3 (2019-9-11)\n- 1.\u4fee\u590d\u90e8\u5206\u624b\u673a\u767b\u5f55\u6ce8\u518c\u8fd4\u56de\u4e3b\u9875\u540e\u95ea\u9000\u7684bug\n- 2.\u6682\u65f6\u53bb\u6389\u4fa7\u6ed1\u529f\u80fd\uff0c\u73b0\u5728\u8f93\u5165\u6cd5\u51fa\u73b0\u7684\u9ed1\u5c4f\u4e0d\u597d\u770b\uff0c\u540e\u9762\u89e3\u51b3\u540e\u518d\u52a0\u4e0a\u4fa7\u6ed1\u529f\u80fd\n- 3.\u6dfb\u52a0\u5168\u5c40\u6355\u6349\u5f02\u5e38\u5e93\uff0c\u9632\u6b62\u5d29\u6e83\n- 4.\u4fee\u590dBugly\u4e0a\u7684bug\n\n## v 1.0.2 (2019-9-6)\n- 1.\u592a\u7c97\u5fc3\u5927\u610f\u4e86\uff0c\u4fee\u590d\u6dfb\u52a0\u4efb\u52a1\u6e05\u5355\u754c\u9762\u70b9\u51fb\u8fd4\u56de\u952e\u65e0\u54cd\u5e94bug\n\n## v 1.0.1 (2019-9-6)\n\n- 1.\u4fee\u590d\u5f00\u6e90\u9879\u76ee\u754c\u9762\u70b9\u51fb\u8fd4\u56de\u65e0\u53cd\u5e94bug\n\n## v 1.0.0 (2019-9-5)\n\n- \u9996\u6b21\u63d0\u4ea4\uff0c\u5927\u81f4\u5b8c\u6210\u529f\u80fd\uff0c\u4f46\u5b58\u5728\u4e00\u4e9b\u95ee\u9898\uff0c\u540e\u671f\u6162\u6162\u89e3\u51b3\u5427\n- 1.\u56e0\u4e3a\u4fa7\u6ed1\u8fd4\u56de\u5e93\u7684\u539f\u56e0\u5bfc\u81f4\u8f93\u5165\u6cd5\u5f39\u51fa\u51fa\u73b0\u9ed1\u5c4f\uff0c\u5b9e\u5728\u4e0d\u884c\u5c31\u6362\u4e2a\u5176\u4ed6\u7684\u5e93\u4e86\n- 2.kotlin\u7528\u7684\u4e0d\u662f\u7279\u522b\u719f\u7ec3\uff0c\u611f\u89c9\u5f88\u591a\u5730\u65b9\u8fd8\u53ef\u4ee5\u7cbe\u7b80\u6216\u8005\u6709\u5176\u4ed6\u66f4\u597d\u7684\u65b9\u6848\u66ff\u4ee3\n- 3.\u542f\u52a8\u9875\u56e0\u4e3a\u8003\u8651\u5230\u8981\u6839\u636e\u7528\u6237\u9009\u62e9\u7684\u4e3b\u9898\u8272\u6765\u52a8\u6001\u663e\u793a\uff0c\u5c31\u6ca1\u6709\u8bbe\u7f6e\u7eaf\u8272\u80cc\u666f\uff0c\u6240\u4ee5\u4f1a\u5bfc\u81f4\u51b7\u542f\u52a8\u65f6\u4f1a\u51fa\u73b0\u77ed\u6682\u767d\u5c4f\n\n\n## License\n```\n Copyright 2019, hegaojian(\u4f55\u9ad8\u5efa)       \n  \n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at \n \n       http://www.apache.org/licenses/LICENSE-2.0 \n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n"
 },
 {
  "repo": "bttmly/nba",
  "language": "JavaScript",
  "readme_contents": "# nba\n*Node.js client for nba.com API endpoints*\n\n`npm install nba`\n\n## NOTES:\n\n### BLACKLISTED IP ADDRESSES:\nIt appears as though the NBA has blacklisted certain blocks of IP addresses, specifically those of cloud hosting providers including AWS. As such, you may hit a situation where an application using this package works fine on your local machine, but doesn't work at all when deployed to a cloud server. Annoyingly, requests from these IPs seem to just hang. More information [here](https://github.com/bttmly/nba/issues/41) and [here](https://github.com/seemethere/nba_py/issues/88) -- the second issue has a `curl` command somewhere which will quickly tell you if NBA is accepting requests from your IP. (Incidentally, this is also the same reason the TravisCI build is always \"broken\" but tests all pass locally). There is a simple pass-through server in `scripts/proxy` that can be used to get around this restriction; you can put the proxy server somewhere that can reach NBA.com (e.g. not on AWS or Heroku or similar) and host your actual application on a cloud provider.\n\n### CORS restrictions on browser usage\nThis package can't be used directly from the browser because of [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) restrictions imposed by nba.com. If you run some sort of intermediate server which relays requests to NBA.com, you can change the host the client points to by following the instructions in the *Transport Layer* section\n\n## NBA API\nThe [stats.nba.com](http://stats.nba.com) uses a large number of undocumented JSON endpoints to provide the statistics tables and charts displayed on that website. This library provides a JavaScript client for interacting with many of those API endpoints.\n\n## Getting Started\n\n`NBA.findPlayer(str)` will return an object with a player's name, their ID, and their team information. This method is built into the package.\n\nAll methods in the `NBA.stats` namespace require an object to be passed in as a parameter. The keys to the object are in the docs for the `stats` namespace [here](doc/stats.md)\n\n```js\nconst NBA = require(\"nba\");\nconst curry = NBA.findPlayer('Stephen Curry');\nconsole.log(curry);\n/* logs the following:\n{\n  firstName: 'Stephen',\n  lastName: 'Curry',\n  playerId: 201939,\n  teamId: 1610612744,\n  fullName: 'Stephen Curry',\n  downcaseName: 'stephen curry'\n}\n*/\nNBA.stats.playerInfo({ PlayerID: curry.playerId }).then(console.log);\n```\n\nFor more example API calls, see `/test/integration/stats.js` and other test files.\n\n## Stability Warning\nThis is a client for an unstable and undocumented API. While I try to follow [semver](http://semver.org/) for changes to the JavaScript API this library exposes, the underlying HTTP API can (and has) changed without warning. In particular, the NBA has repeatedly deprecated endpoints, or added certain required headers without which requests will fail. Further, this library comes bundled with a (relatively) up-to-date list of current NBA players which is subject to change at any time -- the specific contents of it should not be considered part of this library's API contract.\n\n## Usability\nTo put it nicely, the NBA's API endpoints are a little clunky to work with. This library tries to strike a balance between being usable but not making assumptions about how the data will be used. Specifically, the NBA sends data in a concise \"table\" form where the column headers come first then each result is an array of values that need to be matched with the proper header. This library does a simple transformation to zip the header and values arrays into a header-keyed object. Beyond that, it tries to not do too much. This is important to note because sometimes the various \"result sets\" that come back on a single endpoint seem sort of arbitrary. The underlying HTTP API doesn't seem to follow standard REST practices; rather it seems the endpoints are tied directly to the data needed by specific tables and charts displayed on [stats.nba.com](). This is what I mean by \"clunky\" to work with -- it can be tricky to assemble the data you need for a specific analysis from the various endpoints available.\n\n## Documentation\n_still lots to do here..._\n\nThere are four primary parts of this library\n- *Top-level methods*\n- *`stats` namespace* &mdash; [docs](https://github.com/bttmly/nba/blob/master/doc/stats.md)\n- *`synergy` namespace* [see tests](https://github.com/bttmly/nba/blob/master/test/integration/synergy.js)\n\u2013 *`data` namespace* [see tests](https://github.com/bttmly/nba/blob/master/test/integration/data.js)\n- *~`sportVu` namespace*~ NBA has removed sportVu endpoints. the methods exist here for backwards compatibility but they throw errors\n\n## Transport Layer\nIn some cases you will want to use a different transport layer to handle HTTP requests. Perhaps you have an HTTP client library you like better than what I used here. Better yet, you want to get stats for the WNBA or the G League. The following code snippet shows how to use the `withTransport` method to create a new client with your own transport function.\n\n```js\n// here we are getting stats for the WNBA!\n\nconst nba = require(\"nba\");\nconst getJSON = require(\"nba/src/get-json\");\n\n// for the G League, try \"stats.gleague.nba.com\"\nconst newHost = \"stats.wnba.com\";\n\nconst transport = (url, params, options) => {\n  // simply swap the host and then defer the rest to the built in getJSON function\n  const fixedURL = url.replace(\"stats.nba.com\", \"stats.wnba.com\");\n  return getJSON(fixedURL, params, options);\n};\n\n// create a new stats client here with our WNBA transport\nconst wnbaStats = nba.stats.withTransport(transport);\n\n(async () => {\n  const result = await wnbaStats.playerInfo({ PlayerID: \"1628886\" });\n  console.log(result);\n})();\n```\n\n## \"I don't use Node.js\"\nPlease take a look at [nba-client-template](http://github.com/bttmly/nba-client-template). The relevant part of the repo is a single JSON document from which many programming languages can dynamically generate an API client. The repo contains (sloppy) examples in [Ruby](https://github.com/bttmly/nba-client-template/blob/master/example-clients/simple-client.rb) and [Python](https://github.com/bttmly/nba-client-template/blob/master/example-clients/simple-client.py). Compiled languages can use code generation techniques to the same effect -- there's a (again, sloppy) example in [Go](https://github.com/bttmly/nba-client-template/tree/master/example-clients/golang). If you'd like me to publish it to a specific registry so you can install it with your language's package manager, please [open an issue](http://github.com/bttmly/nba-client-template/issues). Please note, however, that package only includes  the endpoints exposed by this library under the `stats` namespace -- `sportvu` and `synergy` endpoints aren't yet included in it. I also plan to add a command-line interface to this library so that it can be easily driven as a child process by another program.\n\n##\n"
 },
 {
  "repo": "smuyyh/SprintNBA",
  "language": "Java",
  "readme_contents": "# :basketball: SprintNBA\n\n## \u5b8c\u6574\u7684NBA\u7b2c\u4e09\u65b9Android\u5ba2\u6237\u7aef\uff0c\u5305\u542bNBA\u5934\u6761\u65b0\u95fb\u3001\u89c6\u9891\u96c6\u9526/\u8d5b\u573a\u82b1\u7d6e\u3001\u6bd4\u8d5b\u76f4\u64ad\uff08\u76ee\u524d\u652f\u6301\u6bd4\u8d5b\u524d\u77bb\u3001\u6587\u5b57\u76f4\u64ad\u3001\u7403\u961f\u53ca\u7403\u5458\u6280\u672f\u7edf\u8ba1\u3001\u89c6\u9891\u76f4\u64ad(\u4f01\u9e45\u63a8\u51fa\u4e86\u7403\u961f\u901a\u3001\u8054\u76df\u901a... \u7b80\u76f4\u4e0d\u80fd\u5fcd\u554a\uff01\uff01)\uff09\u3001\u7403\u961f\u6218\u7ee9\u6392\u884c\u3001\u7403\u5458\u6570\u636e\u6392\u540d\u3001\u864e\u6251\u8bba\u575b\u4e13\u533a\uff08\u5df2\u5b9e\u73b0\u53d1\u5e16\u4e0e\u56de\u590d\u529f\u80fd\uff09\u3001\u7403\u961f\u53ca\u7403\u5458\u7684\u8be6\u7ec6\u8d44\u6599\u3002\n\n## \u58f0\u660e\n\n\u672c\u9879\u76ee\u90e8\u5206API\u6765\u81eaNBA\u4e2d\u6587\u5b98\u7f51\u4e0e\u864e\u6251\u4f53\u80b2\uff0c\u7eaf\u7ec3\u624b\u4e4b\u4f5c\uff0c\u4e2a\u4eba\u672a\u4ece\u4e2d\u83b7\u53d6\u4efb\u4f55\u5229\u76ca\uff0c\u5176\u6240\u6709\u5185\u5bb9\u5747\u53ef\u5728NBA\u4e2d\u6587\u5b98\u7f51\u4e0e\u864e\u6251\u4f53\u80b2\u83b7\u53d6\u3002\u6570\u636e\u7684\u83b7\u53d6\u4e0e\u5171\u4eab\u53ef\u80fd\u4f1a\u4fb5\u72af\u5230NBA\u4e2d\u6587\u5b98\u7f51\u4e0e\u864e\u6251\u4f53\u80b2\u7684\u6743\u76ca\uff0c\u82e5\u88ab\u544a\u77e5\u9700\u505c\u6b62\u5171\u4eab\u4e0e\u4f7f\u7528\uff0c\u672c\u4eba\u4f1a\u7acb\u5373\u5220\u9664\u6574\u4e2a\u9879\u76ee\u3002\n\n## \u9879\u76ee\n\n\u672c\u9879\u76ee\u91c7\u7528 MaterialDesign + MVP + Retrofit2 \u5f00\u53d1\u3002\u9879\u76ee\u7684\u5927\u90e8\u5206\u529f\u80fd\u5df2\u7ecf\u5b8c\u6210\uff0c\u5e76\u5728\u767e\u5ea6\u624b\u673a\u52a9\u624b\u7b49\u5e94\u7528\u5546\u5e97\u4e0a\u67b6V1.1\u7248\u672c\u3002\u76ee\u524d\u6b63\u5728\u4e0d\u65ad\u5b8c\u5584\u4e2d\uff0c\u559c\u6b22\u7684\u8bdd\u4e0d\u9632\u7ed9\u4e2astar\u54c8\u3002\n\n## \u91cd\u8981\u66f4\u65b0\n\n### V2.0\n1. \u589e\u52a0\u6bd4\u8d5b\u89c6\u9891\u76f4\u64ad\n2. \u4f18\u5316\u6bd4\u8d5b\u89c6\u9891\u76f4\u64ad\u7684\u7a33\u5b9a\u6027\u3002\u652f\u6301\u6362\u6e90\n\n### V1.1\n1. \u7531\u4e8e\u817e\u8baf\u89c6\u9891\u5bf9\u771f\u5b9e\u5730\u5740\u89e3\u6790\u540e\u64ad\u653e\u8fdb\u884c\u4e86\u52a0\u5bc6\uff0c\u6545\u91c7\u7528\u65b0\u65b9\u6cd5\u8fdb\u884c\u771f\u5b9e\u5730\u5740\u89e3\u6790\uff0c\u82e5\u9047\u5230\u4e0d\u53ef\u64ad\u653e\u7684\u89c6\u9891\uff0c\u53ef\u70b9\u51fb\u53f3\u4e0a\u89d2\u8df3\u8f6c\u5230\u5185\u5d4c\u7f51\u9875\u64ad\u653e\u3002\n2. \u589e\u5f3aUI\u4f53\u9a8c\u3002\u4fee\u590d\u4e00\u4e9bbug\n3. \u82e5\u521d\u6b21\u4f53\u9a8cV1.0 \u5bfc\u81f4V1.1\u5e94\u7528\u81ea\u52a8\u66f4\u65b0\u65e0\u6cd5\u4e0b\u8f7d\uff0c\u5219\u5e94\u5230\u8bbe\u7f6e->\u5e94\u7528->SprintNBA\u4e0b\uff0c\u6388\u4e88SD\u8bfb\u5199\u6743\u9650\u3002\n\n### V1.0\n\u521d\u6b21\u7248\u672c\uff0c\u542bNBA\u65b0\u95fb\u3001\u89c6\u9891\u82b1\u7d6e\u3001\u8d5b\u7a0b\u53ca\u6587\u5b57\u76f4\u64ad\u3001\u6280\u672f\u7edf\u8ba1\u3001\u7403\u961f\u53ca\u7403\u5458\u6570\u636e\u6392\u884c\u3001\u8be6\u7ec6\u8d44\u6599\uff0c\u864e\u6251\u8bba\u575b\u4e13\u533a\u3002\n\n## \u4e0b\u8f7d\n- APK\u672c\u5730\u4e0b\u8f7d\uff1a[SprintNBA-2.0.apk](https://raw.githubusercontent.com/smuyyh/SprintNBA/master/app/release/SprintNBA-2.0.apk)\n\n- \u767e\u5ea6\u624b\u673a\u52a9\u624b\u5e94\u7528\u5546\u5e97\uff1a[SprintNBA-2.0](http://shouji.baidu.com/software/11090327.html)\n\n- \u767e\u5ea691\u65e0\u7ebf\uff1a[SprintNBA-2.0](http://apk.91.com/Soft/Android/com.yuyh.sprintnba-3-2.0.html)\n\n- \u5b89\u5353\u5e02\u573a\uff1a[SprintNBA-2.0](http://apk.hiapk.com/appinfo/com.yuyh.sprintnba/3)\n\n## TODO\n\n*   [ ] \u4ee3\u7801\u4f18\u5316\n*   [ ] \u864e\u6251\u8bba\u575b\u90e8\u5206\u529f\u80fd\u6682\u672a\u5b8c\u5584\n*   [ ] \u5355\u652f\u7403\u961f\u8d5b\u7a0b\n*   [ ] \u4f18\u5316\u76f8\u5173\u89c6\u9891\u64ad\u653e\u3002\u817e\u8baf\u89c6\u9891\u771f\u5b9e\u5730\u5740\u63d0\u53d6\u529f\u80fd\u4e0d\u7a33\u5b9a\uff0c\u5bfc\u81f4\u90e8\u5206\u89c6\u9891\u4e0d\u80fd\u64ad\u653e\u3002\n*   [ ] \u90e8\u5206BUG\u4fee\u590d\uff08\u6709\u7591\u95ee\u6b22\u8fce\u63d0[issue](https://github.com/smuyyh/SprintNBA/issues/new)\uff09\n\n## \u5e94\u7528\u622a\u56fe\n\n\u53cb\u60c5\u63d0\u793a\uff1a\u9ad8\u6e05\u56fe\u7247\uff0c\u8010\u5fc3\u7b49\u5f85\u54df~~\n\n- **\u5934\u6761\u65b0\u95fb**\n\n<img src=\"https://github.com/smuyyh/SprintNBA/blob/master/screenshot/home_news_1.png?raw=true\" width=\"280\"/>\n<img src=\"https://github.com/smuyyh/SprintNBA/blob/master/screenshot/news_detail_1.png?raw=true\" width=\"280\"/>\n<img src=\"https://github.com/smuyyh/SprintNBA/blob/master/screenshot/news_img_1.png?raw=true\" width=\"280\"/>\n\n<br>\n\n- **\u6bd4\u8d5b\u89c6\u9891/\u8d5b\u573a\u82b1\u7d6e**\n\n<img src=\"https://github.com/smuyyh/SprintNBA/blob/master/screenshot/home_video_list_1.png?raw=true\" width=\"280\"/>\n<img src=\"https://github.com/smuyyh/SprintNBA/blob/master/screenshot/home_video_1.png?raw=true\" width=\"280\"/>\n<img src=\"https://github.com/smuyyh/SprintNBA/blob/master/screenshot/video_play.png?raw=true\" width=\"280\"/>\n\n<br>\n\n- **\u6bd4\u8d5b\u76f8\u5173**\n\n<img src=\"https://github.com/smuyyh/SprintNBA/blob/master/screenshot/home_schedule_1.png?raw=true\" width=\"280\"/>\n<img src=\"https://github.com/smuyyh/SprintNBA/blob/master/screenshot/match_data_1.png?raw=true\" width=\"280\"/>\n<img src=\"https://github.com/smuyyh/SprintNBA/blob/master/screenshot/match_live_1.png?raw=true\" width=\"280\"/>\n<img src=\"https://github.com/smuyyh/SprintNBA/blob/master/screenshot/match_video_live_source.png?raw=true\" width=\"280\"/>\n<img src=\"https://github.com/smuyyh/SprintNBA/blob/master/screenshot/match_video_live.png?raw=true\" width=\"280\"/>\n\n<br>\n\n- **\u7403\u961f/\u7403\u5458 \u76f8\u5173**\n\n<img src=\"https://github.com/smuyyh/SprintNBA/blob/master/screenshot/home_team_sort_1.png?raw=true\" width=\"280\"/>\n<img src=\"https://github.com/smuyyh/SprintNBA/blob/master/screenshot/home_player_stats_1.png?raw=true\" width=\"280\"/>\n<img src=\"https://github.com/smuyyh/SprintNBA/blob/master/screenshot/player_list_1.png?raw=true\" width=\"280\"/>\n<img src=\"https://github.com/smuyyh/SprintNBA/blob/master/screenshot/player_detail_1.png?raw=true\" width=\"280\"/>\n<img src=\"https://github.com/smuyyh/SprintNBA/blob/master/screenshot/team_detail_1.png?raw=true\" width=\"280\"/>\n\n<br>\n\n- **\u864e\u6251\u8bba\u575b\u76f8\u5173**\n\n<img src=\"https://github.com/smuyyh/SprintNBA/blob/master/screenshot/home_hupu_1.png?raw=true\" width=\"280\"/>\n<img src=\"https://github.com/smuyyh/SprintNBA/blob/master/screenshot/thread_list_1.png?raw=true\" width=\"280\"/>\n<img src=\"https://github.com/smuyyh/SprintNBA/blob/master/screenshot/thread_detail_1.png?raw=true\" width=\"280\"/>\n\n<br>\n\n- **\u5176\u4ed6**\n\n<img src=\"https://github.com/smuyyh/SprintNBA/blob/master/screenshot/home_other_1.png?raw=true\" width=\"280\"/>\n"
 },
 {
  "repo": "linouk23/NBA-Player-Movements",
  "language": "Python",
  "readme_contents": "# NBA Player Movements\n\nThis is a script for visualization of NBA games from raw SportVU logs.\n\nIf you admire both Spurs' and Warriors' ball movement, Brad Stevens' playbook, or just miss KD in OKC you'll find this entertaining.\n\n## Examples\n\n![Spurs](https://github.com/linouk23/NBA-Player-Movements/blob/master/examples/spurs.gif)\n![Warriors](https://github.com/linouk23/NBA-Player-Movements/blob/master/examples/warriors.gif)\n![Celtics](https://github.com/linouk23/NBA-Player-Movements/blob/master/examples/celtics.gif)\n![Durant](https://github.com/linouk23/NBA-Player-Movements/blob/master/examples/durant.gif)\n\n## Usage\n\n1. Clone this repo:\n\n  ```bash\n  $ git clone https://github.com/linouk23/NBA-Player-Movements\n  ```\n\n2. Choose any NBA game from ```data/2016.NBA.Raw.SportVU.Game.Logs``` directory.\n\n3. Generate an animation for the play by running the following script:\n\n  ```bash\n  $ python3 main.py --path=Celtics@Lakers.json --event=140\n  ```\n\n  ```\n  required arguments:\n    --path PATH    a path to json file to read the events from\n\n  optional arguments:\n    --event EVENT  an index of the event to create the animation to\n                   (the indexing start with zero, if you index goes beyond out\n                   the total number of events (plays), it will show you the last\n                   one of the game)\n    -h, --help     show the help message and exit\n  ```\n"
 },
 {
  "repo": "FaridSafi/react-native-basketball",
  "language": "JavaScript",
  "readme_contents": "# react-native-basketball\n\nReact-Native clone of the Facebook Basketball game\n\n![](https://raw.githubusercontent.com/FaridSafi/react-native-basketball/master/capture/capture.gif)\n\n### Versioning\n\nFor React Native 0.45.1\n\n### Installation\n\n- `git clone https://github.com/FaridSafi/react-native-basketball`\n- `cd react-native-basketball && npm install`\n- `react-native run-ios`\n\n\nFeel free to ask me questions on Twitter [@FaridSafi](https://www.twitter.com/FaridSafi)!\n\n# License\n\nLicensed under the [MIT](LICENSE)\n"
 },
 {
  "repo": "TryKickoff/kickoff",
  "language": "CSS",
  "readme_contents": "![Kickoff](http://i.imgur.com/bfMlVwe.jpg)\n\n> A lightweight front-end framework for creating scalable and performant, responsive sites\n\n[![devDependency Status](https://david-dm.org/trykickoff/kickoff/dev-status.png)](https://david-dm.org/trykickoff/kickoff#info=devDependencies) [![Build status](https://ci.appveyor.com/api/projects/status/g699smb2tsoakc8k/branch/master?svg=true)](https://ci.appveyor.com/project/mrmartineau/kickoff/branch/master) [![Dependency Status](https://dependencyci.com/github/TryKickoff/kickoff/badge)](https://dependencyci.com/github/TryKickoff/kickoff) [![XO code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/sindresorhus/xo)  [![bitHound Overall Score](https://www.bithound.io/github/TryKickoff/kickoff/badges/score.svg)](https://www.bithound.io/github/TryKickoff/kickoff)\n\nDeveloped and maintained by [Ashley Nolan](https://github.com/ashleynolan) & [Zander Martineau](https://github.com/mrmartineau)\n\n## Features\n|                \t| Feature                    \t| Description                                                                                   \t|\n|----------------\t|----------------------------\t|-----------------------------------------------------------------------------------------------\t|\n| :fast_forward: \t| #webperf                   \t| Performance-first, responsive philosophy                                                      \t|\n| :oncoming_bus: \t| Rock-solid build tasks     \t| We use gulp & webpack to deliver the best task runner & developer experience for your project \t|\n| :eyeglasses:   \t| Unopinionated & extendable \t| A few common UI elements, a grid & some other base styles. The rest is up to you.             \t|\n| :crystal_ball: \t| Future proof               \t| Build complex layouts with flexbox & use ES2015 (ES6) for your javascript.                                                  \t|\n| :angry:        \t| Lean & mean                \t| CSS: 8.68 kB gzipped<br> JS: 2 kB gzipped<br> It is a boilerplate after all :wink:                 \t|\n\n## Tasks\n| Command | Description |\n|----------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `npm start` | Basic dev server using [Browsersync](http://www.browsersync.io/) |\n| `npm run watch` | Watch all files for changes |\n| `npm run deploy` | Install all dependencies and compile all assets for production deployment |\n| `npm run compile:all` | Compile the CSS & JS, compress the images and run any other compilation tasks needed to run your app |\n| `npm run compile:release` | Add the `--release` flag to any other task, e.g. `gulp javascript --release` or `gulp css --release` |\n| `npm run compile:css` | [Sass](http://sass-lang.com/) ([Libsass](http://sass-lang.com/libsass) via [node-sass](https://github.com/sass/node-sass)), [Postcss](http://postcss.org/) with [Autoprefixer](https://github.com/postcss/autoprefixer), [CSSNano](https://github.com/ben-eb/cssnano), Source Maps & more.. |\n| `npm run compile:js` | [Babel](http://babeljs.io/), [Webpack](http://webpack.github.io/) |\n| `npm run compile:svg` | Auto-generated [SVG sprites](https://github.com/w0rm/gulp-svgstore) |\n| `npm run compress:images` | Image compression with [imagemin](https://www.npmjs.com/package/gulp-imagemin) |\n| `npm run lint:js` | Lint JS using [xo](https://github.com/sindresorhus/xo) |\n| `npm run fix:js` | Fix JS linting issues using [xo](https://github.com/sindresorhus/xo) |\n| `npm run lint:css` | Lint CSS using [stylelint](https://github.com/stylelint/stylelint). We use the [https://github.com/stylelint/stylelint-config-standard](https://github.com/stylelint/stylelint-config-standard) rules for our linting |\n| `npm test` | Run javascript and css tests |\n| `npm run clean:all` | Clean the compiled files |\n| `npm run copy:all` | Run the copy tasks - useful for things like webfonts etc |\n| `npm run release-patch` | Creates a patch release using [release-it](https://github.com/webpro/release-it) |\n| `npm run release-minor` | Creates a minor release using [release-it](https://github.com/webpro/release-it) |\n| `npm run release-major` | Creates a major release using [release-it](https://github.com/webpro/release-it) |\n| `npm run release-premajor` | Creates a premajor release using [release-it](https://github.com/webpro/release-it) |\n\n---\n\n## :memo: Demos and documentation\nKickoff's demo and documentation site is hosted at [trykickoff.com](http://trykickoff.com/).\n\n---\n\n## Yeoman generator\nOur Yeoman Generator is the best way to get Kickoff each time you want to start a new project, visit [trykickoff.com/docs/yeoman.html](http://trykickoff.com/learn/yeoman.html) for more info.\n\n---\n\n### ![Slack logo](http://i.imgur.com/1LNs3Q6.png?1) [Need real-time help? Find us on Slack](https://slackin-trykickoff.herokuapp.com/)\n\n---\n\n## :bug: Bugs and feature requests\nHave a bug or a feature request? Please search for existing and closed issues. If your problem or idea is not addressed yet, [please open a new issue](https://github.com/TryKickoff/kickoff/issues/new).\n\n---\n\n## Browser compatibility\nKickoff has been tested in the following browsers:\n\n| [Chrome](https://www.google.com/chrome/) (latest) | [Firefox](https://www.mozilla.org/en-GB/firefox/new/) (latest) | [Safari](https://www.apple.com/safari/) (latest) | [Edge](http://www.microsoft.com/en-us/windows/microsoft-edge) (latest) | [Opera](https://www.opera.com/) (latest) |\n|:----------------------------------------------------------------------------------------------------------------------------:|:-------------------------------------------------------------------------------------------------------------------------------:|:----------------------------------------------------------------------------------------------------------------------------:|------------------------------------------------------------------------|:-------------------------------------------------------------------------------------------------------------------------:|\n| <img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/chrome/chrome_64x64.png\" width=\"48\" alt=\"Chrome\"> | <img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/firefox/firefox_64x64.png\" width=\"48\" alt=\"Firefox\"> | <img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/safari/safari_64x64.png\" width=\"48\" alt=\"Safari\"> | <img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/edge/edge_64x64.png\" alt=\"Microsoft Edge\"> | <img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/opera/opera_64x64.png\" width=\"48\" alt=\"Opera\"> |\n\nWe also support older versions of Internet Explorer but the support is limited. For example, the Kickoff grid relies on flexbox so Modernizr is needed to detect for it and then we can provide a fallback.\n\n---\n\n## Maintainers and contributors\n| Zander Martineau | Ashley Nolan | Nic Bell |\n|:-------------------------------------------------------------------:|:--------------------------------------------------------------------:|:-----------------------------------------------------------------:|\n| ![Zander](https://avatars0.githubusercontent.com/u/64883?v=3&s=100) | ![Ashley](https://avatars3.githubusercontent.com/u/805184?v=3&s=100) | ![Nic](https://avatars3.githubusercontent.com/u/151842?v=3&s=100) |\n| [Twitter](http://twitter.com/mrmartineau) | [Twitter](http://twitter.com/AshNolan_) | [Twitter](http://twitter.com/nicbell) |\n| [Github](https://github.com/mrmartineau/) | [Github](https://github.com/ashleynolan) | [Github](https://github.com/nicbell/) |\n| [Site](http://zander.wtf) | [Site](http://ashleynolan.co.uk) | [Site](http://nicbell.net) |\n\n### Community\nIf you're using Kickoff we'd love to hear about it; please e-mail us at trykickoff@gmail.com\n\nKeep track of development and community news by following [@TryKickoff on Twitter](http://twitter.com/TryKickoff).\n\n### Contributing\nPlease read our [contribution guidelines](https://github.com/TryKickoff/kickoff/wiki/Contributing-to-Kickoff) before contributing to Kickoff.\n\n### Versioning\nFor transparency into our release cycle and in striving to maintain backward compatibility, Kickoff is maintained under [the Semantic Versioning guidelines](http://semver.org/). Sometimes we screw up, but we'll adhere to those rules whenever possible.\n\n---\n\n### Sponsored by\n![TMW Unlimited...](http://i.imgur.com/KIUIgi8.png?1)\n\nKickoff was created by Ash and Zander while working at TMW. TMW continue to provide sponsorship for the development of the project as well as trykickoff.com domain renewals, stickers etc.\n"
 },
 {
  "repo": "kshvmdn/nba.js",
  "language": "JavaScript",
  "readme_contents": "## nba.js\n\n[![npm version](https://badge.fury.io/js/nba.js.svg)](https://badge.fury.io/js/nba.js)\n[![Build Status](https://travis-ci.org/kshvmdn/nba.js.svg?branch=master)](https://travis-ci.org/kshvmdn/nba.js)\n[![Coverage Status](https://coveralls.io/repos/github/kshvmdn/nba.js/badge.svg?branch=master)](https://coveralls.io/github/kshvmdn/nba.js?branch=master)\n[![Dependency Status](https://img.shields.io/david/kshvmdn/nba.js.svg)](https://david-dm.org/kshvmdn/nba.js)\n[![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg)](https://github.com/prettier/prettier)\n\n> A Node.js library for current and historical NBA stats, scores, and data.\n\n### Table of contents\n\n* [Installation](#installation)\n* [Usage](#usage)\n* [Examples](#examples)\n* [Contribute](#contribute)\n* [License](#license)\n\nFull documentation and usage guide can be found [here](docs).\n\n### Installation\n\nInstall via [npm](https://npmjs.com/packages/nba.js).\n\n```sh\n$ npm install --save nba.js\n```\n\n### Usage\n\n* This library provides access to data from 2 different APIs:\n\n  * [data.nba.net](http://data.nba.net)\n  * [stats.nba.com](http://stats.nba.com)\n\n* For the full usage guide, see [USAGE.md](docs/USAGE.md).\n\n* **Method & parameter reference**: [`nba.data`](docs/api/DATA.md),\n  [`nba.stats`](docs/api/STATS.md).\n\n### Examples\n\nSee [EXAMPLES.md](docs/EXAMPLES.md).\n\n### Contribute\n\nThis project is completely open source. Feel free to\n[open an issue](https://github.com/kshvmdn/nba.js/issues) or\n[make a pull request](https://github.com/kshvmdn/nba.js/pulls).\n\nFor more information, see [CONTRIBUTING.md](docs/CONTRIBUTING.md).\n\n### License\n\n[MIT](./LICENSE) \u00a9 [Kashav Madan](http://kshvmdn.com).\n"
 },
 {
  "repo": "jaebradley/basketball_reference_web_scraper",
  "language": "HTML",
  "readme_contents": "<p align=\"center\">\n    <a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <img width=\"550\" src=\"https://imgur.com/dJL05Ud.png\" alt=\"logo\">\n    </a>\n</p>\n<p align=\"center\">\n    <a href=\"https://pypi.org/project/basketball-reference-scraper/\">\n        <img src=\"https://img.shields.io/pypi/v/basketball_reference_web_scraper\" alt=\"pypi\" />\n    </a>\n    <a href=\"https://pypi.org/project/basketball-reference-scraper/\">\n        <img src=\"https://img.shields.io/pypi/pyversions/basketball_reference_web_scraper\" alt=\"python version\" />\n    </a>\n    <a href=\"https://pypi.org/project/basketball-reference-scraper/\">\n        <img src=\"https://img.shields.io/pypi/l/basketball_reference_web_scraper\" alt=\"license\" />\n    </a>\n    <a href=\"https://codecov.io/gh/jaebradley/basketball_reference_web_scraper\">\n        <img src=\"https://codecov.io/gh/jaebradley/basketball_reference_web_scraper/branch/v4/graph/badge.svg\" alt=\"code coverage\" />\n    </a>\n    <a href=\"https://github.com/jaebradley/basketball_reference_web_scraper/workflows/Basketball%20Reference%20Web%20Scraper/badge.svg\">\n        <img src=\"https://github.com/jaebradley/basketball_reference_web_scraper/workflows/Basketball%20Reference%20Web%20Scraper/badge.svg\" alt=\"continuous integration\" />\n    </a>\n</p>\n\n[Basketball Reference](http://www.basketball-reference.com) is a great site (especially for a basketball stats nut like me), and hopefully they don't get too pissed off at me for creating this.\n\nI initially wrote this library as an exercise for creating my first `PyPi` package - hope you find it valuable!  \n\n## Documentation\n\nFor documentation about installing the package and API methods see [the documentation page](https://jaebradley.github.io/basketball_reference_web_scraper/).\n\n## Contributors\n\nThanks to [@DaiJunyan](https://github.com/DaiJunyan), [@ecallahan5](https://github.com/ecallahan5), \n[@Yotamho](https://github.com/Yotamho), [@ntsirakis](https://github.com/ntsirakis), and [@allanbelliti](https://github.com/allanbelliti) for their contributions!\n\n"
 },
 {
  "repo": "cwendt94/espn-api",
  "language": "Python",
  "readme_contents": "![](https://github.com/cwendt94/espn-api/workflows/Espn%20API/badge.svg)\r\n![](https://github.com/cwendt94/espn-api/workflows/Espn%20API%20Integration%20Test/badge.svg) [![codecov](https://codecov.io/gh/cwendt94/espn-api/branch/master/graphs/badge.svg)](https://codecov.io/gh/cwendt94/espn-api) [![Join the chat at https://gitter.im/ff-espn-api/community](https://badges.gitter.im/ff-espn-api/community.svg)](https://gitter.im/ff-espn-api/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![PyPI version](https://badge.fury.io/py/espn-api.svg)](https://badge.fury.io/py/espn-api)<a target=\"_blank\" href=\"https://www.python.org/downloads/\" title=\"Python version\"><img src=\"https://img.shields.io/badge/python-%3E=_3.8-teal.svg\"></a>\r\n\r\n\r\n## ESPN API\r\nThis package uses ESPN's Fantasy API to extract data from any public or private league for **Fantasy Football and Basketball (NHL, MLB, and WNBA are in development)**.  \r\nPlease feel free to make suggestions, bug reports, and pull request for features or fixes!\r\n\r\nThis package was inspired and based off of [rbarton65/espnff](https://github.com/rbarton65/espnff).\r\n\r\n## Installing\r\nWith Git:\r\n```\r\ngit clone https://github.com/cwendt94/espn-api\r\ncd espn-api\r\npython3 setup.py install\r\n```\r\nWith pip:\r\n```\r\npip install espn_api\r\n```\r\n\r\n## Usage\r\n### [For Getting Started and API details head over to the Wiki!](https://github.com/cwendt94/espn-api/wiki)\r\n```python\r\n# Football API\r\nfrom espn_api.football import League\r\n# Basketball API\r\nfrom espn_api.basketball import League\r\n# Hockey API\r\nfrom espn_api.hockey import League\r\n# Baseball API\r\nfrom espn_api.baseball import League\r\n# Init\r\nleague = League(league_id=222, year=2019)\r\n```\r\n\r\n### Run Tests\r\n```\r\npython3 setup.py nosetests\r\n```\r\n## [Discussions](https://github.com/cwendt94/espn-api/discussions) (new)\r\nIf you have any questions about the package, ESPN API data, or want to talk about a feature please start a [discussion](https://github.com/cwendt94/espn-api/discussions)! \r\n\r\n\r\n## Issue Reporting\r\nIf you find a bug follow the steps below for reporting.\r\n\r\n1. Open a [new issue](https://github.com/cwendt94/espn-api/issues) with a brief description of the bug for the title. In the title also add which sport (Football or Basketball)\r\n\r\n2. Run the application in debug mode to view ESPN API request's and response's\r\n    ```python\r\n    # ... import statement above\r\n    league = League(league_id=1245, year=2019, debug=True)\r\n    ```\r\n    The application will print all requests and the response from ESPN's API in the console. I would suggest piping the console output to a text file as it will be a lot of data.\r\n\r\n3. Find the last log before the crash and copy it in the issue descrption with the line number of the crash or possible bug.\r\n\r\n4. Submit the new issue!\r\n\r\nI will try to comment on the issue as soon as possible with my thoughts and possible fix!\r\n"
 },
 {
  "repo": "hegaojian/MvvmHelper",
  "language": "Kotlin",
  "readme_contents": "#### :chicken::chicken::chicken: \u8fd9\u662f\u4e00\u4e2a\u5feb\u901f\u5f00\u53d1\u7684\u6846\u67b6\uff0c\u4f7f\u7528Kotlin\u8bed\u8a00\u5f00\u53d1\uff0cMVVM+Jetpack\u67b6\u6784\uff0c\u5c01\u88c5\u4e86\u516c\u5171\u5934\u90e8\u3001\u754c\u9762\u72b6\u6001\u7ba1\u7406\u3001ViewModel\u3001LiveData\u3001DataBinding\u3001ViewBinding\u3001\u5934\u90e8\u5237\u65b0\u3001\u52a0\u8f7d\u66f4\u591a\u3001\u6c89\u6d78\u5f0f\u3001\u5168\u5c40\u901a\u77e5\u3001\u4e30\u5bcc\u597d\u7528\u7684\u62d3\u5c55\u51fd\u6570\u3001RxHttp\u7f51\u7edc\u8bf7\u6c42\u7b49\u7b49\u4e00\u7cfb\u5217\u5de5\u5177\n\n\n### \u66f4\u8be6\u7ec6\u7684\u6587\u6863\u4ecb\u7ecd \u8bf7\u770b [Wiki](https://github.com/hegaojian/MvvmHelper/wiki)   [Wiki](https://github.com/hegaojian/MvvmHelper/wiki)   [Wiki](https://github.com/hegaojian/MvvmHelper/wiki)\n\nclone\u6162\u7684\u53ef\u4ee5\u7528 gitee\u94fe\u63a5 https://gitee.com/hegaojian/MvvmHelper\n\n## 1.\u5982\u4f55\u96c6\u6210\n\n- **1.1 \u5728root's build.gradle\u4e2d\u52a0\u5165 Jitpack \u4ed3\u5e93 **\n\n```gradle\nallprojects {\n    repositories {\n        ...\n        maven { url 'https://jitpack.io' }\n    }\n}\n```\n\n- **1.2 \u5728app's build.gradle\u4e2d\u6dfb\u52a0\u4f9d\u8d56**\n\n```gradle\napply plugin: 'kotlin-kapt'\n\n...\n\ndependencies {\n  ...\n  implementation 'com.github.hegaojian:MvvmHelper:1.1.7'\n  kapt 'com.github.liujingxing.rxhttp:rxhttp-compiler:2.9.3'\n}\n```\n\n- **1.3 \u5728app's build.gradle\u4e2d\uff0candroid \u6a21\u5757\u4e0b\u5f00\u542fDataBinding\u6216\u8005ViewBinding \u53ef\u4ee5\u81ea\u884c\u9009\u62e9**\n\n``` gradle\nAndroidStudio 4.0 \u4ee5\u4e0b\u7248\u672c------>\nandroid {\n    ...\n    dataBinding {\n        enabled = true //\u53ef\u9009 \u4e0d\u7528\u53ef\u4ee5\u4e0d\u5199\n    }\n    viewBinding {\n        enabled = true //\u53ef\u9009 \u4e0d\u7528\u53ef\u4ee5\u4e0d\u5199\n    }\n}\n\nAndroidStudio 4.0\u53ca\u4ee5\u4e0a\u7248\u672c ------>\nandroid {\n    ...\n   buildFeatures {\n        dataBinding = true //\u53ef\u9009 \u4e0d\u7528\u53ef\u4ee5\u4e0d\u5199\n        viewBinding = true //\u53ef\u9009 \u4e0d\u7528\u53ef\u4ee5\u4e0d\u5199\n    }\n}\n \n```\n\n- **1.4 \u5728Application\u4e2d\u521d\u59cb\u5316**\n\n```kotlin\n MvvmHelper.init(this,BuildConfig.DEBUG)\n```\n\n\n## \u6df7\u6dc6\n\n``` kotlin \n-keepclassmembers class * implements androidx.viewbinding.ViewBinding {\n  public static * inflate(android.view.LayoutInflater);\n  public static * inflate(android.view.LayoutInflater, android.view.ViewGroup, boolean);\n  public static * bind(android.view.View);\n}\n```\n\n"
 },
 {
  "repo": "zengm-games/zengm",
  "language": "TypeScript",
  "readme_contents": "# Basketball GM, Football GM, ZenGM Baseball, and ZenGM Hockey\n\nSingle-player sports simulation games. Make trades, set rosters, draft players,\nand try to build the next dynasty, all from within your web browser. The games\nare implemented entirely in client-side JavaScript, backed by IndexedDB.\n\nCopyright (C) ZenGM, LLC. All rights reserved.\n\nEmail: jeremy@zengm.com\n\nWebsite: <https://zengm.com/>\n\nDevelopment: <https://github.com/zengm-games/zengm>\n\nDiscussion:\n\n* <https://www.reddit.com/r/BasketballGM/>\n* <https://www.reddit.com/r/Football_GM/>\n* <https://www.reddit.com/r/ZenGMBaseball/>\n* <https://www.reddit.com/r/ZenGMHockey/>\n* <https://zengm.com/discord/>\n\n**This project is NOT open source, but it is also not completely closed. Please\nsee [LICENSE.md](LICENSE.md) for details.**\n\n## Development Info\n\nIf you just want to play the game, go to <https://zengm.com/>. Instructions\nbelow are for developers who want to run a copy locally so they can make changes\nto the code.\n\nIf you want to contribute but get stuck somewhere, please contact me! I'm happy\nto help.\n\n### License and Contributor License Agreement\n\n**This project is NOT open source, but it is also not completely closed. Please\nsee LICENSE.md for details.**\n\nIf you want to contribute code to this project, you must sign a contributor\nlicense agreement. There are separate forms for individuals and entities (such\nas corporations):\n\n* [Individual CLA](CLA-individual.md) (this is probably what you want)\n* [Entity CLA](CLA-entity.md)\n\nMake a copy of the form, fill in your information at the bottom, and send an\nemail to jeremy@zengm.com with the subject line, \"Contributor License Agreement\nfrom YOUR_NAME_HERE (GITHUB_USERNAME_HERE)\".\n\n### Step 1 - Installing\n\nMake sure you're using a recent version of [Node.js](https://nodejs.org/), older\nversions probably won't work. Then, all of the tooling used in development can\nbe set up by simply installing [Yarn 1](https://classic.yarnpkg.com/) and\nrunning:\n\n    yarn install\n\nfrom within this folder.\n\n### Step 2 - Building\n\nTo build the app along with all its assets, run\n\n    yarn run build\n\nHowever during development, you probably would rather do\n\n    yarn run start-watch\n\nwhich will start the server and watch JS and CSS files for changes and\nrecompile. This simply runs both `yarn run start` and `yarn run watch` together,\nwhich alternatively can be run separately if you wish.\n\nBy default this will build the basketball version of the game. For other sports,\nset the SPORT environment variable to \"football\", \"baseball\", or \"hockey\", like:\n\n    SPORT=football yarn run start-watch\n\nOpen `package.json` to see all available development scripts.\n\n### Step 3 - Running\n\nTo run the game locally, you need some way of running a web server to display\nthe content. There are currently two ways to do it. It doesn't matter which you\nuse as long as you can get it to run on your computer.\n\n#### 1. Node.js (easiest)\n\nRun\n\n    yarn run start\n\nand point your browser to <http://localhost:3000/>. If you use the command `yarn\nrun start-watch` from above, then running the command `yarn run start` is not\nnecessary.\n\n#### 2. Apache\n\nThe mod_rewrite rules in `.htaccess` let the game run in Apache. Everything\nshould work if you point it at the `build` folder with mod_rewrite enabled.\n\n### Step 4 - Testing\n\nTypeScript and ESLint are used to enforce some coding standards. To run them on\nthe entire codebase, run\n\n    yarn run lint\n\nIntegration and unit tests spread out through the codebase in *.test.ts files.\nCoverage is not great. They can be run from the command line with\n\n    yarn test\n\nThere is also a single end-to-end test which creates a league and simulates a\nseason. To execute the end-to-end test, run\n\n    yarn run test-e2e\n\nFor the end-to-end test, by default it is basketball. If you want it to do\nfootball, stick `SPORT=football ` in front.\n\n### Code Overview\n\nThis is a single-page app that runs almost entirely client-side by storing data\nin IndexedDB. The core of the game runs inside a Shared Worker (or a Web Worker\nin crappy browsers that don't support Shared Workers), and then each open tab\nruns only UI code that talks to the worker. The UI code is in the `src/ui`\nfolder and the core game code is in the `src/worker` folder. They communicate\nthrough the `toUI` and `toWorker` functions.\n\nThe UI is built with React and Bootstrap.\n\nIn the worker, data is ultimately stored in IndexedDB, but for performance and\ncross-browser compatibility reasons, a cache (implemented in\n`src/worker/db/Cache.ts`) sits on top of the database containing all commonly\naccessed data. The idea is that IndexedDB should only be accessed for uncommon\nsituations, like viewing stats from past seasons. For simulating games and\nviewing current data, only the cache should be necessary.\n\nThe cache is overly complicated because (1) the values it returns are mutable,\nso you better not mess with them accidentally, and (2) when you do purposely\nmutate a value (like updating a player's stats), you need to remember to always\nwrite it back to the cache manually by calling `idb.cache.*.put`.\n\nIn both the worker and UI processes, there is a global variable `self.bbgm`\nwhich gives you access to many of the internal functions of the game from\nwithin your browser.\n\n### Shared Worker Debugging\n\nAs mentioned above, the core of a game runs in a Shared Worker. This makes\ndebugging a little tricky. For instance, in Chrome, if you `console.log`\nsomething inside the Shared Worker, you won't see it in the normal JS console.\nInstead, you need to go to chrome://inspect/#workers and click \"Inspect\" under\n<http://localhost/gen/worker.js>.\n\nIn any browser, if you have two tabs open and you reload one of them, the worker\nprocess will not reload. So make sure you close all tabs except one before\nreloading if you want to see changes in the worker.\n\n### Service Worker\n\nThis only applies if you use Apache, not if you use `yarn run start`!\n\nA service worker is used for offline caching. This can make development tricky,\nbecause if you load the game in your browser, make a change, wait for\nbuild/watch to finish, and then reload... you will not see your change because\nit will cache the original version and then not update it on a reload. This is\nthe normal behavior for service workers (they only switch to a new version when\nyou actually close the website and reopen it, not on a reload), but it makes\ndevelopment annoying.\n\nTo work around that, in Chrome you can [use the \"Update on reload\" option][1]\nand keep your devtools open. Then reloading will always get you the latest\nversion.\n\nEven with that, ctrl+shift+r may be a good idea to make sure you're seeing your\nlatest changes.\n\n[1]: https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle#update_on_reload\n\n### Git Workflow\n\nIf you want to contribute changes back to the project, first create a fork on\nGitHub. Then make your changes in a new branch. Confirm that the tests\n(hopefully including new ones you wrote!) and ESLint all pass. Finally, send me\na pull request.\n\nIt's also probably a good idea to create an [issue on\nGitHub](https://github.com/zengm-games/zengm/issues) before you start working\non something to keep me in the loop.\n\n## Less Important Development Info\n\n### Sport-specific stuff\n\nAbbreviations of stats should be done like basketball-reference.com and\nfootball-reference.com stat pages. For instance, \"defensive rebounds\" is \"drb\".\n\n### Thank you BrowserStack\n\nShout out to [BrowserStack](https://www.browserstack.com/) for helping with\ncross-browser testing.\n"
 },
 {
  "repo": "jrbadiabo/Bet-on-Sibyl",
  "language": "Jupyter Notebook",
  "readme_contents": "======================![Sibyl Logo](Images/Sibyl_white_logo.png)======================\n\n\nSport Game Outcome Prediction Project - Bet on Sibyl \n======================\n### Bet on Sibyl in a nutshell\n\nBetonSibyl is a platform controlled by a set of algorithmic models (a model defined for each sport)\nthat projects accurately estimated results (predictions of upcoming games) from a multitude of statistical variables.\nAt launch, the platform will cover the four major US sports (Football, Basketball, Baseball, Hockey), Soccer and Tennis.\nMoreover, the models provide stats to measure the\nperformance of the algorithm for the current season (for each sport) along with bankroll comparaison stats with bookmaker \n(scraping from the [oddsportal's website](http://www.oddsportal.com/) to do so). Here's below an image from the mobile app \npropotype based on the platform.\n\n[![Prototype images](Images/Sibyl_mobile_app_screenshots.png)](https://marvelapp.com/31dgaj4/screen/17384930)\n\n## Table of content\n\n- [Data collection](#data-collection)\n    - [Decomposition - Data Design Decisions](#data-design-decisions)\n    - [Web Scraping - Selenium/Beautiful Soup](#web-scraping)\n- [Predictions](#predictions)\n    - [Data Preprocessing](#data-preprocessing)\n    - [Algorithm Tuning and Running](#algorithm-tuning-and-runing)\n- [Results Presentation](#results-presentation)\n    - [Bookmakers comparaison over the year](#bookmakers-comparaison-over-the-year)\n    - [Model Performance Metrics](#model-performance-metrics)\n    - [ML one-sport process in a nutshell](#ml-one-sport-process-in-a-nutshell)\n- [License](#license)\n- [Links](#links)\n- [Notes](#notes)\n\n## Data collection\n\n### Data Design Decisions\n\n1. It is decided that the two participating teams/players in each matchup are respectively represented by visitor team and home team (player A/player B in case of Tennis).\n This is contrary to another popular method of representing the teams as the favorite and underdog.\n\n2. The point differential is chosen to be positive when the home team scores more points than the away team.\n\n3. To represent the difference between the two teams that are playing in the matchup, the ratio or the difference between\n the same attributes are taken between the two teams. That is, the home team\u2019s statistic is divided by the visitor team\u2019s\n  statistic. Therefore, when attributes are a positive indicator of performance, a value greater than 1 indicates that\n   the home team performs better for that particular attribute. When the attributes are integers (not statistics), then \n   the difference between the home team\u2019s attribute and the away team\u2019s attribute is taken. Examples of this are win \n   streak, compared to statistics such as points per game that would be compared by taking the ratio.\n\n\n### Web Scraping\n\nThe data is scraped from several websites according to each sport using Python and the Selenium and BeautifulSoup (only for MLB data)\n packages for Python. Data sources for each sports are described in the \"Link\" section. \n According to each sport/league, the script goes through each summary season page and writes season team stats and season game stats \n (e.g. date, the home team, away team, home team points, away team points etc.) to a csv file.\nGame stat data, team stat data, and datetime data are merge later into a feature file (.npz) for the ML algorithm (Lasso Logistic Regression)\nHere's below an example team stats data and game stats data for the NFL league.\nIn the same scripts, After having obtained the raw data set, data is cleaned throughout the script. The script\nchecked the completeness and validity of all the data files, and eliminated any CSV parsing errors\nor erroneous data values.\n \nex of NFL team stat data from the 2000 season to the 2015 season\n\n![Sibyl Logo](Images/nfl_team_stats_from_2000_to_2015.png)\n\nex of NFL game stat data from the 2000 season to the 2015 season\n\n![Sibyl Logo](Images/nfl_game_stats_from_2000_to_2015.png)\n\n## Predictions\n\n### Data preprocessing\n\nData preprocessing is made in the Prepare_for_ML.py file. Here is the main idea:\nHaving validated all our available data, the script then proceeded to load the data from the csv files\ninto an SQL database using the SQLite single-file database engine and a few Python scripts. The\nflexibility of SQL queries allowed one to easily perform complex joins and merges between multiple\ntables via the the script.\nInstead of using each team\u2019s attribute independently in the analysis, attributes are formed to represent the difference\n between the attribute for the two participating teams in the matchup. For example, in the NBA league the attributes \n \u2018average_blocks_per_game_home\u2019 and \u2018average_blocks_per_game_away\u2019 are not used in the analysis, rather, \n the ratio between the two values is used. \n \n Thus, the script converts the clean scraped data to data structures that the libraries in scikit-learn can easily use. \n The ultimate result of the routines included in this file is a numpy array containing all the features and game results\n  for the historical game data. The structure 'features.npz' contains this output and is eventually loaded by scikit-learn.\n   The features have not been normalized but the next script provide one the ability to easily normalize or standardize the data. \n\n### Algorithm Tuning and Running\n\nThis step is located in the \"RunModelLeague.py\"\nAccording to each sport, it uses scikit-learn and historical game results (in the .npz file) to make predictions on the current season games\n that have not been played.\n A logistic regression predictive model with the L1 penalty is created. Analysis of results are output to csv files.\n\n Here is below an example of the output for the 2017 nba season\n \n ![Sibyl Logo](Images/nba_tableau_output_2017_img.png)\n \n Then, webscraping (through the ScrapeMatchupDatetimeOddsTwoChoicesLeague.py file) is performed  through the betbrain's website so as one can have more information on each league upcoming match.\nThus, the final output give additionnal detail such as odds for both home and away teams, the choice of the bookmaker \n(e.g. the team with the lowest odd if designed to be the bookmaker choice), the choice of the algorithm (Sibyl), if \nthere is a divergence or no between Sibyl and the bookmaker ('Y' = yea, 'N' = no).\nHere's below an example of the final output for the Ligue 1 soccer league.\n\n\n ![Sibyl Logo](Images/final_output_football_ligue1.png)\n\n\n## Results Presentation\n \n\n### Model Performance Metrics\n\nFirst of all, webscraping (through the SibylVsBookiesNFL.py file) is performed in order to have sufficient data to make comparison with\nbookmakers over the year ([oddsportal's website](http://www.oddsportal.com/)). \nBelow you can see an example of output that help one make a clear performance comparison between Sibyl and the bookies \nfor the 2016 MLB season.\n\n ![Sibyl Logo](Images/Sibyl_vs_Bookies_MLB.png)\n \nThen, algorithm performance measure is performed through the ModelMetricsLeague.py file\nThe script provides one for a given league data such as algorithm accuracy (e.g. % of correct predictions) up-to-date, the team of the month to\nbet on (team which has performed well when chosen by the algorithm), the worst team of the month, The top teams to bet on \nbased on the divergence stategy etc...\n\n### ML one-sport process in a nutshell\n\nFor a given league, the entire process described above can be run via the ModelLeague.py file.\nHere is an example of the process code for the \n\n\n    # coding: utf-8\n    \n    import numpy as np\n    import sys\n    \n    \n    class ModelNHL(object):\n        from RunModelNHL import NHLMakePredictions\n        from ScrapeMatchupDatetimeOddsTwoChoicesNHL import AcquireMatchupDatetimeOddsTwoChoices\n        from SibylVsBookiesNHL import AcquireSibylVsBookiesNHL\n        from ModelMetricsNHL import ModelMetricsNHL\n    \n        def __init__(self, current_season, feature_file, nhl_db_name,\n                     betbrain_upcoming_games_url, cs_team_stats_filename, league_name, upcoming_games_output_filename_us,\n                     upcoming_games_output_filename_eu, oddsportal_url_fix, oddsportal_url_list_format):\n            self.current_season = current_season\n            self.feature_file = feature_file\n            self.data = np.load(feature_file)\n            self.tableau_input_filename = \"nhl_tableau_output_\" + str(current_season) + \".csv\"\n            self.current_season = current_season\n            self.X = self.data['X']\n            self.y = self.data['y']\n            self.nhl_db_name = nhl_db_name\n            self.betbrain_upcoming_games_url = betbrain_upcoming_games_url\n            self.cs_team_stats_filename = cs_team_stats_filename\n            self.league_name = league_name\n            self.upcoming_game_outputs_filename_us = upcoming_games_output_filename_us\n            self.upcoming_games_output_filename_eu = upcoming_games_output_filename_eu\n            self.oddsportal_url_fix = oddsportal_url_fix\n            self.oddsportal_url_list_format = oddsportal_url_list_format\n            self.cs_team_stats_filename = cs_team_stats_filename\n            self.season_over = 'No'\n    \n        def __call__(self):\n            print \"NHL Machine Learning process execution...\"\n            x = self.NHLMakePredictions(self.current_season, self.feature_file, self.nhl_db_name)\n            x()\n            print \"NHL Machine Learning process execution...OK\\n\"\n    \n            print \"NHL Scraping odds and datetime from Betbrain.com process execution...\"\n            w = self.AcquireMatchupDatetimeOddsTwoChoices(\n                self.season_over,\n                self.betbrain_upcoming_games_url,\n                self.cs_team_stats_filename, self.league_name,\n                self.tableau_input_filename,\n                self.upcoming_game_outputs_filename_us,\n                self.upcoming_games_output_filename_eu)\n            w()\n            print \"NHL Scraping odds and datetime from Betbrain.com process execution...OK\\n\"\n    \n            # ----------------------------------------------------------------------------\n    \n            self.season_over = w.season_over\n            print self.league_name + ' season is over? : ' + self.season_over + '=> '\n            if self.season_over == 'No':\n                print \"Moving on...\\n\"\n            else:\n                print \"Season over => Stopping the NHL process\\n\"\n    \n            # ----------------------------------------------------------------------------\n    \n            print \"NHL Sibyl vs Bookies process execution...\"\n            v = self.AcquireSibylVsBookiesNHL(self.season_over, self.oddsportal_url_fix, self.oddsportal_url_list_format,\n                                              self.cs_team_stats_filename, self.tableau_input_filename)\n            v()\n            print \"NHL Sibyl vs Bookies process execution...OK\\n\"\n    \n            print \"NHL ModelMetrics process execution...\"\n            u = self.ModelMetricsNHL(self.season_over, self.tableau_input_filename, self.upcoming_game_outputs_filename_us,\n                                     self.cs_team_stats_filename)\n            u()\n            print \"NHL ModelMetrics process execution...OK\\n\"\n    \n    \n    if __name__ == '__main__':\n        x = ModelNHL(2017, 'nhl_features_2006_2015.npz', 'nhl_team_data_2017.db',\n                     'https://www.betbrain.com/ice-hockey/united-states/nhl/', 'nhl_team_stats_2017_2017.csv', 'NHL',\n                     'NHL_Upcoming_Matchups_US_P_df.csv', 'NHL_Upcoming_Matchups_EU_P_df.csv',\n                     'http://www.oddsportal.com/hockey/usa/nhl/results/',\n                     'http://www.oddsportal.com/hockey/usa/nhl/results/#/page/{}/')\n        x()\n\n\nNb: the script does not take argument.\n\n## License\n\nThe Bet on Sibyl is licensed under the terms of the GPL Open Source\nlicense and is available for free.\n\n## Links\nHere are all the website sources for data web scraping:\n* [http://www.baseball-reference.com/](http://www.baseball-reference.com/) (Beautiful Soup)\n* [http://www.basketball-reference.com/](http://www.basketball-reference.com/) (Selenium/Phantom JS)\n* [http://www.pro-football-reference.com/](http://www.pro-football-reference.com/) (Selenium)\n* [http://www.hockey-reference.com/](http://www.hockey-reference.com/) (Selenium)\n* [http://www.soccerstats.com/](http://www.soccerstats.com/) (Selenium)\n* [http://www.coretennis.net/](http://www.coretennis.net/) (Selenium/ Phantom JS)\n* [http://www.oddsportal.com](http://www.oddsportal.com) (Selenium)\n* [https://www.betbrain.com](https://www.betbrain.com) (Selenium)\n\nHere is the link for the mobile app prototype:\n* [https://marvelapp.com/31dgaj4/screen/17384930](https://marvelapp.com/31dgaj4/screen/17384930)\n\n## Notes\n\nAll us leagues and soccer leagues models are done. \nTennis model is ongoing but partially finished. \nAny recommendation, help for the model would be much appreciated.\nEnjoy!\n\nTool used: Ananconda Distribution through Pycharm (Professional version) + Jenkins / Jupyter Notebook / SQLite Browser\n"
 },
 {
  "repo": "stephanj/basketballVideoAnalysis",
  "language": "Jupyter Notebook",
  "readme_contents": "# Sports Video Analysis\n\nSee wiki page for [more details](https://github.com/stephanj/basketballVideoAnalysis/wiki).\n\n## Court Detection\n\n<img width=\"548\" alt=\"Courts\" src=\"https://user-images.githubusercontent.com/179457/71198821-f0e0f400-2294-11ea-8253-3d6ff20fcbf9.png\">\n\nSee details on court detection [here](https://github.com/stephanj/basketballVideoAnalysis/tree/master/court-detection).\n\n## Mask R-CNN of persons (mask-rcnn)\n\nSee details [here](https://github.com/stephanj/basketballVideoAnalysis/tree/master/mask-rcnn) including online tutorial.\n\n[<img width=\"2025\" alt=\"defence\" src=\"https://user-images.githubusercontent.com/179457/70865878-af81d900-1f62-11ea-85d1-44db19a0f7f3.jpg\">](https://www.youtube.com/watch?v=yEqGTSd5DQU)\n\nVideo output example\n\nhttps://www.youtube.com/watch?v=yEqGTSd5DQU\n\n## Color detection of players (color-detection)\n\nThe run script will produce a CSV with the RGB values and percentage of each color.\n\nToDo:  Classify each color result into two groups, identify hopefully each team by color.\n\n![Colors](https://user-images.githubusercontent.com/179457/71019085-040b8c80-20fa-11ea-8e44-d22759d9352a.jpg)\n\n## Players tracking\n\nSee article on [players tracking solutions](https://github.com/stephanj/basketballVideoAnalysis/wiki/Tracking-Players)\n\nSee also [YouTube](https://www.youtube.com/watch?v=6b__GMsoW4k) video with different solutions.\n\n## Action Classification\n\n![PoseDetection](https://user-images.githubusercontent.com/179457/71200350-23d8b700-2298-11ea-85eb-37b2c8d07b76.png)\n\nRequired so we can classify the game play action of players.\n\n## Homography mapping of court\n\nMaps the 3D court onto a 2D version, required for analysis of movement.\n\n![MiniMap](https://user-images.githubusercontent.com/179457/71530819-2c5e6c80-28ec-11ea-91fe-4dc9d2d19793.jpg)\n\nSee also [YouTube video](https://www.youtube.com/watch?v=tpavRDeDlTI)\n\nSee details [here](https://github.com/stephanj/basketballVideoAnalysis/tree/master/homography-mapping)\nand [article](https://www.linkedin.com/pulse/journey-towards-creating-basketball-mini-map-stephan-janssen/) with [tutorial](https://github.com/stephanj/basketballVideoAnalysis/tree/master/mini-map-tutorial).\n\n"
 },
 {
  "repo": "KengoA/fantasy-basketball",
  "language": "Jupyter Notebook",
  "readme_contents": "\nNote (March 2022) This repository is under major refactoring.\n\n## NBA Player Performance Prediction and Lineup Optimization\n\nPrediction of NBA player performance defined as Fantasy Points by Draft Kings. This capstone project was conducted and approved by a reviewer as part of Machine Learning Engineer Nanodegree by Udacity. See the final report [here](https://github.com/KengoA/fantasy-basketball/blob/master/report.pdf) for details.\n\nNote that the code was updated since the writing of the report and the content does not necessarily match up. This project is under minor refactoring and documentation as of Jun 2019, feel free to reach out to me via email at kengo@hey.com.\n\n### What We'll Do\n\nThe end goal of this project is to generate a series of lineups for a fantasy basketball website [DraftKings](https://www.draftkings.com/). To achieve that, we'll scrape player statististics from each regular season game starting in the 2014-15 season as well as past fantasy salary information. First, we'll build a predictive model for player performance, and then we will use genetic algorithm to construct fantasy lineups to maximize the total fantasy points while satisfying the salary constraint.\n\n### What We Won't Do\n\nGiven the complexity of the series structure and difference in nature, we won't be considering playoff games. In addition, a major factor omitted from our analysis is the opponent's defensive ability as a team or at a given position (for instance, Paul George is excellent at stealing the ball), which arguably is one of the most important factors of the game. Tackling this aspect will be an easy improvement to this project.\n\n### Requirements\n\nAlong with libraries specified in [requirements.txt](requirements.txt), you need to sign up with Plotly for free to create interactive visualizations.\n\n### Understanding Fantasy Sports\n\nThe key to select a good fantasy lineup is to identify players that are consistent performers. This basic intuition comes from Harry Morkowitz's [Modern Portfolio Theory (MPT)](https://www.investopedia.com/terms/m/modernportfoliotheory.asp), and the following scatter plot looks at the relationship between risk and return, where return is the average fantasy points over a given range of games (in this case, past 10 games) and risk is its standard deviation. For a given level of risk (x-axis), a player with a better return is considered to be superior. The plot is based on the late 2018-19 season statistics, where, for instance, Lebron James is shown in the top-left with a 10-game average of a whopping 58.1 fantasy points and a 7.4 standard deviation. The top curve starting from Harden (top right), Lebron, Paul George, Gorbert, Sexton, and Zubac can be considered as [Efficient Frontier](https://www.investopedia.com/terms/e/efficientfrontier.asp) in the framework of the MPT. In general, players on the outer left of the cluster are considered as good assets with low risk and high return. Players are color-coded based on rough positions of PG, SG, F (SF, PF, SF/PF), and C (PF/C, C). A fully interactive version can be accessed [here](https://plot.ly/~KengoA/12/_10-game-risk-return-relationship/#/).\n\n![10-game risk-return](assets/risk_return.gif)\n\nAnother important dimension of the game of fantasy basketball is player salary. Fantasy sports websites like DraftKings determine player salary values given their previous performance and roster information in a semi-automatic fashion, such that it is more costly to include \"stud\" players with high expected return (LeBron, Westbrook, Harden) into your lineup. DraftKings has a salary cap of $50,000 for a selection of 8 players, giving each player an average salary of $6250. The graph below shows a scatterplot of a player's salary and his actual performance of the day in the latest games of the 2018-19 season. One striking insight is that while it is easy to identify studs like Westbrook who had a total fantasy poitns of 61.5 for his 11.8k salary April 10, \"value\" players who exceed expectations are much more difficult to find, with a large variance given a salary level. For instance, Jamal Crawford on the top left had monstrous performance for a combined fantasy points of 70.25, despite the low expectation of his \\$4300 salary. These \"value\" players are what differentiates winning lineups from those of a typical beginner with a collection of star players and underachieving benchwarmers. This requires deeper insight into who will outperform their expectations. For instance, an injury of a starting player most likely increases minutes for other starting members and the second option player on the bench. A fully interactive version can be accessed [here](https://plot.ly/~KengoA/14/salary-return-relationship/#/).\n\n![salary-return](assets/salary_return.gif)\n\n### Project Structure\n\nThis project consists of 9 Jupyter notebooks and functionalities are described below, where the second half consists of construcing machine leanring models and making inference, and optimising lineups for DraftKings.\n\n- [01.data_scraping.ipynb](src/01.data_scraping.ipynb) scrapes games data from Basketball-Reference.com and salary and position information from RotoGuru.\n\n- [02.merging_data.ipynb](src/02.preprocessing.ipynb) merges the two datasets with name standardisation and preliminary preprocessing of data such as calculation of FPTS based on the key statistics.\n\n- [03.exploratory_analysis.ipynb](src/03.exploratory_analysis.ipynb) visually explores relationships between; salary and actual FPTS and; expected FPTS and standard deviation of the past 10 games.\n\n- [04.feature_engineering.ipynb](src/04.feature_engineering.ipynb) constructs the baseline model with simple average along with additional three datasets with weighted average, where several features are engineered and incorporated.\n\n- [05.baseline_models.ipynb](src/05.baseline_models.ipynb) sets up the baseline model with simple season average adopted by DraftKings and linear regression with feature selection models. For notebooks 06-08, we use 5-fold cross validation to approximate model errors.\n\n- [06.lightgbm_bayesian_optimization.ipynb](src/06.lightgbm_bayesian_optimization.ipynb) uses bayesian optimisation method to find the best parameters for a boosting model using lightGBM. Parameters and their results are saved in a text file.\n\n- [07.neural_networks.ipynb](src/07.neural_networks.ipynb) constructs three neural network models using keras, and saves model weights only when there was an improvement. While deep learning models might not suit this dataset of limited size, it shows improvement compared to boosting models.\n\n  ![learning](assets/learning.png)\n\n- [08.predictions.ipynb](src/08.predictions.ipynb) trains on the whole dataset except for the month of March 2019, where each contest's cashline for double up was manually obtained from RotoGrinders. Inference is made on this test data from March 2019.\n\n- [09.lightgbm_bayesian_optimization.ipynb](src/06.lightgbm_bayesian_optimization.ipynb) uses Genetic Algorithms to select best combinations of players on a given set of games ans predictions. Performance of the lineups chosen by the algorithm against other DraftKings users is examined for contests held in March, 2019. Note that the contest data is manually obtained from Rotogrindrs' ResultsDB page without scraping. Predictions from the baseline model and final model are compared to the actual performance. The following figure shows the optimal lineup this model returns, with differences between the actual FPTS and predicted FPTS with neural network and baseline models.\n\n  ![lineup](assets/lineup.png)\n\nMain procedures are coded and explained in markdown using Jupyter Notebook. Although not requred, jupyter nbextentions are highly recommended for convenience and visibility (see link). Useful extensions are Codefolding, ExecuteTime, Collapsible Headings, and Variable Inspector. http://jupyter-contrib-nbextensions.readthedocs.io/en/latest/install.html\n"
 },
 {
  "repo": "vishaalagartha/basketball_reference_scraper",
  "language": "Python",
  "readme_contents": "# basketball_reference_scraper\n\n[Basketball Reference](https://www.basketball-reference.com/) is a great resource to aggregate statistics on NBA teams, seasons, players, and games. This package provides methods to acquire data for all these categories in pre-parsed and simplified formats.\n\n## Installing\n### Via `pip`\nI wrote this library as an exercise for creating my first PyPi package. Hopefully, you find it easy to use.\nInstall using the following command:\n\n```\npip install basketball-reference-scraper\n```\n\n### Via GitHub\nAlternatively, you can just clone this repo and import the libraries at your own discretion.\n\n## Wait, don't scrapers like this already exist?\n\nYes, scrapers and APIs do exist. The primary API used currently is for [stats.nba.com](https://stats.nba.com/), but the website blocks too many requests, hindering those who want to acquire a lot of data. Additionally, scrapers for [Basketball Reference](https://www.basketball-reference.com/) do exist, but none of them load dynamically rendered content. These scrapers can only acquire statically loaded content, preventing those who want statistics in certain formats (for example, Player Advanced Stats Per Game).\n\n### API\nCurrently, the package contains 5 modules: `teams`, `players`, `seasons`, `box_scores`, `pbp`, `shot_charts`, and `injury_report`. \nThe package will be expanding to include other content as well, but this is a start.\n\nFor full details on the API please refer to the [documentation](https://github.com/vishaalagartha/basketball_reference_scraper/blob/master/API.md).\n"
 },
 {
  "repo": "neilmj/BasketballData",
  "language": "Groff",
  "readme_contents": ""
 },
 {
  "repo": "xwjdsh/nba-live",
  "language": "Go",
  "readme_contents": "```text\n          __                ___          \n   ____  / /_  ____ _      / (_)   _____ \n  / __ \\/ __ \\/ __ `/_____/ / / | / / _ \\\n / / / / /_/ / /_/ /_____/ / /| |/ /  __/\n/_/ /_/_.___/\\__,_/     /_/_/ |___/\\___/ \n\n```\n[![Release](http://github-release-version.herokuapp.com/github/xwjdsh/nba-live/release.svg?style=flat)](https://github.com/xwjdsh/nba-live/releases/latest)\n[![Build Status](https://travis-ci.org/xwjdsh/nba-live.svg?branch=master)](https://travis-ci.org/xwjdsh/nba-live)\n[![Go Report Card](https://goreportcard.com/badge/github.com/xwjdsh/nba-live)](https://goreportcard.com/report/github.com/xwjdsh/nba-live)\n[![](https://images.microbadger.com/badges/image/wendellsun/nba-live.svg)](https://microbadger.com/images/wendellsun/nba-live)\n[![DUB](https://img.shields.io/dub/l/vibe-d.svg)](https://github.com/xwjdsh/manssh/blob/master/LICENSE)\n\n`nba-live`\u662f\u4e00\u4e2a\u5728\u7ec8\u7aef\u4e0b\u89c2\u770b`NBA&CBA`\u6587\u5b57\u76f4\u64ad\u7684\u547d\u4ee4\u884c\u5de5\u5177.\n\n\u6240\u6709\u6570\u636e\u6765\u81ea[\u624b\u673a\u7248\u76f4\u64ad\u5427](https://m.zhibo8.cc/).\n\n## \u622a\u56fe\n![](https://raw.githubusercontent.com/xwjdsh/nba-live/master/screenshot/nba-live-select.png)\n![](https://raw.githubusercontent.com/xwjdsh/nba-live/master/screenshot/nba-live-cui.png)\n\n## \u5b89\u88c5\u8fd0\u884c\n#### Go\n```shell\ngo get -u github.com/xwjdsh/nba-live\nnba-live\n```\n#### Homebrew\n```shell\nbrew tap xwjdsh/tap\nbrew install xwjdsh/tap/nba-live\nnba-live\n```\n#### Docker\n```shell\ndocker pull wendellsun/nba-live\ndocker run -it --rm wendellsun/nba-live\n```\n#### Manual\n\u4ece[releases](https://github.com/xwjdsh/nba-live/releases)\u4e0b\u8f7d\u53ef\u6267\u884c\u6587\u4ef6\u5e76\u5c06\u5176\u653e\u5230`PATH`\u73af\u5883\u53d8\u91cf\u5bf9\u5e94\u7684\u8def\u5f84\u4e2d\uff0c\u7136\u540e\u5728\u7ec8\u7aef\u8f93\u5165`nba-live`\u8fd0\u884c\u3002\n\n## \u81f4\u8c22\n* [manifoldco/promptui](https://github.com/manifoldco/promptui)\n* [marcusolsson/tui-go](https://github.com/marcusolsson/tui-go)\n* [\u57fa\u4e8ePython\u547d\u4ee4\u884c\u7684NBA\u6587\u5b57\u76f4\u64ad\u5c0f\u5de5\u5177](http://www.jianshu.com/p/b4077b8810bd)\n\n## \u534f\u8bae\n[MIT License](https://github.com/xwjdsh/nba-live/blob/master/LICENSE)\n"
 },
 {
  "repo": "neeilan/DeepPlayByPlay",
  "language": "Python",
  "readme_contents": "# Deep Play-by-Play\n\nThis repo contains model and data collection / preprocessing code to label NBA broadcast footage with play-by-play descriptions, using 3D ConvNet-based video classification.\n\nTo learn how to scrape labelled videos off NBA.com for similar projects, see [data_utils/README](data_utils/README.md).\n\n\n### Classification performance\nAfter training on about 3000 training examples (~6000 with augmentation), on a test set with 253 test examples (both sets somewhat evenly divided among 6 classes), the following accuracies were achieved:\n\n| # classes        | Classes           | Accuracy  |\n| ------------- |:-------------| :-----|\n| 6      | (Inside/Midrange/Three) (Make/Miss) | 66% |\n| 4      | (Two/Three) (Make/Miss)      | 74% |\n| 2 | (Make/Miss)      | 91% |\n\n\n### Running the code\n\nYou should be able to clone this repo, set up paths appropriately in `config.py`, and run training or inference. All dependencies for this project ship with either the Python 3 standard library or the everyday machine/deep learning toolkit (TensorFlow, keras, scikit-learn). To read videos from disk, I use [scikit-video](http://www.scikit-video.org/stable/io.html) io module, which you may need to install. Training data isn't hosted in this repo because it is quite large even after downsampling, and I don't have the [express written consent](https://www.youtube.com/watch?v=kyj-7bDr7fs) of the NBA.\nHowever, the pre-trained weights file is available in the `weights` directory.\n\n\n### Examples:\n\nThe ultimate goal is continuous video classification, on running broadcast footage. However, I didn't have access to labelled data for non-field goal events (like rebounds, free throws, players running down the court, Javale doing dumb shit, etc). As a result, these examples use 90-frame (at 8 fps, so about 11 seconds long) videos of field-goal make/miss events - the only kind the model can currently identify.\n\nSince all data used for training and testing was from the 2017-18 season, I picked out several plays from [this video](https://www.youtube.com/watch?v=jjX71R69jlA) of the last 5 minutes of Spurs/Rockets Game 5 in the 2017 playoffs to see how accurately plays from a completely different season are classified:\n\n<img src=\"assets/PLAY_1.gif\" width=\"45%\"> <img src=\"assets/PROBS_1.png\" width=\"50%\">\n<img src=\"assets/PLAY_2.gif\" width=\"45%\"> <img src=\"assets/PROBS_2.png\" width=\"50%\">\n<img src=\"assets/PLAY_4.gif\" width=\"45%\"> <img src=\"assets/PROBS_4.png\" width=\"50%\">\n<img src=\"assets/PLAY_5.gif\" width=\"45%\"> <img src=\"assets/PROBS_5.png\" width=\"50%\">\n\n### Incorrect classification examples:\n...because, like most things in life, this isn't perfect:\n\nThis Danny Green and-one is best classified as an `INSIDE_MAKE`, but `MIDRANGE_MAKE` is not a terribly bad guess:\n\n<img src=\"assets/PLAY_7.gif\" width=\"45%\"> <img src=\"assets/PROBS_7.png\" width=\"50%\">\n\n\nThe following play is an offensive foul followed by a `MIDRANGE_MISS`, but is classified as more likely to be an `INSIDE_MAKE` (51%) than a `MIDRANGE_MISS` (27%):\n\n<img src=\"assets/PLAY_6.gif\" width=\"45%\"> <img src=\"assets/PROBS_6.png\" width=\"50%\">\n\n\nSometimes, the classifier flat-out fails confidently :disappointed: :\n\n<img src=\"assets/PLAY_3.gif\" width=\"45%\"> <img src=\"assets/PROBS_3.png\" width=\"50%\">\n<img src=\"assets/PLAY_FAIL.gif\" width=\"45%\"> <img src=\"assets/PROBS_FAIL.png\" width=\"50%\">\n\nNote that some of these plays are quite difficult to judge properly at this resolution and frame rate, without sound. Now imagine that these videos are also black and white, and that is the kind of data that this model has been trained on. Therefore, it's unsurprising that it isn't very good, but working with higher quality videos requires significantly more computational resources :moneybag:.\n\n\n### FAQ\nI'll fill this out if and when people ask questions.\n\n[Reddit discussion](https://www.reddit.com/r/nba/comments/9oyzhr/oc_a_side_project_ive_been_working_on_using_deep/)\n"
 },
 {
  "repo": "lbenz730/ncaahoopR",
  "language": "R",
  "readme_contents": "# ncaahoopR <img src=\"figures/logo.png\" align=\"right\" />\n\n`ncaahoopR` is an R package for working with NCAA Basketball Play-by-Play Data. It scrapes play-by-play data and returns it to the user in a tidy format, allowing the user to explore the data with assist networks, shot charts, and in-game win-probability charts.\n\nFor pre-scraped schedules, rosters, box scores, and play-by-play data, check out the [ncaahoopR_data repository](https://github.com/lbenz730/ncaahoopR_data).\n\nTo see the lastest changes in version 1.5, view the change log [here](https://lukebenz.com/post/ncaahoopr_v1.5/).\n\n## Installation\nYou can install `ncaahoopR` from GitHub with:\n\n``` r\n# install.packages(\"devtools\")\ndevtools::install_github(\"lbenz730/ncaahoopR\")\n```\n\nIf you encounter installation issues, the following tips have helped a few users successfully install the package:\n\n* If given the option to compile any packages from source rather than installing existing binaries, choose `'No'`.\n* Windows users with trouble installing the package should try running the following command before reinstalling the package: `Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS = \"true\")`\n* Windows users with trouble installing `devtools` should try first installing the `backports` package via `install.packages(\"backports\")`.\n\n\n## Functions\nSeveral functions use ESPN game_ids. You can find the game_id in the URL for the game summary, \nas shown in the URL for the summary of the UMBC-Virginia game below.\n![game_id](figures/espn.png)\n\n### Scraping Data\n* ```get_pbp(team, season)```: Get entire current season's worth of play-by-play data for a given team and season. `season` defaults to current season, but can be specified in \"2019-20\" form. \n* ```get_pbp_game(game_ids, extra_parse)```:  Get play-by-play data for a specific vector of ESPN game_ids. `extra_parse` is a logical whether to link shot variables and attempt possesion parsing. Default =   `TRUE`.\n* ```get_roster(team, season)```: Get a particular team's roster. `season` defaults to current season, but can be specified in \"2019-20\" form. \n* ```get_schedule(team, season)```: Get a team's schedule. `season` defaults to current season, but can be specified in \"2019-20\" form. \n* ```get_game_ids(team, season)```: Get a vector of ESPN game_ids for all games involving ```team``` specified. `season` defaults to current season, but can be specified in \"2019-20\" form.\n* ```get_master_schedule(date)```: Get schedule of all games for given date. Use `YYYY-MM-DD` date formatting.\n* `get_boxscore(game_id)`: Returns list of 2 data frames, one with each teams' box score for the game in question. Written by [Jared Andrews](https://github.com/j-andrews7).\n\n* `season_boxscore(team, season = current_season, aggregate = 'average')`: Returns (aggregated) player stats over the course of a season for a given team.\n        * `team`: team to return player stats for.\n        * `season`: of form YYYY-YY. Defaults to current season.\n        * `aggregate`: one of 'average' (per-game average statistics), 'total' (sums of season stats) or 'raw' (just return all box scores binded together). 'average' is the default. Contributed in collaboration with [Kurt Wirth](https://github.com/kurtawirth)\n\nThe `team` parameter in the above functions must be a valid team name from the `ids` dataset built into the package. See the __Datasets__ section below for more details.\n\n### Win-Probability and Game-Flow Charts\n\n__Win Probability Charts__\n\nThe latest function for plotting win probability charts is `wp_chart_new`. Following the 2021-22 season other win probability chart functions will be deprecated and replaced by this function (it will be renamed to `wp_chart` but I don't want to break any existing pipelines during the season). It no longer requires users to input colors. For best results consider saving via ggsave(filename, height = 9/1.2, width = 16/1.2) (or some other 16/9 aspect ratio.) \n\n```wp_chart_new(game_id, home_col = NULL, away_col = NULL, include_spread = T, show_legend = T)```\n\n* ```game_id``` ESPN game_id for the desired contest.\n* ```home_col``` Chart color for home team (if NULL will default to `ncaa_colors` primary_color field).\n* ```away_col```: Chart color for away team (if NULL will default to `ncaa_colors` primary_color field).\n* `include_spread`: Logical, whether to include pre-game spread in Win Probability calculations. Default = `TRUE`.\n* ```show_legend```: Logical, whether or not to show legend/text on chart. Default = `TRUE`.\n\n\nA prior version of `wp_chart` used base R while `gg_wp_chart` used the `ggplot2` plotting library. As of the 2020-21 season, both functions call the same `ggplot2` library, and `gg_wp_chart` now simply aliases `wp_chart`\n\n```wp_chart(game_id, home_col, away_col, include_spread = T, show_legend = T)```\n\n* ```game_id``` ESPN game_id for the desired contest.\n* ```home_col``` Chart color for home team.\n* ```away_col```: Chart color for away team.\n* `include_spread`: Logical, whether to include pre-game spread in Win Probability calculations. Default = `TRUE`.\n* ```show_legend```: Logical, whether or not to show legend/text on chart. Default = `TRUE`.\n\n\n```gg_wp_chart(game_id, home_col, away_col, show_labels = T)```\n\n* ```game_id``` ESPN game_id for the desired contest.\n* ```home_col``` Chart color for home team.\n* ```away_col```: Chart color for away team.\n* `include_spread`: Logical, whether to include pre-game spread in Win Probability calculations. Default = `TRUE`.\n* `show_labels`: Logical whether Game Excitement Index and Minimum Win Probability metrics should be displayed on the plot. Default = `TRUE`.\n\n__Game Flow Charts__\n\n```game_flow(game_id, home_col, away_col)```\n\n* ```game_id``` ESPN game_id for the desired contest.\n* ```home_col``` Chart color for home team.\n* ```away_col``` Chart color for away team.\n\n__Game Excitement Index__\n\n```game_exciment_index(game_id, include_spread = T)```\n\n* `include_spread`: Logical, whether to include pre-game spread in Win Probability calculations. Default = `TRUE`.\n\nReturns ```GEI``` (Game Excitement Index) for given ESPN game_id. For more information about how these win-probability charts are fit and how Game Excitement Index is calculated, check out the below links\n\n\n\n* [Model Methodology](https://lukebenz.com/post/ncaahoopr_win_prob/)\n* [Game Excitement Index](https://lukebenz.com/post/gei/)\n\n__Game Control Measures__\n\n```average_win_prob(game_id, include_spread = T)```\n\n* ESPN game_id for which to compute time-based average win probability (from perspective of home team).\n* `include_spread`: Logical, whether to include pre-game spread in Win Probability calculations. Default = `TRUE`.\n\n```average_score_diff(game_id)```\n\n* ESPN game_id for which to compute time-based average score differential (from perspective of home team).\n\n\n\n### Assist Networks\n\n__Traditional Assist Networks__\n\n```assist_net(team, season, node_col, three_weights = T, threshold = T, message = NA, return_stats = T)```\n\n* ```team``` is the ESPN team name, as listed in the `ids` data frame.\n* ```season``` Options include \"2018-19\" (for entire season), or a vector of ESPN game IDs. \n* ```node_col``` is the node color for the graph.\n* ```three_weights``` (default = ```TRUE```): Logical. If TRUE, assisted three-point shots are given a weight of 1.5. If FALSE, assisted three-point shots are given a weight of 1. In both cases, assisted two-point shots are given a weight of 1. \n* `threshold` (default = 0) Number between 0-1 indicating minimum percentage of team's assisted baskets a player needs to be involved in to be included in network graph.\n* ```message``` (default = ```NA```) Option for custom message to replace graph title when using a subset of the season (e.g. conference play).\n* `return_stats` (default = `TRUE`) Return Assist Network-related statistics\n\n__Circle Assist Networks and Player Highlighting__\n\n```circle_assist_net(team, season, highlight_player = NA, highlight_color = NA, three_weights = T, threshold = 0, message = NA, return_stats = T)```\n\n* ```team``` is the ESPN team name, as listed in the `ids` data frame.\n* ```season```: Options include \"YYYY-YY\" (for entire season), or a vector of ESPN game IDs. \n* ```highlight_player``` (default = `NA`) Name of player to highlight in assist network. `NA` yields full-team assist network with no player highlighting.\n* ```highlight_color``` (default = `NA`) Color of player links to be highlighted. `NA` if ```highlight_player``` is `NA`.\n* ```three_weights``` (default = ```TRUE```): Logical. If TRUE, assisted three-point shots are given a weight of 1.5. If FALSE, assisted three-point shots are given a weight of 1. In both cases, assisted two-point shots are given a weight of 1.  \n* `threshold` (default = 0) Number between 0-1 indicating minimum percentage of team's assisted baskets a player needs to be involved in to be included in network graph.\n* `message` (default = `NA`) User-supplied plot title to overwrite default plot title, if desired.\n* `return_stats` (default = `TRUE`) Return Assist Network-related statistics\n\n### Shot Charts\nThere are currently three functions for scraping and plotting shot location data. These functions are written by [Meyappan Subbaiah](https://github.com/meysubb).\n\n`get_shot_locs(game_id)`: Returns data frame with shot location data when available. Note that if the `extra_parse` flag in `get_pbp_game` is set to `TRUE`, shot location data will already be included in the play-by-play data (if available).\n\n* `game_id`: ESPN game_id from which shot locations should be scraped.\n\n`game_shot_chart(game_id, heatmap = F)`: Plots shots for a given game.\n\n* `game_id`: ESPN game_id from which shot locations should be scraped.\n* `heatmap` (default = `FALSE`): Logical, whether to use density-heat map or plot individual points.\n* shot-plotting colors derived from team's primary color listed in `ncaa_colors` data frame.\n\n`team_shot_chart(game_ids, team, heatmap = F)`: Plots shots taken by team during a given set of game(s).\n\n* `game_ids`: Vector of ESPN game_ids from which shot locations should be scraped.\n* `team`: Which team to chart shots for.\n* `heatmap` (default = `FALSE`): Logical, whether to use density-heat map or plot individual points.\n* shot-plotting colors derived from team's primary color listed in `ncaa_colors` data frame.\n\n`opp_shot_chart(game_ids, team, heatmap = F)`: Plots shots against a team during a given set of game(s).\n\n* `game_ids`: Vector of ESPN game_ids from which shot locations should be scraped.\n* `team`: Which team to chart opponents' shots for.\n* `heatmap` (default = `FALSE`): Logical, whether to use density-heat map or plot individual points.\n\n\n## Datasets\n\n```dict``` A data frame for converting between team names from various sites.\n \n * ```NCAA```: the name of the team, as listed on the NCAA website\n * ```ESPN```: the name of the team, as listed in ESPN URLs\n * ```ESPN_PBP```: the name of the team, as listed in the ESPN Play-By-Play logs\n * ```Warren_Nolan```: the name of the team, as listed on WarrenNolan.com\n * ```Trank```: the name of the team, as listed on barttorvik.com\n * ```name_247```: the name of the team, as listed on 247Sports.com\n\n```ids``` A data frame for converting between team names from various sites.\n \n * ```team```: the name of the team to be supplied to functions in ncaahoopR package\n * ```id```: team id; used in ESPN URLs\n * ```link```: link; used in ESPN URLs\n \n \n ```ncaa_colors``` A data frame of team color hex codes, pulled from [teamcolorcodes.com](https://teamcolorcodes.com/). Additional data coverage provided by [Luke Morris](https://lukesmorris.com).\n \n\n* `ncaa_name`: The name of the team, as listed on the NCAA website (same as `dict$NCAA`)\n* `espn_name`: The name of the team, as listed in ESPN URLs (same as dict$ESPN)}\n* `primary_color`: Hexcode for team's primary color.\n* `secondary_color`: Hexcode for team's secondary color, when available.\n* `tertiary_color`: Hexcode for team's tertiary color, when available.\n* `color_4`: Hexcode for team's 4th color, when available.\n* `color_5`: Hexcode for team's 5th color, when available.\n* `color_6`: Hexcode for team's 6th color, when available.\n\n![Available Colors](figures/colors.png)\n_Primary and secondary colors for all 353 teams._\n\n\nThese datasets can be loaded by typing ```data(\"ids\")```, `data(\"ncaa_colors\")`, or ```data(\"dict\")```, respectively.\n\n## Examples\n#### Win Probability Charts\n\n![wp3](figures/wp_chart_new.png)\n`wp_chart_new(401403405)`\n\n![wp](figures/wp_chart.png)\n```wp_chart(game_id = 401082978, home_col = \"gray\", away_col = \"orange\")```\n\n![wp2](figures/wp_chart_2.png)\n```wp_chart(game_id = 401168364, home_col = \"#7BAFD4\", away_col = \"#001A57\")```\n\n#### Game Flow Chart\n![game_flow](figures/game_flow.png)\n```game_flow(game_id = 401082669, home_col = \"blue\", away_col = \"navy\")```\n\n#### Single-Game Assist Network\n![Assist Single](figures/oklahoma.png)\n```assist_net(team = \"Oklahoma\", node_col = \"firebrick4\", season = 400989185)```\n\n#### Season-Long Assist Network\n![Assist All](figures/yale.png)\n```assist_net(team = \"Yale\", node_col = \"royalblue4\", season = \"2017-18\")```\n\n\n#### Circle Assist Networks\n![UNC](figures/unc.png)\n```circle_assist_net(team = \"UNC\", season = 401082861)```\n\n#### Player Highlighting\n![Frankie Ferrari](figures/ferrari.png)\n```circle_assist_net(team = \"San Francisco\", season = \"2018-19\", highlight_player = \"Frankie Ferrari\", highlight_color = \"#FDBB30\")```\n\n#### Shot Charts\n![heatmap](figures/heat_map.png)\n```game_shot_chart(game_id = 401168364, heatmap = T)```\n\n![shotchart](figures/shot_chart.png)\n`game_shot_chart(game_id = 401168364)`\n\n## Glossary\nPlay-by-Play files contain the following variables:\n\n* ```game_id```: ESPN game_id for the game in question.\n* ```date```: Date of game.\n* ```home```: Name of the home team.\n* ```away```: Name of the away team.\n* ```play_id```: Unique identifier of play/event in sequence of game events.\n* ```half```: Period of action in the game. 1 and 2 denote the first and second halves of play, while 3 denotes OT1, 4 denotes OT2 etc.\n* ```time_remaining_half```: Time remaining in the period as it would appear on a scoreboard.\n* ```secs_remaining```: Time remaining in regulation, in seconds.\n* ```secs_remaining_absolute```: The time remaining until the game is over, in seconds. For example a game that goes to overtime would begin with 2700 seconds remaining (2400 for regulation and 300 for overtime), and regulation would end with 300 seconds remaining.\n* ```description```: A description of the play/game event.\n* ```home_score```: Home team's score.\n* ```away_score```: Away team's score.\n* ```score_diff```: Score differential from the home team's perspective (```home_score``` - ```away_score```)\n* ```play_length```: Duration of the the given play, in seconds.\n* ```win_prob```: Win probability for the home team.\n* ```naive_win_prob```: Win probability for the home team not factoring in pre-game point spread. Useful for computation of win probability added (WPA).\n* ```home_timeout_remaining```: Number of timeouts remaining for the home team.\n* ```away_timeout_remaining```: Number of timeouts remaining for the away team.\n* ```home_favored_by```: Number of points by which the home team is favored, prior to tip-off. If Vegas point spread is available on ESPN, that is used as the default. When not available, an attempt is made to impute the pre-game point spread from derived team strengths. Imputed point spreads are not available for games prior to the 2016-17 season or when one of the teams is not in Division 1.\n* ```total_line```: Total Vegas over/under for the game, where available.\n* ```referees``` Referees for the game.\n* `arena_location`: City in which the game was played.\n* `arena`: Name of arena where game was played.\n* `capacity`: Capacity of arena where game was played.\n* `attendance`: Attendance of game, where available.\n* `wrong_time`: An attempt to label play-by-play events tagged at the wrong time. These are filtered out of all graphical and statistical helper functions, but may still be useful for certain analyses where time of event is of less importance.\n\nIf `extra_parse = TRUE` in `get_pbp_game`, the following variables are also included.\n\n* `shot_x`: The half-court x coordinate of shot. \n* `shot_y`: The half-court y coordinate of shot. (0,0) represents the bottom left corner and (50, 47) represents the top right corner (from persepective of standing under hoop).\n* `shot_team`: Name of team taking shot.\n* `shot_outcome`: Whether the shot was `made` or `missed`.\n* `shooter`: Name of player taking shot.\n* `assist`: Name of player asssisting shot (assisted shots only)\n* `three_pt`: Logical, if shot is 3-point field goal attempt.\n* `free_throw`: Logical, if shot is free throw attempt.\n\n---\nStand-alone shot location data frames contain the following variables.\n\n* `team_name`: Name of shooting team.\n* `shot_text`: Description of shot.\n* `color`: Color hexcode used to render shot chart graphic on ESPN.\n* `date`: Date of game\n* `outcome`: Whether the shot was made or missed\n* `shooter`: Player attempting the shot\n* `assister`: Playing assisting the shot\n* `three_pt`: Logical, whether the shot is a 3-point attempt\n* `x`: x-coordinate of shot location\n* `y`: y-coordinate of shot location\n\nThe court is 50 feet by 94 feet, with (0,0) always being placed in the bottom left corner of the shot chart. Any full-court shot chart rendered using `game_shot_chart()` preserves ESPN shot locations as they are found online, while halfcourt charts using `team_shot_chart()` convert all shot locations to to a 50 feet by 47 feet halfcourt. The perspective on the halfcourt shot charts is as if one is standing under the hoop, looking toward the opposition hoop. (0,0) again represents the bottom left corner and (50, 47) represents the top right corner. \n"
 },
 {
  "repo": "RobRomijnders/RNN_basketball",
  "language": "Python",
  "readme_contents": "# LSTM with MDN for basketball trajectories\n\nThis is the code repository for our paper, [Applying Deep Learning to Basketball Trajectories](http://www.large-scale-sports-analytics.org/Large-Scale-Sports-Analytics/Submissions_files/paperID07.pdf). We also have written a short interactive [summary of the paper](http://tinyurl.com/traj-rnn) or find the full paper on [arXiv](https://arxiv.org/abs/1608.03793).  \n\nThis repo contains the data and tensorflow models we used in the paper. To run this code, it is necessary to have installed:  \n- Tensorflow > 0.8\n- Numpy\n- Sklearn\n\n## To create a model\n* Unpack the seq_all.csv.tar.gz\n* Run __main.py__ (This python script was designed to be run within an IDE, but will function as a standalone script.)\n    * Within main.py there are a number of configuration settings that can be modified. These include settings for the model architecture, sequence length, distance to the basket, and performance measures. There is also an option to turn plotting on and see output at different model stages.\n\n## The files\n* main.py is the main file\n* dataloader.py contains a class to load the data\n    * util_*.py are two files with utility functions\n\n\n\n"
 },
 {
  "repo": "andrewgiessel/basketballcrawler",
  "language": "Jupyter Notebook",
  "readme_contents": "basketballcrawler\n==================\n\n[![Join the chat at https://gitter.im/andrewgiessel/basketballcrawler](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/andrewgiessel/basketballcrawler?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nThis is a python module to scrape [basketball-reference.com](http://www.basketball-reference.com/) and convert various\nstats into usable data structures for analysis.\n\n[Here](example_notebook.ipynb) is a link to a\nsample IPython Notebook file demonstrating the library.\n\n\nRequirements\n------------\n\n- [Beautiful Soup](http://www.crummy.com/software/BeautifulSoup/bs4/doc/#) >= 4.0\n- [pandas](http://pandas.pydata.org/) >= 0.11\n- [request](http://docs.python-requests.org/en/master/) >= 2.0\n\n\nUsage\n-----\n\nStill developing the API.  Right now you can get a list of all player overview urls, generate a list of game log urls for\na given player, and convert that list into pandas dataframe.\n\n\nNotes\n-----\n\n`players.json` was generated on 02/11/2016 by `buildPlayerDictionary()` and `savePlayerDictionary()`.\nI'd recommend building your own, fresh copy. It takes about 10 minutes to scrape from the site.\nTo create the most recent `players.json`, you can use as follows.\n\n```python\nimport basketballCrawler as bc\nplayers = bc.buildPlayerDictionary()\nbc.savePlayerDictionary(players, '/path/to/file')\n```\n\nYou can also download generated `players.json`. However, note that it's a pretty large (13M) file.\n\n```python\nplayers = bc.loadPlayerDictionary('/path/to/players.json')\n```\n\nIn order to search player name, use `searchForName` function, for example,\n\n```python\nsearched_player = bc.searchForName(players, 'Murphey') # players is player dictionary\n```\n\n\nTODO\n----\n- Local Database construction.\n- League-wide statistics.\n"
 },
 {
  "repo": "simonefrancia/SpaceJam",
  "language": null,
  "readme_contents": "# SpaceJam: a Dataset for Basketball Action Recognition\n\nYou can contribute with 50 cents for Dataset.\n[Paypal](https://www.paypal.me/franciasimone)\n\n[Demo Video](https://www.youtube.com/watch?v=PEziTgHx4cA)\n\n\n\n<p align=\"center\">\n    <img src=\".github/clip.png?raw=true\" width=\"700\">\n</p>\n\nThis repo contains two datasets (clips->.mp4 files and joints -> .npy files) of basketball single-player actions. In Figure below, a histogram of the number of examples is shown for every class. The size of the two final annotated datasets is about 32'560 examples, which can represent the basis for the subsequent training and testing phases for a classification of basket-like actions through Deep Neural Networks.\n\n\n\nYou can download the entire Dataset (both joints and clips) from [here](https://drive.google.com/open?id=1hLpbLmLFK2-GIvsmpJelGlEx94yQM2Ts).\nInside ```dataset.zip``` you can find the annotations of all examples and labels annotations, both in JSON format. \n\nThesis is available at this [link](https://www.researchgate.net/publication/330534530_Classificazione_di_Azioni_Cestistiche_mediante_Tecniche_di_Deep_Learning/stats). [Soon available also in English]\n\n\n<p align=\"center\">\n    <img src=\".github/histogram.png?raw=true\" width=\"700\">\n</p>\n\n\nEach example of the first dataset (called clip Dataset) consists of 16frame in RGB focused on one player, while each of the second (called joint Dataset) consists of the coordinates (x, y) on the image plane of the player's joints. The identifier of \"parallel\" examples will be the same, while what identifies them is the extension of the files on which they are stored; each clip is compressed into a mp4 file (namefile.mp4), while the joints are stored as sufile vectors numpy (namefile.npy).\n\n\n"
 },
 {
  "repo": "danchyy/Basketball_Analytics",
  "language": "Jupyter Notebook",
  "readme_contents": "# Basketball Analytics\n\nThis repository and scripts in it will be focusing on the statistics revolving around NBA and basketball in general.\n\nAll code is written in Python using the Jupyter Notebooks which allow live preview of the images and thus making it nice and easy to analyze and visualize data.\n\nCurrent mini \"projects\":\n\n## 2021-22 Season\n\n* Simple plot which checks if there is correlation between box outs and DRB%: [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2021_22_season/box_outs_drb_pct.ipynb)\n\n* Shotchart [notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2021_22_season/shotcharts.ipynb) with one new plot type - change of shot frequency in each zone\n\n* Finding which players get more of real assists, and which get more fake assists: [notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2021_22_season/real_fake_assists.ipynb) - also uses pbp data\n\n* [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2021_22_season/assist_combos.ipynb) which finds assist combos (in this case, alley oop partners), it uses data retrieved through [Play-by-Play downloader](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2021_22_season/pbp_downloader.ipynb)\n\n\n## 2020-21 Season\n\n### Playoffs\n\n* Some other stuff can be find in this [FOLDER](https://github.com/danchyy/Basketball_Analytics/tree/master/Scripts/2020_21_season/playoffs)\n\n* AVERAGE PASSES PER SERIES: [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/playoffs/passing_stats.ipynb)\n\n### Regular Season\n\n* LONG DISTANCE ANALYSIS + AVERAGE DISTANCE ARC: Analysis of long distance shooters ([Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/long_distance_shooters.ipynb)) and average [3pt arc](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/three_pt_distance_new.ipynb)\n\n* CALCULATING RIM DETERRENEC AND BLOCK EFFICIENCY: How to calculate Rim deterrence from play-by-play data + block efficiency(recovery): [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/block_efficiency_rim_deterrence.ipynb)\n\n* GOBERT ANALYSIS: Big analysis on Gobert's dominance on defense: [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/gobert_jazz.ipynb)\n\n* ASSIST CHART: Simple assist chare with share of total shots in that area: [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/assist_chart.ipynb)\n\n* DENVER NUGGETS' ANALYSIS: Various charts regarding Denver Nuggets: [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/denver_nuggets.ipynb)\n\n* BIGGEST RA SHARE OF SHOTS: Table which shows Zion's dominant numbers: [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/RA_distribution.ipynb)\n\n* CLUTCH ANALYSIS: Various tables and \"face scatters\" for clutch data: [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/best_in_clutch.ipynb)\n\n* HUSTLE landscape: Simple scatter for hustle data: [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/hustle.ipynb) \n\n* ALL SHOTS BY KOBE: Every shot generated into a gif per season level: [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/kobe_all.ipynb)\n\n* PACE/TS/FT per seasons: BBRef scraper plus line charts for [TS%, Pace, FGA per game per seasons](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/pace_per_seasons.ipynb) and for [FTAs per game per season](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/free_throws_seasons.ipynb)\n\n* TEAM EFFICIENCY LANDSCAPE: Goldsberry-like plot with Net rating landscape: [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/efficiency_landscape_teams.ipynb)\n\n* GAME LENGTH ANALYZER: [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/game_length.ipynb) -> checking out what part of the game lengthens the game\n\n* PLAYER's FACE IMAGE DOWNLOADER: Simple script which downloads all active players' images (based on nba_api package): [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/get_player_imgs.ipynb)\n\n* STINT FINDER: Notebook which [finds the stint for player - when and how long he's on court](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/pbp_analysis/eff.ipynb)\n\n* PLAY-BY-PLAY DOWNLOADER AND (partial) PARSER: Notebook which [downloads play-by-play data](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/pbp_analysis/stint_finder.ipynb) and finds when player is on/off court\n\n* [Biggest difference in opponent's wide open triples vs all teams and vs target teams](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/opp_wide_shot_outlier.ipynb) - full post available at my [website](https://www.bballytics.co/en/2021/01/09/unlucky-start.html)\n\n* [Best offensive rebounders](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/off_rebounding.ipynb)\n\n* [LOLLIPOP CHART showing the most improved players](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/most_improved_players.ipynb)\n\n* [HIstorical results on Christmas games](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/christmas_results.ipynb)\n\n* [Couple of charts analyzing the (d)evolution of Blake Griffin](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/blake_griffin_downfall.ipynb)\n\n* [3 Point chase for all-time record](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/3_point_chase.ipynb)\n\n### Preseason\n\n* [Preseason analysis of Atlanta Hawks](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/offseason_moves/atlanta_hawks.ipynb)\n\n* [Preseason analysis of Philadelphia 76ers](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/offseason_moves/philly.ipynb)\n\n* [Preseason analysis of Portland Blazers](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2020_21_season/offseason_moves/portland.ipynb)\n\n## 2019-20 Season\n\n### Playoffs \n\n* [Lakers - Nuggets Radar chart](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/playoff_analysis/lal_den.ipynb), [Boston - Miami Radar Chart](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/playoff_analysis/bos_mia.ipynb), and there are others as well. Basically a \"breakdown\" of their offenses through radar chart, which is a nice way to display numerical values across multiple categories. \n\n* [Biggest change in unassisted Field Goals](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/playoff_analysis/biggest_change_in_unassisted_assisted.ipynb) This shows how the amount of Unassisted field goal makes changed from regular season to first and 2nd round (will update this with conference finals when finished). \n\n* [Westbrook's adaptation to Rockets](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/playoff_analysis/westbrook_mini_analysis.ipynb) -> Not really connected to playoffs, but it shows how Russ didn't play as other Rockets' players, but ran his own game...\n\n------\n\n* [Analysis of Anthony Davis' defensive performance in 2019-20](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/anthony_davis_role.ipynb)\n\n* [Analysis of After timeout plays](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/after_timeout_analysis.ipynb)\n\n* [Analysis of Boston Duo of the Future](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/boston_duo.ipynb)\n\n* [The PJ Tucker Paradox](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/tucker_paradox.ipynb), where his average distance of 3pt shot is shorter than three on top of the key.\n\n* [Waffle Chart for James Harden's shot selections](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/waffle/james_harden.ipynb)\n\n* [Defensive Specialists, part 3. Robert Covington](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/defensive%20specialists/covington_houston.ipynb)\n\n* [Defensive Specialists, part 2. Brook Lopez](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/defensive%20specialists/brook_lopez_analysis.ipynb)\n\n* [Defensive Specialists, part 1. Rudy Gobert](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/defensive%20specialists/gobert_analysis.ipynb)\n\n* [Evolution of NBA through shot charts](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/evolution_of_nba.ipynb)\n\n* [Coby White analysis](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/coby_white.ipynb)\n\n* [Duncan Robinson analysis](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/duncan_robinson.ipynb)\n\n* [Assist chart by Bam Adebayo](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/assist_charts/bam_assist_chart.ipynb)\n\n* [Analysis of Trae's long distance shooting](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/three_pt_distance.ipynb)\n\n* [Best januaries](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/januaries.ipynb)\n\n* [Analysis of offense durations](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/offense%20attack%20duration.ipynb)\n\n* [Look at Stockton's records](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/stockton_analysis.ipynb)\n\n* [Analysis of Domantas Sabonis' season](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/sabonis_shotchart.ipynb)\n\n* [Kyrie Irving Shot chart for 2010s](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/kyrie_shotcharts_2010s.ipynb)\n\n* [Bojan Bodanovic Shot Chart](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/bojan_shotchart.ipynb)\n\n* [Shots and assist by Doncic vs Pelicans](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/doncic_shots_asists_first_trip_double.ipynb)\n\n* Mid-Range heavy [Shot chart by DeMar Derozan](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2019_20_season/derozan.ipynb)\n\n## 2018-19 Season\n\n* [Evolution of Brook Lopez](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2018_19_season/brook_lopez_evolution/brook_lopez.ipynb), a look at change of Lopez' shot charts through the seasons\n\n* [Predicting MVP](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2018_19_season/mvp_predictions/Predicting%20MVP.ipynb) for 2018-19 nba season. \n\n* Here is [notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2018_19_season/clutch_players/ClutchStats.ipynb) which shows players that excel in the clutch.\n\n* Big Luka Don\u010di\u0107 analysis, [notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2018_19_season/doncic_analysis/doncic_analysis.ipynb)\n\n* James Harden analysis, [notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/2018_19_season/harden_analysis/harden_analysis.ipynb)\n\n## 2017-18 Season\n\n* Assists distribution between each NBA team for 2016/2017 season\n\t* [Crawler](https://github.com/danchyy/ML-and-DS/blob/master/Scripts/assist_distribution_between_team/assistCrawler.ipynb) which cleans table of assists inside team from basketball-reference site\n\n\t* [Notebook](https://github.com/danchyy/ML-and-DS/blob/master/Scripts/assist_distribution_between_team/visualize_assists.ipynb) to visualize assists distribution using heatmaps\n\n* Visualization of best 3 point shooters on very tight, tight, open and wide open defense\n\t* [Notebook](https://github.com/danchyy/ML-and-DS/blob/master/Scripts/closest_defenders_shot_chart/closest_defenders_percentage.ipynb)  to compare shooters based on closest defender\n\n* Shotcharts from past 2017 Eurobasket comparing Bogdanovics and displaying Markkanen's shooting ability\n\t* Bojan vs Bogdan comparison on [shot charts](https://github.com/danchyy/ML-and-DS/blob/master/Scripts/eurobasket_shotcharts/Bogdanovic_vs_Bogdanovic.ipynb)\n\n\t* Lauri Markkanen's amazing first round [shot chart](https://github.com/danchyy/ML-and-DS/blob/master/Scripts/eurobasket_shotcharts/Lauri_Markkanen_shotchart.ipynb)\n\n* Comparison of clutch vs regular time shooting for top 20 NBA scorers in 2016/2017 season\n\t* [Notebook](https://github.com/danchyy/ML-and-DS/blob/master/Scripts/nba_clutch_stats/Nba%20clutch%20time%20and%20regular%20time%20shooting%20comparison.ipynb)  for FG%, FT%, TS% comparison in regular vs clutch time\n\n* Various stats analysis using Kaggle's [dataset](https://www.kaggle.com/drgilermo/nba-players-stats) with NBA stats from 1950 season\n\t* [Notebook](https://github.com/danchyy/ML-and-DS/blob/master/Scripts/nba_players_stats/Nba_players.ipynb) which runs through some regular and advanced stats from last season as well as from previous seasons\n\n\t* [Images](https://github.com/danchyy/ML-and-DS/tree/master/Scripts/nba_players_stats/images) which are results of previous notebook\n\t\n* Swarmplot of rookie stats for their first regular game in 2017-18 nba season, as well as comparison of Ben Simmons' and Markelle Fultz' debut with other first round picks\n\n\t* [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/young_players_40_point_breaktrough/comparison_of_young_players_season.ipynb) which takes at look at previously described tasks.\n\t\n* Inspired by Aaron Gordon's first 40 point game, I took a look at how other young players his age, or younger, improved during their first 40 point game (only the ones which aren't rookies)\n\n\t* [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/young_players_40_point_breaktrough/comparison_of_young_players_season.ipynb) Which visualizes players improvement in points per game during the season in which they scored 40 points or more.\n\t\n* A look at Russell Westbrook's 2016-17 season in which he won MVP award and averaged triple double.\n\n\t* [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/westbrook_2016_17/visualization_Westbrook_triple_double_chase.ipynb) with some charts displaying Westbrook's averages through season.\n\t\n* Radar plots which describe player's style.\n\n\t* [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/radar_plot/Radar_plot.ipynb) with radar plots showing for Russell Westbrook and Kyrie Irving to view how they adapted to newly added teammates (Westbrook) and new team (for Kyrie).\n\t\n\t* [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/radar_plot/Stephen_Curry.ipynb) which shows how Stephen Curry changed his scoring coming from 2015-16 MVP season to 2016-17 season and addition of Kevin Durant.\n\t\n* Analysis of Players of the week/month in the NBA\n\n\t* [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/players_of_the_week/week_2/oladipo_cousins_week2.ipynb) for week two.\n\t\n* James Harden's chase for three point heights\n\t* [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/three_point_race/Harden_comparison.ipynb) where I show the pace of James Harden's three point shooting.\n\t\n* Stephen Curry's chase for three point record\n\t* [Notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/three_point_race/curry_record.ipynb) where Stephen Curry's progress in total three pointers made through career games in comparison with other top shooters\n\n* Free throw improvement for some centers\n\t* Here is [notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/free_throw_comp/free_throw_centers.ipynb) where improvements for some of the players like Clint Capela and Andre Drummond can be seen in comparison to last season\n\t\n* Most improved three point shooters\n\t* I analyzed which were the most improved three point shooters up to this point in season in this [notebook](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/three_point_improvement/three_point_improvement.ipynb)\n\t\n* Fourth quarter scoring thus far\n\t* LeBron James has by far the most points thus far in current season, that can be seen [here](https://github.com/danchyy/Basketball_Analytics/blob/master/Scripts/fourth_quarter_ot_scoring/best_scorers_late.ipynb)\n\t\n"
 },
 {
  "repo": "alexnoob/BasketBall-GM-Rosters",
  "language": null,
  "readme_contents": "BasketBall-GM-Rosters\n=====================\n\nJSON Rosters for Basketball GM\n\nSee you on https://www.reddit.com/r/BasketballGM\n"
 },
 {
  "repo": "jbkuczma/NBAreact",
  "language": "JavaScript",
  "readme_contents": "<p align=\"center\">\n  <img src=\"https://github.com/jbkuczma/NBAreact/blob/master/media/swish_app.png\">\n</p>\n\n![](https://github.com/jbkuczma/NBAreact/blob/master/media/swish_github.png)\n\n<p align=\"center\">\n  <a href=\"\">\n     <img src=\"https://img.shields.io/badge/%F0%9F%8F%80-This%20Is%20Why%20We%20Play-blue.svg?&style=flat-square\" alt=\"This Is Why We Play\">\n  </a>\n  <a href=\"https://github.com/jbkuczma/NBAreact/issues\">\n    <img src=\"https://img.shields.io/github/issues/jbkuczma/NBAreact.svg?style=flat-square\" alt=\"GitHub issues\">\n  </a>\n</p>\n<p align=\"center\">\n  <a href=\"https://itunes.apple.com/us/app/swish-basketball-stats/id1361567861\">\n    <img alt=\"Download on the App Store\" title=\"App Store\" src=\"http://i.imgur.com/0n2zqHD.png\" width=\"200\">\n  </a>\n</p>\n\n# Swish\nAn iOS and Android NBA app created with React Native. If you would like to request a feature, find a bug, have a question, or would like to leave feedback, open an [issue](https://github.com/jbkuczma/NBAreact/issues)! \u2b50\ufe0f this repo to show support!\n\n## Download\n- iOS - Download [here](https://itunes.apple.com/us/app/swish-basketball-stats/id1361567861)!\n- Android - Coming soon!\n\n## Features\n- Scores and stats for in-progress and completed games\n- Detailed play by play\n- Full team stats for a season\n- Full player stats for a season and over their career\n- Detailed player game stat graphs\n- Conference rankings\n- League leaders\n- Videos and highlights (coming soon)\n- Compare two players (coming soon)\n\n## Libraries Used\n[React Native](https://github.com/facebook/react-native)\n\n[React Navigation](https://reactnavigation.org/)\n\n[Redux](https://redux.js.org/)\n\n[Redux Thunk](https://github.com/gaearon/redux-thunk)\n\n[React-Native-SVG-Charts](https://github.com/JesperLekland/react-native-svg-charts)\n\n[React-Native-Modal-Dropdown](https://github.com/sohobloo/react-native-modal-dropdown)\n\n[nba.js](https://github.com/kshvmdn/nba.js) (custom and modified implementation to work with React Native)\n\n## Resources Used\n[Set Splash Screen iOS](https://medium.com/the-react-native-log/change-default-launch-screen-in-react-native-ios-app-544f94f1e947)\n\n[Test your React Native App on your iPhone](https://medium.com/react-native-development/deploying-a-react-native-app-for-ios-pt-1-a79dfd15acb8)\n\n[How to Submit to the App Store](https://clearbridgemobile.com/how-to-submit-an-app-to-the-app-store/)\n\n# Getting Started\n\n  - Fork (optional) and clone repo\n\n        git clone https://github.com/jbkuczma/NBAreact.git && cd NBAreact\n\n  - Install and link dependencies\n\n        npm install\n\n        npm link\n\n  - Run\n\n        npm run start:ios\n\n        npm run start:iphoneX\n\n        npm run start:android (an emulator must be running first)\n"
 },
 {
  "repo": "FranGoitia/basketball_reference",
  "language": "Python",
  "readme_contents": "# Basketball Reference Crawler\n\nTo crawl a full season you need to use match_generator script. \n```\n  python match_generator.py --league nba --seasons 2003-2004\n  python match_generator.py --league nba --seasons 2003-to-2015 (will crawl every season from 2003 to 2015)\n  python match_generator.py --league ncaa --seasons 2006-2007 2007-2008\n```  \n\nIndividual matches are represented as a json in which every information from basketball-reference is scraped, including essential information for safely identifying players\n"
 },
 {
  "repo": "rajshah4/NBA_SportVu",
  "language": "HTML",
  "readme_contents": "### NBA_SportVu\nCode for exploring the NBA SportVu motion data, more information at my [blog](http://projects.rajivshah.com/blog/2016/04/02/sportvu_analysis/). You can download the games from this [repo](https://github.com/rajshah4/BasketballData).\n\n_functions.R - Various functions that I have written.  The functions include *sportvu_convert_json* for importing motion data from a json to a data frame.  Other functions can extract distances players have traveled and create a matrix of player to player distances.\n \nEDA_NBA_SportVu.Rmd - A markup document showing basic EDA on the movement data. [Online](http://projects.rajivshah.com/sportvu/EDA_NBA_SportVu.html).\n\nPBP_NBA_SportVu.Rmd - A markup document showing how to merge play by play data with the SportVu movement data. [Online]( http://projects.rajivshah.com/sportvu/PBP_NBA_SportVu.html).\n\nChull_NBA_SportVu.Rmd - A markup document for measuring player spacing using convex hulls with the SportVu movement data. [Online](http://projects.rajivshah.com/sportvu/Chull_NBA_SportVu.html).\n\nVelocity_NBA_SportVu.RMd - A markup document for measuring player velocity, acceleration, and jerk using the NBA SportVu movement data. [Online](http://projects.rajivshah.com/sportvu/Velocity_NBA_SportVu.html).\n\nTraj_NBA_SportVu.Rmd - A markup document sharing a few different ways to analyzing player and ball trajectories. [Online]( http://projects.rajivshah.com/sportvu/Traj_NBA_SportVu.html).\n"
 },
 {
  "repo": "gmf05/nba",
  "language": "Jupyter Notebook",
  "readme_contents": "# Scripts to scrape and analyze basketball data.\n\nScripts scrape NBA.com, Sports Illustrated, etc. and analyze the resulting data.\n\nNewest data collection scripts pull JSON (using the requests module) via the NBA API. For instance, this block of Python code saves data for the first game of the 2014-15 regular season:\n\n    import bb_tools as bb\n    gameid = '0021400001'\n    bb.write_game_json(gameid) # save to disk (not necessary, but faster)\n    box = bb.get_boxscore(gameid) # read from disk -- or web if not saved \n    pbp = bb.get_pbp(gameid)\n    shots = bb.get_shots(gameid)\n  \nData read/write paths are set in bb_tools.py.\n\nThe NBA's Game ID, 0021400001, is a 10-digit code: XXXYYGGGGG, where XXX refers to a season prefix, YY is the season year (e.g. 14 for 2014-15), and GGGGG refers to the game number (1-1230 for a full 30-team regular season).\n\nSeason prefixes are...\n\n    001 : Pre Season\n    002 : Regular Season\n    003 : All-Star\n    004 : Post Season\n\nTo save all data for the current season, run the following from the command line:\n\n    python nbaupdate.py\n\nTo save data from previous seasons, you can pass an entire list of games. For example, the list of regular season games from 1996-97 to 2014-15 is provided in the repo.\n\n    gamelist = bb.REPOHOME + '/data/csv/games_96-14.csv'\n    bb.write_gamelist_json(gamelist)\n\n=======\n\nOlder data collection scripts parse HTML (using modules re, BeautifulSoup, etc.) into CSV and include:\n\n1. nbagames.py : Given a range of dates & season code (e.g. 00214 = 2014-15 regular season), formulates a text list of all NBA games in the range. [REPLACED BY savegames.py]\n\n2. nbascores.py : Given a list of games, queries NBA.com and writes box score data for each one. Also can query vegasinsider.com to get moneyline odds for each game. [REPLACED BY savejson.py]\n\n3. nbaplays.py : Given a list of games, queries NBA.com and writes play-by-play data for each one. [REPLACED BY savejson.py]\n\n4. nbastats.py : Given a list of play-by-play data, convert certain events (shots attempted/made, fouls, turnovers) into point process data (i.e. list of binary outcomes over time [0 0 0 0 1 ...]) [REPLACED BY parse_possession.py]\n\n=======\n\nAnalysis scripts apply machine learning techniques to the resulting data in Python, Matlab, and R. Some simple examples are shown in IPython Notebooks.\n"
 },
 {
  "repo": "FranGoitia/basketball-analytics",
  "language": "Python",
  "readme_contents": ""
 },
 {
  "repo": "alexmonti19/dagnet",
  "language": "Python",
  "readme_contents": "# DAG-Net: Double Attentive Graph Neural Network for Trajectory Forecasting\nThis repository contains the PyTorch code for [ICPR 2020](https://www.micc.unifi.it/icpr2020/) paper:\n\n**<a href=\"https://arxiv.org/abs/2005.12661v2\">DAG-Net: Double Attentive Graph Neural Network for Trajectory Forecasting</a>**  \n*<a href=\"https://github.com/alexmonti19\">Alessio Monti</a>,\n<a href=\"https://aimagelab.ing.unimore.it/imagelab/person.asp?idpersona=110\">Alessia Bertugli</a>,\n<a href=\"https://aimagelab.ing.unimore.it/imagelab/person.asp?idpersona=38\">Simone Calderara</a>,\n<a href=\"https://aimagelab.ing.unimore.it/imagelab/person.asp?idpersona=1\">Rita Cucchiara</a>*  \n\n## Model architecture\nThe model is composed by three main components: the generative model (VRNN) and two graph neural networks.\n\n![dagnet - overview](icpr.png)\n \nThe first graph network operates on agents' goals, expressed as specific areas of the environment where agents \nwill land in the future. The second second graph network operates instead on single agents' hidden states, \nwhich contain past motion behavioural information. The employing of two separate graph neural networks allows to consider \nand share both past and future information while generating agents' future movements.\n\n\n## Prerequisites\n\n* Python >= 3.8\n* PyTorch >= 1.5\n* CUDA 10.0\n\n### Installation\n\n* Clone this repo:\n```\ngit clone https://github.com/alexmonti19/dagnet.git\ncd dagnet\n```\n\n* Create a new virtual environment using Conda or virtualenv. \n```\nconda create --name <envname>\n```\n* Activate the environment and install the requirements:\n```\nconda activate <envname>\npip install -r requirements.txt\n```\n\n\n## Datasets\nOur proposal is general enough to be applied in different scenarios: the model achieves state-of-the-art results in both\nurban environments (*Stanford Drone Dataset*) and sports applications (*STATS SportVU NBA Dataset*).   \n\nFor complete information on where to download and how to preprocess the datasets see the relative \n[datasets/README.md](./datasets/README.md).\n\n## Architectures\nThe repo contains both the final model and the two ablation architectures cited in the paper.\n- *VRNN*: the baseline generative architecture\n- *A-VRNN*: enhanced version of the baseline with a single graph (on agents' hidden states)\n- *DAG-Net*: the complete architecture with two graphs\n\nFor more information on how to train the models see the relative [models/README.md](./models/README.md).\n\n## Pre-trained models\nWe also ship the checkpoints to reproduce the results presented in the paper. \n\n<table>\n    <tbody>\n        <tr>\n            <th>\n            <th align=\"center\" colspan=2 style=\"text-align:center\">Offense BSK</th>\n            <th align=\"center\" colspan=2 style=\"text-align:center\">Defense BSK</th>\n            <th align=\"center\" colspan=2 style=\"text-align:center\">Stanford Drone</th>\n        </tr>\n        <tr>\n            <td align=\"center\"></td>\n            <td align=\"center\" style=\"text-align:center; font-weight:bold\">ADE</td>\n            <td align=\"center\" style=\"text-align:center; font-weight:bold\">FDE</td>\n            <td align=\"center\" style=\"text-align:center; font-weight:bold\">ADE</td>\n            <td align=\"center\" style=\"text-align:center; font-weight:bold\">FDE</td>\n            <td align=\"center\" style=\"text-align:center; font-weight:bold\">ADE</td>\n            <td align=\"center\" style=\"text-align:center; font-weight:bold\">FDE</td>\n        </tr>\n        <tr>\n            <td>VRNN</td>\n            <td style=\"text-align:center\">9,41</td>\n            <td style=\"text-align:center\">15,56</td>\n            <td style=\"text-align:center\">7,16</td>\n            <td style=\"text-align:center\">10,50</td>\n            <td style=\"text-align:center\">0,58</td>\n            <td style=\"text-align:center\">1,17</td>\n        </tr>\n        <tr>\n            <td>A-VRNN</td>\n            <td style=\"text-align:center\">9,48</td>\n            <td style=\"text-align:center\">15,52</td>\n            <td style=\"text-align:center\">7,05</td>\n            <td style=\"text-align:center\">10,34</td>\n            <td style=\"text-align:center\">0,56</td>\n            <td style=\"text-align:center\">1,14</td>\n        </tr>\n        <tr>\n            <td>DAG-Net</td>\n            <td style=\"text-align:center\"><em>8,98</em></td>\n            <td style=\"text-align:center\"><em>14,08</em></td>\n            <td style=\"text-align:center\"><em>6,87</em></td>\n            <td style=\"text-align:center\"><em>9,76</em></td>\n            <td style=\"text-align:center\"><em>0,53</em></td>\n            <td style=\"text-align:center\"><em>1,04</em></td>\n        </tr>\n    </tbody>\n</table>\n\nFor more information on how to test the models and produce the above results, see the relative \n[models/README.md](./models/README.md).\n\n## Cite\nIf you have any questions, please contact [alessio.monti@unimore.it](mailto:alessio.monti@unimore.it) or \n[alessia.bertugli@unimore.it](mailto:alessia.bertugli@unimore.it), or open an issue on this repo. \n\nIf you find this repository useful for your research, please cite the following paper:\n```bibtex\n@proceedings{monti2020dagnet,\n    title={DAG-Net: Double Attentive Graph Neural Network for Trajectory Forecasting},\n    author={Alessio Monti and Alessia Bertugli and Simone Calderara and Rita Cucchiara},\n    booktitle = {25th International Conference on Pattern Recognition (ICPR)},\n    year={2020}\n}\n```\n"
 },
 {
  "repo": "historicalsource/nba-jam",
  "language": "Assembly",
  "readme_contents": "# nba-jam\n"
 },
 {
  "repo": "browlm13/Basketball-Shot-Detection",
  "language": "Python",
  "readme_contents": "# Shot Detection\n\n## AI Basketball Shot Detection and Analysis\nThis program is able to detect when a shot occurs and fill in the balls flight from captured data. It calculates the balls initial velocity and launch angle. It is able to estimate the balls flight perpedicular to the camera plane (The z axis) using a single camera. The program is also able to detect when the balls flight is interupted by another object and will drop those data points.\n\n## Tracking and analysis performed on \n* unstable video\n\n![Unstable Video](shot_1.gif)\n#### Program output world coordinates:\n![world coordinates](shot_1_trajectory_extrapolation_points_v1.png)\n\n#### Tracking and analysis performed on \n* shot interrupted by person\n\n![Shot with missing datapoints](shot_2.gif)\n#### Program output world coordinates:\n![world coordinates](shot_2_trajectory_extrapolation_points_v1.png)\n\n### Tracking and analysis performed on \n* shot interrupted by object\n* shot angled with component perpendicular to the camera plane\n\n![Hits net piecewise linear regression](shot_16.gif)\n#### Program output world coordinates:\n![world coordinates](shot_16_trajectory_extrapolation_points_v1.png)\n\n\n\n## Formats for representing video frame object bounding boxes detected\n\n### Object Line Format (OL) CSV file\n#### Each object's bounding box in a video recoreded on an individual line\n\n| clip_ID | width | height | frame | category | score | x1 | x2 | y1 | y2 | model |\n|---------|:-----:|:------:|:-----:|:--------:|:-----:|:--:|:--:|:--:|:--:|:-----:|\n| int\t  | int   | int    | int   | string   |float  |int |int |int |int |string |\n\n### Mock 1 Frame Line Format (FLM1) CSV file\n#### Each frame is represented on an individual line capturing only the highest score bounding box of each category detected\n* All frames are represented exactly once\n* Designed for videos containing at maximum a single _basketball_ and a single _person_\n* Nan values are used with the absence of a detected  _basketball_ or _person_ in a frame\n\n| clip_ID | width | height | frame | x1_basketball | x2_basketball | y1_basketball | y2_basketball | x1_person | x2_person | y1_person | y2_person | \n|---------|:-----:|:------:|:-----:|:-------------:|:-------------:|:-------------:|:-------------:|:---------:|:---------:|:----------:|:-----:|\n\n### Mock 1 Basketball Tracking Format (BTM1) CSV file\n#### Each line is an individual frame and contains the centerpoint coordinates of the highest scoring basketball detected as well as the radius and \"free\" column\n* All frames are represented exactly once\n* The free column is True if the highest scoring basketballs bounding box has no overlap with the highest scoring persons bounding box\n* The radius is ``((x2 - x1) + (y2 - y1))/2``\n* Nan values are used with the absence of a detected  _basketball_\n\n| clip_ID | width | height | frame | x | y | radius | free |\n|---------|:-----:|:------:|:-----:|:-:|:-:|:------:|:----:|\n| int\t  | int   | int    | int   |int|int| float  | bool |\n\n### LabelImg Annotation Format (LI) XML file\n#### [link to LabelImg](https://github.com/tzutalin/labelImg)\n#### Each image has a corresponding LI.xml file containing all objects detected\n* This is used to verify the accuracy of the models detections\n* Multiple objects are possible for each image\n```\n <annotation>\n            <folder></folder>\n            <filename></filename>\n            <path></path>\n            <source>\n                <database></database>\n            </source>\n            <size>\n                <width></width>\n                <height></height>\n                <depth></depth>\n            </size>\n            <segmented></segmented>\n            <object>\n                <name></name>\n                <pose></pose>\n                <truncated></truncated>\n                <difficult></difficult>\n                <bndbox>\n                    <xmin></xmin>\n                    <ymin></ymin>\n                    <xmax></xmax>\n                    <ymax></ymax>\n                </bndbox>\n            </object>\n        </annotation>\n```\n\n### Converting between Object Line Format (OL) and LabelImg Annotation Format (LI)\n\n| OL | LI |\n|:--:|:--:|\n|clip_ID|folder|\n|frame|**file**|\n|width|width|\n|height|height|\n|category|name|\n|**score**| |\n|x1|xmin|\n|x2|xmax|\n|y1|ymin|\n|y2|ymax|\n|**model**| |\n\n* frame in this repository is the **file** name minus its extension\n* **score** is ``100.0`` if annotated by a human\n* **model** is \"human\" if annotated by a human\n\n### Clip Info Bundel Format (CIB) JSON file\n#### output of image_evaluator\n```\n{\n\t\"PATH/TO/FRAME/IMAGE\" : \n\n\t{\n\n\t\t\"image_path\" \t\t: \"PATH/TO/FRAME/IMAGE\",\n\t\t\"image_folder\" \t\t: \"IMAGE_FOLDER\"\n\t\t\"image_filename\" \t: \"IMAGE_FILENAME\",\n\t\t\"image_height\" \t\t: HEIGHT_IN_PIXELS (int),\n\t\t\"image_width\" \t\t: WIDTH_IN_PIXELS (int),\n\t\t\"image_items_list\" : \n\n\t\t\t[\n\t\t\t\t\"category\" : \"NAME\",\n\t\t\t\t\"score\" : ACCURACY_SCORE (float),\n\t\t\t\t\"box\" : [x1,x2,y1,y2] (ints),\n\t\t\t\t\"model\" : \"EVALUATION_MODEL\"\n\t\t\t]\n\t}\n}\n```\n\n## Data Directory Structure\n```\ndata\n\u2502\n\u2514\u2500\u2500\u2500clips\n\u2502   |\n\u2502   | CLIP_ID1.mp4\n|   | CLIP_ID2.mp4\n\u2502   | ...\n|\n\u2514\u2500\u2500\u2500verified_li_annotations\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500\u2500CLIP_ID1\n|   |   \u2502\n|   |   \u2514\u2500\u2500\u2500frames\n|   |   |   | 1.jpg\n|   |   |   | 2.jpg\n|   |   |   | ...\n|   |   |\n|   |   \u2514\u2500\u2500\u2500li_annotations\n|   |   |   | 1.xml\n|   |   |   | 2.xml\n|   |   |   | ...\n|   |   \n\u2502   \u2514\u2500\u2500\u2500CLIP_ID2\n\u2502   ...\n\u2502   \n\u2514\u2500\u2500\u2500ol_annotations\n    \u2502   ol_annotations.csv\n```\n"
 },
 {
  "repo": "andrewstellman/pbprdf",
  "language": "HTML",
  "readme_contents": "# pbprdf\nGenerate RDF for NBA or WNBA basketball play-by-play data by reading a folder full of ESPN-style play-by-play HTML pages (eg. [Pacers vs. Cavaliers, April 15, 2018](http://tv5.espn.com/nba/playbyplay?gameId=401029417) or [Mystics vs. Sun, June 5, 2015](http://scores.espn.go.com/wnba/playbyplay?gameId=400610636)), processing each play in each game file, and generating a Turtle file that contains all of the plays from each game.\n\nHere's an article by that explains gives some more detail about the project: *[NBA analytics and RDF graphs: Game, data, and metadata evolution, and Occam's razor](https://www.zdnet.com/article/nba-analytics-and-rdf-graphs-game-data-and-metadata-evolution-and-occams-razor/)*\n\nHere's an example of an analysis that you can do with pbprdf: *[Analysis: 3-point shot percentage after other team makes or misses](https://gist.github.com/andrewstellman/4872dbb9dc7593e56abddbe8b998b509)*\n\n## Running pbprdf\n\nTo run pbprdf, download the latest release from the Releases page: https://github.com/andrewstellman/pbprdf/releases and make sure Java 8 or later is in your path.\n\nThe release distribution contains an archive with the following files:\n* `pbprdf.jar` - the binary\n* `pbprdf` - Mac/Unix shell script to run pbprdf\n* `pbprdf.bat` - Windows batch file to run pbprdf\n* shell scripts to fetch WNBA or NBA play-by-play files\n\n### Example: Analyze a set of games\n\nStep 1: Download a set of play-by-play HTML files\n```\n$ ./fetch-wnba-play-by-plays.sh\n```\n\nThis will create a folder called `data/retrieved_*` (with a timestamp at the end of the folder name) with subdirectories for various seasons and playoffs. Move the folder for a season or playoff into the current folder (in this example, the folder with the 2014 playoffs):\n\n```\n$ mv data/retrieved_*/wnba-2018-playoffs .\n```\n\nStep 2: Run pbprdf and generate the Turtle file for the 2014 WNBA playoffs\n```\n$ ./pbprdf wnba-2018-playoffs/ wnba-2018-playoffs.ttl\n```\n\nStep 3: Import the Turtle file into RDF4J Server\n*(see instructions at the bottom for spinning up an RDF4J server, loading data into it, and connecting to it with the RDF4J console)\n```\n$ console -s http://localhost:8080/rdf4j-server pbprdf-database\nType 'help' for help.\npbprdf-database> load wnba-2014-playoffs.ttl into http://stellman-greene.com/pbprdf/wnba-2014-playoffs\nLoading data...\nData has been added to the repository (20410 ms)\n```\n\nIf your file is large, you can use zip or gzip to compress it. Make sure it has the extension `.ttl.zip`:\n\n```\n$ ./fetch-nba-play-by-plays.sh\n$ ./pbprdf data/nba-2017-2018-season/ nba-2017-2018-season.ttl\n$ zip nba-2017-2018-season.ttl.zip nba-2017-2018-season.ttl\n$ console -s http://localhost:8080/rdf4j-server pbprdf-database\nType 'help' for help.\npbprdf-database> load nba-2017-2018-season.ttl.zip into http://stellman-greene.com/pbprdf/nba-2017-2018\nLoading data...\nData has been added to the repository (427100 ms)\n```\n\n__See 'Setting up RDF4J Server' below for details on setting up RDF4J server__\n\nStep 4: Run SPARQL queries\n```\npbprdf-database> SPARQL\nenter multi-line SPARQL query (terminate with line containing single '.')\nBASE <http://stellman-greene.com/>\nSELECT ?teamName (COUNT(*) AS ?foulsDrawn) WHERE { \n  ?fouledPlayer pbprdf:foulDrawnBy ?player .\n  ?roster pbprdf:hasPlayer ?player .\n  ?roster rdfs:label ?teamName .\n}\nGROUP BY ?teamName\nORDER BY ?foulsDrawn\n.\nEvaluating SPARQL query...\n+-------------------------------------+-------------------------------------+\n| teamName                            | foulsDrawn                          |\n+-------------------------------------+-------------------------------------+\n| \"Sparks\"                            | \"10136\"^^<http://www.w3.org/2001/XMLSchema#integer>|\n| \"Sun\"                               | \"12101\"^^<http://www.w3.org/2001/XMLSchema#integer>|\n| \"Mystics\"                           | \"12882\"^^<http://www.w3.org/2001/XMLSchema#integer>|\n| \"Lynx\"                              | \"13129\"^^<http://www.w3.org/2001/XMLSchema#integer>|\n| \"Storm\"                             | \"13452\"^^<http://www.w3.org/2001/XMLSchema#integer>|\n| \"Dream\"                             | \"13457\"^^<http://www.w3.org/2001/XMLSchema#integer>|\n| \"Stars\"                             | \"13932\"^^<http://www.w3.org/2001/XMLSchema#integer>|\n| \"Liberty\"                           | \"13954\"^^<http://www.w3.org/2001/XMLSchema#integer>|\n| \"Mercury\"                           | \"13992\"^^<http://www.w3.org/2001/XMLSchema#integer>|\n| \"Fever\"                             | \"13997\"^^<http://www.w3.org/2001/XMLSchema#integer>|\n| \"Shock\"                             | \"14329\"^^<http://www.w3.org/2001/XMLSchema#integer>|\n| \"Sky\"                               | \"14909\"^^<http://www.w3.org/2001/XMLSchema#integer>|\n+-------------------------------------+-------------------------------------+\n12 result(s) (1033 ms)\n```\n\nNOTE: You may need to add `BASE` and `PREFIX` lines to the top of your query:\n```\nBASE <http://stellman-greene.com/>\nPREFIX pbprdf: <#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n```\n\n\n### Example: Load the ontology into RDF4J Server\n\nStep 1: Generate the ontology\n```\n$ ./pbprdf --ontology ontology.ttl\n```\n\nStep 2: Load the ontology into its own context\n```\npbprdf-database> load ontology.ttl into http://stellman-greene.com/pbprdf/ontology\nLoading data...\nData has been added to the repository (18 ms)\n```\n\nStep 3: Execute a query that retrieves only the data in the ontology\n```\npbprdf-database> SPARQL\nenter multi-line SPARQL query (terminate with line containing single '.')\nSELECT *\nFROM NAMED <http://stellman-greene.com/pbprdf/ontology>\nWHERE {\n  GRAPH ?graph {\n    ?class a owl:Class\n  }\n}\n.\nEvaluating SPARQL query...\n+-------------------------------------+-------------------------------------+\n| graph                               | class                               |\n+-------------------------------------+-------------------------------------+\n| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:Block                        |\n| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:Event                        |\n| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:Play                         |\n| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:Shot                         |\n| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:Ejection                     |\n| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:EndOfGame                    |\n| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:EndOfPeriod                  |\n| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:Enters                       |\n| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:FiveSecondViolation          |\n| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:Foul                         |\n| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:Game                         |\n| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:JumpBall                     |\n| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:Player                       |\n| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:Rebound                      |\n| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:Roster                       |\n| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:Team                         |\n| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:TechnicalFoul                |\n| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:Timeout                      |\n| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:Turnover                     |\n| <http://stellman-greene.com/pbprdf/ontology>| pbprdf:playerEjected                |\n+-------------------------------------+-------------------------------------+\n20 result(s) (60 ms)\n```\n\n## Other Useful Queries\n\n### Clutch Shots\n\n```\nSELECT ?playerName ?shotsTaken ?shotsMade ?shotPercentage\nWHERE \n{ \n  ?player a pbprdf:Player .\n  ?player rdfs:label ?playerName .\n  \n  # Find the number of shots taken\n  {\n    SELECT ?player (COUNT(?shot) AS ?shotsTaken)\n    WHERE \n    {\n      ?shot a pbprdf:Shot .\n      ?shot pbprdf:shotBy ?player .\n      ?shot pbprdf:secondsLeftInPeriod ?secondsLeftInPeriod .\n      FILTER (?secondsLeftInPeriod < 5)\n    }\n    GROUP BY ?player \n  }\n\n  # Find the number of shots made\n  {\n    SELECT ?player (COUNT(?shot) AS ?shotsMade)\n    WHERE \n    {\n      ?shot a pbprdf:Shot .\n      ?shot pbprdf:shotBy ?player .\n      ?shot pbprdf:shotMade \"true\"^^xsd:boolean .\n      ?shot pbprdf:secondsLeftInPeriod ?secondsLeftInPeriod .\n      FILTER (?secondsLeftInPeriod < 5)\n    }\n    GROUP BY ?player \n  }\n  \n  # Calculate the shot percentage\n  BIND ( (round((?shotsMade / ?shotsTaken) * 10000)) / 100 AS ?shotPercentage ) .\n  \n  # Only match players who took more than 10 shots just before the end of the period\n  FILTER (?shotsTaken >= 15) .\n}\nORDER BY DESC(?shotPercentage)\n```\n\n### Shots made and missed at Target Center in the first five minutes\n\n```\nSELECT ?game ?gameTime ?shotsTaken ?shotsMade ?shotsMadePercentage ?shotsMissed ?shotsMissedPercentage\nWHERE \n{ \n  ?game a pbprdf:Game .\n  ?game pbprdf:gameTime ?gameTime .\n  ?game pbprdf:gameLocation \"Target Center, Minneapolis, MN\" .\n\n  # Find the number of shots made per game\n  {\n    SELECT ?game (COUNT(?madeShot) AS ?shotsMade) {\n      ?madeShot a pbprdf:Shot .\n      ?madeShot pbprdf:inGame ?game .\n      ?madeShot pbprdf:shotMade ?made .\n      ?madeShot pbprdf:shotMade \"true\"^^xsd:boolean .\n      ?madeShot pbprdf:secondsIntoGame ?secondsIntoGame .\n      FILTER (?secondsIntoGame < 300)\n    }\n    GROUP BY ?game\n  }\n  \n  # Find the number of shots missed per game\n  {\n    SELECT ?game (COUNT(?missedShot) AS ?shotsMissed) {\n      ?missedShot a pbprdf:Shot .\n      ?missedShot pbprdf:inGame ?game .\n      ?missedShot pbprdf:shotMade ?made .\n      ?missedShot pbprdf:shotMade \"false\"^^xsd:boolean .\n      ?missedShot pbprdf:secondsIntoGame ?secondsIntoGame .\n      FILTER (?secondsIntoGame < 300)\n    }\n    GROUP BY ?game\n  }\n  \n  BIND ((?shotsMade + ?shotsMissed) AS ?shotsTaken) .\n  BIND ( (round((?shotsMade / ?shotsTaken) * 10000)) / 100 AS ?shotsMadePercentage ) .\n  BIND ( (round((?shotsMissed / ?shotsTaken) * 10000)) / 100 AS ?shotsMissedPercentage ) .\n}\nLIMIT 100\n```\n\n## Setting up RDF4J Server\n\nOne effective way to execute SPARQL queries against these files is to use [RDF4J Server, Workbench, and Console](http://docs.rdf4j.org/server-workbench-console/). RDF4J Server and its GUI, RDF Workbench, are both web applications that run in an application server like Tomcat.\n\n__Step 1: [Download RDF4J](http://rdf4j.org/download/)__\n\nDownload and extract the latest RDF4J SDK. It will contain a `bin` folder with the `console` binary, and a `war` folder with the `rdf4j-server.war` and `rdf4j-workbench.war` web applications.\n\n__Step 2: [Install Apache Tomcat](https://tomcat.apache.org/tomcat-7.0-doc/appdev/installation.html)__\n\nThis usually just involves downloading and extracting the Tomcat binaries, editing libexec/conf/tomcat-users.xml to add a user with `tomcat` and `manager-gui` permissions, and executing `catalina run` to start the server.\n\n__Step 3: Open the Apache Tomcat App Manager (http://localhost:8080/manager/html) and deploy the web applications__\n\nUse the app manager GUI to deploy the `rdf4j-server.war` and `rdf4j-workbench.war` web applications to your Tomcat installations.\n\n__Step 4: Use the RDF4J console to create a database__\n\nCreate a Native database with `spoc`,`sopc`,`opsc`,`ospc`,`posc`, and `psoc` indexes. This will take disk space for the indexes, but will make your queries run much faster.\n\n```\n$ cd eclipse-rdf4j-2.3.2/bin/\n$ ./console.sh -s http://localhost:8080/rdf4j-server \nConnected to http://localhost:8080/rdf4j-server\nRDF4J Console 2.3.2+496af9c\n\n2.3.2+496af9c\nType 'help' for help.\n> create native-rdfs\nPlease specify values for the following variables:\nRepository ID [native]: pbprdf-database\nRepository title [Native store with RDF Schema inferencing]: PBPRDF Database\nQuery Iteration Cache size [10000]: \nTriple indexes [spoc,posc]: spoc,sopc,opsc,ospc,posc,psoc\nEvaluationStrategyFactory [org.eclipse.rdf4j.query.algebra.evaluation.impl.StrictEvaluationStrategyFactory]: \nRepository created\n> open pbprdf-database\nOpened repository 'pbprdf-database'\npbprdf-database> \n```\n\n__Step 5: Import your Turtle file__\nYou can use the instructions above to import your `*.ttl` or `*.ttl.zip` files into your newly created database. You can either use the RDF4J console or RDF4J workbench GUI to execute SPARQL queries.\n\n\n## Building pbprdf\n\n__Prerequisite: [sbt](http://www.scala-sbt.org/) 1.x and Java 8 or later must be in your path__\n* [Installing SBT](https://www.scala-sbt.org/1.x/docs/Setup.html)\n* [Install sbt 1.x on Mac](https://www.scala-sbt.org/1.x/docs/Installing-sbt-on-Mac.html)\n* [Install sbt 1.x on Unix](https://www.scala-sbt.org/1.x/docs/Installing-sbt-on-Linux.html)\n* [Install sbt 1.x on Windows](https://www.scala-sbt.org/1.x/docs/Installing-sbt-on-Windows.html)\n\nMac or Unix: \n```\n$ git clone https://github.com/andrewstellman/pbprdf.git\n$ cd pbprdf\n$ sbt assembly\n$ ./pbprdf\n```\n\nWindows:\n```\nC:\\Users\\Public\\src>git clone https://github.com/andrewstellman/pbprdf.git\nC:\\Users\\Public\\src>cd pbprdf\nC:\\Users\\Public\\src\\pbprdf>sbt assembly\nC:\\Users\\Public\\src\\pbprdf>pbprdf\n```\n\n*(The above commands use [sbt-assembly](https://github.com/sbt/sbt-assembly) to create a fat JAR.)*\n\n### Other useful build commands\n\nCompile the code and run the unit tests:\n```\n$ sbt compile test\n```\n\nGenerate Eclipse project files (via [sbteclipse](https://github.com/sbt/sbteclipse):\n```\n$ sbt eclipse\n```\n\nGenerate sample Turtle from the unit test data and print it to the console\n\nusing the script:\n```\n$ ./pbprdf src/test/resources/com/stellmangreene/pbprdf/test/htmldata/\n```\n\nvia SBT:\n```\n$ sbt \"run src/test/resources/com/stellmangreene/pbprdf/test/htmldata/\"\n```\n"
 },
 {
  "repo": "adeshpande3/March-Madness-2017",
  "language": "Jupyter Notebook",
  "readme_contents": "# March-Madness-2017\nKaggle Competition for Predicting NCAA Basketball Tourney Games. [Link](https://adeshpande3.github.io/adeshpande3.github.io/Applying-Machine-Learning-to-March-Madness) to the associated blog post I wrote. \n\n* **March Madness 2017.ipynb** - File with all the main data anaylsis and machine learning models. \n* **Machine Learning and Data Analysis.ipynb** - More for experimental models and a couple more data visualizations. \n* **Predictions for 2017 Bracket.ipynb** - Shows you how to create the prediction CSV file in a format that is suitable for Kaggle. \n* **Applying Deep Learning.ipynb** - Tried deep learning models (TLDR: They didn't really work)\n\n[Round 2 (March Madness 2018)](https://github.com/adeshpande3/March-Madness-2018)\n"
 },
 {
  "repo": "octonion/basketball",
  "language": "PLpgSQL",
  "readme_contents": "The shell script \"demo.sh\" loads scraped data alias tables\nbetween the two data sets (NCAA and Basketball Reference)\nfor schools and players. It then runs sample R code that does\na simple stepwise regression to detect some NCAA features\nthat impact NBA playing time 1 year out from the draft.\n\nYou won't be able to run these without installing PostgreSQL,\nR etc., but I've included two text files showing the results. The\nfirst is \"script_output.txt\" which shows the output of the \"demo.sh\"\nscript (including the total time take - about 12 seconds).\n\nThe file \"feature_selection.txt\" shows the results of the stepwise\nregression.\n\nThis is the final model - no surprise, the pick number dominates\nin a non-linear way. Also settled on were height, position, games,\nassists per game and steals per game. I did not examine any\ninteraction terms, nor did I look at other measures of NBA value,\nbut these are straightforward given the database (up to the\nlimitations of my scraped data, of course).\n\nI haven't adjusted college performance for NCAA strength of\nschedule yet.\n"
 },
 {
  "repo": "skekre98/NBA-Search",
  "language": "Python",
  "readme_contents": "# NBA-Search\n\nThis is an NBA Analytics website with multiple components such as a chatbot, blogs, and predictions. All the data for the site is being scraped from [Basketball Reference](https://www.basketball-reference.com). This project is made possible by the hard working members of the open source community!\n\n## System Design\n![System Design](static/img/design.png)\n\n## Building locally\n\n1. Clone the repository locally:\n   ```\n   git clone https://github.com/skekre98/NBA-Search.git\n   ```\n\n2. Run the following command to set up all necessary dependencies:\n   ```\n   ./setup.sh\n   ```\n   - you will likely need to give the setup script permission to execute\n\n3. Run the following command to deploy the web app on your localhost:\n   ```\n   python main.py run\n   ```\n<p align=\"center\">\n     <img src=\"/static/img/site.png\">\n</p>\n\n4. Run the following command to run the unit tests:\n   ```\n   python main.py test\n   ```\n   You can also add you own unit tests in *test.py*\n\n## Contributing\n\nThere is a lot to do so contributions are really appreciated! This is a great project for early stage developers to work with.\n\nTo begin it is recommended to start with issues labelled as [good first issue](https://github.com/skekre98/NBA-Search/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22).\n\n\nHow to get started:\n\n1. Fork the NBA-Search repo.\n2. Create a new branch in you current repo from the 'master' branch with issue label.\n3. 'Check out' the code with Git or [GitHub Desktop](https://desktop.github.com/)\n4. Check [contributing.md](CONTRIBUTING.md)\n5. Push commits and create a Pull Request (PR) to NBA-Search\n\n## Dependencies\n* [Flask](https://flask.palletsprojects.com/en/1.1.x/) - The framework used to build the web app.\n* [Beautiful Soup](https://www.crummy.com/software/BeautifulSoup/bs4/doc/) - The HTML parser used for web scraping.\n* [Sklearn](https://scikit-learn.org/stable/) - The machine learning library used to implement information retrieval.\n* [Pandas](https://pandas.pydata.org/docs/) - The python library used for data manipulation.\n"
 },
 {
  "repo": "chonyy/basketball-shot-detection",
  "language": "Python",
  "readme_contents": "This is the pure source python version (without Flask) of the main project [AI Basketball Analysis](https://github.com/chonyy/AI-basketball-analysis)\n\n## Judging Basketball Shots\n* **Orange:** Detected hoop\n* **Blue:** Detected basketball \n* **Purple:** Undetermined shot\n* **Red:** Miss\n* **Green:** Shot went in\n<p align=center>\n    <img src=\"img/judging.gif\" width=\"858\" height=\"483.34\">\n</p>\n\n## Detected Basketball and Hoop\n<p align=center>\n    <img src=\"img/demo.gif\" width=\"717.552\" height=\"432.432\">\n</p>\n\n## Basketball Trajectory Fit to Curve\n<p align=center>\n    <img src=\"img/trajectory.png\">\n</p>\n\n## Connected Basketball Detection Points\n<p align=center>\n    <img src=\"img/trajectory_raw.png\">\n</p>\n"
 },
 {
  "repo": "virajsanghvi/d3.basketball-shot-chart",
  "language": "HTML",
  "readme_contents": "# d3.basketball-shot-chart\n\nThis visualization aims to become a generic means of generating charts on a basketball court. Currently it only supports hexbin shot charts, with lots of flexibility, but is alpha quality and will be refactored to support other binning mechanisms and other mark types on top of a basketball court.\n\nCurrently customizable:\n\n- Court dimensions/lines\n- Binning definition\n- Hexagon size range and color range\n- Integrating different shot chart datasets\n- Titles and labels\n\n## Setup\n\n- Include ```d3.js```\n- Include ```hexbin.js``` [d3.hexbin](https://github.com/virajsanghvi/d3-plugins/tree/master/hexbin) - NOTE: this is a fork\n- Include ```d3.chart.js``` - [d3.chart](http://misoproject.com/d3-chart/)\n- Include ```d3.chart.defaults.js``` [d3.chart.defaults](https://github.com/virajsanghvi/d3.chart.defaults)\n- Include ```d3.basketball-shot-chart.js```\n- Include ```d3.basketball-shot-chart.css``` (or include the sass file)\n\n## Examples\n\nThis library is currently used to generate the shot charts at [tothemean](http://tothemean.com/tools/shot-charts), and there's a [blog post that walks through using this chart](FIXME).\n\nIf you clone the repo, you'll also find a simple example in the ```example``` directory.\n\n## To use:\n\nGenerally, you likely have some shot chart data that's an array of data points representing shots, including the x, y position on the court, and whether the shot was made: \n\n```\n  var data = [{\"x\":2,\"y\":9,\"made\":1},{\"x\":2,\"y\":8,\"made\":1},...];\n```\n\nYou can continue with this, or you can also self aggregate to reduce the size/complexity of the data, and capture number of makes and attempts at a location:\n\n```\n  var data = [{\"x\":2,\"y\":9,\"made\":3,\"attempts\":3},{\"x\":2,\"y\":8,\"made\":0,\"attempts\":4},...];\n```\n\nNOTE: Even in this scheme, a point for the same location can be repeated, as all points will be aggregated as part of the binning process (which is how we handle the first simple case).\n\nOnce we have our data, we can quickly chart it:\n\n```javascript\n  var chart = d3.select(el)\n    .append(\"svg\")\n    .chart(\"BasketballShotChart\")\n      .draw(data); \n```\n\nBy default, the shot chart visualization recognizes the data structure above, but that can easily be configured with the options below. Also, by default, the heat chart is based on a range of shooting 0% to 100%. Most shot charts you've probably seen compare to the average, and its up to you to calculate that, but you can use the options below to update the range of values for the heatMap, and to make the hexagon colors or radiuses based on any value from your data you want.\n\n# Options\n\nYou can pass any of these options when creating a new chart. You can change them through public setters, but the shot chart won't autoimically pick them up - yet.\n\nThese are all defined in the code, and I recommend looking there for more information on how they're actually utilized.\n\n- basketDiameter: basketball hoop diameter (ft) (default: 1.5) \n- basketProtrusionLength: distance from baseline to backboard (ft) (default: 4)\n- basketWidth: backboard width (ft) (default: 6)\n- colorLegendTitle: title of hexagon color legend (default: 'Efficiency')\n- colorLegendStartLabel: label for starting of hexagon color range (default: '< avg')\n- colorLegendEndLabel: label for ending of hexagon color range (default: '> avg')\n- courtLength: full length of basketball court (ft) (default: 94)  \n- courtWidth: full width of basketball court (ft) (default: 50)\n- freeThrowLineLength: distance from baseline to free throw line (ft) (default: 19)\n- freeThrowCircleRadius: radius of free throw line circle (ft) (default: 6)\n- heatScale: d3 scale for hexagon colors (default: d3 quantize scale if [0, 1] domain and colors from Goldsberry's shot charts)\n- height: height of svg, specifying won't change scale of chart (default: undefined)\n- hexagonBin: method of aggregating points into a bin (e.g. function (point, bin) {...}) (default: bins by aggregating makes and attempts from points) \n- hexagonBinVisibleThreshold: how many points does a bin need to be visualized (default: 1)\n- hexagonFillValue: method to determine value to be used with specified heatScale (e.g. function (bin) {...}) (default: returns bin.made/bin.attempts)\n- hexagonRadius: bin size with regards to courth width/height (ft) (default: .75)\n- hexagonRadiusSizes: discrete hexagon size values that radius value is mapped to, intentionally hides low frequency points (default: [0, .4, .6, .75])\n- hexagonRadiusThreshold: how many points in a bin to consider it while building radius scale (default: 2)\n- hexagonRadiusValue: method to determine radius value to be used in radius scale (e.g. function (bin) {...}) (default: returns bin.attempts)\n- keyMarkWidth: width of key marks (dashes on side of the paint) (ft) (default: .5)\n- keyWidth: width the key (paint) (ft) (default: 16)\n- restrictedCircleRadius: radius of restricted circle (ft) (default: 4)\n- sizeLegendTitle: title of hexagon size legend (default: 'Frequency')\n- sizeLegendSmallLabel: label of start of hexagon size legend (default: 'low')\n- sizeLegendLargeLabel: label of end of hexagon size legend (default: 'high')\n- threePointCutoffLength: distance from baseline where three point line because circular (ft) (default: 14)\n- threePointRadius: distance of three point line from basket (ft) (default: 23.75)\n- threePointSideRadius: distance of corner three point line from basket (ft) (default: 22)\n- title: title of chart (default: 'Shot chart')\n- translateX: method to determine x position of a bin on the court (default: x value)\n- translateY: method to determine y position of a bin on the court (default: flips y axis to opposite side of court)\n- width: width of svg (default: 500)\n"
 },
 {
  "repo": "OwlTing/AI_basketball_games_video_editor",
  "language": "Python",
  "readme_contents": "# AI Basketball Games Video Editor\n\n![](https://img.shields.io/static/v1?label=python&message=3.6&color=blue)\n![](https://img.shields.io/static/v1?label=pytorch&message=1.3&color=<COLOR>)\n![](https://img.shields.io/static/v1?label=tensorrt&message=7.0.0&color=%3CCOLOR%3E)\n[![](https://img.shields.io/static/v1?label=license&message=Apache2&color=green)](./License.txt)\n\nAI Basketball Games Video Editor is a command-line program to get basketball highlight video by PyTorch YOLOv4 object  detection.\nAnalyze basketball and basketball hoop locations collected from  object detection.\nIt can get shot frame index and cut video frame to merge highlight video.\n\n```\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 video_editor.py                   demo to get basketball highlight video\n\u251c\u2500\u2500 pytorch_YOLOv4                    pytorch-YOLOv4 source code\n\u2502\u00a0  \u251c\u2500\u2500 weights                       need to download weights\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 tool\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 utils_basketball.py           detect basketball shots algorithm\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 utils.py                  \n\u251c\u2500\u2500 dataset\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 your_video_name.mp4\n\u251c\u2500\u2500 result\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 obj_log_name.data             save frame information and object detect result\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 your_output_video_name.mp4   \n```\n<p float=\"left\">\n  <img src=\"https://github.com/OwlTing/AI_basketball_games_video_editor/blob/master/pic/introduction.gif\" width=\"267\" height=\"225\"/>\n  <img src=\"https://github.com/OwlTing/AI_basketball_games_video_editor/blob/master/pic/introduction.jpg\" width=\"267\" height=\"225\"/>\n  <img src=\"https://github.com/OwlTing/AI_basketball_games_video_editor/blob/master/pic/gif_highlight.gif\" width=\"267\" height=\"225\"/>\n</p>\n\n# 0. Environments\n\n## 0.1 Get a copy\n```sh\ngit clone https://github.com/OwlTing/AI_basketball_games_video_editor.git\n```\n\n## 0.2 Create virtual environments\n```sh\nconda create --name py36_env python=3.6\nconda activate py36_env\ncd AI_basketball_games_video_editor\n```\n\n## 0.3 Requirements\nDebian 10  \npython 3.6  \nnumpy  \npandas  \ntqdm  \ncv2  \npytorch 1.3.0  \nPlease refer to the official documentation for installing pytorch https://pytorch.org/get-started/locally/  \nMore details for different cuda version https://pytorch.org/get-started/previous-versions/  \nExample:  \nconda install pytorch==1.3.0 torchvision==0.4.1 cudatoolkit=10.0 -c pytorch  \n\nOptional (For tensorrt yolov4 object detector engine):  \ntensorrt 7.0.0  \nPlease refer to the official documentation for installing tensorrt with different cuda version  \nhttps://docs.nvidia.com/deeplearning/tensorrt/install-guide/index.html  \nExample: (For Debian 10 cuda 10.0)  \n1. mkdir tensorrt  \n2. From https://developer.nvidia.com/tensorrt, to download \n   `TensorRT-7.0.0.11.Ubuntu-18.04.x86_64-gnu.cuda-10.0.cudnn7.6.tar.gz`  \n   (select TensorRT 7.0) in the directory `tensorrt/`  \n3. tar xzvf `TensorRT-7.0.0.11.Ubuntu-18.04.x86_64-gnu.cuda-10.0.cudnn7.6.tar.gz`  \n4. export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/<path_your_tensorrt>/TensorRT-7.0.0.11/lib  \n5. cd TensorRT-7.0.0.11/python/  \n6. pip install `tensorrt-7.0.0.11-cp36-none-linux_x86_64.whl`   \n7. \n```\nsudo cp /<path_your_tensorrt>/TensorRT-7.0.0.11/lib/libnvinfer.so.7 /usr/lib/ ;  \nsudo cp /<path_your_tensorrt>/TensorRT-7.0.0.11/lib/libnvonnxparser.so.7 /usr/lib/ ;  \nsudo cp /<path_your_tensorrt>/TensorRT-7.0.0.11/lib/libnvparsers.so.7 /usr/lib/ ;  \nsudo cp /<path_your_tensorrt>/TensorRT-7.0.0.11/lib/libnvinfer_plugin.so.7 /usr/lib/ ;  \nsudo cp /<path_your_tensorrt>/TensorRT-7.0.0.11/lib/libmyelin.so.1 /usr/lib/  \n```    \n8. pip install pycuda  \n\n# 1. Weights Download\n\n## 1.1 darknet2pytorch\n- google(https://drive.google.com/file/d/15waE6I1odd_cR3hKKpm1uXXE41s5q1ax)\n- `mkdir pytorch_YOLOv4/weights/`\n- download file `yolov4-basketball.weights` in the directory `pytorch_YOLOv4/weights/`\n\n## 1.2 tensorrt\n- google(https://drive.google.com/file/d/1_c8uhyi47Krs5gAbRR66zzYKaxGNnzEs)\n- `mkdir pytorch_YOLOv4/weights/`\n- download file `yolov4-basketball.trt` in the directory `pytorch_YOLOv4/weights/`\n\n\n# 2. Use AI Basketball Games Video Editor\n\n## 2.1 Prepare your basketball video\n- download your basketball video in the directory `dataset/`\n\n## 2.2 Prepare output folder\n- `mkdir result`\n\n## 2.3 Run the demo\n```sh\npython video_editor.py --video_path VIDEO_PATH --output_path OUTPUT_PATH --output_video_name OUTPUT_VIDEO_NAME [OPTIONS]\n\n# example\npython video_editor.py --video_path dataset/basketball_demo.mp4 --output_path result/demo --output_video_name out_demo.mp4\n```\n\n- It will generate `your_output_video_name.mp4 obj_log_name.data` in the directory `result/`\n\n- If you had finished extracting features. You can use `--read_flag 1` to read log for different output video mode. \n\n- If you use pytorch yolov4 object detector engine `--inference_detector pytorch`.  \n  For image input size, you can select any inference_size = (height, width) in   \n  height = 320 + 96 * n, n in {0, 1, 2, 3, ...}  \n  width = 320 + 96 * m, m in {0, 1, 2, 3, ...}  \n  Exmaple `--inference_size (1184, 1184)` or `--inference_size (704, 704)`  \n  Default inference_size is (1184, 1184)\n  \n- If you use tensorrt yolov4 object detector engine `--inference_detector tensorrt`.  \n  For image input size, you only can select `--inference_size (1184, 1184)`.  \n  Tensorrt engine 3x faster than pytorch engine fps.\n\n- You can use `--output_mode shot` to select different output video mode.\n  ```\n  output video mode  \n  full            show person basketball basketball_hoop frame_information  \n  basketball      show basketball basketball_hoop frame_information  \n  shot            show basketball shot frame_information  \n  standard        show frame_information  \n  clean           only cutting video\n  ```\n![image](https://github.com/OwlTing/AI_basketball_games_video_editor/blob/master/pic/output_mode_clean.jpg)\n![image](https://github.com/OwlTing/AI_basketball_games_video_editor/blob/master/pic/output_mode_full.jpg)\n![image](https://github.com/OwlTing/AI_basketball_games_video_editor/blob/master/pic/output_mode_basketball.jpg)\n![image](https://github.com/OwlTing/AI_basketball_games_video_editor/blob/master/pic/output_mode_shot.jpg)\n\n- You can refer the command-line options.\n  ```\n  optional arguments:\n  -h, --help                                       show this help message and exit\n  \n  --video_path VIDEO_PATH                          input video path (default: None)\n                                                   \n  --output_path OUTPUT_PATH                        output folder path (default: None)\n                                                   \n  --output_video_name OUTPUT_VIDEO_NAME            output video name (default: None)\n                                                   \n  --highlight_flag HIGHLIGHT_FLAG                  select 1 with auto-generated highlight or \n                                                   0 without auto-generated highlight (default: 1)\n                                                   \n  --output_mode OUTPUT_MODE                        output video mode \n                                                   full       show person basketball basketball_hoop frame_information \n                                                   basketball show basketball basketball_hoop frame_information \n                                                   shot       show basketball shot frame_information \n                                                   standard   show frame_information \n                                                   clean      only cutting video (default: shot)\n                                                   \n  --process_frame_init PROCESS_FRAME_INIT          start processing frame (default: 0)\n                                                   \n  --process_frame_final PROCESS_FRAME_FINAL        end processing frame. If process_frame_final < 0, \n                                                   use video final frame (default: -1)\n                                                   \n  --obj_log_name OBJ_LOG_NAME                      save frame information and obj detect result \n                                                   (default: obj_log_name.data)\n                                                   \n  --save_step SAVE_STEP                            save obj log for each frame step (default: 2000)\n                                                   \n  --weight_path WEIGHT_PATH                        Yolov4 weight path (default: pytorch_YOLOv4/weights/yolov4-basketball.weights)\n                                                   \n  --cfg_path CFG_PATH                              Yolov4 cfg path (default: pytorch_YOLOv4/cfg/yolov4-basketball.cfg)\n  \n  --num_classes NUM_CLASSES                        num classes = 3 (person/basketball/basketball_hoop) (default: 3)\n                                                   \n  --namesfile_path NAMESFILE_PATH                  Yolov4 class names path (default: pytorch_YOLOv4/data/basketball_obj.names)\n                                                   \n  --inference_detector INFERENCE_DETECTOR          object detector engine. You can select pytorch or tensorrt (default: pytorch)\n                                                   \n  --inference_size INFERENCE_SIZE                  Image input size for inference \n                                                   If you use pytorch yolov4 object detector engine \n                                                   height = 320 + 96 * n, n in {0, 1, 2, 3, ...} \n                                                   width = 320 + 96 * m, m in {0, 1, 2, 3, ...} \n                                                   inference_size= (height, width) \n                                                   \n                                                   If you use tensorrt yolov4 object detector engine Image input size for\n                                                   inference only with inference_size = (1184, 1184) (default: (1184, 1184))\n                                                   \n  --read_flag READ_FLAG                            read log mode flag If you had finished extracting features. You can use \n                                                   select 1 to read log for different output video mode. (default: 0)\n                                                                                                    \n  --cut_frame CUT_FRAME                            cut frame range around shot frame index for highlight video (default: 50)  \n  ```\n\nReference:\n- https://github.com/Tianxiaomo/pytorch-YOLOv4\n- https://github.com/eriklindernoren/PyTorch-YOLOv3\n- https://github.com/marvis/pytorch-caffe-darknet-convert\n- https://github.com/marvis/pytorch-yolo3\n\n- Paper Yolo v4: https://arxiv.org/abs/2004.10934\n- Source code Yolo v4:https://github.com/AlexeyAB/darknet\n- More details: http://pjreddie.com/darknet/yolo/\n\n```\n@article{yolov4,\n  title={YOLOv4: YOLOv4: Optimal Speed and Accuracy of Object Detection},\n  author={Alexey Bochkovskiy, Chien-Yao Wang, Hong-Yuan Mark Liao},\n  journal = {arXiv},\n  year={2020}\n}\n```\n\nContact:  \nIssues should be raised directly in the repository.  \nIf you are very interested in this project, please feel free to contact me (george_chen@owlting.com).  \n"
 },
 {
  "repo": "jflancer/bigballR",
  "language": "R",
  "readme_contents": "# bigballR\n\n###NOTE THIS DOCUMENTATION IS SLIGHTLY OUTDATED FOLLOWING THE LATEST PACKAGE UPDATE 1/13\n\n`bigballR` is an R package for working with NCAA Basketball data. This \npackage primarily revolves around the use of schedule, roster, and play-by-play data via stats.ncaa.com, and\nadditionally has features to calculate lineups, on/off results, and player game and multi-game statistics.\n\n## Installation\n\nFirst install the package `devtools` if you haven't already\n``` r\n#install.packages(\"devtools\")\ndevtools::install_github(\"jflancer/bigballR\")\n```\n\n## Functionality\n\n**Retrieving Game IDs and Other Information**\n\nManually, game ids can be found in the url when browsing games, for example:\n```4674164``` is the game id for ```https://stats.ncaa.org/game/play_by_play/4674164```\n\n- `get_date_games` data frame with game info and game ids for a given date.\n- `get_team_schedule` data frame with game info and ids for a given team.\n- `get_team_roster` data frame with player roster information for a given team. \n\n**Game Scraping Functions**\n- `scrape_game` the base function, given a game id will return a cleaned play by play file.\n- `get_play_by_play` builds off of scrape_game, allows for compiling from multiple game ids formatted in a vector.\n\n**Data Manipulation Functions**\n- `get_lineups` given play-by-play data retrieved from game scraping functions, will calculate a variety of stats for all lineups.\n- `on_off_generator` calculate on/off statistics for specified players given lineup data from get_lineups().\n- `get_player_stats` calculate a variety of player stats from play-by-play data at either a game or multi-game level.\n- `get_player_lineups` acts as an easy way to filter lineup data, specifying players to exclude/include from the lineups.\n\n**Datasets**\n- `teamids` dataset includes stats.ncaa team name, team conference, season, and team id for 17-18 and 18-19 seasons\n\n### Use\n\nThere are many different progressions and ways to use this package. As an example, here are some natural steps you could take.\n``` r\n# Get team schedule\n# Note: if you don't know the proper team.name (case sensitive), you can look it up in data(\"teamids\")\nschedule <- get_team_schedule(season = \"2018-19\", team.name = \"Duke\")\n# Get play by play for all games played so far in season\nplay_by_play <- get_play_by_play(schedule$Game_ID)\n# Generate all lineups and stats from the play by play\nlineups <- get_lineups(play_by_play_data = play_by_play, keep.dirty = T, garbage.filter = F)\n# Look at Zion Williamson's on/off statistics with lineups that include Reddish and Barrett\nzion_comparison <- on_off_generator(\"ZION.WILLIAMSON\", lineups, Included = c(\"CAM.REDDISH\",\"RJ.BARRETT\"))\n```\n\n### `scrape_game` / `get_play_by_play`\nFunctions to retrieve play by play data. scrape_game() works for individual games while get_play_by_play can handle a vector of gameids and will aggregate into a single dataframe. Warns users of potential errors and mistakes made by the game trackers. The number of player discrepancies warning counts displays the number of events players committed when it is found they were not on the court at the time of the event. The substitution mistake warning indicates an unclean substitution was entered. (ex. 2 players enter and 1 leaves)\n* game_id | string made up of digits given to each unique game. This can be found in the play-by-play url for each game.\n* game_ids | same function as above, but can handle character vectors of any length.\n\n### `get_date_games`\nThis function returns a schedule for the given date and specified conference. Results are included if applicable, as well as the play-by-play game id\n* date | a character object containing a date in the format mm/dd/yyyy. Defaults is previous day (yesterday)\n* conference | the common name used for a conference, not sensitive to case, spacing, punctuation, etc.\n* conference.ID | alternatively, if the conference ID is known it replace the conference name variable.\n\n### `get_team_schedule`\nThis function returns a data frame of the schedule for the specified team. This will include game ids used for play-by-play scraping if the game has ended, along with the team scores and attendance. Note: currently, the season/team.name parameters can only be used for the 2016-17, 2017-18, 2018-19 seasons.\n* team.id | The unique id given to each college/team for each season. This can be found in the url of the team page.\n* season | Season following format yyy1-y2, ex \"2018=19\"\n* team.name | Alternative to using the id, you can use a team name. This follows the format found in data(ids).\n\n### `get_team_roster`\nThis function returns a data frame of the roster for the specified team. This will include player names and positions as well as jersey number, height and school year. Note: currently, the season/team.name parameters can only be used for the 2016-17, 2017-18, 2018-19 seasons.\n* This takes the same parameters and conditions as get_team_schedule() above\n\n### `get_lineups`\nThis function takes in a play-by-play dataframe, and generates all possible lineups for both teams. It then calculates a variety of statistics/metrics at a lineup level.\n* play_by_play_data | play-by-play data from the functions scrape_game() or get_play_by_play()\n* keep.dirty | logical to specify whether or not to filter out potentially inaccurrate data. When FALSE, will remove all rows from games where the number of discrepencies is above the desired count.\n* garbage.filter | logical variable to specify whether or not to filter out garbage time entries.\n* error.thresh | lets user set their preferred discrepancy threshold with the keep.dirty variable. This means when less than the threshold occurs in a game, it will be considered clean. As defined in scrape_game(), a discrepancy occurs when a player registers an event when they are not found to be on the court.\n\n### `on_off_generator`\nThis function passes in lineup data and calculates the on/off lineup statistics for all lineup combinations of players specified. This allows users to view on/off statistics for individual players, as well as combinations of multiple players. Users can also specify if they'd like specific players to be included or excluded from all lineups in use\n* Players | players desired to be compared with on/off\n* Lineup_Data | lineups collected from the get_lineups() function\n* Included These Players will be on the court for every lineup considered.\n* Excluded These players will be off the court for every lineup considered.\n\n### `get_player_lineups`\nThis function finds all lineups from a given lineup data source that include/exclude certain players. It acts as a quick way to filter lineups for players.\n* Takes same parameters as on_off_generator() with exception to the Players parameter\n\n### `get_player_stats`\nThis function calculates many player stats for either individual games or aggregate to get multi-game stats.\n* Takes all parameters described in get_lineups() function\n* multi.games | When false stats will be calculated on a game level. When true all games will be aggregated.\n"
 },
 {
  "repo": "evansloan/sports.py",
  "language": "Python",
  "readme_contents": "[![PyPI](https://img.shields.io/pypi/v/sports.py.svg)](https://pypi.python.org/pypi/sports.py/)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/sports.py.svg)](https://pypi.python.org/pypi/sports.py/)\n\n[![Build Status](https://travis-ci.org/evansloan/sports.py.svg?branch=master)](https://travis-ci.org/evansloan/sports.py)\n[![Coveralls github branch](https://img.shields.io/coveralls/github/evansloan/sports.py/master.svg)](https://coveralls.io/github/evansloan/sports.py?branch=master)\n[![License](https://img.shields.io/github/license/evansloan/sports.py.svg)](https://github.com/evansloan/sports.py/blob/master/LICENSE)\n\n\n# sports.py\nGather live up-to-date sports scores. Baseball, basketball, cricket, football, handball, hockey, rugby, soccer, tennis, and volleyball currently functional\n\nScrapes data from:\n- [scorespro.com](https://www.scorespro.com/)\n- [pro-football-reference.com](https://www.pro-football-reference.com/)\n- [baseball-reference.com](https://www.baseball-reference.com/)\n- [basketball-reference.com](https://www.basketball-reference.com/)\n- [hockey-reference.com](https://www.hockey-reference.com/)\n\n## Installation\nPython >= 3.5\n\n`pip install sports.py`\n\n## Usage\n\n```python\nimport sports\n```\n\nValid sports:\n- Baseball: `sports.BASEBALL`\n- Basketball: `sports.BASKETBALL`\n- Cricket: `sports.CRICKET`\n- Football: `sports.FOOTBALL`\n- Handball: `sports.HANDBALL`\n- Hockey: `sports.HOCKEY`\n- Rugby Union: `sports.RUGBY_U`\n- Rugby League: `sports.RUGBY_L`\n- Soccer: `sports.SOCCER`\n- Tennis: `sports.TENNIS`\n- Volleyball: `sports.VOLLEYBALL`\n\n**Get a single match**\n\n`get_match()` takes three parameters:\n\n- `sport`: Name of sport being played (see above for a list of valid sports)\n- `team1`: Name of city or team in a match (Not case-sensitive)\n- `team2`: Name of city or team in a match (Not case-sensitive)\n\n`get_match()` returns a single Match object which contains the following properties:\n- `sport`: Sport of the match\n- `league`: League of the match\n- `home_team`: Home team\n- `away_team`: Away team\n- `home_score`: Home team score\n- `away_score`: Away team score\n- `match_time`: Current match time\n- `match_date`: Date the match was played\n- `match_link`: Link to an XML file containing match data\n\n```python\nmatch = sports.get_match(sports.TENNIS, 'Murray', 'Federer')\n```\n\n**Get multiple matches**\n\n`get_sport()` takes one parameter:\n- `sport`: Name of sport (see above for list of valid sports)\n\n`get_sport()` returns a list of Match objects which contain the same properties described above\n\n```python\nmatches = sports.get_sport(sports.BASKETBALL)\n```\n\n**Get all live matches**\n\n`all_matches()` returns a dictionary of Match objects grouped by sport conatining data from all live matches.\n\n```python\nall_matches = sports.all_matches()\nbaseball = all_matches['baseball']\n```\n\n**Get extra team info**\n\n*Only works with MLB, NBA, NFL, and NHL teams*\n\nGet team information including overall record, championships won and more.\n\n`get_team()` takes two parameters:\n- `sport`: Sport of the team the find\n- `team`: Name of city or team to find (Not case-sensitive)\n\nProperties available to all valid teams/sports:\n- `name`: Name of the team\n- `seasons`: Total number of seasons played\n- `record`: Overall regular season record\n- `champs`: Number of total championships (Includes pre-merger champs for NFL)\n- `leaders`: Overall team leaders for certain statistical categories\n- `raw`: Dictionary containing all gathered info\n\nProperties available to only MLB teams:\n- `pennants`: Total number of AL/NL championships\n\nProperties available to only NFL teams:\n- `super_bowls`: Total number of Super Bowls\n\nProperties available to only NHL teams:\n- `points`: Total number of regular season points earned\n\nProperties available to both NFL/NHL teams:\n- `playoff_record`: Overall playoff record\n\nProperties available to MLB, NBA, NHL teams:\n- `playoff_app`: Total number of playoff appearances\n\n```python\npirates = sports.get_team(sports.BASEBALL, 'pirates')\nprint(pirates.pennants)\n\npenguins = sports.get_team(sports.HOCKEY, 'penguins')\nprint(penguins.points)\n\nsteelers = sports.get_team(sports.FOOTBALL, 'steelers')\nprint(steelers.super_bowls)\n\nsixers = sports.get_team(sports.BASKETBALL, '76ers')\nprint(sixers.playoff_app)\n```\n"
 },
 {
  "repo": "dtarlow/Machine-March-Madness",
  "language": "Python",
  "readme_contents": "DEPENDENCIES:\ntheano: http://deeplearning.net/software/theano/\nnumpy\nscipy\n(optional) matplotlib: http://matplotlib.sourceforge.net/\n\nNote: maccam912 reports that the link above is currently down (Feb 28, 2012) but says, \"I see you can still get it with 'easy_install Theano' or downloading it from http://pypi.python.org/pypi/Theano or the repo on github. Just a heads up. I don't use git or github often so I wasn't sure if the issues section was the place to point this out or not.\"\n\n\nDATA:\nRight now, only the aggregate data is really being used.  To check that \nyou can load the data properly, run\n\n> python march_madness_data.py\n\nthis should output the following:\nSkipped 1426 entries due to UNK\nAfter loading simple data\n2006-2007: 5125 games\n2007-2008: 5248 games\n2008-2009: 5332 games\n2009-2010: 5363 games\nAfter removing tournament games\n2006-2007: 5047 games\n2007-2008: 5161 games\n2008-2009: 5237 games\n2009-2010: 5269 games\n\nSo it loaded about 5000 games from each of 4 past seasons.  \n\nIf you'd like to dig into the full data, look for \n\ndef load_full_data(self):\n\nin march_madness_data.py.\n\n\nBRACKET:\nWe don't have data that specifically identifies which games were a part \nof the tournament, so we do it programmatically.  Most of the code is\ncalled automatically when you make a MarchMadnessData object.  To see the\nresults, you can run\n\n> python bracket.py\n\nThis should output the filled-in tournament bracket for previous seasons.\nIt should look like this:\n\n2008-2009\nnav---nav---nav---nav---nav---nav\nraa     |     |     |     |     |   \nlav---lav     |     |     |     |   \nbav           |     |     |     |   \n              |     |     |     |   \ngaj---gaj---gaj     |     |     |   \naac     |           |     |     |   \nwao---wao           |     |     |   \niae                 |     |     |   \n                    |     |     |   \noae---oae---oae---oae     |     |   \nmbq     |     |           |     |   \nmax---max     |           |     |   \ncbg           |           |     |   \n              |           |     |   \nsci---sci---sci           |     |   \nscc     |                 |     |   \naar---aar                 |     |   \ntad                       |     |   \n\n...\n\nThe three-letter code mappings to team names are in ./data/YahooTeamCodeMapping.csv.\n\n\nLEARNING:\nThere is also starter code for learning, but this is still in progress.\n\nThe simplest thing to try is to run\n\n> python learn_synthetic.py\n\nThis will run learning with the simplest model, on synthetic data.  The first run\nwill take a bit longer at startup, because theano is doing the symbolic differentiation.\n\n\nYou can then move on to\n\n> python learn_real.py\n\nThis will learn, but on the real data now.  This code is not finished, but it should be\nenough structure to get you started.\n\nIn model.py, you can see three different models, of increasing level of complexity.  You\ncan select between these in the learn_*.py scripts.\n\n\nSome TODOs for the ambitious:\n\n- Load the full data and verify it against the aggregate data.\n\n- Set up a proper validation/testing framework, so we can evaluate different methods\n  properly.  Perhaps we want to do leave-one-out cross validation.\n\n- Try different objective functions in the theano models -- what do we actually\n  want to optimize?\n\n- Think about how to better include pace of the game\n\n- Improve the optimization (maybe using momentum, LBFGS, or conjugate gradients?)"
 },
 {
  "repo": "chychen/BasketballGAN",
  "language": "Python",
  "readme_contents": "<img align=\"right\" src=\"https://drive.google.com/uc?export=view&id=1W4h1WA4Lp1c_BrTmPBPwvF1Udf7SdzLO\" width=\"200\" title=\"A Generated Play\"/>\n\n# BasketballGAN\n\n### Generate the ghosting defensive strategies given offensive sketch.\n\n![](https://drive.google.com/uc?export=view&id=1lmxvBG-PTLg4vhEF_hmG1IS20vDEyvyv)\n\n<img align=\"right\" src=\"https://drive.google.com/uc?export=view&id=1QWN9BtFgaAKA1tvx_ePQku934CeCWIRl\" width=\"500\" title=\"A Generated Play\"/><br>\n\n## [Paper](https://arxiv.org/abs/1909.07088) | [CGVLab](https://people.cs.nctu.edu.tw/~yushuen/)<br>[Video](https://youtu.be/NTir0-znPyw) | [Supplemental](https://drive.google.com/a/nvidia.com/file/d/1dXMA_1AjpPu7J4_Iw1yb6pp-9d9Lp2uN/view?usp=sharing)\n\n### BasketballGAN: Generating Basketball Play Simulation through Sketching\n\nHsin-Ying Hsieh<sup>1</sup>, Chieh-Yu Chen<sup>2</sup>, Yu-Shuen Wang<sup>1</sup> and Jung-Hong Chuang<sup>1</sup>\n\n<sup>1</sup>National Chiao Tung University, \n\n<sup>2</sup>NVIDIA Corporation\n\nAccepted paper in [ACMMM 2019](https://www.acmmm.org/2019/).\n\n## Prerequisites\n\n- OS: Linux\n- [NVIDIA Dokcer](https://github.com/NVIDIA/nvidia-docker)\n- [NVIDIA NGC Tensorflow Docker Image](https://ngc.nvidia.com/catalog/containers/nvidia:tensorflow)\n- NVIDIA GPU (V100 16GB)\n\n## Getting Stated\n\n```bash\n~$ git clone https://github.com/chychen/BasketballGAN.git\n~$ cd BasketballGAN\nBasketballGAN$ docker login nvcr.io\nBasketballGAN$ docker pull nvcr.io/nvidia/tensorflow:19.06-py2\nBasketballGAN$ docker run --runtime=nvidia -it --rm -v $PWD:$PWD --net host nvcr.io/nvidia/tensorflow:19.06-py2 bash\nroot@c63207c81408:~/BasketballGAN$ apt update\nroot@c63207c81408:~/BasketballGAN$ apt install ffmpeg\n```\n\n### Download Dataset \n\n- create 'data' folder\n- save [dataset](https://drive.google.com/file/d/12DRJBIyN20vwRyfywvCXo-nNDf0UBPjZ/view?usp=sharing) under folder 'data'\n\n```bash\nBasketballGAN$ mkdir data\n```\n\n### Training\n\n```bash\nBasketballGAN$ cd src\nBasketballGAN/src$ python Train_Triple.py --folder_path='tmp' --data_path='data'\n```\n\n### Logs/Samples/Checkpoints\n\n```bash\n- \"BasketballGAN/src/tmp/Log\": training summary for tensorboard.\n- \"BasketballGAN/src/tmp/Samples\": generated videos sampled on different epoches.\n- \"BasketballGAN/src/tmp/Checkpoints\": tensorflow checkpoints on different iterations.\n```\n\n### Monitoring\n\n- Sampled Videos\n    - Using Simple HTTP Server to monitor sampled videos while training.\n    - [Simple HTTP Server (http://127.0.0.1:8000)](http://127.0.0.1:8000/tmp/Log/Samples)\n\n```bash\nBasketballGAN/src$ python -m http.server 8000\n```\n\n- Training Logs\n    - [Tensorboard (127.0.0.1:6006)](http://127.0.0.1:6006)\n\n```bash\nBasketballGAN/src$ tensorboard --logdir='tmp/Log'\n```\n\n<img src=\"https://drive.google.com/uc?export=view&id=10NNSibWbU0oMr9ziaQeOcgft44NwBVf2\" width=\"600\" title=\"Earth Moving Distance\"/>\n\n### Public Relations\n\n- [AAAS Science News](https://www.sciencemag.org/news/2019/09/watch-ai-help-basketball-coaches-outmaneuver-opposing-team)\n- [Deeplearning.ai FB](https://www.facebook.com/deeplearningHQ/posts/1431901466962064)\n- [Deeplearning.ai The Batch](https://info.deeplearning.ai/the-batch-google-achieves-quantum-supremacy-amazon-aims-to-sway-lawmakers-ai-predicts-basketball-plays-face-detector-preserves-privacy)\n- [NVIDIA GTC 2020 Poster](https://www.nvidia.com/content/dam/en-zz/Solutions/gtc/conference-posters/gtc2020-posters/Deep_Learning_Data_Science_05_P21206_Jay_Chen_Web.pdf)\n\n## Citation\nIf you find this useful for your research, please use the following.\n\n``` \n@article{hsieh2019basketballgan,\n  title={BasketballGAN: Generating Basketball Play Simulation Through Sketching},\n  author={Hsieh, Hsin-Ying and Chen, Chieh-Yu and Wang, Yu-Shuen and Chuang, Jung-Hong},\n  journal={arXiv preprint arXiv:1909.07088},\n  year={2019}\n}\n```\n"
 },
 {
  "repo": "skakac/2d-basketball-unity3d",
  "language": "C#",
  "readme_contents": "# 2D Ball Shootout Unity3d [Source Code]\n\nIf you have any questions -> http://twitter.com/skakac\n<br /><br />\nhttps://play.google.com/store/apps/details?id=com.skakac.bshootout<br />\nBall Shootout game <br />\nSuper simple basketball game, using popular idea with some changes.<br />\nYou can try out 2 player multiplayer mode, and compete on global leaderboard.<br />\n\n<br />\nHow to play:<br />\n1. Touch the screen.<br />\n2. Drag to change predicted path.<br />\n3. Release. <br />\n4. You can always drag and release behind the basket to release without shooting the ball. <br />\n5. In options menu you can change shoot power. <br />\nFollow on twitter: http://twitter.com/skakac<br />\n\n"
 },
 {
  "repo": "VamshiIITBHU14/BasketBallARKit",
  "language": "Swift",
  "readme_contents": "# BasketBallARKit\nHello Everyone, This project talks about basics of ARKit introduced by Apple in iOS11. Please note that ARKit is only capable wih \ndevices which use A9, A10, A11 chips and the devices that use these chips are:\n\na) iPhone 6s and 6s Plus \nb) iPhone 7 and 7 Plus \nc) iPhone SE\nd) iPad Pro (9.7, 10.5 or 12.9) \u2013 both first-gen and 2nd-gen\ne) iPad (2017)\nf) iPhone 8 and 8 Plus\ng) iPhone X\n\nNow coming to the project, it shows how to build a basic BasketBall app using ARKit. Taking it step by step:\n\nPS: Please note that we have to choose Augmented Reality App as template when you create the project.\n\n1) Camera Permission:\n\nThis step involves asking for permission from user for his Camera access. This can be done by adding 'Privacy - Camera Usage Description : This application will use the camera for Augmented Reality' as key-value in pair in info.plist\n\n2) Adding the hoop:\n\nAfter you launch the app, you just see the world infront of you through phone's camera. Now you can augment a Basketball hoop by just adding the code below:\n\n```\nfunc addBackboard(){\n        guard  let backboardScene = SCNScene(named:\"art.scnassets/hoop.scn\") else{return}\n        guard let backboardNode = backboardScene.rootNode.childNode(withName: \"backboard\", recursively: false) else{return}\n        backboardNode.position = SCNVector3(x:0.0, y:0.5, z:-3)\n        \n        let physicsShape = SCNPhysicsShape(node: backboardNode, options: [SCNPhysicsShape.Option.type : SCNPhysicsShape.ShapeType.concavePolyhedron])\n        let physicsBody = SCNPhysicsBody(type: .static, shape: physicsShape)\n        backboardNode.physicsBody = physicsBody\n        \n        sceneView.scene.rootNode.addChildNode(backboardNode)\n        currentNode = backboardNode\n    }\n```\n\n<img width=\"462\" alt=\"screen shot 2017-12-11 at 1 55 52 pm\" src=\"https://user-images.githubusercontent.com/21070922/33821763-1db1e81e-de7b-11e7-8ac2-16fe006176b0.png\">\n\n\nThen we add a Tap Gesture onto the SceneView to aim the ball at the basket. \n\n```\nfunc registerTapGestureRecogniser(){\n        let tap = UITapGestureRecognizer(target: self, action: #selector(handleTap(gesture:)))\n        sceneView.addGestureRecognizer(tap)\n    }\n    \n    @objc func handleTap(gesture:UIRotationGestureRecognizer){\n        //scene view to be accessed\n        //access the center point of the sceneview\n        guard let sceneView = gesture.view as? ARSCNView else{return}\n        guard let centerPoint = sceneView.pointOfView else{return}\n        \n        let cameraTransform = centerPoint.transform\n        let cameraLocation = SCNVector3(x:cameraTransform.m41, y: cameraTransform.m42, z:cameraTransform.m43)\n        let cameraOrientation = SCNVector3(x: -cameraTransform.m31, y: -cameraTransform.m32, z: -cameraTransform.m33)\n        let cameraPosition = SCNVector3Make(cameraLocation.x + cameraOrientation.x, cameraLocation.y + cameraOrientation.y , cameraLocation.z + cameraOrientation.z)\n        \n        let ball = SCNSphere()\n        let material = SCNMaterial()\n        material.diffuse.contents = UIImage(named:\"basketballSkin.png\")\n        ball.materials = [material]\n        \n        let ballNode = SCNNode(geometry:ball)\n        ballNode.position = cameraPosition\n        \n        let physcisShape = SCNPhysicsShape(geometry: ball, options: nil)\n        let physicsBody = SCNPhysicsBody(type: .dynamic, shape: physcisShape)\n        \n        ballNode.physicsBody = physicsBody\n        let forceVector:Float = 6\n        ballNode.physicsBody?.applyForce(SCNVector3(x:cameraOrientation.x * forceVector, y:cameraOrientation.y * forceVector, z: cameraOrientation.z * forceVector), asImpulse:true)\n        \n        sceneView.scene.rootNode.addChildNode(ballNode)\n        \n    }\n```\n\n>diffuse property of SCNMaterial deals with how light is rendered on the material and contents property deals with the actual parents of the material\n    \n\n<img width=\"454\" alt=\"screen shot 2017-12-11 at 3 23 44 pm\" src=\"https://user-images.githubusercontent.com/21070922/33825353-5c0ed228-de87-11e7-85ff-6890906c38c8.png\">\n\nOptional:\n\nMoving objects in AR Space is really straight forward. Here I am posting two methods to move the hoop in XY plane in a horizontal and circuit manner:\n\n```\nfunc horizontalAction (node:SCNNode){\n        let leftAction = SCNAction.move(by: SCNVector3(x:-1, y:0, z:0), duration: 2)\n        let rightAction = SCNAction.move(to: SCNVector3(x:1, y:0, z:0), duration: 2)\n        let actionSequence = SCNAction.sequence([leftAction , rightAction])\n        node.runAction(SCNAction.repeat(actionSequence, count: 2))\n    }\n ```\n \n ```\n func roundAction(node:SCNNode){\n        let upright = SCNAction.move(by: SCNVector3(x:1, y:1, z:0), duration: 2)\n        let downright = SCNAction.move(to: SCNVector3(x:1, y:-1, z:0), duration: 2)\n        let downLeft = SCNAction.move(by: SCNVector3(x:-1, y:-1, z:0), duration: 2)\n        let upLeft = SCNAction.move(to: SCNVector3(x:-1, y:1, z:0), duration: 2)\n        let actionSequence = SCNAction.sequence([upright , downright , downLeft , upLeft])\n        node.runAction(SCNAction.repeat(actionSequence, count: 2))\n    }\n ```\n\n"
 },
 {
  "repo": "AdaRoseCannon/basketball-demo",
  "language": "HTML",
  "readme_contents": "# basketball-demo\n"
 },
 {
  "repo": "lbenz730/NCAA_Hoops",
  "language": "R",
  "readme_contents": "# NCAA_Hoops\n\nAll the code that powers my NCAA Men's Basketball R Shiny Web Application [application](https://lbenz730.shinyapps.io/recspecs_basketball_central/).\n\n\n### Application Files:\n* __ui.R:__ User Interface for web application\n* __sever.R:__ Backend for web application\n* __global.R:__ Pre-loads data/helper functions for web application.\n\n### Other Files:\n__Model_3.0.R:__ Control panel for everything NCAA Hoops related that the application ultimately shows:\n\n* Power Rankings\n* Predictions\n* Conference simulations and distributions\n* Bracketology\n* Ivy League simulations/playoff swing factor (not in application)\n\n__ncaa_hoop_scraper.R:__ An algorithim to scrape game schedule/result data from the NCAA website. This script is mostly copied (with slight modifications) from a scrape written by Prof. Jay Emerson and used in STAT 230: Introductory Data Analysis (Spring 2016).\n\n__3.0_Files/:__ A collection of files that are essentially the \"inner workings\" of everything done in this project. Every script in this directory contains functions. Those functions are executed in the master file, __Model_3.0.R__.\n* __Ivy_Sims.R:__ Simulates the Ivy League Basketball season in order to estimate playoff odds and calcuates the \"Playoff Swing Factor\" of each conference game.\n* __bracketology.R:__ Assembles the predicted bracket:\n* __helpers.R:__ A file with miscellanious functions used throughout the project.\n* __powerrankings.R:__ Computes the team rankings.\n* __record_evaluator.R:__ Examines the quality of each team's resume by computing Quality Wins (as recently redefinined by the NCAA tournament selection committee), Strength of Record, and Wins Above Bubble.\n* __rpi.R:__ Predictions end of season RPI for each team.\n* __tourney_sim.R:__ Function for simulating college basketball tournaments with parameters left to the user. The user specifies ```teams``` (from best seed to worst seed), along with a vector of ```seeds```. Note that after games have been played, the ```seeds``` vector must be entered in the order of highest possible seed for each given slot. For example, if we have quarterfinals where the matchups are 1 vs. 9, 2 vs. 7, 3 vs. 14, and 4 vs. 12, we'd set ```seeds``` = (1, 2, 3, 4, 12, 14, 7, 9), as 5, 6, 7, 8 are the \"chalk\" seeds occupied by 12, 14, 7, and 9 in this hypothetical 15 team tournament. The user must also enter the number of single ```byes```, the number of ```double_byes```, the number of simulations to run ```nsims```, and a parameter for home court advantage, ```hca```. If the tournament is played at a neutral site, set ```hca = NA```. If the higher seed is always given home court advantage, set ```hca = \"seed\"```. If one team hosts the tournament (even if not the top seed), set ```hca = INSERT_TEAM_NAME```.\n* __Bracketology/:__ Collection of .csv files used in bracket creation\n  * __bids.csv:__ Table of tournament bids broken down by conference.\n  * __bracket.csv:__ The final bracket produced.\n  * __bracket_math.csv:__ Table of bracket metrics for all 357 Division-1 teams.\n  * __bubble.csv:__ Bracket metrics for the first 16 teams missing the field as at-large bids.\n  * __resumes.csv:__ Subset of bracket metrics (resume evaluation, strength of record, wins above bubble) produced by __record_evaluator.R__. \n  * __rpi.csv:__ Projected end of season RPI for each team. Produced by __rpi.R__.\n  * __historical/:__ A collection of files used to predict NCAA Tournament seed from the various metrics in this directory.\n* __Info/:__ A collection of information used to adjust model weights and determine postseason status.\n  * __conferences.csv:__ List of teams with their conference, postseason eligibility status, and elimination status from automatic bid contention.\n  * __mins_YYYY.csv:__ Percentage of team's minutes returning during the next season. Acquired from [Bart Tovrik](http://www.barttorvik.com/returningmins.php).\n  * __recruiting.csv:__ [247Sports recruiting scores](http://247sports.com/Season/2017-Basketball/CompositeTeamRankings) for each team's incoming freshman class.\n  * __transfers.csv:__ Data on transfers eligible to play in the 2017-18 season, pulled from http://www.barttorvik.com/trankpre.php.\n* __History/:__ Some historical files of interest.\n* __Power_Rankings/:__ Collection of .csv files produced by __powerrankings.R__.\n  * __power_rankings.csv:__ Ranking of all 357 teams\n  * __conf_summary.csv:__ Ranking of the 32 Division 1 conferences, by median ranking.\n  * __pr_by_conf.csv:__ Ranking of teams by YUSAG Coefficient, sorted by conference.\n* __Predictions/:__ \n  * __playoffs.csv:__ Ivy League playoff odds.\n  * __psf.csv:__ [Playoff Swing Factor](http://yaledailynews.com/downthefield/2017/01/31/by-the-numbers-ivy-hoops-games-to-watch/) for most recent week of Ivy League conference games.\n* __Results/:__ Complete NCAA Basketball schedule/results through a given date. Sub-directories indicate the year/season, with .csv files given in NCAA_Hoops_results_day_month_year.csv format.\n"
 },
 {
  "repo": "sportsdataverse/hoopR",
  "language": "R",
  "readme_contents": "---\noutput: github_document\n---\n\n#\n\n# hoopR <a href='https://hoopR.sportsdataverse.org/'><img src=\"https://raw.githubusercontent.com/sportsdataverse/hoopR/main/logo.png\" align=\"right\"  width=\"20%\" min-width=\"100px\"/></a>\n```{r setup, include = FALSE}\nrequire(knitr)\nif (!requireNamespace('pacman')){\n  install.packages('pacman')\n}\npacman::p_load(dplyr)\n\nopts_template$set(stripfigure = list(fig.height = 8, out.width = \"95%\"))\n\n```\n\n\n<!-- badges: start -->\n\n[![CRAN status](https://img.shields.io/badge/dynamic/json?style=for-the-badge&color=success&label=CRAN%20version&prefix=v&query=%24.Version&url=https%3A%2F%2Fcrandb.r-pkg.org%2FhoopR)](https://CRAN.R-project.org/package=hoopR)\n[![CRAN downloads](https://img.shields.io/badge/dynamic/json?style=for-the-badge&color=success&label=Downloads&query=%24%5B0%5D.downloads&url=https%3A%2F%2Fcranlogs.r-pkg.org%2Fdownloads%2Ftotal%2F2021-10-26%3Alast-day%2FhoopR)](https://CRAN.R-project.org/package=hoopR)\n[![Version-Number](https://img.shields.io/github/r-package/v/sportsdataverse/hoopR?label=hoopR&logo=R&style=for-the-badge)](https://github.com/sportsdataverse/hoopR)  [![R-CMD-check](https://img.shields.io/github/workflow/status/sportsdataverse/hoopR/R-CMD-check?label=R-CMD-Check&logo=R&logoColor=white&style=for-the-badge)](https://github.com/sportsdataverse/hoopR/actions/workflows/R-CMD-check.yaml) [![Lifecycle:maturing](https://img.shields.io/badge/lifecycle-maturing-blue.svg?style=for-the-badge&logo=github)](https://github.com/sportsdataverse/hoopR/) [![Twitter Follow](https://img.shields.io/twitter/follow/saiemgilani?color=blue&label=%40saiemgilani&logo=twitter&style=for-the-badge)](https://twitter.com/saiemgilani) [![Twitter Follow](https://img.shields.io/twitter/follow/SportsDataverse?color=blue&label=%40SportsDataverse&logo=twitter&style=for-the-badge)](https://twitter.com/SportsDataverse)  [![Contributors](https://img.shields.io/github/contributors/sportsdataverse/hoopR?style=for-the-badge)](https://github.com/sportsdataverse/hoopR/graphs/contributors)\n<!-- badges: end -->\n\n[**`hoopR`**](https://hoopR.sportsdataverse.org/) is an R package for working with men's basketball data. \n\nThe package has functions to access **live play by play and box score** data from ESPN with shot locations when available. As of version 1.3.0, [**`hoopR`**](https://hoopR.sportsdataverse.org/) is also a full NBA Stats API wrapper with 127 functions added in this release.\n\nIt is additionally a scraping and aggregating interface for Ken Pomeroy's men's college basketball statistics website, [kenpom.com](https://kenpom.com/). It provides users with an active subscription the capability to scrape the website tables and analyze the data for themselves.\n\n## Installation\n\nYou can install the CRAN version of [**```hoopR```** ](https://CRAN.R-project.org/package=hoopR) with:\n```{r readme_cran_install, eval=FALSE}\ninstall.packages(\"hoopR\")\n```\n\nYou can install the released version of [**`hoopR`**](https://github.com/sportsdataverse/hoopR/) from [GitHub](https://github.com/sportsdataverse/hoopR) with:\n\n```{r readme_pacman_install, eval=FALSE}\n# You can install using the pacman package using the following code:\nif (!requireNamespace('pacman', quietly = TRUE)){\n  install.packages('pacman')\n}\npacman::p_load_current_gh(\"sportsdataverse/hoopR\", dependencies = TRUE, update = TRUE)\n```\n\n## Quick Start\n\n### **NBA full play-by-play seasons (2002-2022) ~ 1-2 minutes**\n```{r nba_load_pbp_readme}\ntictoc::tic()\nprogressr::with_progress({\n  nba_pbp <- hoopR::load_nba_pbp()\n})\ntictoc::toc()\n```\n```{r nba_pbp_message, echo = FALSE}\nglue::glue(\"{nrow(nba_pbp)} rows of NBA play-by-play data from {length(unique(nba_pbp$game_id))} games.\")\n```\n\n### **Men's college basketball full play-by-play seasons (2006-2022) ~ 2-3 minutes**\n```{r mbb_load_pbp_readme}\n\ntictoc::tic()\nprogressr::with_progress({\n  mbb_pbp <-  hoopR::load_mbb_pbp()\n})\ntictoc::toc()\n```\n\n```{r mbb_pbp_message, echo = FALSE}\nglue::glue(\"{nrow(mbb_pbp)} rows of men's college basketball play-by-play data from {length(unique(mbb_pbp$game_id))} games.\")\n```\n\n## **Documentation**\n\nFor more information on the package and function reference, please see the  [**`hoopR`** documentation website](https://hoopR.sportsdataverse.org).\n\n## **Breaking Changes**\n\n[**Full News on Releases**](https://hoopR.sportsdataverse.org/news/index.html)\n\n\n## Follow the [SportsDataverse](https://twitter.com/SportsDataverse) on Twitter and star this repo\n\n[![Twitter Follow](https://img.shields.io/twitter/follow/SportsDataverse?color=blue&label=%40SportsDataverse&logo=twitter&style=for-the-badge)](https://twitter.com/SportsDataverse) \n\n[![GitHub stars](https://img.shields.io/github/stars/sportsdataverse/hoopR.svg?color=eee&logo=github&style=for-the-badge&label=Star%20hoopR&maxAge=2592000)](https://github.com/sportsdataverse/hoopR/stargazers/)\n\n\n## **Our Authors**\n\n-   [Saiem Gilani](https://twitter.com/saiemgilani)       \n<a href=\"https://twitter.com/saiemgilani\" target=\"blank\"><img src=\"https://img.shields.io/twitter/follow/saiemgilani?color=blue&label=%40saiemgilani&logo=twitter&style=for-the-badge\" alt=\"@saiemgilani\" /></a>\n<a href=\"https://github.com/saiemgilani\" target=\"blank\"><img src=\"https://img.shields.io/github/followers/saiemgilani?color=eee&logo=Github&style=for-the-badge\" alt=\"@saiemgilani\" /></a>\n\n## **Our Contributors (they're awesome)**\n\n-   [Jason Lee](https://twitter.com/theFirmAISports)       \n<a href=\"https://twitter.com/theFirmAISports\" target=\"blank\"><img src=\"https://img.shields.io/twitter/follow/theFirmAISports?color=blue&label=%40theFirmAISports&logo=twitter&style=for-the-badge\" alt=\"@theFirmAISports\" /></a>\n<a href=\"https://github.com/papagorgio23\" target=\"blank\"><img src=\"https://img.shields.io/github/followers/papagorgio23?color=eee&logo=Github&style=for-the-badge\" alt=\"@papagorgio23\" /></a>\n\n-   [Billy Fryer](https://twitter.com/_b4billy_)       \n<a href=\"https://twitter.com/_b4billy_\" target=\"blank\"><img src=\"https://img.shields.io/twitter/follow/_b4billy_?color=blue&label=%40_b4billy_&logo=twitter&style=for-the-badge\" alt=\"@_b4billy_\" /></a>\n<a href=\"https://github.com/billyfryer\" target=\"blank\"><img src=\"https://img.shields.io/github/followers/billyfryer?color=eee&logo=Github&style=for-the-badge\" alt=\"@billyfryer\" /></a>\n\n## **Citations**\n\nTo cite the [**`hoopR`**](https://hoopR.sportsdataverse.org) R package in publications, use:\n\nBibTex Citation\n```bibtex\n@misc{gilani_2021_hoopR,\n  author = {Gilani, Saiem},\n  title = {hoopR: The SportsDataverse's R Package for Men's Basketball Data.},\n  url = {https://hoopR.sportsdataverse.org},\n  year = {2021}\n}\n```\n"
 },
 {
  "repo": "rtelmore/ballr",
  "language": "R",
  "readme_contents": "# ballr <img src=\"man/figures/court-3.png\" width = \"200\" align=\"right\" />\n\nAn R API for basketball-reference.com.  The correct pronounciation for this \npackage is **baw**-ler. \n\n[![Project Status: Active \u2013 The project has reached a stable, usable state and is being actively developed.](http://www.repostatus.org/badges/latest/active.svg)](http://www.repostatus.org/#active)\n[![Build Status](https://travis-ci.org/rtelmore/ballr.svg?branch=master)](https://travis-ci.org/rtelmore/ballr)\n[![Coverage Status](https://img.shields.io/codecov/c/github/rtelmore/ballr/master.svg)](https://codecov.io/github/rtelmore/ballr?branch=master)\n[![CRAN_Status_Badge](http://www.r-pkg.org/badges/version/ballr)](https://cran.r-project.org/package=ballr)\n[![CRAN RStudio mirror downloads](http://cranlogs.r-pkg.org/badges/ballr)](http://www.r-pkg.org/pkg/ballr)\n[![DOI](https://zenodo.org/badge/45419870.svg)](https://zenodo.org/badge/latestdoi/45419870)\n\n## To install\n\n(Update: It's not on CRAN as of July 2020.)\nFrom CRAN:\n```r\ninstall.packages(\"ballr\")\n```\n\nThe development version from GitHub:\n```r\ninstall.packages(\"devtools\")\nlibrary(devtools)\ninstall_github(\"rtelmore/ballr\")\n```\n \n"
 },
 {
  "repo": "lbenz730/NCAA_Hoops_Play_By_Play",
  "language": "R",
  "readme_contents": "# NCAA_Hoops_Play_By_Play\nMen's College Basketball Play by Play Data\n\n__NOTE:__ As of 8/8/2018, the majority of functionality, including development of Play-by-Play scrapers, assist networks, and \nwin probability charts has moved to my new R package, [ncaahoopR](https://github.com/lbenz730/ncaahoopR). Data and other miscellaneous\nfiles will still be stored here, but core scripts whose functionally has been incorporated into the  ```ncaahoopR``` package will be updated with the package, not in this repository.\n\n\n\n__NCAA_Hoops_PBP_Scraper.R:__ An R file used to scrape data from ESPN. The following functions are available.\n\n* ```get_pbp(team)```: Game entire 2017-18 Season's worth of play-by-play data for a given team.\n* ```get_pbp_game(gameIDS)```:  Get play-by-play data for a specific vector of ESPN game ids. \n* ```get_roster(team)```: Get a particular team's roster. \n* ```get_schedule(team)```: Get a team's schedule.\n* ```get_game_ids(team)```: Get a vector of ESPN Game IDs for all games in which ```team``` plays in.\n* ```get_date(gameID)```: Gets the date of a game given an ESPN Game ID.\n* ```is.nit(gameID)```: Returns logical ```T/F``` whether or not the game was part of the NIT\n\nNote that team names must adhere to ESPN naming conventions. A full dictionary of team names used by ESPN is provided in __ids.csv__  Note that play by play data is not available for all games.\n\n__pbp_2016_17/:__ A folder containing play by play csv files for each team for the 2016-17 season. Additionally, the file [all_games.csv](https://drive.google.com/open?id=0BzSws2ZDOraxbXF0aWNJNmxCdnM) (too large for GitHub) contains all games scraped for the 2016-17 season. Each team's .csv file contains the following variables:\n   * __play_id__: The index of a play in a given game\n   * __half:__ Overtimes denoted by 3, 4, etc.\n   * __time_remaining_half:__ Time left in a given period of play, as it would appear on a scoreboard.\n   * __secs_remaining:__ The number of seconds left in a given game.\n   * __description:__ A description of what happened on the given play.\n   * __home_score/away_score:__ Scores for the home and away teams, as denoted by ESPN. Even for neutral site games, a \"home team\" is denoted by choosing the team listed second in ESPN box scores.\n   * __away/home:__ Home and Away teams. See above for treatment of neutral site games.\n   * __home_favored_by:__ Number of points the home team is favored by, if available. (i.e. 6 corresponds with traditional Vegas line of -6.0)\n   \n__pbp_2017_18/:__ Same as above for 2017-18 season.\n\n__Assist_Network.R:__ The function ```assist_net(team, node_col, season, rmv_bench)```, used to create college basketball assist networks. \n  * ```team``` is the ESPN team name\n  * ```node_col``` is the node color for the graph\n  * ```season```: Options include \"2016-17\", \"2017-18\", or a vector of ESPN game IDs. \n  * ```rmv_bench```: Logical. If TRUE, removes all players who aren't in the network. \n  * ```tree```: Logical. If TRUE, draws graph in tree structure. If FALSE, draws graph in circle\n  * ```three_weights```: Logical. If TRUE, assisted three point shots are given 1.5 weight. If FALSE, assisted three point shots are given weight 1. In both cases, assisted 2 point shots are given weight 1. \n  * ```Message``` (default = ```NA```) Option for custom message to replace graph title when using a subset of the season (e.g. conference play).\n  \n__rosters_2016_17/:__ 2016-17 rosters for each team.\n\n__rosters_2017_18/:__ 2017-18 rosters for each team.\n\n__schedules_2017_18/:__ 2017-18 schedules for each team.\n\n__wp_model.R:/__ Prepares data and builds win probability model (coefficients saved as object __wp_hoops.csv__). Requires [all_games.csv](https://drive.google.com/open?id=0BzSws2ZDOraxbXF0aWNJNmxCdnM) and [2017_18_mid_season.csv](https://drive.google.com/file/d/1b7P-p1loGIghL0zDpzaox255X93Mqgkg/view?usp=sharing).\n\n__wp_charts.R:/__ Plots win probability chart for given game. Usage:```wp_chart(ESPN_Game_ID, home_color, away_color, show_legend = T)```. The ```show_legend``` parameter is defaulted to ```TRUE```. I recommend turning this parameter off when plotting more than one win probability charts on a single graph.\n\n__shiny_app:/__ Code for the [R Shiny App version of Assist Networks](https://lbenz730.shinyapps.io/assist_networks).\n\n__network_metric_leaders.R:__ A script for computing weighted/unweighted assist network metrics for all 351 Division 1 teams. The mid-season leaderboad for the 2017-18 season is stored in __1_2_2018_assist_leaderboard.csv__. \n\n__kenpom_scraper.R:__ Scrapes data from [kenpom.com](https://kenpom.com) main page and store results in __kenpom.csv__.\n\n__ncaa_color_scraper.R:__ Scrapes color hexcodes from http://teamcolorcodes.com for use in the [ncaahoopR](https://github.com/lbenz730/ncaahoopR) package.\n\n# Examples\n### Assist Networks\n* Weighted Assist Network\n![Yale Weighted Assist Network](pics/Yale_Weighted_Network.png)\n```assist_net(\"Yale\", \"royalblue1\", \"2017-18\", rmv_bench = T, tree = F, three_weights = T, message = NA)```\n\n* Tree Assist Network\n![Yale Tree Assist Network](pics/Yale_Tree.png)\n```assist_net(\"Yale\", \"royalblue1\", \"2017-18\", rmv_bench = T, tree = T, three_weights = F, message = NA)```\n\n### Win Probability Charts\n* Texas A&M vs. Northern Iowa, March 20, 2016\n![Texas A&M vs. Northern Iowa, March 20, 2016](pics/WinProb.png)\n```wp_chart(400872229, \"maroon\", \"purple\")```\n* Cincinnati vs. Houston, March 11, 2018 (2018 AAC Championship Game)\n![Cincinnati vs. Houston, March 11, 2018 (2018 AAC Championship Game)](pics/GEI_example.png)\nUpdate 3/13/2018: Added Game Excitement Index (GEI) to charts. \n"
 },
 {
  "repo": "rodzam/ncaab-stats-scraper",
  "language": "Python",
  "readme_contents": "NCAA Basketball Stats Scraper\n=============================\nAuthor: Rodrigo Zamith  \nVersion: 1.1\n\n\nUsage\n-----\nFirst, edit the scraper settings in `scrapersettings.py`. In particular, be sure to change the two variables at the top, `academic_year` and `year_index`, using the information provided in that file. You can also set what kind of data you'd like saved, and where you'd like it saved.\n\nThen, execute either `ncaab_stats_scraper.sh` or `ncaab_stats_scraper.bat`, depending on your operating system. Alternatively, you can just execute the python files, preferably in this order:\n\n1. create_team_mappings.py\n2. create_schedule_mappings.py\n3. create_player_mappings_and_agg_stats.py\n4. create_ind_stats.py\n\n\nRequirements\n------------\nThis script requires Python, as well as the urllib2 and BeautifulSoup libraries.\n\n\nLicense\n--------\nThis script is licensed under the Mozilla Public License Version 2.0 (see LICENSE file in root folder). TL;DR: feel free to use it commercially, modify it, and distribute it, provided you disclose both the source code and any modifications you make to it.\n"
 },
 {
  "repo": "aoru45/LFFD-Pytorch",
  "language": "Python",
  "readme_contents": "# BasketNet\n\nThis is a demo of a LFFD model for a Basketball Recognition Competition.\n\nThe demo is based on SSD and LFFD.\n## Install\n```[cmd]\ngit clone https://github.com/aoru45/LFFD-Pytorch.git\n```\n\n## Usage\nDownload or make your own dataset and modify the dataset.py file.\n```[cmd]\npython train.py\n```\n\n## rf and erf visualize:\n![rf_erf_visualize.png](rf_erf_visualize.png)\n\nThe visulaization code is avaliable here: https://github.com/aoru45/LFFD-Pytorch/blob/master/visualize_demo.py\n\n## Network Structure\n\n![demo](demo.png)\n\n\n## demo result\n\n![a](a.jpg)\n\n## Reference\n\nSSD:https://arxiv.org/abs/1512.02325\n\nLFFD:https://arxiv.org/pdf/1904.10633.pdf\n\n\n"
 },
 {
  "repo": "octonion/basketball-m",
  "language": "Ruby",
  "readme_contents": "basketball-m\n============\n\nMen's basketball tools, data and analytics.\n"
 },
 {
  "repo": "wcrasta/ESPN-Fantasy-Basketball",
  "language": "Python",
  "readme_contents": "# ESPN-Fantasy-Basketball\n\nhttps://espnfantasy.warrencrasta.com\n\nAn application that calculates and displays various statistics for ESPN Fantasy Basketball leagues. The code/application works for (public) leagues of any size that use H2H Most Cat. scoring. It may or may not work for other scoring systems. A Yahoo equivalent is [here](https://github.com/wcrasta/yahoo-fantasy-basketball).\n\nIf you liked this project, please consider starring the repository.\n\nDue to performance limitations that occur when the code is deployed on the website, there are some useful features that **only exist locally** but are not available through the website. To view these, run the code in the [more-features branch](https://github.com/wcrasta/ESPN-Fantasy-Basketball/tree/more-features).\n\n## Installation\n1. Create a virtual environment using [venv and Python 3.5](https://docs.python.org/3/library/venv.html) (optional, but highly recommended). Activate the virtual environment.\n2. Run **pip install -r requirements.txt** to install the dependencies for this project.\n3. Open your favorite IDE and configure the project so that the Python interpreter + package sources comes from your virtual environment (optional, but highly recommended).\n4. Download [ChromeDriver](http://chromedriver.chromium.org/downloads) and put it in your path, preferably somewhere within your virtual environment. Instructions vary by OS. You might have to Google where to properly place ChromeDriver to get it working.\n5. Run or debug the program!\n\n## Improvements/Possible Added Features\nFeel free to contribute to this project! There are many improvements that can be made, both in terms of code quality and in terms of whole new ideas that can be implemented. Both the front-end and back-end are simple and can be enhanced.\n\nIf you do contribute, be advised that it may take some time to get your PR merged in. If you're interested in being a collaborator, e-mail me.\n\n## Credits\n\nAuthor: Warren Crasta (warrencrasta@gmail.com)\n\nCollaborator: Wayne Crasta (wayne.crasta@gmail.com)\n\nCollaborator: [richiehu17](https://github.com/richiehu17)\n"
 },
 {
  "repo": "srlesrle/betting",
  "language": "PHP",
  "readme_contents": "# betting\nbetting script, bet on games, football bet, soccer bet, basketball bet, add any game at any moment\nThis project has been written with codeigniter 2.1 php framework and mySQL database, frontend is bootstrap 2\n"
 },
 {
  "repo": "kjaisingh/march-madness-2019",
  "language": "Python",
  "readme_contents": "# March Madness Tournament Outcome Prediction\n\n### A Machine Learning system to guide your March Madness bracket.\n\nA Machine Learning project providing a solution to the Google Cloud & NCAA\u00ae Machine Learning Competition 2019 (https://www.kaggle.com/c/mens-machine-learning-competition-2019).\n\nThe project provides a solution to both Stage 1 and Stage 2 of the Kaggle competition, predicting the winner of historical fixtures and predicting the winners of all possible March Madness 2019 matchups respectively. \n\nThe submission files for these solutions can be found in 'SubmissionStage1.csv' and 'SubmissionStage2.csv' respectively. The project predicts the probability that the first team specified will beat the second team specified for each matchup listed in the Sample Submission file for both Stage 1 and Stage 2.\n\nThe project also creates a predicted bracket for the 2019 NCAA Men's March Madness basketball tournament based on the predictions made in Stage 2, and uses the tournament seedings and slots. This bracket can be found in the file 'output.png'.\n\n\n**Required Dependencies:**\n* Numpy\n* Pandas\n* Matplotlib\n* Pickle\n* Random\n* Ski Kit Learn\n* Keras\n* Bracketeer\n\n\n**Execution Instructions:**\n1. Create dataset that holds details for each team for every season.\n~~~~\npython createTeamDetails.py\n~~~~~~~~ \n\n2. Create dataset that contains details about every past matchup, which is used as the training dataset.\n~~~~\npython createTrainingDataset.py\n~~~~~~~~ \n\n3. Create predictive models that can be used to predict the outcomes of future fixtures.\n~~~~\npython createPredictionModel.py\n~~~~~~~~ \n\n4. Create dataset that holds the data used by the model for matchups that must be predicted in the Stage 1 submission.\n~~~~\npython createStage1PredictionsDataset.py\n~~~~~~~~ \n\n5. Use the most accurate model created to create Stage 1 predictions, and write these to a submission file.\n~~~~\npython createStage1Predictions.py\n~~~~~~~~ \n\n6. Submit the Stage 1 predictions to the Kaggle competition (requires setting up of the Kaggle library and Kaggle API).\n~~~~\nkaggle competitions submit -c mens-machine-learning-competition-2019 -f SubmissionStage1.csv -m \"My Stage 1 submission\"\n~~~~~~~~ \n\n7. Create dataset that holds the data used by the model for matchups that must be predicted in the Stage 2 submission.\n~~~~\npython createStage2PredictionsDataset.py\n~~~~~~~~ \n\n8. Use the most accurate model created to create Stage 2 predictions, and write these to a submission file.\n~~~~\npython createStage2Predictions.py\n~~~~~~~~ \n\n9. Create a visual representation of the predictions made for the 2019 tournament.\n~~~~\npython createBracket.py\n~~~~~~~~ \n\n10. Submit the Stage 2 predictions to the Kaggle competition (requires setting up of the Kaggle library and Kaggle API).\n~~~~\nkaggle competitions submit -c mens-machine-learning-competition-2019 -f SubmissionStage2.csv -m \"My Stage 2 submission\"\n~~~~~~~~ \n\n\n**File Details:** \\\nOther files included or created in this repository include (in order of creation/access):\n* *data/RegularSeasonDetailedResults.csv*: Holds data from NCAA Regular Season matchups since 1985.\n* *data/NCAATourneyDetailedResults.csv*: Holds data from NCAA March Madness matchups since 2003.\n* *data/TeamConferences.csv*: Holds data regarding the team ID's of each team part of the dataset for each year.\n* *data/all_teamData.csv*: Holds per-season data for each NCAA team since 2003.\n* *data/2019_teamData.csv*: Holds regular season data for 2019 NCAA teams.\n* *data/all_dataset.csv*: Holds data for all NCAA matchups since 2003 in a format suitable for use as training data.\n* *scaler.save*: Holds the scaler that is used to preprocess data before it is used for predictions.\n* *predictor.pkl*: Holds the most accurate classifier created during the training phase.\n* *data/stage1_dataset.csv*: Holds data for matchups identified in Stage 1 in a format suitable for making predictions with.\n* *data/stage2_dataset.csv*: Holds data for matchups identified in Stage 2 in a format suitable for making predictions with.\n* *SampleSubmissionStage1.csv*: Holds details regarding which matchups should be predicted for Stage 1.\n* *SampleSubmissionStage2.csv*: Holds details regarding which matchups should be predicted for Stage 2.\n* *SubmissionStage1.csv*: Holds the submissions for Stage 1 of the Kaggle competition, as it stores the matchup predictions.\n* *SubmissionStage2.csv*: Holds the submissions for Stage 2 of the Kaggle competition, as it stores the matchup predictions.\n* *data/Teams.csv*: Holds data regarding the team name of each team based on their team ID. \n* *data/NCAATourneySeeds.csv*: Holds data regarding the NCAA seed of each team.\n* *data/NCAATourneySlots.csv*: Holds data regarding the NCAA slot of each team.\n* *bracket.png*: Holds a visual representation of the predictions made in the form of a bracket for the 2019 tournament.\n\n\n**Predictor Details:** \\\nThe features in an input instance for this model are:\t\n* 0: Team 1 Home or Away (1: Home, 0: Neutral, -1: Away)\n* 1: Team 1 Points per game - Team 2 Points per game\n* 2: Team 1 Points Allowed per game - Team 2 Points Allowed per game\n* 3: Team 1 Field Goals Made per game - Team 2 Field Goals Made per game\n* 4: Team 1 Field Goals Attempted per game - Team 2 Field Goals Attempted per game\n* 5: Team 1 3-Pointers Made per game - Team 2 3-Pointers Attempted per game\n* 6: Team 1 Free-Throws Made per game - Team 2 Free-Throws Attempted per game\n* 7: Team 1 Offensive Rebounds per game - Team 2 Offensive Rebounds per game\n* 8: Team 1 Defensive Rebounds per game - Team 2 Defensive Rebounds per game\n* 9: Team 1 Assists per game - Team 2 Assists per game\n* 10: Team 1 Turnovers per game - Team 2 Turnovers per game\n* 11: Team 1 Steals per game - Team 2 Steals per game\n* 12: Team 1 Blocks per game - Team 2 Blocks per game\n* 13: Team 1 Personal Fouls per game - Team 2 Personal Fouls per game\n\nThe output for an input instance for this model is the probability that Team 1 wins.\n\n\n**NCAA 2019 Tournament Predictions:** \\\n<img src = \"bracket.png\"/>\n\n\n**Reflection on the Competition, the Model and the Results:** \\\nWith March Madness 2019 now over, I thought it would be a great time to reflect on my first time entering Google's competition, which saw entries from some of the leading universities and academic teams in the world. So, let's get to it.\n* In terms of its simplicity to implement, the model turned out to be decent. It predicted the right winner of each matchup that occurred in this tournament with an accuracy of about 78%, which isn't too bad. Better still, it was able to predict the correct winner of the entire tournament - the Virginia Cavaliers. This indicates that it did, to an extend, understand what was important in winning - in the case of Virginia, it seemed to be great defense and solid three-point shooting (which is probably why the model didn't even predict pre-tournament favourites Duke to make the finals).\n* The main flaw that I saw in the model was the fact that it did not take seedings into account. While the seeding would be the basis for most people's predictions in fixtures, as there tends to be a relatively strong correlation between the higher seed and the winning team, my model did not consider the seeding of the two teams in a matchup. This resulted in the model often making extremely risky predictions that were purely stats-based - I believe that the imposition of the seedings of the two teams will reduce the number of these risky predictions. The reason why it was difficult to incorporate seedings into the model was that the large majority of training data was from regular NCAA matches rather than the March Madness Championships. The large majority of teams playing in these NCAA matches, however, do not ever get assigned a seed - this is because they do not qualify for the Championships  itself. To get around this issue, I plan to utilize seedings in future predictive models with one slight tweak - I would assign a seeding of 16, which is the lowest possible seed in the Championships, to all teams that do not end up ever getting a seed. This indicates that they would be the weakest in the pool of teams if they qualified the Championships, which is valid given that they did not even make it.\n* Another shortcoming of the model, in my eyes, was that it didn't consider any of the previous matchups between the two teams considered. Head-to-head is usually a pretty good indicative of which team will win, since it is derived from experience. Adding this in future editions shouldn't be too difficult - it'll just require a data point that represents the yearly matchup details between two teams.\n* The project largely focused on the data side of the model, so little time was spent on optimizing the model - only a GridSearch was applied for the neural network. Optimization is, however, a clear distinguishing factor between average and great models. In order to improve on this next year, I would have to spend more time reading about about the latest advancements in the domain, and apply techniques that generate improvements which optimize the model. This may, however, require the implementation of techniques from new research papers.\n"
 },
 {
  "repo": "ayushpai/Basketball-Detector",
  "language": "Python",
  "readme_contents": "# Basketball-Detector\nhttps://youtu.be/3UeoKxw8UYs\n"
 },
 {
  "repo": "BonbonLemon/basketball",
  "language": "HTML",
  "readme_contents": "# Basketball\n\n![Alt text](assets/images/demo_pic.png?raw=true)\n\n[Basketball][basketball]\n\nA remake of Facebook Messenger's basketball game! This game is a frontend browser game built with JavaScript, Phaser, and Canvas.\n\n## Features\n- Ball is shot in a direction based on the cursor's movement\n- Ball changes size to make experience 3D like\n- Sound effects make experience like REAL LIFE!\n- Ball collides with and bounces on/off rim\n- Motion tweens of happy or sad emojis appear based on success of the shot\n- Besides the first shot, ball spawns in random locations\n\n[basketball]: http://bonbonlemon.github.io/basketball/\n"
 },
 {
  "repo": "arbues6/BueStats",
  "language": "Python",
  "readme_contents": "# 0. BueStats\nAdvanced statistics have proven to be a crucial tool for basketball coaches in order to improve training skills. Indeed, the performance of the team can be further optimized by studying the behaviour of players under certain conditions, thus NBA teams already created highly skilled data science departments to handle tons of information, such as tracking data or the output of other advanced computer vision algorithms. However, European teams are far behind in this field, and tracking data is completely otherworldly for the 97% of them, but the worst thing is that there is not an existing culture-data tradition, which creates the need for data. Coaches have a solid point when they say that their job includes not only practice preparation, but also video sessions, individual meetings, or even physical and conditioning stuff, so they have basically no time to start digging for data for a rough analysis a posteriori. \nThe goal of BueStats is fulfilling these couple of gaps:\n1. Provide coaches with a basic tool that automatically extracts advanced-statistics reports. \n2. Help coaches understand and handle data in order to create a natural habit. Reports' data will not have complex information, but game conditioning factors and metrics that are easy to understand (tutorials are coming soon!), as it is important to establish a solid numerical basis before moving forward. \n\nIn particular, at the moment, BueStats can provide advanced statistics reports of FEB teams (Spanish Basketball Federation), which include any team/player from: \n- **Liga Femenina Endesa** (1st female Spanish division)\n- **Leb Oro** (2nd male Spanish division)\n- **Liga Femenina 2** (2nd female Spanish division)\n- **Leb Plata** (3rd male Spanish division)\n- **Liga EBA** (4th male Spanish division)\n\nBueStats is a non-lucrative Python-based project out of the scope of my PhD, and it has been tested with Ubuntu 16.04, MacOS 10.15.2 and Windows 10. I really hope you like it! \n\n## 1. Requirements\n### 1.a. ChromeDriver\nBueStats does not only compute advanced basketball metrics, but it is also a web scraper that gets information from the HTML code of FEB websites (in a cool and legal way, of course). However, FEB's website is not that easy to scrap, given that there are dropdown menus that have to be changed, but these actions do not modify the general website link; for this reason, a remote browser controller has to be installed: [Chromedriver](https://chromedriver.chromium.org/). It is vital to install a Chromedriver version that matches your Google Chrome browser version, which can be find in Settings, and clicking About Chrome. Once installed, make sure that the downloaded chromedriver exectuable file is placed in the main BueStats folder. \n\n### 1.b. Python Dependencies\nAs exepected, some Open-Source Python libraries have to be installed as well for a proper running of this program. This dependencies are included in *Requirements.txt* in case you want to build a virutal environment; otherwise, these libraries can be easily installed with pip: \n```\npip3 install numpy\npip3 install selenium\npip3 install lxml\npip3 install pandas\npip3 install requests\npip3 install bs4\n```\n\n## 2. Interface\nBueStats has a simple straight-forward interface (Stats_GUI) as seen in the following screenshot: \n![alt text](BueStats_Interface.png)\n- **1. Team / Equipo:** target team you want to scout or analyze. The name of the team must be a **single unique word** with no spaces belonging the the team original name; this is, the name of the team according to FEB. In the given example, Melilla's data will be extracted; note that Melilla is a unique team name, whereas \"Baloncesto\" or \"Club\" would not be. \n- **2. Season / Temporada:** season you want to scout; in this case, 2018 indicates the 2018-2019 season (2019 would indicate 2019-2020 and so on). \n- **3. Division / Categoria:** FEB division of the corresponding team. In order to unify groups and names, and bearing in mind that the program is case-sensitive, the following nomenclature has to be followed: \n  - **3.a. Liga Femenina Endesa** can be written as *Endesa* or *LF*.\n  - **3.b. Leb Oro** has to be written as *ORO*.\n  - **3.c. Liga Femenina 2** has to be written as *LF2*, but given that there are 2 groups (A or B), the group must be included in the encoding after a comma: for example, *LF2,A* belongs to a team compeiting in the group A of Liga Femenina 2.\n  - **3.d. Leb Plata** is by far the most complex one, as it has two competition phases: the first one is geographically defined (Este / Oeste), while the second one depends on the previous results (A2). For this reason, a basic encoding has to be followed: *PLATA,F1,F2* , where *F1* belongs to the first phase and can be *ESTE* or *OESTE*, and *F2* belongs to the second one and can be expressed as *A1* and *A2*. An example could be: *PLATA,ESTE,A1*, or *PLATA,OESTE,A2*. However, if you want to output data just from one phase, you should encode it as: *PLATA,F*, where *F* could be one of the mentioned options (*ESTE* / *OESTE* / *A1* / *A2*).  \n  - **3.e. Liga EBA** has to be written as *EBA*, but as happened with Liga Femenina 2, the name of the group has to be included as well after a comma with either one or two characters: for instance, if the team plays in group C, which has division CA and division CB, the encoding would be *EBA,CA* or *EBA,CB*, but if the team plays in division B, which has no subdivisions, the encoding would be *EBA,B*.\n- **4. First Round / Primera Jornada** is the first (included) round to be taken into account while extracting data.\n- **5. Last Round / \u00daltima Jornada** is the last (included) round to be taken into account while extracting data.\n- **6. Top Teams / Equipos Top** (optional) can be filled with the top teams of the competition, which might help to see how players perform against powerful teams. The set of teams has to be included with commas and no spaces. \n- **7. Bottom Teams / Equipos Cola** (optional) can be filled with the bottom teams of the competition. It has to be mentioned that both Top and Bottom Teams might be filled with any set of teams as well (all sizes). \n- **8. Intervals / Intervalos** will pack the performance of players/team in groups of N games, being N the number written in Intervals text box. For instance, if we split in groups of 5 the performance of a team that has played 13 games, statistics are separated for the 1-5, 5-10, and 10-13 games. \n- **9. Players / Jugadores** (optional) can be filled with a set of players that you want to scout by writting unique surnames. For example, both Josep Franch De Pablo and Felipe Dos Anjos De Paula play in Melilla; if we write *FRANCH* in the text box, only stats from Josep Franch will be extracted, whereas if we write *DE*, the performance of both players will be analyzed (De Pablo / De Paula). Again, more than one player can be added: (i.e) *FRANCH, AGADA*. \n- **Extract All Rounds / Extraer Todas las Jornadas** is a checkbox that (when checked) extracts the stats of the analyzed players for every single game in the given season.\n- **Extract Team Stats / Extraer Estad\u00edsticas de Equipo** is a checkbox that (when checked) extracts statistics not only at a player-level but also at a team-level. \n- **Extract Rankings / Extraer Rankings** is a checkbox that (when checked) extracts sorted rankings of the given team for each particular stat. This checkbox is related with the Textbox of **Minimum Games / Minimo Partidos** (optional), which can be set in order to set a threshold to include (or not to include) players in the rankings according to the games they have played; if the box is empty, this threshold is automatically set to half the number of games. \n- **Configuration Folder / Carpeta Configuraci\u00f3n** (optional) will be explained in Section 4 (Configuration Files).\n- **Output Folder / Carpeta Destino** is the path where the output files will be stored. By default, it is a folder called \"Reports\" in the same \"BueStats\" main folder (you might create it for simplicity). \n- **Change Language / Cambiar Idioma** switches languages between Spanish and English; not only the interface will be affected, but also the output result. \n- **Load Configuration / Cargar Configuraci\u00f3n** will be also explained in Section 4 (Configuration Files).\n\nFinally...\n**Extract Statistics / Extraer Estad\u00edsticas** is the main button to start gathering data from FEB. Once you press this button, you just have to be a little patient; Chromedriver will keep popping up and closing FEB sites automatically while extracting information. **Don't interact with these windows**, but you can keep using your computer as usual.  \n\n### Scouting the whole league! \nA \"hidden\" feature of BueStats (useful for scouts) is that not only teams and players can be analyzed, but also the entire league! For doing so, you just have to change the text in team for *LIGA* (in the given example, Melilla should be substituted by LIGA). Again, the names of players can be filtered as well. Please note that it might take a while to generate the outputs since there's much more information. \n\n## 3. Output\n\nBueStats produces quite a bunch of outputs in a .csv format, don't be overwhelmed because of that! The main reason for generating different statistic files is that the criteria to handle data changes among coaches and analysts, so there is not a best nor established way to do it! For a better visualization of the results, I would strongly suggest to mix the output files as you desire in a Google Spreadsheet file (by importing data), using different sheets and fixing the first row and the first two columns.  <br/>\n<br/>\nAll those files starting with a letter *p* belong to *Player* stats, whilst files starting with letters *t* and *r* correspond to *Team* and *Ranking* files. \n  - The files that does NOT end with *Phases.csv* or *Rounds.csv* contain all player/team stats depending on several game-conditioning factors, such as Home / Away, Won / Lost, Initial-5 / Bench, Easy / Tough, Last3 games, and even the performance of the player against the desired teams included in Top/Bottom teams. \n  - The files that end with *Phases.csv* contain the player/team stats clustered into the N-game groups indicated in the above-mentioned intervals.\n  - The files that end with *Rounds.csv* contain the performance of the player/team in each round of the season. \n  - Rankings (file that starts with *r*) includes the sorting of players from better to worst. <br/>\n\nApart from the game conditioning factors, the following advanced statistics are included: <br/> \n- **Player Level**: playerAST%. eFG%, TS%, GScored, Possessions, Floor Percentage, Points per Shot, %REB, %DRB, %ORB, STL%, Touches, Versatility, Usage, Win Scores, OER, DER, Net Points.  \n- **Team Level**: Pace, OER, DER, eFG%, TS%,Play%, FTR%, %DRB, %ORB, %ASST, %TOV.  \n  \n\n## 4. Configuration Files\nThe amount of filters and text boxes of BueStats is not small, and since the whole purpose of building this program is to automatize processes, configuration files might be used in order to save time. This files are simple .txt files (such as the ones included, i.e. *ValoresDefectoORO.txt*), where you can set a default configuration and load it in the interface with a simple click; this feature might be useful for coaches that want to analyze their own team every single week. As it can observe, the text template follows this pattern:\n```\nteam=UNICAJA\nseason=2018\ndivision=EBA,DA\nfirstRound=1\nlastRound=18\ntopTeams=MONTETUCCI,FRAMASA,JAEN\nbotTeams=NOVASCHOOL,MARBELLA,INTERIOR\nintervals=7\nplayers=\noutputFolder=/mnt/DATA/FCBScrapping/Reports\n```\nBy clicking the *Load Configuration* button (and making sure the *Configuration Folder* is properly set), the information in the text file is loaded. \n\n## 5. Plotting Interface\n(NEW FEATURES! March 22nd)\nAs you might see, another GUI has been included in the source code (Graphics_GUI.py). \nFollowing the same nomenclature as the one seen in the previous Sections, simple 2D graphics with team logos can be extracted for any desired statistic (in both the X and Y axes), which can be classical ones / advanced / stats of the opponents. In order to do so, just create a folder called \"Images\" inside the existing \"Reports\" one (e.g. mkdir /mnt/DATA/FCBScrapping/Reports/Images) and copy and extract the images of \"Logos.zip\", which include (thanks to FEB and Muevetebasket) all 2019 logos splitted by divisions. \nThen, you just have to choose the desired rounds and statistics, and the plot will be automatically stored in your folder. Moreover, some npy files are also stored automatically to speed up the process. For instance, the first time you want to plot a specific graphic for (eg) 22 rounds, the scraper will browse around FEB website until getting all data; this process might take a while, but by storing these .npy arrays, it will be fully automatic the next time, without having to wait or whatsoever. Note that I included some default NPY files in a zip file (which are the ones corresponding to team data of some of the competitions before the covid-19 interruption - NpysGraphicAux.zip).\n\n## 6. Data Ownership\nAll extracted BueStats' data belong to the Spanish Basketball Federation (FEB) and their corresponding boxscores, which are available online only for non-lucrative purposes. Please cite this GitHub or BueStats ifself if you are using this tool for writing scientific publications or sports articles (researchers and journalists). \n\n## 7. Contact\nYou can reach me by email (adria.arbues@upf.edu) or by Twitter (@arbues6), and any suggestion or doubt will be kindly addressed! However, I have a thesis to finish in less than 2 years, so I won't have the chance of adding brand new features quickly. <br/>\nExecutable files for Mac, Windows, and Linux, and tutorials are available in my [UPF Website](https://www.upf.edu/web/adria-arbues/buestats).\n"
 },
 {
  "repo": "fivethirtyeight/nba-player-advanced-metrics",
  "language": null,
  "readme_contents": "# nba-player-advanced-metrics\n\n`nba-data-historical.csv` contains historical RAPTOR and other NBA data.\n\nNote: The following columns are not included for the 2019-20 season or later: `tmRtg`, `MP%`, `P/36`, `A/36`, `R/36`,\t`SB/36`, `TO/36`, `PIE%`, `AWS%`, `ORtg`, `%Pos`, `DRtg`, `2P%`,\t`3P%`, and `FT%`. These values are also not included for playoffs in any year.\n\n|  Category   |                     Description                     |\n|-------------|-----------------------------------------------------|\n| player_id   | Basketball-Reference.com player ID                  |\n| name_common | Name of player                                      |\n| year_id     | Season (i.e., 2019-20 is \"2000\")                    |\n| type        | Regular season (RS) or playoffs (PO)                |\n| age         | Age on Feb. 1 of season                             |\n| team_id     | Team played for                                     |\n| pos         | Primary position                                    |\n| tmRtg       | Team efficiency margin                              |\n| franch_id   | Franchise played for                                |\n| G           | Games played                                        |\n| Min         | Minutes played                                      |\n| MP%         | Share of team minutes played                        |\n| MPG         | Minutes per game                                    |\n| P/36        | Pace-adjusted points per 36 minutes                 |\n| TS%         | True Shooting Percentage                            |\n| A/36        | Pace-adjusted assists per 36 minutes                |\n| R/36        | Pace-adjusted rebounds per 36 minutes               |\n| SB/36       | Pace-adjusted steals plus blocks per 36 minutes     |\n| TO/36       | Pace-adjusted turnovers per 36 minutes              |\n| Raptor O    | Offensive RAPTOR rating                             |\n| Raptor D    | Defensive RAPTOR rating                             |\n| Raptor+/-   | Total RAPTOR rating                                 |\n| Raptor WAR  | Total RAPTOR wins above replacement                 |\n| PIE%        | Player Impact Estimate                              |\n| AWS%        | PIE% using Alternate Win Score                      |\n| USG%        | Usage Rate                                          |\n| AST%        | Assist Rate                                         |\n| TOV%        | Turnover Rate                                       |\n| ORB%        | Offensive Rebound Rate                              |\n| DRB%        | Defensive Rebound Rate                              |\n| TRB%        | Total Rebound Rate                                  |\n| STL%        | Steal Rate                                          |\n| BLK%        | Block Rate                                          |\n| ORtg        | Offensive Rating (points produced per 100 poss.)    |\n| %Pos        | Share of team possessions used                      |\n| DRtg        | Defensive Rating (points allowed per 100 poss.)     |\n| 2P%         | 2-point field goal percentage                       |\n| 3P%         | 3-point field goal percentage                       |\n| FT%         | Free throw percentage                               |\n| 3PAr        | Share of field goal attempts that were 3-pointers   |\n| FTAr        | Ratio of free throw attempts to field goal attempts |\n| Pace +/-    | Player's effect on team pace                        |\n\n"
 },
 {
  "repo": "leerichardson/game_simulation",
  "language": "TeX",
  "readme_contents": "NBA Predictions \n===============\n\nThis is the repository used for our NBA Predictions project for Machine Learning 701 at Carnegie Mellon. \n\n- The final paper is displayed in the main repository, which summarizes all of our work \n\n- Our best SQLite database is located in the nba_rRegression_chi/nba.db\n\n- All of the data and code used to scrape it are located in the data/ directory\n\n- Scripts used to create our training/testing datasets as well as simulate the seasons are located in the scripts/ directory\n\n- regressionTrial_chi/nbaRegression.py has the code to create the figure which compares our algorithms "
 },
 {
  "repo": "zachwill/ESPN-Basketball",
  "language": "Python",
  "readme_contents": "ESPN Basketball\n===============\n\n**Warning**: This is a very outdated project. I would recommend you look to build\nyour scrapers with something like [Scrapy](http://scrapy.org) instead.\n\n\nAbout\n-----\n\nAs a huge fan of both basketball and BeautifulSoup 4 (currently in alpha), I\ndecided to rewrite an earlier module I'd been using to scrape games from ESPN.\nIn order to use this package, you will need `lxml`, `mock`, and `bs4`\ninstalled.\n\nI've found it parses pages and data pretty fast &mdash; around a second to\nparse a game, rearrange the data into a tuple, and then spit it back out. On\naverage, most games normally consist of 400 to 460 individual plays (timeouts\nand interruptions are counted as an Offical Play).\n\nThe tuple returned consists of the away team, home team, and a list of\ndictionaries (each one represents an individual play in the game). You can\nalways read the source code to find out more.\n\nAlso, the library does have numerous unit tests that you can check out.\n\n\nUsage\n-----\n\nUsing the datetime module.\n\n    >>> import datetime\n    >>> from espn import get_games\n    >>> yesterday = datetime.date.today() - datetime.timedelta(1)\n    >>> for game in get_games(yesterday, iterable=True):\n    ...     print game\n\nAlternatively you can just use a string in `YYYYMMDD` format.\n\n    >>> yesterday_string = \"20110330\"\n    >>> for game in get_games(yesterday_string, iterable=True):\n    ...     print game\n\nYou don't have to use the `iterable=True` argument &mdash; a list will be passed\nback to you.\n\n    >>> april_fools_last_year = \"20100401\"\n    >>> games = get_games(april_fools_last_year)\n\nYou can also scrape NCAA Men's Basketball games by passing in a\n`league='ncb'` argument.\n\n    >>> march_1 = '20110301'\n    >>> for ncb_game in get_games(march_1, league='ncb', iterable=True):\n    ...     print ncb_game\n\nThe `daterange` function can also come in handy for generating days between two\nspecific dates.\n\n    >>> import datetime\n    >>> from espn import daterange, get_games\n    >>> yesterday = datetime.date.today() - datetime.timedelta(1)\n    >>> week_ago = yesterday - datetime.timedelta(7)\n    >>> for day in daterange(week_ago, yesterday):\n    ...     for game in get_games(day):\n    ...         print game\n"
 },
 {
  "repo": "lujinzhong/Live_basketball_room",
  "language": "PHP",
  "readme_contents": "# Live_basketball_room\n\u8ddf\u7740singwa\u8001\u5e08\u505a\u7684\u4e00\u4e2a\u9ad8\u6027\u80fd\u7bee\u7403\u8d5b\u51b5\u76f4\u64ad\u5ba4\uff0c\u4e3b\u8981\u5305\u542b\u5b9e\u65f6\u76f4\u64ad\u6a21\u5757\u548c\u591a\u4eba\u804a\u5929\u6a21\u5757\uff0c\u91c7\u7528TP5\u6574\u5408\u539f\u751fswoole\u62d3\u5c55\u7f16\u5199\u3002\u5165\u95e8swoole\u6700\u4f73\u5b9e\u6218\n\n\u9ad8\u6027\u80fd\u76f4\u64ad\u8d5b\u4e8b\u5e73\u53f0-\u8fd9\u662f\u6155\u8bfeswoole\u5b9e\u6218\u7684\u9879\u76ee,\u6709\u4e9b\u5fc5\u8981\u529f\u80fd\u5df2\u5b8c\u5584,\u5f00\u53d1\u73af\u5883\u57fa\u4e8e\n\nLinux (Ubuntu 16.04LTS) \n\nPHP-7.2.5 \n\nswoole-2.1.2\n\nRedis-4.0.9\n\nnginx-1.13.12\n\nmysql-5.7.18\n\nthinkphp-5.1\n\nlayer\n\n\u672c\u9879\u76ee\u4e3b\u8981\u6709\u4e24\u4e2a\u7248\u672c\uff0c\u5176\u4e2dalpha\u6d4b\u8bd5\u7248\u53ea\u5305\u542b\u57fa\u7840\u529f\u80fd\uff0c\u5373\u53ea\u5230\u7b2c\u4e5d\u7ae0\u7684\u5185\u5bb9\uff0c\u800cbeta\u6d4b\u8bd5\u7248\u5219\u6709\u4e86alpha\u7248\u6ca1\u6709\u7684\u529f\u80fd\uff0c\u5305\u542b\uff1a\n\n1.\u8bf7\u6c42\u8bbf\u95ee\u5199\u5165\u65e5\u5fd7\u529f\u80fd\n\n2.nginx\u8f6c\u53d1\u529f\u80fd\n\n3.nginx\u591a\u53f0\u670d\u52a1\u5668\u8d1f\u8f7d\u5747\u8861\u914d\u7f6e\n\n4.\u5e73\u6ed1\u91cd\u542f\u811a\u672c\n\n5.\u591a\u8bf7\u6c42\u8fc7\u6ee4\n\n6.\u670d\u52a1\u62a5\u8b66\u76d1\u63a7\n\n\u5176\u4e2d\u7684thinkphp\u662f\u4e3b\u8981\u9879\u76ee\u6587\u4ef6\uff0c\u5176\u4f59\u7684demo\u90fd\u662f\u6d4b\u8bd5swoole\u4ee3\u7801\u7528\u7684\u3002\u6ce8\u91ca\u5199\u7684\u4e0d\u5c11\u3002\u8ba4\u771f\u7684\u770b\u5e94\u8be5\u90fd\u80fd\u770b\u61c2\u3002\n\n\u5982\u4f55\u4f7f\u7528\uff1a\n1.\u73af\u5883\u8981\u6c42\uff08\u57fa\u672c\uff09\uff1a\u9879\u76ee\u53ea\u80fd\u8fd0\u884c\u5728linux\u7cfb\u7edf\uff0c\u5e76\u786e\u4fdd\u5b89\u88c5\u4e86PHP\u73af\u5883\u4ee5\u53ca\u5b89\u88c5\u4e86swoole\u62d3\u5c55\uff0c\u5e76\u4e14swoole\u5f00\u542f\u4e86\u5f02\u6b65redis\uff0c\u8fd8\u6709\u666e\u901a\u7684redis\u4e5f\u8981\u5b89\u88c5\uff0c\u56e0\u4e3a\u9879\u76ee\u4e2d\u4e2d\u4e5f\u6709\u540c\u6b65redis\uff0ctp5\u7684\u5bf9swoole\u7684\u9002\u914d\u5df2\u7ecf\u5728\u6e90\u7801\u4e2d\u505a\u597d\uff0c\u6700\u597d\u76f4\u63a5\u6309\u6211\u7684\u5f00\u53d1\u73af\u5883\u6765\uff0c\u5176\u4e2d\u4f60\u4e0b\u8f7d\u7684\u5728extend\u4e2d\u5982\u679c\u6ca1\u6709ali\u8fd9\u4e2a\u6587\u4ef6\u5939\uff0c\u8bf7\u5c06\u9996\u9875\u7684ali\u653e\u8fdb\u53bb\uff0c\u4e0d\u7136\u4f7f\u7528\u4e0d\u4e86\u77ed\u4fe1\u670d\u52a1\u3002\n\n2.\u5982\u4f55\u8c03\u8bd5\uff1a\u9996\u5148\u5f00\u542fredis\u670d\u52a1\u5668\u7aef,\u518d\u8fdb\u5165\u5230thinkphp/script/bin/server/\u4e2d,\u4f7f\u7528\u547d\u4ee4\u884c\u6267\u884c\uff1aphp ws_server.php,\u5982\u679c\u73af\u5883\u6b63\u786e\u5219\u4e0d\u4f1a\u62a5\u9519\u3002\u5982\u679c\u4f60\u4f7f\u7528\u7684beta\u7248\u7684\uff0c\u56e0\u4e3a\u6dfb\u52a0\u4e86\u65e5\u5fd7\u529f\u80fd\uff0c\u6240\u4ee5\u6bcf\u5f53\u6709\u8bf7\u6c42\u547d\u4ee4\u884c\u4f1a\u6253\u5370\u51fa\u65e5\u5fd7\u4fe1\u606f\uff0c\u6b64\u65f6\u4f60\u5e94\u8be5\u6267\u884c\u4e00\u4e2a\u811a\u672c\u5c06\u65e5\u5fd7\u8f93\u51fa\u5230\u6307\u5b9a\u4f4d\u7f6e\uff1a\n//\u8fd9\u91cc\u53ef\u4ee5\u4f7fnohub\u6765\u540e\u53f0\u6267\u884c\u811a\u672c\uff0c\u5e76\u4e14\u628a\u8f93\u51fa\u7684\u5185\u5bb9\u6307\u5b9a\u5230\u4e00\u4e2a\u6587\u6863\u4e2d\n //nuhub /home/xiaolu/php/bin/php  /home/xiaolu/web/swoole_imooc/thinkphp/script/monitor/server.php >/home/xiaolu/web/swoole_imooc/thinkphp/script/monitor/log.text &\n websocket\u7684\u9ed8\u8ba4\u7aef\u53e3\u4e3a8811\uff0c\u76d1\u542c\u7684IP\u5730\u5740\u4e3a127.0.0.1\uff0c\u5728\u6d4f\u89c8\u5668\u4e2d\u4f7f\u7528\u5730\u5740\uff1ahttp://127.0.0.1:8811/live/login.html \u8fdb\u5165\u4e86\u767b\u5f55\u754c\u9762\u540e \uff0c\u901a\u8fc7\u963f\u91cc\u7684\u624b\u673a\u9a8c\u8bc1\u7801\u53ef\u4ee5\u6b63\u5e38\u7684\u8fdb\u884c\u767b\u5f55\uff0c\u8fd9\u91cc\u662f\u4f7f\u7528redis\u4f5c\u4e3a\u767b\u5f55\u51ed\u8bc1\u7684\uff0credis\u5b58\u50a8\u7684\u683c\u5f0f\u4e3asms_\u7535\u8bdd\u53f7\u7801\uff0c\u56e0\u4e3a\u6211\u5728\u6e90\u7801\u4e2d\u628a\u963f\u91cc\u7684\u77ed\u4fe1\u9a8c\u8bc1\u51ed\u8bc1\u6539\u4e86\uff08\u6587\u4ef6\u5728app\\common\\lib\\ali\\Sms\u7c7b\u4e2d\uff09\uff0c\u4f60\u9700\u8981\u6b63\u786e\u914d\u7f6e\u4f60\u81ea\u5df1\u7684\u51ed\u8bc1\uff0c\u6216\u8005\u76f4\u63a5\u5728redis\u4e2d\u6267\u884c set sms_\u4f60\u7684\u7535\u8bdd 123456,\u8fd9\u6837\u7684\u8bdd\u4f60\u5c31\u53ef\u4ee5\u76f4\u63a5\u7528123456\u4f5c\u4e3a\u4f60\u7684\u9a8c\u8bc1\u7801\u76f4\u63a5\u767b\u5f55\u4e86.\u540c\u6837\u53ef\u4ee5\u7528\u8fd9\u79cd\u65b9\u5f0f\u8fd9\u6837\u591a\u7528\u6237\u767b\u5f55\uff0c\u591a\u4e2a\u7528\u6237\u767b\u5f55\u540e\uff0c\u53ef\u4ee5\u76f4\u63a5\u6d4b\u8bd5\u804a\u5929\u5ba4\u529f\u80fd\uff0c\u8fd9\u4e2a\u529f\u80fd\u662f\u5c5e\u4e8e\u4e0d\u5199\u5165\u6570\u636e\u5e93\u7684\uff0c\u56e0\u4e3a\u5b9e\u5728\u6ca1\u5fc5\u8981\u5199\u8fd9\u4e9b\u91cd\u590d\u6027\u589e\u5220\u6539\u67e5\u64cd\u4f5c\uff0c\u4f60\u5728\u804a\u5929\u5ba4\u8f93\u5165\u5185\u5bb9\u540e\u76f4\u63a5\u56de\u8f66\uff0c\u5176\u4ed6\u7528\u6237\u4fbf\u4f1a\u5b9e\u65f6\u6536\u5230\u4f60\u7684\u4fe1\u606f\uff0c\u8fd9\u65f6\u6ce8\u610f\u5982\u679c\u5f3a\u5237\u9875\u9762\u5c31\u4f1a\u6d88\u5931\u4e86\uff0c\u5b9e\u9645\u4e0a\u7684\u804a\u5929\u5ba4\u662f\u4f1a\u8bb0\u5f55\u5230mysql\u6570\u636e\u5e93\u4e2d\u7684\uff0c\u4f46\u662f\u8fd9\u91cc\u6211\u53ea\u662f\u628a\u6536\u5230\u7684\u4fe1\u606f\u4f7f\u7528js\u8ba9\u5176\u663e\u793a\u5230\u9875\u9762\u4e0a\u800c\u5df2\u3002\u540e\u53f0\u4e3b\u6301\u4eba\u529f\u80fd\u4f7f\u7528\u6d4f\u89c8\u5668\u8bbf\u95ee\uff1ahttp://127.0.0.1/live/admin/live.html \u754c\u9762\u6bd4\u8f83\u7c97\u7cd9\uff0c\u6bd5\u7adf\u662f\u6d4b\u8bd5\u7248\u7684\u3002\u8fd9\u91cc\u7684\u8bdd\u662f\u9ed8\u8ba4\u6307\u5b9a\u4e86\u4e24\u652f\u7403\u961f\uff0c\u5b9e\u9645\u4e0a\u5e94\u8be5\u662f\u4ece\u6570\u636e\u5e93\u8fdb\u884c\u52a8\u6001\u663e\u793a\u7684\uff0c\u5199\u5165\u5185\u5bb9\u9009\u62e9\u53d1\u5e03\u5373\u53ef\uff0c\u8fd9\u65f6\u6240\u6709\u8fde\u63a5\u7684\u5ba2\u6237\u7aef\u90fd\u4f1a\u6536\u5230\u4f60\u53d1\u51fa\u7684\u5185\u5bb9\u3002\u6838\u5fc3\u4ee3\u7801\u90fd\u5df2\u7ecf\u5199\u597d\uff0c\u6570\u636e\u5e93\u5efa\u8868\u7684\u6587\u4ef6\u4e5f\u5728\u90a3\u91cc\uff0c\u5b9e\u9645\u4e0a\u9700\u8981\u5b8c\u5584\u7684\u8bdd\u53ea\u8981\u5efa\u597d\u6570\u636e\u5e93\uff0c\u628a\u7403\u961f\u4fe1\u606f\u5565\u7684\u5f55\u5165\u8fdb\u53bb\uff0c\u5728\u5b8c\u5584\u4e00\u4e0b\u9875\u9762\uff0c\u901a\u4fe1\u7684\u6a21\u5757\u57fa\u672c\u4e0d\u7528\u6539\uff0c\u9700\u8981\u6539\u7684\u90fd\u662f\u666e\u901a\u7684\u64cd\u4f5c\uff0c\u61c2tp5\u7684\u5f88\u7b80\u5355\u5c31\u80fd\u5b8c\u6210\u4e86\u3002\n\n\u8fd9\u91cc\u6211\u5c06\u5b89\u88c5\u73af\u5883\u6240\u9700\u7684\u5404\u7c7b\u6e90\u7801\u5305\u4e5f\u4e0a\u4f20\u4e86\u3002\u9700\u8981\u7684\u8bdd\u53ef\u4ee5\u7528\u3002\n\n\u6211\u77e5\u9053\u4f60\u4eec\u8fd8\u662f\u60f3\u770b\u6548\u679c\u56fe\u7684\uff0c\u90a3\u6211\u8fd8\u662f\u653e\u4e00\u4e0b\u5427\uff1a\n\uff08\u5ba2\u6237\u7aef\u754c\u9762\u57fa\u4e8e\u79fb\u52a8\u7aef\uff0c\u540e\u53f0\u9875\u9762\u57fa\u4e8ePC\u7aef\uff09\n\n\u767b\u5f55\u754c\u9762\uff1a\n![](https://github.com/lujinzhong/Live_basketball_room/blob/master/image/login.png)\n\n\u767b\u5f55\u540e\u754c\u9762\uff1a\n![](https://github.com/lujinzhong/Live_basketball_room/blob/master/image/\u767b\u5f55\u5b8c.png)\n\n\u804a\u5929\u5ba4\u754c\u9762\uff1a\n![](https://github.com/lujinzhong/Live_basketball_room/blob/master/image/\u804a\u5929\u5ba4.png)\n\n\u4e3b\u6301\u4eba\u754c\u9762\uff1a\n![](https://github.com/lujinzhong/Live_basketball_room/blob/master/image/\u4e3b\u6301\u4eba.png)\n\n\n\u5efa\u8bae\u73af\u5883\u81ea\u5df1\u642d\u5efa\uff0c\u4e0d\u8981\u8bf4\u5b66swoole\u7684PHPer\u8fde\u57fa\u672c\u73af\u5883\u90fd\u4e0d\u4f1a\u642d\uff0c\u9047\u5230\u5751\u5c31\u591a\u67e5\u8d44\u6599\uff0c\u6ca1\u6709\u8fc7\u4e0d\u53bb\u7684\u5751\u3002\u5b9e\u5728\u4e0d\u884c\uff0c\u6ca1\u529e\u6cd5\u4e86\uff0c\u90a3\u5c31\u7528\u6211\u7684\u5bfc\u51fa\u865a\u62df\u673a\u7cfb\u7edf\u5305\u628a\uff0c\u7528vmware\u5bfc\u5165\u5373\u53ef\uff0c\u6e90\u7801\u548c\u73af\u5883\u90fd\u6709\u4e86\u3002\u6700\u540e\u795d\u5927\u5bb6swoole\u5b66\u4e60\u6109\u5feb\u3002\u865a\u62df\u673a\u5bfc\u51fa\u7cfb\u7edf\u5206\u4eab\uff1a\u94fe\u63a5\uff1ahttps://pan.baidu.com/s/140PLiqkDaiPHaUHPBOit8Q \u5bc6\u7801\uff1a95ko\n"
 },
 {
  "repo": "rizkyikhwan/miracle-basketball",
  "language": "Vue",
  "readme_contents": "# Miracle Store ID\n\nApa itu Miracle Store ID?\n\nMiracle Store ID adalah dalah web penjualan sepatu basket layaknya situs E-Commerce dengan fitur yang masih **sangat sederhana banget**.\n\n> Reminder! there is a my personal project.\n>\n> \n\n[View Demo](https://miracle-basketball.firebaseapp.com/)\n\n## Technology i use\n\nJadi, teknologi yang saya gunakan untuk membangun projek ini adalah :\n\n1. Vue JS 2\n2. Vue Router\n3. Vuex (saya sangant pemula di Vuex sebenarnya)\n4. Firebase\n\nBeberapa library yang saya gunakan :\n\n1. Bootstrap / Bootstrap-vue\n2. Gsap\n3. Font Awesome\n4. vue-toast-notification\n5. vue-form-wizard\n6. little bit vuesax (hanya untuk select kategori brand)\n\nUntuk menambahkan barang ke keranjang harus sudah memiliki akun dan login terlebih dahulu. Pada bagian nomor hp dan email di form pendaftaran, boleh sembarang aja, asalkan email yang mau didaftarkan harus sesuai dengan format email.\nJuga dapat reset password, dapat mengubah nama profil kamu.\n\n> Tidak dapat mengunggah foto profil\n\n## Some Screenshot\n\nScreenshot dari profile page dan cart page :\n\n![Screenshot 2021-09-30 235112](https://user-images.githubusercontent.com/79355239/135501458-0dc42b1b-44d5-48c8-95ba-21195571ed9d.jpg)\n![Screenshot 2021-09-30 235215](https://user-images.githubusercontent.com/79355239/135501593-cb976a63-c14c-4be3-be90-0a294b062770.jpg)\n"
 },
 {
  "repo": "sndmrc/BasketballAnalyzeR",
  "language": "R",
  "readme_contents": "# BasketballAnalyzeR\nContains data and code to accompany the book  \n**P. Zuccolotto and M. Manisera (2020) Basketball Data Science. Applications with R. CRC Press. ISBN 9781138600799.**\n\n### Developers \nMarco Sandri, Paola Zuccolotto, Marica Manisera  \nBig and Open Data Innovation Laboratory (BODaI-Lab)  \nhttps://bodai.unibs.it/  \nUniversity of Brescia, Italy\n\n### Installation\n```\n# From CRAN:\ninstall.packages(\"BasketballAnalyzeR\")\n\n# From Github (development version):\ninstall.packages(\"devtools\")\ndevtools::install_github(\"sndmrc/BasketballAnalyzeR\"\")\n```\n\n### Warning\nIf you want to reproduce the figures contained in the book of *Zuccolotto and Manisera (2020)* and if the version of your R machine is >= 3.6.0, you need to type  \n```\nRNGkind(sample.kind = \"Rounding\")\n```\nat the beginning of your working session.\n\n### Links\n[https://bdsports.unibs.it/basketballanalyzer/](https://bdsports.unibs.it/basketballanalyzer/)  \n[https://cran.r-project.org/web/packages/BasketballAnalyzeR/](https://cran.r-project.org/web/packages/BasketballAnalyzeR/)\n\n"
 },
 {
  "repo": "sportsdataverse/sportsdataverse-js",
  "language": "JavaScript",
  "readme_contents": "# **sportsdataverse** <a href='https://js.sportsdataverse.org/'><img src='https://raw.githubusercontent.com/saiemgilani/sportsdataverse-js/main/docs2/static/img/sdv-js-logo.png' align=\"right\" width=\"20%\" min-width=\"100px\"/></a>\r\n\r\n![Lifecycle:maturing](https://img.shields.io/badge/lifecycle-maturing-blue.svg?style=for-the-badge&logo=github)\r\n![Contributors](https://img.shields.io/github/contributors/saiemgilani/sportsdataverse-js?style=for-the-badge)\r\n[![npm](https://img.shields.io/npm/v/sportsdataverse?style=for-the-badge)](https://www.npmjs.com/package/sportsdataverse)  [![npm](https://img.shields.io/npm/dm/sportsdataverse?style=for-the-badge)](https://www.npmjs.com/package/sportsdataverse)\r\n[![Twitter Follow](https://img.shields.io/twitter/follow/SportsDataverse?color=blue&label=%40SportsDataverse&logo=twitter&style=for-the-badge)](https://twitter.com/SportsDataverse) [![Twitter Follow](https://img.shields.io/twitter/follow/SaiemGilani?color=blue&label=%40SaiemGilani&logo=twitter&style=for-the-badge)](https://twitter.com/SaiemGilani)\r\n[![NPM](https://nodei.co/npm/sportsdataverse.png)](https://npmjs.org/package/sportsdataverse)\r\n\r\n\r\n## **Installation**\r\n\r\n```bash\r\nnpm install sportsdataverse\r\n```\r\n## **Documentation**\r\n\r\nFor more information on the package and function reference, please see the [sportsdataverse node.js documentation website](https://js.sportsdataverse.org/)\r\n\r\n## **Breaking Changes**\r\n\r\n[**Full News on Releases**](https://js.sportsdataverse.org/CHANGELOG)\r\n\r\n## Follow the [SportsDataverse](https://twitter.com/SportsDataverse) on Twitter and star this repo\r\n\r\n[![Twitter Follow](https://img.shields.io/twitter/follow/SportsDataverse?color=blue&label=%40SportsDataverse&logo=twitter&style=for-the-badge)](https://twitter.com/SportsDataverse) \r\n\r\n[![GitHub stars](https://img.shields.io/github/stars/saiemgilani/sportsdataverse-js.svg?color=eee&logo=github&style=for-the-badge&label=Star%20sportsdataverse-js&maxAge=2592000)](https://github.com/saiemgilani/sportsdataverse-js/stargazers/)\r\n\r\n## **Our Authors**\r\n\r\n-   [Saiem Gilani](https://twitter.com/saiemgilani)\r\n\r\n<a href=\"https://twitter.com/saiemgilani\" target=\"blank\"><img src=\"https://img.shields.io/twitter/follow/SaiemGilani?color=blue&label=%40SaiemGilani&logo=twitter&style=for-the-badge\" alt=\"@SaiemGilani\" /></a>\r\n<a href=\"https://github.com/saiemgilani\" target=\"blank\"><img src=\"https://img.shields.io/github/followers/saiemgilani?color=eee&logo=Github&style=for-the-badge\" alt=\"@saiemgilani\" /></a>\r\n\r\n\r\n## **Citations**\r\n\r\nTo cite the [**`sportsdataverse`**](https://js.sportsdataverse.org) Node.js package in publications, use:\r\n\r\nBibTex Citation\r\n```bibtex\r\n@misc{gilani_2021_sportsdataverse_js,\r\n  author = {Gilani, Saiem},\r\n  title = {sportsdataverse-js: The SportsDataverse's Node.js Package for Sports Data.},\r\n  url = {https://js.sportsdataverse.org},\r\n  year = {2021}\r\n}\r\n```\r\n\r\n## **Overview of Services**\r\n\r\nSupport for the following data from ESPN's endpoints:\r\n\r\n- play-by-play (including shot location data when available)\r\n- scores\r\n- schedule\r\n- standings\r\n- rankings (not available for professional sports)\r\n\r\nRecruiting data from 247Sports available for:\r\n\r\n- men's college basketball\r\n- college football\r\n\r\nThe following sports are available from ESPN:\r\n\r\n- Men's College Basketball\r\n- Women's College Basketball\r\n- College Football\r\n- WNBA\r\n- NBA\r\n- NFL\r\n- NHL\r\n- All team sports on the NCAA website:\r\n  - 'football'\r\n  - 'basketball-men'\r\n  - 'basketball-women'\r\n  - 'soccer-men'\r\n  - 'soccer-women'\r\n  - 'fieldhockey'\r\n  - 'volleyball-women'\r\n  - 'icehockey-men'\r\n  - 'icehockey-women'\r\n  - 'baseball'\r\n  - 'beach-volleyball'\r\n  - 'lacrosse-men'\r\n  - 'lacrosse-women'\r\n  - 'volleyball-men'\r\n\r\n## **API Reference**\r\n\r\nOperations for College Football.\n\n**Kind**: global namespace  \n\n* [cfb](#cfb) : <code>object</code>\n    * [.getPlayByPlay(id)](#cfb.getPlayByPlay) \u21d2\n    * [.getBoxScore(id)](#cfb.getBoxScore) \u21d2\n    * [.getSummary(id)](#cfb.getSummary) \u21d2\n    * [.getPicks(id)](#cfb.getPicks) \u21d2\n    * [.getPlayerRankings(year, page, group, state)](#cfb.getPlayerRankings) \u21d2\n    * [.getSchoolRankings(year, page)](#cfb.getSchoolRankings) \u21d2\n    * [.getSchoolCommits(year, school)](#cfb.getSchoolCommits) \u21d2\n    * [.getRankings(year, week)](#cfb.getRankings) \u21d2\n    * [.getSchedule(year, month, day, group, seasontype)](#cfb.getSchedule) \u21d2\n    * [.getScoreboard(year, month, day, group, seasontype, limit)](#cfb.getScoreboard) \u21d2\n    * [.getConferences(year, group)](#cfb.getConferences) \u21d2\n    * [.getStandings(year, group)](#cfb.getStandings) \u21d2\n    * [.getTeamList(group)](#cfb.getTeamList) \u21d2\n    * [.getTeamInfo(id)](#cfb.getTeamInfo) \u21d2\n    * [.getTeamPlayers(id)](#cfb.getTeamPlayers)\n\n<a name=\"cfb.getPlayByPlay\"></a>\n\n### cfb.getPlayByPlay(id) \u21d2\nGets the College Football game play-by-play data for a specified game.\n\n**Kind**: static method of [<code>cfb</code>](#cfb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Game id. |\n\n**Example**  \n```js\nconst result = await sdv.cfb.getPlayByPlay(401256194);\n```\n<a name=\"cfb.getBoxScore\"></a>\n\n### cfb.getBoxScore(id) \u21d2\nGets the College Football game box score data for a specified game.\n\n**Kind**: static method of [<code>cfb</code>](#cfb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Game id. |\n\n**Example**  \n```js\nconst result = await sdv.cfb.getBoxScore(401256194);\n```\n<a name=\"cfb.getSummary\"></a>\n\n### cfb.getSummary(id) \u21d2\nGets the College Football game summary data for a specified game.\n\n**Kind**: static method of [<code>cfb</code>](#cfb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Game id. |\n\n**Example**  \n```js\nconst result = await sdv.cfb.getSummary(401256194);\n```\n<a name=\"cfb.getPicks\"></a>\n\n### cfb.getPicks(id) \u21d2\nGets the College Football PickCenter data for a specified game.\n\n**Kind**: static method of [<code>cfb</code>](#cfb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Game id. |\n\n**Example**  \n```js\nconst result = await sdv.cfb.getPicks(401256194);\n```\n<a name=\"cfb.getPlayerRankings\"></a>\n\n### cfb.getPlayerRankings(year, page, group, state) \u21d2\nGets the College Football Player recruiting data for a specified year, page, position, state and institution type if available.\n\n**Kind**: static method of [<code>cfb</code>](#cfb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| year | <code>\\*</code> | Year (YYYY) |\n| page | <code>number</code> | Page (50 per page) |\n| group | <code>&quot;HighSchool&quot;</code> \\| <code>&quot;JuniorCollege&quot;</code> \\| <code>&quot;PrepSchool&quot;</code> | Institution Type |\n| state | <code>string</code> | State of recruit |\n\n**Example**  \n```js\nconst result = await sdv.cfb.getPlayerRankings({year: 2016});\n```\n<a name=\"cfb.getSchoolRankings\"></a>\n\n### cfb.getSchoolRankings(year, page) \u21d2\nGets the College Football School recruiting data for a specified year and page if available.\n\n**Kind**: static method of [<code>cfb</code>](#cfb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| year | <code>\\*</code> | Year (YYYY) |\n| page | <code>number</code> | Page (50 per page) |\n\n**Example**  \n```js\nconst result = await sdv.cfb.getSchoolRankings({year: 2016});\n```\n<a name=\"cfb.getSchoolCommits\"></a>\n\n### cfb.getSchoolCommits(year, school) \u21d2\nGets the College Football School commitment data for a specified school and year.\n\n**Kind**: static method of [<code>cfb</code>](#cfb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| year | <code>\\*</code> | Year (YYYY) |\n| school | <code>string</code> | School |\n\n**Example**  \n```js\nconst result = await sdv.cfb.getSchoolCommits({school: 'Florida State', year: 2021});\n```\n<a name=\"cfb.getRankings\"></a>\n\n### cfb.getRankings(year, week) \u21d2\nGets the CFB rankings data for a specified year and week if available.\n\n**Kind**: static method of [<code>cfb</code>](#cfb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| year | <code>\\*</code> | Year (YYYY) |\n| week | <code>\\*</code> | Week |\n\n**Example**  \n```js\nconst result = await sdv.cfb.getRankings(year = 2020, week = 4)\n```\n<a name=\"cfb.getSchedule\"></a>\n\n### cfb.getSchedule(year, month, day, group, seasontype) \u21d2\nGets the College Football schedule data for a specified date if available.\n\n**Kind**: static method of [<code>cfb</code>](#cfb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| year | <code>\\*</code> | Year (YYYY) |\n| month | <code>\\*</code> | Month (MM) |\n| day | <code>\\*</code> | Day (DD) |\n| group | <code>number</code> | Group is 80 for FBS, 81 for FCS |\n| seasontype | <code>number</code> | Pre-Season: 1, Regular Season: 2, Postseason: 3, Off-season: 4 |\n\n**Example**  \n```js\nconst result = await sdv.cfb.getSchedule(year = 2019, month = 11, day = 16, group=80)\n```\n<a name=\"cfb.getScoreboard\"></a>\n\n### cfb.getScoreboard(year, month, day, group, seasontype, limit) \u21d2\nGets the College Football scoreboard data for a specified date if available.\n\n**Kind**: static method of [<code>cfb</code>](#cfb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| year | <code>\\*</code> | Year (YYYY) |\n| month | <code>\\*</code> | Month (MM) |\n| day | <code>\\*</code> | Day (DD) |\n| group | <code>number</code> | Group is 80 for FBS, 81 for FCS |\n| seasontype | <code>number</code> | Pre-Season: 1, Regular Season: 2, Postseason: 3, Off-season: 4 |\n| limit | <code>number</code> | Limit on the number of results @default 300 |\n\n**Example**  \n```js\nconst result = await sdv.cfb.getScoreboard(\ryear = 2019, month = 11, day = 16, group=80\r)\n```\n<a name=\"cfb.getConferences\"></a>\n\n### cfb.getConferences(year, group) \u21d2\nGets the list of all College Football conferences and their identification info for ESPN.\n\n**Kind**: static method of [<code>cfb</code>](#cfb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| year | <code>number</code> | Season |\n| group | <code>number</code> | Group is 80 for FBS, 81 for FCS |\n\n**Example**  \n```js\nconst yr = 2021;\rconst result = await sdv.cfb.getConferences(year = yr, group = 80);\n```\n<a name=\"cfb.getStandings\"></a>\n\n### cfb.getStandings(year, group) \u21d2\nGets the team standings for College Football.\n\n**Kind**: static method of [<code>cfb</code>](#cfb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| year | <code>number</code> | Season |\n| group | <code>number</code> | Group is 80 for FBS, 81 for FCS |\n\n**Example**  \n```js\nconst yr = 2020;\rconst result = await sdv.cfb.getStandings(year = yr);\n```\n<a name=\"cfb.getTeamList\"></a>\n\n### cfb.getTeamList(group) \u21d2\nGets the list of all College Football teams their identification info for ESPN.\n\n**Kind**: static method of [<code>cfb</code>](#cfb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| group | <code>number</code> | Group is 80 for FBS, 81 for FCS |\n\n**Example**  \n```js\nconst result = await sdv.cfb.getTeamList(group=80);\n```\n<a name=\"cfb.getTeamInfo\"></a>\n\n### cfb.getTeamInfo(id) \u21d2\nGets the team info for a specific College Football team.\n\n**Kind**: static method of [<code>cfb</code>](#cfb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Team Id |\n\n**Example**  \n```js\nconst teamId = 52;\rconst result = await sdv.cfb.getTeamInfo(teamId);\n```\n<a name=\"cfb.getTeamPlayers\"></a>\n\n### cfb.getTeamPlayers(id)\nGets the team roster information for a specific College Football team.\n\n**Kind**: static method of [<code>cfb</code>](#cfb)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Team Id |\n\n**Example**  \n```js\nconst teamId = 52;\rconst result = await sdv.cfb.getTeamPlayers(teamId);\n```\n\r\nOperations for Men's College Basketball.\n\n**Kind**: global namespace  \n\n* [mbb](#mbb) : <code>object</code>\n    * [.getPlayByPlay(id)](#mbb.getPlayByPlay) \u21d2\n    * [.getBoxScore(id)](#mbb.getBoxScore) \u21d2\n    * [.getSummary(id)](#mbb.getSummary) \u21d2\n    * [.getPicks(id)](#mbb.getPicks) \u21d2\n    * [.getRankings(year, week)](#mbb.getRankings) \u21d2\n    * [.getPlayerRankings(year, page, group)](#mbb.getPlayerRankings) \u21d2\n    * [.getSchoolRankings(year, page)](#mbb.getSchoolRankings) \u21d2\n    * [.getSchoolCommits(year, school)](#mbb.getSchoolCommits) \u21d2\n    * [.getSchedule(year, month, day, group, seasontype)](#mbb.getSchedule) \u21d2\n    * [.getScoreboard(year, month, day, group, seasontype, limit)](#mbb.getScoreboard) \u21d2\n    * [.getConferences(year, group)](#mbb.getConferences) \u21d2\n    * [.getStandings(year, group)](#mbb.getStandings) \u21d2\n    * [.getTeamList(group)](#mbb.getTeamList) \u21d2\n    * [.getTeamInfo(id)](#mbb.getTeamInfo) \u21d2\n    * [.getTeamPlayers(id)](#mbb.getTeamPlayers) \u21d2\n\n<a name=\"mbb.getPlayByPlay\"></a>\n\n### mbb.getPlayByPlay(id) \u21d2\nGets the Men's College Basketball game play-by-play data for a specified game.\n\n**Kind**: static method of [<code>mbb</code>](#mbb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Game id. |\n\n**Example**  \n```js\nconst result = await sdv.mbb.getPlayByPlay(401260281);\n```\n<a name=\"mbb.getBoxScore\"></a>\n\n### mbb.getBoxScore(id) \u21d2\nGets the Men's College Basketball game box score data for a specified game.\n\n**Kind**: static method of [<code>mbb</code>](#mbb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Game id. |\n\n**Example**  \n```js\nconst result = await sdv.mbb.getBoxScore(401260281);\n```\n<a name=\"mbb.getSummary\"></a>\n\n### mbb.getSummary(id) \u21d2\nGets the Men's College Basketball game summary data for a specified game.\n\n**Kind**: static method of [<code>mbb</code>](#mbb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Game id. |\n\n**Example**  \n```js\nconst result = await sdv.mbb.getSummary(401260281);\n```\n<a name=\"mbb.getPicks\"></a>\n\n### mbb.getPicks(id) \u21d2\nGets the Men's College Basketball game PickCenter data for a specified game.\n\n**Kind**: static method of [<code>mbb</code>](#mbb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Game id. |\n\n**Example**  \n```js\nconst result = await sdv.mbb.getPicks(401260281);\n```\n<a name=\"mbb.getRankings\"></a>\n\n### mbb.getRankings(year, week) \u21d2\nGets the Men's College Basketball rankings data for a specified year and week if available.\n\n**Kind**: static method of [<code>mbb</code>](#mbb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| year | <code>\\*</code> | Year (YYYY) |\n| week | <code>\\*</code> | Week |\n\n**Example**  \n```js\nconst result = await sdv.mbb.getRankings(\ryear = 2020, week = 15\r)\n```\n<a name=\"mbb.getPlayerRankings\"></a>\n\n### mbb.getPlayerRankings(year, page, group) \u21d2\nGets the Men's College Basketball Player recruiting data for a specified year, page, position and institution type if available.\n\n**Kind**: static method of [<code>mbb</code>](#mbb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| year | <code>\\*</code> | Year (YYYY) |\n| page | <code>number</code> | Page (50 per page) |\n| group | <code>&quot;HighSchool&quot;</code> \\| <code>&quot;JuniorCollege&quot;</code> \\| <code>&quot;PrepSchool&quot;</code> | Institution Type |\n\n**Example**  \n```js\nconst result = await sdv.mbb.getPlayerRankings({year: 2016});\n```\n<a name=\"mbb.getSchoolRankings\"></a>\n\n### mbb.getSchoolRankings(year, page) \u21d2\nGets the Men's College Basketball School recruiting data for a specified year, page, position and institution type if available.\n\n**Kind**: static method of [<code>mbb</code>](#mbb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| year | <code>\\*</code> | Year (YYYY) |\n| page | <code>number</code> | Page (50 per page) |\n\n**Example**  \n```js\nconst result = await sdv.mbb.getSchoolRankings({year: 2016});\n```\n<a name=\"mbb.getSchoolCommits\"></a>\n\n### mbb.getSchoolCommits(year, school) \u21d2\nGets the Men's College Basketball School commitment data for a specified school and year.\n\n**Kind**: static method of [<code>mbb</code>](#mbb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| year | <code>\\*</code> | Year (YYYY) |\n| school | <code>string</code> | School |\n\n**Example**  \n```js\nconst result = await sdv.mbb.getSchoolCommits({school: 'Clemson', year: 2016});\n```\n<a name=\"mbb.getSchedule\"></a>\n\n### mbb.getSchedule(year, month, day, group, seasontype) \u21d2\nGets the Men's College Basketball schedule data for a specified date if available.\n\n**Kind**: static method of [<code>mbb</code>](#mbb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| year | <code>\\*</code> | Year (YYYY) |\n| month | <code>\\*</code> | Month (MM) |\n| day | <code>\\*</code> | Day (DD) |\n| group | <code>number</code> | Group is 50 for Division-I, 51 for Division-II, 52 for Division-III |\n| seasontype | <code>number</code> | Pre-Season: 1, Regular Season: 2, Postseason: 3, Off-season: 4 |\n\n**Example**  \n```js\nconst result = await sdv.mbb.getSchedule(\ryear = 2021, month = 02, day = 15, group=50\r)\n```\n<a name=\"mbb.getScoreboard\"></a>\n\n### mbb.getScoreboard(year, month, day, group, seasontype, limit) \u21d2\nGets the Men's College Basketball scoreboard data for a specified date if available.\n\n**Kind**: static method of [<code>mbb</code>](#mbb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| year | <code>\\*</code> | Year (YYYY) |\n| month | <code>\\*</code> | Month (MM) |\n| day | <code>\\*</code> | Day (DD) |\n| group | <code>number</code> | Group is 50 for Division-I, 51 for Division-II, 52 for Division-III |\n| seasontype | <code>number</code> | Pre-Season: 1, Regular Season: 2, Postseason: 3, Off-season: 4 |\n| limit | <code>number</code> | Limit on the number of results @default 300 |\n\n**Example**  \n```js\nconst result = await sdv.mbb.getScoreboard(\ryear = 2021, month = 02, day = 15, group=50\r)\n```\n<a name=\"mbb.getConferences\"></a>\n\n### mbb.getConferences(year, group) \u21d2\nGets the Men's College Basketball Conferences.\n\n**Kind**: static method of [<code>mbb</code>](#mbb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| year | <code>number</code> | Season |\n| group | <code>number</code> | Group is 50 for Division-I, 51 for Division-II, 52 for Division-III |\n\n**Example**  \n```js\nconst yr = 2021;\rconst result = await sdv.mbb.getConferences(year = yr, group = 50);\n```\n<a name=\"mbb.getStandings\"></a>\n\n### mbb.getStandings(year, group) \u21d2\nGets the team standings for Men's College Basketball.\n\n**Kind**: static method of [<code>mbb</code>](#mbb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| year | <code>number</code> | Season |\n| group | <code>number</code> | Group is 50 for Division-I, 51 for Division-II, 52 for Division-III, see wbb.getConferences() for more info |\n\n**Example**  \n```js\nconst yr = 2020;\rconst result = await sdv.mbb.getStandings(year = yr);\n```\n<a name=\"mbb.getTeamList\"></a>\n\n### mbb.getTeamList(group) \u21d2\nGets the list of all College Football teams their identification info for ESPN.\n\n**Kind**: static method of [<code>mbb</code>](#mbb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| group | <code>number</code> | Group is 50 for Division-I, 51 for Division-II, 52 for Division-III |\n\n**Example**  \n```js\nconst result = await sdv.mbb.getTeamList(group=50);\n```\n<a name=\"mbb.getTeamInfo\"></a>\n\n### mbb.getTeamInfo(id) \u21d2\nGets the team info for a specific College Basketball team.\n\n**Kind**: static method of [<code>mbb</code>](#mbb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Team Id |\n\n**Example**  \n```js\nconst teamId = 52;\rconst result = await sdv.mbb.getTeamInfo(teamId);\n```\n<a name=\"mbb.getTeamPlayers\"></a>\n\n### mbb.getTeamPlayers(id) \u21d2\nGets the team roster information for a specific Men's College Basketball team.\n\n**Kind**: static method of [<code>mbb</code>](#mbb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Team Id |\n\n**Example**  \n```js\nconst teamId = 52;\rconst result = await sdv.mbb.getTeamPlayers(teamId);\n```\n\r\nOperations for NBA.\n\n**Kind**: global namespace  \n\n* [nba](#nba) : <code>object</code>\n    * [.getPlayByPlay(id)](#nba.getPlayByPlay) \u21d2\n    * [.getBoxScore(id)](#nba.getBoxScore) \u21d2\n    * [.getSummary(id)](#nba.getSummary) \u21d2\n    * [.getPicks(id)](#nba.getPicks) \u21d2\n    * [.getSchedule(year, month, day)](#nba.getSchedule) \u21d2\n    * [.getScoreboard(year, month, day, limit)](#nba.getScoreboard) \u21d2\n    * [.getStandings(year, group)](#nba.getStandings) \u21d2\n    * [.getTeamList()](#nba.getTeamList) \u21d2\n    * [.getTeamInfo(id)](#nba.getTeamInfo) \u21d2\n    * [.getTeamPlayers(id)](#nba.getTeamPlayers) \u21d2\n\n<a name=\"nba.getPlayByPlay\"></a>\n\n### nba.getPlayByPlay(id) \u21d2\nGets the NBA game play-by-play data for a specified game.\n\n**Kind**: static method of [<code>nba</code>](#nba)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Game id. |\n\n**Example**  \n```js\nconst result = await sdv.nba.getPlayByPlay(401283399);\n```\n<a name=\"nba.getBoxScore\"></a>\n\n### nba.getBoxScore(id) \u21d2\nGets the NBA game box score data for a specified game.\n\n**Kind**: static method of [<code>nba</code>](#nba)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Game id. |\n\n**Example**  \n```js\nconst result = await sdv.nba.getBoxScore(401283399);\n```\n<a name=\"nba.getSummary\"></a>\n\n### nba.getSummary(id) \u21d2\nGets the NBA game summary data for a specified game.\n\n**Kind**: static method of [<code>nba</code>](#nba)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Game id. |\n\n**Example**  \n```js\nconst result = await sdv.nba.getSummary(401283399);\n```\n<a name=\"nba.getPicks\"></a>\n\n### nba.getPicks(id) \u21d2\nGets the NBA game PickCenter data for a specified game.\n\n**Kind**: static method of [<code>nba</code>](#nba)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Game id. |\n\n**Example**  \n```js\nconst result = await sdv.nba.getPicks(401283399);\n```\n<a name=\"nba.getSchedule\"></a>\n\n### nba.getSchedule(year, month, day) \u21d2\nGets the NBA schedule data for a specified date if available.\n\n**Kind**: static method of [<code>nba</code>](#nba)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| year | <code>\\*</code> | Year (YYYY) |\n| month | <code>\\*</code> | Month (MM) |\n| day | <code>\\*</code> | Day (DD) |\n\n**Example**  \n```js\nconst result = await sdv.nba.getSchedule(\ryear = 2016, month = 04, day = 15\r)\n```\n<a name=\"nba.getScoreboard\"></a>\n\n### nba.getScoreboard(year, month, day, limit) \u21d2\nGets the NBA scoreboard data for a specified date if available.\n\n**Kind**: static method of [<code>nba</code>](#nba)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| year | <code>\\*</code> | Year (YYYY) |\n| month | <code>\\*</code> | Month (MM) |\n| day | <code>\\*</code> | Day (DD) |\n| limit | <code>number</code> | Limit on the number of results @default 300 |\n\n**Example**  \n```js\nconst result = await sdv.nba.getScoreboard(\ryear = 2019, month = 11, day = 16\r)\n```\n<a name=\"nba.getStandings\"></a>\n\n### nba.getStandings(year, group) \u21d2\nGets the team standings for the NBA.\n\n**Kind**: static method of [<code>nba</code>](#nba)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| year | <code>number</code> | Season |\n| group | <code>string</code> | acceptable group names: 'league','conference','division' |\n\n**Example**  \n```js\nconst yr = 2016;\rconst result = await sdv.nba.getStandings(year = yr);\n```\n<a name=\"nba.getTeamList\"></a>\n\n### nba.getTeamList() \u21d2\nGets the list of all NBA teams their identification info for ESPN.\n\n**Kind**: static method of [<code>nba</code>](#nba)  \n**Returns**: json  \n**Example**  \n```js\nconst result = await sdv.nba.getTeamList();\n```\n<a name=\"nba.getTeamInfo\"></a>\n\n### nba.getTeamInfo(id) \u21d2\nGets the team info for a specific NBA team.\n\n**Kind**: static method of [<code>nba</code>](#nba)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Team Id |\n\n**Example**  \n```js\nconst teamId = 16;\rconst result = await sdv.nba.getTeamInfo(teamId);\n```\n<a name=\"nba.getTeamPlayers\"></a>\n\n### nba.getTeamPlayers(id) \u21d2\nGets the team roster information for a specific NBA team.\n\n**Kind**: static method of [<code>nba</code>](#nba)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Team Id |\n\n**Example**  \n```js\nconst teamId = 16;\rconst result = await sdv.nba.getTeamPlayers(teamId);\n```\n\r\nOperations for NCAA Sports.\n\n**Kind**: global namespace  \n\n* [ncaa](#ncaa) : <code>object</code>\n    * [.getRedirectUrl(url)](#ncaa.getRedirectUrl) \u21d2\n    * [.getInfo(game)](#ncaa.getInfo) \u21d2\n    * [.getBoxScore(game)](#ncaa.getBoxScore) \u21d2\n    * [.getPlayByPlay(game)](#ncaa.getPlayByPlay) \u21d2\n    * [.getTeamStats(game)](#ncaa.getTeamStats) \u21d2\n    * [.getScoringSummary(game)](#ncaa.getScoringSummary) \u21d2\n    * [.getScoreboard(sport, division, year, month, day)](#ncaa.getScoreboard) \u21d2\n    * [.getSports()](#ncaa.getSports) \u21d2\n    * [.getSeasons(sport)](#ncaa.getSeasons) \u21d2\n    * [.getDivisions(sport, season)](#ncaa.getDivisions) \u21d2\n    * [.getSportDivisionData(sport, season, division, rankingPeriod, type, gameHigh, category)](#ncaa.getSportDivisionData) \u21d2\n    * [.getPlayerData(sport, season, division, rankingPeriod, gameHigh, category)](#ncaa.getPlayerData) \u21d2\n    * [.getTeamData(sport, season, division, rankingPeriod, gameHigh, category)](#ncaa.getTeamData) \u21d2\n\n<a name=\"ncaa.getRedirectUrl\"></a>\n\n### ncaa.getRedirectUrl(url) \u21d2\nGets the gameId for older games whose url redirects to the current url pattern using the\rgame url fragment (relative to [https://ncaa.com](https://ncaa.com)) pulled from ncaaScoreboard\n\n**Kind**: static method of [<code>ncaa</code>](#ncaa)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| url | <code>string</code> | Game url as pulled from ncaaScoreboard.getNcaaScoreboard. |\n\n**Example**  \n```js\nconst result = await sdv.ncaaScoreboard.getNcaaScoreboard(\rsport = 'basketball-men', division = 'd3', year = 2019, month = 02, day = 15\r)\rconst urlGame = result[\"games\"][16][\"game\"][\"url\"]\rconst gameId = await sdv.ncaa.getRedirectUrl(url=urlGame);\n```\n<a name=\"ncaa.getInfo\"></a>\n\n### ncaa.getInfo(game) \u21d2\nGets the gameInfo data for a specified game.\n\n**Kind**: static method of [<code>ncaa</code>](#ncaa)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| game | <code>number</code> | Game id. |\n\n**Example**  \n```js\nconst result = await sdv.ncaa.getInfo(5764053);\n```\n<a name=\"ncaa.getBoxScore\"></a>\n\n### ncaa.getBoxScore(game) \u21d2\nGets the box score data for a specified game if available.\n\n**Kind**: static method of [<code>ncaa</code>](#ncaa)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| game | <code>number</code> | Game id. |\n\n**Example**  \n```js\nconst result = await sdv.ncaa.getBoxScore(5764053);\n```\n<a name=\"ncaa.getPlayByPlay\"></a>\n\n### ncaa.getPlayByPlay(game) \u21d2\nGets the play-by-play data for a specified game if available.\n\n**Kind**: static method of [<code>ncaa</code>](#ncaa)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| game | <code>number</code> | Game id. |\n\n**Example**  \n```js\nconst result = await sdv.ncaa.getPlayByPlay(5764053);\n```\n<a name=\"ncaa.getTeamStats\"></a>\n\n### ncaa.getTeamStats(game) \u21d2\nGets the team stats data for a specified game if available.\n\n**Kind**: static method of [<code>ncaa</code>](#ncaa)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| game | <code>number</code> | Game id. |\n\n**Example**  \n```js\nconst result = await sdv.ncaa.getTeamStats(5764053);\n```\n<a name=\"ncaa.getScoringSummary\"></a>\n\n### ncaa.getScoringSummary(game) \u21d2\nGets the scoring summary data for a specified game if available.\n\n**Kind**: static method of [<code>ncaa</code>](#ncaa)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| game | <code>number</code> | Game id. |\n\n**Example**  \n```js\nconst result = await sdv.ncaa.getScoringSummary(5764053);\n```\n<a name=\"ncaa.getScoreboard\"></a>\n\n### ncaa.getScoreboard(sport, division, year, month, day) \u21d2\nGets the scoreboard data for a specified date and team sport if available.\n\n**Kind**: static method of [<code>ncaa</code>](#ncaa)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| sport | <code>string</code> | Sport name. Acceptable values: 'football','basketball-men', 'basketball-women', 'baseball', 'softball', 'soccer-men','soccer-women', 'fieldhockey', 'icehockey-men','icehockey-women', 'lacrosse-men','lacrosse-women', 'beach-volleyball', 'volleyball-women', 'volleyball-men' |\n| division | <code>string</code> | Division of teams desired.  Acceptable values: Football - ['fbs','fcs','d2','d3'] All others - ['d1','d2','d3'] |\n| year | <code>\\*</code> | Year (YYYY) |\n| month | <code>\\*</code> | Month (MM) |\n| day | <code>\\*</code> | Day (DD) |\n\n**Example**  \n```js\nconst result = await sdv.ncaa.getScoreboard(\rsport = 'basketball-men', division = 'd3', year = 2019, month = 02, day = 15\r)\n```\n<a name=\"ncaa.getSports\"></a>\n\n### ncaa.getSports() \u21d2\nRetrieves the set of sports and their abbreviations.\n\n**Kind**: static method of [<code>ncaa</code>](#ncaa)  \n**Returns**: json  \n**Example**  \n```js\nconst result = sdv.ncaa.getSports();\n```\n<a name=\"ncaa.getSeasons\"></a>\n\n### ncaa.getSeasons(sport) \u21d2\nRetrieves the seasons for the selected sport.\n\n**Kind**: static method of [<code>ncaa</code>](#ncaa)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| sport | <code>string</code> | Sport abbreviation. Acceptable values: 'MBA' = Baseball, 'MBB' = Men's basketball, 'MFB' = Men's Football, 'MIH' = Men's Ice-hockey, 'MLA' = Men's Lacrosse', 'MSO' = Men's Soccer, 'MTE' = Men's Tennis, 'MVB' = Men's Volleyball, 'MWP' = Men's Water Polo, 'WBB' = Women's Basketball, 'WBW' = Women's Bowling, 'WFH' = Field Hockey, 'WIH' = Women's Ice-Hockey, 'WLA' = Women's Lacrosse, 'WSB' = Women's Softball, 'WSO' = Women's Soccer, 'WSV' = Women's Beach Volleyball, 'WTE' = Women's Tennis, 'WVB' = Women's Volleyball, 'WWP' = Women's Water Polo |\n\n**Example**  \n```js\nconst result = sdv.ncaa.getSeasons(sport='MBB');\n```\n<a name=\"ncaa.getDivisions\"></a>\n\n### ncaa.getDivisions(sport, season) \u21d2\nRetrieves the Divisions for the selected sport and season.\n\n**Kind**: static method of [<code>ncaa</code>](#ncaa)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| sport | <code>string</code> | Sport abbreviation. Acceptable values: 'MBA' = Baseball, 'MBB' = Men's basketball, 'MFB' = Men's Football, 'MIH' = Men's Ice-hockey, 'MLA' = Men's Lacrosse', 'MSO' = Men's Soccer, 'MTE' = Men's Tennis, 'MVB' = Men's Volleyball, 'MWP' = Men's Water Polo, 'WBB' = Women's Basketball, 'WBW' = Women's Bowling, 'WFH' = Field Hockey, 'WIH' = Women's Ice-Hockey, 'WLA' = Women's Lacrosse, 'WSB' = Women's Softball, 'WSO' = Women's Soccer, 'WSV' = Women's Beach Volleyball, 'WTE' = Women's Tennis, 'WVB' = Women's Volleyball, 'WWP' = Women's Water Polo |\n| season | <code>string</code> | Season for sport |\n\n**Example**  \n```js\nconst result = sdv.ncaa.getDivisions(sport='MBB', season='2017');\n```\n<a name=\"ncaa.getSportDivisionData\"></a>\n\n### ncaa.getSportDivisionData(sport, season, division, rankingPeriod, type, gameHigh, category) \u21d2\nRequest the data from the NCAA Stats website.\n\n**Kind**: static method of [<code>ncaa</code>](#ncaa)  \n**Returns**: json  \n\n| Param | Description |\n| --- | --- |\n| sport | Sport abbreviation. Acceptable values: 'MBA' = Baseball, 'MBB' = Men's basketball, 'MFB' = Men's Football, 'MIH' = Men's Ice-hockey, 'MLA' = Men's Lacrosse', 'MSO' = Men's Soccer, 'MTE' = Men's Tennis, 'MVB' = Men's Volleyball, 'MWP' = Men's Water Polo, 'WBB' = Women's Basketball, 'WBW' = Women's Bowling, 'WFH' = Field Hockey, 'WIH' = Women's Ice-Hockey, 'WLA' = Women's Lacrosse, 'WSB' = Women's Softball, 'WSO' = Women's Soccer, 'WSV' = Women's Beach Volleyball, 'WTE' = Women's Tennis, 'WVB' = Women's Volleyball, 'WWP' = Women's Water Polo |\n| season | Season of query, value for 2016-2017 season would be 2017. |\n| division | Division, for college football: 11 for FBS, 12 for FCS, otherwise 1 for Division-I, 2 for Division-II, 3 for Division-III. |\n| rankingPeriod | Integer value indicating the ranking period, options can be found from using the @function ncaa.getSportDivisionData function. |\n| type | Individual or Team type of statistics |\n| gameHigh | logical, indicating whether the statistic desired is of the game-high variety |\n| category | Value for the stat category, can also be found using the @function ncaa.getSportDivisionData |\n\n**Example**  \n```js\nconst sportDivisionData = sdv.ncaa.getSportDivisionData(sport='MFB',season='2016',division=12,type='team',gameHigh=true);\n```\n<a name=\"ncaa.getPlayerData\"></a>\n\n### ncaa.getPlayerData(sport, season, division, rankingPeriod, gameHigh, category) \u21d2\nGet the Player Data from the NCAA Stats website.\n\n**Kind**: static method of [<code>ncaa</code>](#ncaa)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| sport |  | Sport abbreviation. Acceptable values: 'MBA' = Baseball, 'MBB' = Men's basketball, 'MFB' = Men's Football, 'MIH' = Men's Ice-hockey, 'MLA' = Men's Lacrosse', 'MSO' = Men's Soccer, 'MTE' = Men's Tennis, 'MVB' = Men's Volleyball, 'MWP' = Men's Water Polo, 'WBB' = Women's Basketball, 'WBW' = Women's Bowling, 'WFH' = Field Hockey, 'WIH' = Women's Ice-Hockey, 'WLA' = Women's Lacrosse, 'WSB' = Women's Softball, 'WSO' = Women's Soccer, 'WSV' = Women's Beach Volleyball, 'WTE' = Women's Tennis, 'WVB' = Women's Volleyball, 'WWP' = Women's Water Polo |\n| season |  | Season of query, value for 2016-2017 season would be 2017. |\n| division |  | Division, for college football: 11 for FBS, 12 for FCS, otherwise 1 for Division-I, 2 for Division-II, 3 for Division-III. |\n| rankingPeriod |  | Integer value indicating the ranking period, options can be found from using the @function ncaa.getSportDivisionData function. |\n| gameHigh | <code>&#x27;Y&#x27;</code> \\| <code>&#x27;N&#x27;</code> | logical, indicating whether the statistic desired is of the game-high variety |\n| category |  | Value for the stat category, can also be found using the @function ncaa.getSportDivisionData |\n\n**Example**  \n```js\nconst players =  await sdv.ncaa.getPlayerData(sport = 'MFB', year = '2017', division = '11',rankingPeriod = '52', gameHigh='N', category = '20')\n```\n<a name=\"ncaa.getTeamData\"></a>\n\n### ncaa.getTeamData(sport, season, division, rankingPeriod, gameHigh, category) \u21d2\nGet the Team Data from the NCAA Stats website.\n\n**Kind**: static method of [<code>ncaa</code>](#ncaa)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| sport |  | Sport abbreviation. Acceptable values: 'MBA' = Baseball, 'MBB' = Men's basketball, 'MFB' = Men's Football, 'MIH' = Men's Ice-hockey, 'MLA' = Men's Lacrosse', 'MSO' = Men's Soccer, 'MTE' = Men's Tennis, 'MVB' = Men's Volleyball, 'MWP' = Men's Water Polo, 'WBB' = Women's Basketball, 'WBW' = Women's Bowling, 'WFH' = Field Hockey, 'WIH' = Women's Ice-Hockey, 'WLA' = Women's Lacrosse, 'WSB' = Women's Softball, 'WSO' = Women's Soccer, 'WSV' = Women's Beach Volleyball, 'WTE' = Women's Tennis, 'WVB' = Women's Volleyball, 'WWP' = Women's Water Polo |\n| season |  | Season of query, value for 2016-2017 season would be 2017. |\n| division |  | Division, for college football: 11 for FBS, 12 for FCS, otherwise 1 for Division-I, 2 for Division-II, 3 for Division-III. |\n| rankingPeriod |  | Integer value indicating the ranking period, options can be found from using the @function ncaaSports.getSportDivisionData function. |\n| gameHigh | <code>&#x27;Y&#x27;</code> \\| <code>&#x27;N&#x27;</code> | logical, indicating whether the statistic desired is of the game-high variety |\n| category |  | Value for the stat category, can also be found using the @function ncaaSports.getSportDivisionData |\n\n**Example**  \n```js\nconst teams =  await sdv.ncaa.getTeamData(sport = 'MFB', year = '2017', division = '11', rankingPeriod = '52', gameHigh='N', category = '20')\n```\n\r\nOperations for NFL.\n\n**Kind**: global namespace  \n\n* [nfl](#nfl) : <code>object</code>\n    * [.getPlayByPlay(id)](#nfl.getPlayByPlay) \u21d2\n    * [.getBoxScore(id)](#nfl.getBoxScore) \u21d2\n    * [.getSummary(id)](#nfl.getSummary) \u21d2\n    * [.getPicks(id)](#nfl.getPicks) \u21d2\n    * [.getSchedule(year, month, day)](#nfl.getSchedule) \u21d2\n    * [.getScoreboard(year, month, day, limit)](#nfl.getScoreboard) \u21d2\n    * [.getStandings(year, group)](#nfl.getStandings) \u21d2\n    * [.getTeamList()](#nfl.getTeamList)\n    * [.getTeamInfo(id)](#nfl.getTeamInfo) \u21d2\n    * [.getTeamPlayers(id)](#nfl.getTeamPlayers) \u21d2\n\n<a name=\"nfl.getPlayByPlay\"></a>\n\n### nfl.getPlayByPlay(id) \u21d2\nGets the NFL game play-by-play data for a specified game.\n\n**Kind**: static method of [<code>nfl</code>](#nfl)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Game id. |\n\n**Example**  \n```js\nconst result = await sdv.nfl.getPlayByPlay(401220403);\n```\n<a name=\"nfl.getBoxScore\"></a>\n\n### nfl.getBoxScore(id) \u21d2\nGets the NFL game box score data for a specified game.\n\n**Kind**: static method of [<code>nfl</code>](#nfl)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Game id. |\n\n**Example**  \n```js\nconst result = await sdv.nfl.getBoxScore(401220403);\n```\n<a name=\"nfl.getSummary\"></a>\n\n### nfl.getSummary(id) \u21d2\nGets the NFL game summary data for a specified game.\n\n**Kind**: static method of [<code>nfl</code>](#nfl)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Game id. |\n\n**Example**  \n```js\nconst result = await sdv.nfl.getSummary(401220403);\n```\n<a name=\"nfl.getPicks\"></a>\n\n### nfl.getPicks(id) \u21d2\nGets the NFL PickCenter data for a specified game.\n\n**Kind**: static method of [<code>nfl</code>](#nfl)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Game id. |\n\n**Example**  \n```js\nconst result = await sdv.nfl.getPicks(401220403);\n```\n<a name=\"nfl.getSchedule\"></a>\n\n### nfl.getSchedule(year, month, day) \u21d2\nGets the NFL schedule data for a specified date if available.\n\n**Kind**: static method of [<code>nfl</code>](#nfl)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| year | <code>\\*</code> | Year (YYYY) |\n| month | <code>\\*</code> | Month (MM) |\n| day | <code>\\*</code> | Day (DD) |\n\n**Example**  \n```js\nconst result = await sdv.nfl.getSchedule(\ryear = 2019, month = 11, day = 17\r)\n```\n<a name=\"nfl.getScoreboard\"></a>\n\n### nfl.getScoreboard(year, month, day, limit) \u21d2\nGets the NFL scoreboard data for a specified date if available.\n\n**Kind**: static method of [<code>nfl</code>](#nfl)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| year | <code>\\*</code> | Year (YYYY) |\n| month | <code>\\*</code> | Month (MM) |\n| day | <code>\\*</code> | Day (DD) |\n| limit | <code>number</code> | Limit on the number of results @default 300 |\n\n**Example**  \n```js\nconst result = await sdv.nfl.getScoreboard(\ryear = 2019, month = 11, day = 17\r)\n```\n<a name=\"nfl.getStandings\"></a>\n\n### nfl.getStandings(year, group) \u21d2\nGets the team standings for the NFL.\n\n**Kind**: static method of [<code>nfl</code>](#nfl)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| year | <code>number</code> | Season |\n| group | <code>string</code> | acceptable group names: 'league','conference','division' |\n\n**Example**  \n```js\nconst yr = 2021;\rconst result = await sdv.nfl.getStandings(year = yr);\n```\n<a name=\"nfl.getTeamList\"></a>\n\n### nfl.getTeamList()\nGets the list of all NFL teams their identification info for ESPN.\n\n**Kind**: static method of [<code>nfl</code>](#nfl)  \n**Example**  \n```js\nconst result = await sdv.nfl.getTeamList();\n```\n<a name=\"nfl.getTeamInfo\"></a>\n\n### nfl.getTeamInfo(id) \u21d2\nGets the team info for a specific NFL team.\n\n**Kind**: static method of [<code>nfl</code>](#nfl)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Team Id |\n\n**Example**  \n```js\nconst teamId = 16;\rconst result = await sdv.nfl.getTeamInfo(teamId);\n```\n<a name=\"nfl.getTeamPlayers\"></a>\n\n### nfl.getTeamPlayers(id) \u21d2\nGets the team roster information for a specific NFL team.\n\n**Kind**: static method of [<code>nfl</code>](#nfl)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Team Id |\n\n**Example**  \n```js\nconst teamId = 16;\rconst result = await sdv.nfl.getTeamPlayers(teamId);\n```\n\r\nOperations for NHL.\n\n**Kind**: global namespace  \n\n* [nhl](#nhl) : <code>object</code>\n    * [.getPlayByPlay(id)](#nhl.getPlayByPlay) \u21d2\n    * [.getBoxScore(id)](#nhl.getBoxScore) \u21d2\n    * [.getSummary(id)](#nhl.getSummary) \u21d2\n    * [.getPicks(id)](#nhl.getPicks) \u21d2\n    * [.getSchedule(year, month, day)](#nhl.getSchedule) \u21d2\n    * [.getScoreboard(year, month, day, limit)](#nhl.getScoreboard) \u21d2\n    * [.getStandings(year, group)](#nhl.getStandings) \u21d2\n    * [.getTeamList()](#nhl.getTeamList)\n    * [.getTeamInfo(id)](#nhl.getTeamInfo) \u21d2\n    * [.getTeamPlayers(id)](#nhl.getTeamPlayers) \u21d2\n\n<a name=\"nhl.getPlayByPlay\"></a>\n\n### nhl.getPlayByPlay(id) \u21d2\nGets the NHL game play-by-play data for a specified game.\n\n**Kind**: static method of [<code>nhl</code>](#nhl)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Game id. |\n\n**Example**  \n```js\nconst result = await sdv.nhl.getPlayByPlay(401272446);\n```\n<a name=\"nhl.getBoxScore\"></a>\n\n### nhl.getBoxScore(id) \u21d2\nGets the NHL game box score data for a specified game.\n\n**Kind**: static method of [<code>nhl</code>](#nhl)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Game id. |\n\n**Example**  \n```js\nconst result = await sdv.nhl.getBoxScore(401272446);\n```\n<a name=\"nhl.getSummary\"></a>\n\n### nhl.getSummary(id) \u21d2\nGets the NHL game summary data for a specified game.\n\n**Kind**: static method of [<code>nhl</code>](#nhl)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Game id. |\n\n**Example**  \n```js\nconst result = await sdv.nhl.getSummary(401272446);\n```\n<a name=\"nhl.getPicks\"></a>\n\n### nhl.getPicks(id) \u21d2\nGets the NHL PickCenter data for a specified game.\n\n**Kind**: static method of [<code>nhl</code>](#nhl)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Game id. |\n\n**Example**  \n```js\nconst result = await sdv.nhl.getPicks(401272446);\n```\n<a name=\"nhl.getSchedule\"></a>\n\n### nhl.getSchedule(year, month, day) \u21d2\nGets the NHL schedule data for a specified date if available.\n\n**Kind**: static method of [<code>nhl</code>](#nhl)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| year | <code>\\*</code> | Year (YYYY) |\n| month | <code>\\*</code> | Month (MM) |\n| day | <code>\\*</code> | Day (DD) |\n\n**Example**  \n```js\nconst result = await sdv.nhl.getSchedule(\ryear = 2019, month = 11, day = 17\r)\n```\n<a name=\"nhl.getScoreboard\"></a>\n\n### nhl.getScoreboard(year, month, day, limit) \u21d2\nGets the NHL scoreboard data for a specified date if available.\n\n**Kind**: static method of [<code>nhl</code>](#nhl)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| year | <code>\\*</code> | Year (YYYY) |\n| month | <code>\\*</code> | Month (MM) |\n| day | <code>\\*</code> | Day (DD) |\n| limit | <code>number</code> | Limit on the number of results @default 300 |\n\n**Example**  \n```js\nconst result = await sdv.nhl.getScoreboard(\ryear = 2019, month = 11, day = 16\r)\n```\n<a name=\"nhl.getStandings\"></a>\n\n### nhl.getStandings(year, group) \u21d2\nGets the team standings for the NHL.\n\n**Kind**: static method of [<code>nhl</code>](#nhl)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| year | <code>number</code> | Season |\n| group | <code>string</code> | acceptable group names: 'league','conference','division' |\n\n**Example**  \n```js\nconst yr = 2016;\rconst result = await sdv.nhl.getStandings(year = yr);\n```\n<a name=\"nhl.getTeamList\"></a>\n\n### nhl.getTeamList()\nGets the list of all NHL teams their identification info for ESPN.\n\n**Kind**: static method of [<code>nhl</code>](#nhl)  \n**Example**  \n```js\nconst result = await sdv.nhl.getTeamList();\n```\n<a name=\"nhl.getTeamInfo\"></a>\n\n### nhl.getTeamInfo(id) \u21d2\nGets the team info for a specific NHL team.\n\n**Kind**: static method of [<code>nhl</code>](#nhl)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Team Id |\n\n**Example**  \n```js\nconst teamId = 16;\rconst result = await sdv.nhl.getTeamInfo(teamId);\n```\n<a name=\"nhl.getTeamPlayers\"></a>\n\n### nhl.getTeamPlayers(id) \u21d2\nGets the team roster information for a specific NHL team.\n\n**Kind**: static method of [<code>nhl</code>](#nhl)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Team Id |\n\n**Example**  \n```js\nconst teamId = 16;\rconst result = await sdv.nhl.getTeamPlayers(teamId);\n```\n\r\nOperations for WBB.\n\n**Kind**: global namespace  \n\n* [wbb](#wbb) : <code>object</code>\n    * [.getPlayByPlay(id)](#wbb.getPlayByPlay) \u21d2\n    * [.getBoxScore(id)](#wbb.getBoxScore) \u21d2\n    * [.getSummary(id)](#wbb.getSummary) \u21d2\n    * [.getRankings(year, week)](#wbb.getRankings) \u21d2\n    * [.getSchedule(year, month, day, group, seasontype, limit)](#wbb.getSchedule) \u21d2\n    * [.getScoreboard(year, month, day, group, seasontype, limit)](#wbb.getScoreboard) \u21d2\n    * [.getConferences(year, group)](#wbb.getConferences) \u21d2\n    * [.getStandings(year, group)](#wbb.getStandings) \u21d2\n    * [.getTeamList(group)](#wbb.getTeamList) \u21d2\n    * [.getTeamInfo(id)](#wbb.getTeamInfo) \u21d2\n    * [.getTeamPlayers(id)](#wbb.getTeamPlayers) \u21d2\n\n<a name=\"wbb.getPlayByPlay\"></a>\n\n### wbb.getPlayByPlay(id) \u21d2\nGets the Women's College Basketball game play-by-play data for a specified game.\n\n**Kind**: static method of [<code>wbb</code>](#wbb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Game id. |\n\n**Example**  \n```js\nconst result = await sdv.wbb.getPlayByPlay(401260565);\n```\n<a name=\"wbb.getBoxScore\"></a>\n\n### wbb.getBoxScore(id) \u21d2\nGets the Women's College Basketball game box score data for a specified game.\n\n**Kind**: static method of [<code>wbb</code>](#wbb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Game id. |\n\n**Example**  \n```js\nconst result = await sdv.wbb.getBoxScore(401260565);\n```\n<a name=\"wbb.getSummary\"></a>\n\n### wbb.getSummary(id) \u21d2\nGets the Women's College Basketball game summary data for a specified game.\n\n**Kind**: static method of [<code>wbb</code>](#wbb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Game id. |\n\n**Example**  \n```js\nconst result = await sdv.wbb.getSummary(401260565);\n```\n<a name=\"wbb.getRankings\"></a>\n\n### wbb.getRankings(year, week) \u21d2\nGets the WBB rankings data for a specified year and week if available.\n\n**Kind**: static method of [<code>wbb</code>](#wbb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| year | <code>\\*</code> | Year (YYYY) |\n| week | <code>\\*</code> | Week |\n\n**Example**  \n```js\nconst result = await sdv.wbb.getRankings(\ryear = 2021, week = 4\r)\n```\n<a name=\"wbb.getSchedule\"></a>\n\n### wbb.getSchedule(year, month, day, group, seasontype, limit) \u21d2\nGets the Women's College Basketball schedule data for a specified date if available.\n\n**Kind**: static method of [<code>wbb</code>](#wbb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| year | <code>\\*</code> | Year (YYYY) |\n| month | <code>\\*</code> | Month (MM) |\n| day | <code>\\*</code> | Day (DD) |\n| group | <code>number</code> | Group is 50 for Division-I, 51 for Division-II, 52 for Division-III |\n| seasontype | <code>number</code> | Pre-Season: 1, Regular Season: 2, Postseason: 3, Off-season: 4 |\n| limit | <code>number</code> | Limit on the number of results @default 300 |\n\n**Example**  \n```js\nconst result = await sdv.wbb.getSchedule(\ryear = 2021, month = 02, day = 15, group=50\r)\n```\n<a name=\"wbb.getScoreboard\"></a>\n\n### wbb.getScoreboard(year, month, day, group, seasontype, limit) \u21d2\nGets the Women's College Basketball scoreboard data for a specified date if available.\n\n**Kind**: static method of [<code>wbb</code>](#wbb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| year | <code>\\*</code> | Year (YYYY) |\n| month | <code>\\*</code> | Month (MM) |\n| day | <code>\\*</code> | Day (DD) |\n| group | <code>number</code> | Group is 50 for Division-I, 51 for Division-II, 52 for Division-III |\n| seasontype | <code>number</code> | Pre-Season: 1, Regular Season: 2, Postseason: 3, Off-season: 4 |\n| limit | <code>number</code> | Limit on the number of results @default 300 |\n\n**Example**  \n```js\nconst result = await sdv.wbb.getScoreboard(\ryear = 2019, month = 02, day = 15, group=50\r)\n```\n<a name=\"wbb.getConferences\"></a>\n\n### wbb.getConferences(year, group) \u21d2\nGets the list of all Women's College Basketball conferences and their identification info for ESPN.\n\n**Kind**: static method of [<code>wbb</code>](#wbb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| year | <code>number</code> | Season |\n| group | <code>number</code> | Group is 50 for Division-I, 51 for Division-II, 52 for Division-III |\n\n**Example**  \n```js\nconst yr = 2021;\rconst result = await sdv.wbb.getConferences(year = yr, group = 50);\n```\n<a name=\"wbb.getStandings\"></a>\n\n### wbb.getStandings(year, group) \u21d2\nGets the team standings for Women's College Basketball.\n\n**Kind**: static method of [<code>wbb</code>](#wbb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| year | <code>number</code> | Season |\n| group | <code>number</code> | Group is 50 for Division-I, 51 for Division-II, 52 for Division-III, see wbb.getConferences() for more info |\n\n**Example**  \n```js\nconst yr = 2020;\rconst result = await sdv.wbb.getStandings(year = yr);\n```\n<a name=\"wbb.getTeamList\"></a>\n\n### wbb.getTeamList(group) \u21d2\nGets the list of all Women's College Basketball teams their identification info for ESPN.\n\n**Kind**: static method of [<code>wbb</code>](#wbb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| group | <code>number</code> | Group is 50 for Division I, 51 for Division II, 52 for Division III |\n\n**Example**  \n```js\nget list of teams\rconst result = await sdv.wbb.getTeamList(group=50);\n```\n<a name=\"wbb.getTeamInfo\"></a>\n\n### wbb.getTeamInfo(id) \u21d2\nGets the team info for a specific WBB team.\n\n**Kind**: static method of [<code>wbb</code>](#wbb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Team Id |\n\n**Example**  \n```js\nconst teamId = 52;\rconst result = await sdv.wbb.getTeamInfo(teamId);\n```\n<a name=\"wbb.getTeamPlayers\"></a>\n\n### wbb.getTeamPlayers(id) \u21d2\nGets the team roster information for a specific WBB team.\n\n**Kind**: static method of [<code>wbb</code>](#wbb)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Team Id |\n\n**Example**  \n```js\nconst teamId = 52;\rconst result = await sdv.wbb.getTeamPlayers(teamId);\n```\n\r\nOperations for WNBA.\n\n**Kind**: global namespace  \n\n* [wnba](#wnba) : <code>object</code>\n    * [.getPlayByPlay(id)](#wnba.getPlayByPlay) \u21d2\n    * [.getBoxScore(id)](#wnba.getBoxScore) \u21d2\n    * [.getSummary(id)](#wnba.getSummary) \u21d2\n    * [.getSchedule(year, month, day)](#wnba.getSchedule) \u21d2\n    * [.getScoreboard(year, month, day, limit)](#wnba.getScoreboard) \u21d2\n    * [.getStandings(year, group)](#wnba.getStandings) \u21d2\n    * [.getTeamList()](#wnba.getTeamList) \u21d2\n    * [.getTeamInfo(id)](#wnba.getTeamInfo) \u21d2\n    * [.getTeamPlayers(id)](#wnba.getTeamPlayers) \u21d2\n\n<a name=\"wnba.getPlayByPlay\"></a>\n\n### wnba.getPlayByPlay(id) \u21d2\nGets the WNBA game play-by-play data for a specified game.\n\n**Kind**: static method of [<code>wnba</code>](#wnba)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Game id. |\n\n**Example**  \n```js\nconst result = await sdv.wnba.getPlayByPlay(401244185);\n```\n<a name=\"wnba.getBoxScore\"></a>\n\n### wnba.getBoxScore(id) \u21d2\nGets the WNBA game box score data for a specified game.\n\n**Kind**: static method of [<code>wnba</code>](#wnba)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Game id. |\n\n**Example**  \n```js\nconst result = await sdv.wnba.getBoxScore(401244185);\n```\n<a name=\"wnba.getSummary\"></a>\n\n### wnba.getSummary(id) \u21d2\nGets the WNBA game summary data for a specified game.\n\n**Kind**: static method of [<code>wnba</code>](#wnba)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Game id. |\n\n**Example**  \n```js\nconst result = await sdv.wnba.getSummary(401244185);\n```\n<a name=\"wnba.getSchedule\"></a>\n\n### wnba.getSchedule(year, month, day) \u21d2\nGets the WNBA schedule data for a specified date if available.\n\n**Kind**: static method of [<code>wnba</code>](#wnba)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| year | <code>\\*</code> | Year (YYYY) |\n| month | <code>\\*</code> | Month (MM) |\n| day | <code>\\*</code> | Day (DD) |\n\n**Example**  \n```js\nconst result = await sdv.wnba.getSchedule(\ryear = 2019, month = 07, day = 15\r)\n```\n<a name=\"wnba.getScoreboard\"></a>\n\n### wnba.getScoreboard(year, month, day, limit) \u21d2\nGets the WNBA scoreboard data for a specified date if available.\n\n**Kind**: static method of [<code>wnba</code>](#wnba)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| year | <code>\\*</code> | Year (YYYY) |\n| month | <code>\\*</code> | Month (MM) |\n| day | <code>\\*</code> | Day (DD) |\n| limit | <code>number</code> | Limit on the number of results @default 300 |\n\n**Example**  \n```js\nconst result = await sdv.wnba.getScoreboard(\ryear = 2019, month = 07, day = 15\r)\n```\n<a name=\"wnba.getStandings\"></a>\n\n### wnba.getStandings(year, group) \u21d2\nGets the team standings for the WNBA.\n\n**Kind**: static method of [<code>wnba</code>](#wnba)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| year | <code>number</code> | Season |\n| group | <code>string</code> | acceptable group names: 'league','conference' |\n\n**Example**  \n```js\nconst yr = 2016;\rconst result = await sdv.wnba.getStandings(year = yr);\n```\n<a name=\"wnba.getTeamList\"></a>\n\n### wnba.getTeamList() \u21d2\nGets the list of all WNBA teams their identification info for ESPN.\n\n**Kind**: static method of [<code>wnba</code>](#wnba)  \n**Returns**: json  \n**Example**  \n```js\nconst result = await sdv.wnba.getTeamList();\n```\n<a name=\"wnba.getTeamInfo\"></a>\n\n### wnba.getTeamInfo(id) \u21d2\nGets the team info for a specific WNBA team.\n\n**Kind**: static method of [<code>wnba</code>](#wnba)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Team Id |\n\n**Example**  \n```js\nconst teamId = 16;\rconst result = await sdv.wnba.getTeamInfo(teamId);\n```\n<a name=\"wnba.getTeamPlayers\"></a>\n\n### wnba.getTeamPlayers(id) \u21d2\nGets the team roster information for a specific WNBA team.\n\n**Kind**: static method of [<code>wnba</code>](#wnba)  \n**Returns**: json  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>number</code> | Team Id |\n\n**Example**  \n```js\nconst teamId = 16;\rconst result = await sdv.wnba.getTeamPlayers(teamId);\n```\n\r\n* * *\r\n\r\n&copy; 2020-21 <a href=\"https://js.sportsdataverse.org/\">sportsdataverse.js</a>, developed by <a href='https://twitter.com/saiemgilani'>Saiem Gilani</a>, part of the <a href='https://sportsdataverse.org'>SportsDataverse</a>"
 },
 {
  "repo": "solmos/eurolig",
  "language": "R",
  "readme_contents": "---\noutput: github_document\n---\n\n<!-- README.md is generated from README.Rmd. Please edit that file -->\n\n```{r setup, include = FALSE}\nknitr::opts_chunk$set(\n  collapse = TRUE,\n  comment = \"#>\",\n  fig.path = \"man/figures/README-\"\n)\n```\n# eurolig\n\n[![lifecycle](https://img.shields.io/badge/lifecycle-experimental-orange.svg)](https://www.tidyverse.org/lifecycle/#experimental)\n\nThe eurolig package provides a set of tools to obtain and analyze basketball generated data from the Euroleague.\n\n## Overview\n\n* API wrapper around the official website of the [Euroleague](https://www.euroleague.net/).\n\n* Functions to obtain stats, play-by-play data and shot location data in a tidy format within R.\n\n* Tools to analyze and visualize the data.\n\n\n## Installation\n\n```{r, eval = FALSE}\n# install.packages(\"devtools\")\ndevtools::install_github(\"solmos/eurolig\")\n```\n\n\n## Example\n\nLet's say we want to analyze play-by-play data from the Championship game of the 2017-2018 season between Real Madrid and Fenerbache Dogus Istanbul. We can obtain the data by entering the game code and the season to the function `extractPbp()`. The game code for the game can be found in the game's [URL](https://www.euroleague.net/main/results/showgame?gamecode=260&seasoncode=E2017).\n\n```{r}\nlibrary(eurolig)\npbp <- extractPbp(game_code = 260, season = 2017)\npbp\n```\n\nFrom these data we can extract information about the assists in that game from, say, Real Madrid (MAD):\n```{r}\nassists <- getAssists(pbp, team = \"MAD\")\nassists\n```\n\nShot location data can also be retrieved and visualized:\n```{r}\nshots <- extractShots(260, 2017)\nplotShotchart(shots)\n```\n\n"
 },
 {
  "repo": "zhaoyu611/basketball_trajectory_prediction",
  "language": "Python",
  "readme_contents": "# basketball_trajectory_prediction\nThis repo is an open source of paper : Applying bidirectional LSTM and Mixture Density Network for Basketball Trajectory Prediction.\nI strongly recommend you to review Rajiv and Rob's repo at first.  the URL is https://github.com/RobRomijnders/RNN_basketball. \nI think they made cool job and details about basketball prediction. Also you can find their paper and referrences in the repo.\nBased on their contribution, I set up a new repo, which proposed Bidirectional LSTM and Mixture Density Network (BLSTM-MDN) for the same prediction problem.\nI did 2 jobs in the main, Hit or miss classification and trajecotry generating.\nIn the first job, users can choose one of models, including CNN, LSTM, BLSTM, LSTM-MDN and BLSTM-MDN. And trajectory genarating only works for LSTM-MDN and BLSTM-MDN.\n\n# Setup\n* TesnsorFlow 1.0 <br>\n* sklearn <br>\n* hyperopt <br>\n\n# The files\n* data: the original data is in 'seq_all.csv.tar.gz', and the 'seq_all.csv' is the unziped dataset.\n* plot_staff: the scripts and final figures based on the models\n* dataloader.py: data pre-process\n* model.py: build model by TensorFlow\n* util_MDN: utility functions for building model\n* sample.py: functions used for generating trajectory\n* main.py: main steps for classification and generating\n\n# Run\nSimply run file \"main.py\" in terminal with default argpases: python main.py\nHere is the explanation of each argpase.\n~~~python\n\n  paser.add_argument(\"--hidden_layers\", type=int,\n                     default=2, help=\"number of hidden layer \")\n  paser.add_argument(\"--seq_len\", type=int, default=12,\n                     help=\"sequence length\")\n  paser.add_argument(\"--dist\", type=float, default=5.0,\n                     help=\"distance from point to center\")\n  paser.add_argument(\"--hidden_size\", type=int, default=64,\n                     help=\"units num in each hidden layer\")\n  paser.add_argument(\"--drop_out\", type=float, default=0.7,\n                     help=\"drop out probability\")\n  paser.add_argument('--learning_rate', type=float, default=0.005,\n                     help=\"learning_rate\")\n  paser.add_argument('--epoch', type=int, default=1,\n                     help=\"epoch\")\n  paser.add_argument('--batch_size', type=int, default=64,\n                     help=\"batch size\")\n  paser.add_argument('--model_type', type=str, default='BLSTM_MDN_model',\n                     help='the model type should be LSTM_model, \\\n                       bidir_LSTM_model, CNN_model, Conv_LSTM_model, \\\n                       LSTM_MDN_model or BLSTM_MDN_model.')\n~~~\n                       \nIf you want to generate some trajetories, please set \"generate_trajectory\" as True in code. Because it is False in default.\nIt should be noted that it only generates traejctory with BLSTM-MDN or LSTM-MDN.\n\n# Contact me\nBe free the ust the code for studying. But please contact me if you want for commercial applying. <br>\nYou are welcome to pull requests or issues. <br>\nE-mail: zhaoyuafeu@gmail.com <br>\nFacebook: zhaoyuafeu <br>\n\n\n\n\n"
 },
 {
  "repo": "basketballrelativity/basketball_data_science",
  "language": "Jupyter Notebook",
  "readme_contents": "# basketball_data_science\nWorking through Basketball Data Science using py_ball and Python\n\n## Agenda\n\nMy goal is to work through the book [Basketball Data Science with Applications in R](https://www.amazon.com/Basketball-Data-Science-Applications-Chapman/dp/1138600814) (BDS) by Zuccolotto and Manisera. The twist is that this repository will leverage [py_ball](https://github.com/basketballrelativity/py_ball) to source all of the data and the analysis will be done in Python. The hope is that this effort will expose a wider audience to the work presented in BDS and the available data. This repository will work through the following chapters:\n\n* [Chapter 2: Data and Basic Statistical Analyses](https://github.com/basketballrelativity/basketball_data_science/tree/master/Chapter%202)\n  - [Pace and Ratings](https://github.com/basketballrelativity/basketball_data_science/blob/master/Chapter%202/Pace%20and%20Ratings.ipynb)\n  - [Inequality Analysis](https://github.com/basketballrelativity/basketball_data_science/blob/master/Chapter%202/Inequality%20Analysis.ipynb)\n  - [Shot Charts](https://github.com/basketballrelativity/basketball_data_science/blob/master/Chapter%202/Shot%20Charts.ipynb)\n* [Chapter 3: Discovering Patterns in Data](https://github.com/basketballrelativity/basketball_data_science/blob/master/Chapter%203)\n  - [Assist Networks](https://github.com/basketballrelativity/basketball_data_science/blob/master/Chapter%203/Assist%20Networks.ipynb)\n  - [Shot Density](https://github.com/basketballrelativity/basketball_data_science/blob/master/Chapter%203/Shot%20Density.ipynb)\n* [Chapter 4: Finding Groups in Data](https://github.com/basketballrelativity/basketball_data_science/blob/master/Chapter%204)\n  - [Shot Clustering](https://github.com/basketballrelativity/basketball_data_science/blob/master/Chapter%204/Shot%20Clustering.ipynb)\n* Chapter 5: Modeling Relationships in Data\n\nEach chapter is decently long, so there may be multiple Jupyter notebooks per chapter, depending on how things shake out.\n\nFeel free to reach out with any questions by opening an issue here or [tweeting me](https://twitter.com/py_ball_).\n"
 },
 {
  "repo": "ed-word/Activity-Recognition",
  "language": "Python",
  "readme_contents": "# Activity-Recognition\r\n\r\n![enter image description here](https://lh3.googleusercontent.com/WJ5Gmfr6hUWr9b9Q8-4U9aAB9gnG4sWrMh64WSbFNRLuSComqQfvLnyrYLdtDpQ4IHyJhWdmYIho=s0 \"Pipeline.jpg\")\r\n"
 },
 {
  "repo": "historicalsource/nba-jam-tournament-edition",
  "language": "Assembly",
  "readme_contents": "# nba-jam-tournament-edition\n"
 },
 {
  "repo": "mbjoseph/bbr",
  "language": "R",
  "readme_contents": "---\noutput: github_document\n---\n\n# bbr: basketball-reference data in R\n\n[![Travis-CI Build Status](https://travis-ci.org/mbjoseph/bbr.svg?branch=master)](https://travis-ci.org/mbjoseph/bbr) \n[![Coverage Status](https://img.shields.io/codecov/c/github/mbjoseph/bbr/master.svg)](https://codecov.io/github/mbjoseph/bbr?branch=master)\n[![CRAN_Status_Badge](http://www.r-pkg.org/badges/version/bbr)](https://cran.r-project.org/package=bbr)\n[![Licence](https://img.shields.io/badge/licence-GPL--3-blue.svg)](https://www.gnu.org/licenses/old-licenses/gpl-3.0.html)\n[![Last-changedate](https://img.shields.io/badge/last%20change-`r gsub('-', '--', Sys.Date())`-brightgreen.svg)](/commits/master)\n\n<!-- README.md is generated from README.Rmd. Please edit that file -->\n\nThe bbr package is designed to quickly fetch tidy data from www.basketball-reference.com. \nThis package is actively under development and the interface will change as new features are added.\n\n## Installation\n\n```{r, eval = FALSE}\ndevtools::install_github(\"mbjoseph/bbr\")\n```\n\n## Example usage\n\nThe `get_season` function retrieves season summary data for one season. \n\n```{r, echo = TRUE}\nlibrary(bbr)\n\nninetyone <- get_season(1991)\nstr(ninetyone)\n```\n\nThe `get_players` function gets player data for individuals by last initial.\n\n```{r, echo = TRUE}\na_data <- get_players(\"A\")\nstr(a_data)\n```\n\nThe `get_player_data` function returns data for each season that a player \nplayed. As an argument, this function takes a slug for the player you're \ninterested in. This can be found using the `get_players()` function, and is \npart of the URL to the data of a player, e.g., if the URL is \nhttps://www.basketball-reference.com/players/a/abdelal01.html then the slug is \nabdelal01.\n\n```{r, echo = TRUE}\nabdelnaby_d <- get_player_data('abdelal01')\nstr(abdelnaby_d)\n```"
 },
 {
  "repo": "owenauch/NBA-Fantasy-Optimizer",
  "language": "Python",
  "readme_contents": "# The Porzingis Project\n\nA script that scrapes stats for each player in the NBA from Basketball Reference, TeamRankings, and Rotowire, and generates an expected points value for each player. These expected points are then fed to a greedy algorithm that maximizes the total expected fantasy points while staying under a salary cap using a heuristic of preferencing undervalued players.\n\n## How to Run\n\nClone the repo and run \n```\npython NBAFantasyStats.py\n```\n\n##### Requires:\n* [BeautifulSoup](https://www.crummy.com/software/BeautifulSoup/#Download)\n\nShoutout to Kristaps Porzingis for being the algorithm MVP\n"
 },
 {
  "repo": "cfahlgren1/Bounce",
  "language": "CSS",
  "readme_contents": "# Bounce - Basketball Court Finder\n \n# What is Bounce?\n\nBounce is a web app built in Django that locates and displays the nearest basketball courts in the area. With over 48,000 documented basketball across North America, there is bound to be one near you. The goal of this project is to build a community for basketball and other sports enthusiasts.\n\n## Home Page\n<img width=\"1719\" alt=\"image\" src=\"https://user-images.githubusercontent.com/13546028/196266949-7b4bedeb-90c1-4633-a23d-bd26cc79dd26.png\">\n\n## Courts Page\n\n![Image](https://i.ibb.co/Mp1dxwB/readme.jpg)\n\n# Contributing\n### Visit [Contributing.md](https://github.com/cfahlgren1/Bounce/blob/postgis/CONTRIBUTING.md)\n\n# Features\n  - Basketball court listing of outdoor courts near specified address/location\n  - Light and Dark Theme for Maps\n  - GraphQL / REST API endpoint\n  \n # Next Steps\n  - Implement more testing and test coverage (API, Model, End to End Testing with [Cypress.io](https://cypress.io)\n  - Building CI/CD pipeline and linting for better code reviewing and deployment\n  - Interfaces for User Feedback\n  - Ensure pages are mobile friendly\n\n# Future Plans!\n  - Load courts through REST / GraphQL API\n  - User Accounts\n    - Court Ratings\n    - Save frequently visited courts\n    - Submit Court to be added to Map\n  - Decouple front and backend\n\n# Tech\nBounce uses a number of open source projects and APIs to work properly:\n* [Heroku](https://www.heroku.com/) - PAAS to Host Bounce\n* [Django](https://www.djangoproject.com/) - Python Web Framework\n* [LocationIQ API](https://locationiq.com/) - used to get reverse geocoding results for markers\n* [Mapbox API](https://www.mapbox.com) - used to provide forward-geocoding results and mapping\n* [PostgreSQL](https://www.postgresql.org/) - SQL database for scalability, modularity, and geoquerying support\n\n# Setup\n\n## Docker\n\n0. Install [Docker](https://docs.docker.com/get-docker/) and [Docker Compose](https://docs.docker.com/compose/install/)\n\n1.  Make `docker_entrypoint.sh` executable\n    ```bash\n    # Linux\n    chmod +x docker_entrypoint.sh\n    ```\n\n2.  Start and build the 2 containers\n\n    -   `--build` builds the images defined in the `docker-compose.yml` file.\n    -   `-d` dettaches the terminal from the building process.\n    -   Finally the script from (`docker_entrypoint.sh`) is executed.\n\n    ```bash\n    # In the same directory as `docker-compose.yml`\n    docker-compose up -d --build\n    ```\n\n    - If there are errors you can see the logs\n    ```bash\n    docker-compose logs\n    ```\n\n3. Load Initial Database Models\n\n    - It's also necessary to load in the fixtures when setting up the database:\n    ```bash\n    docker-compose exec web python manage.py loaddata bounce_data.json\n    ```\n\n4. Go to http://localhost:8000\n\n    - You should see the frontend of the project\n\n    <img src=\"https://i.imgur.com/JDQp06y.png\" width=\"800\">\n\n5. Enter a shell within the Docker container\n\n    - To enter an interactive shell (in this case for the \"web\" service), you can use\n    ```bash\n    docker-compose exec web bash\n    ```\n\n6. Create a superuser (Optional)\n\n    - You may enter an interactive shell within the Docker container\n     (in this case the container corresponding to the \"web\" service)\n    - In the same directory as `docker-compose.yml` run\n    ```bash\n    # This open a bash shell inside the container\n    docker-compose exec web bash\n    ```\n\n    - Then run `python manage.py createsuperuser`\n    \n    - Run `exit` to exit the container. It will keep running.\n\n7. To stop the containers run `docker-compose stop`\n\n    - :warning: Be careful with [`docker-compose down`](https://docs.docker.com/compose/reference/down/) which stops the container but also **removes** them.\n=======\n\n\n## Troubleshooting\n\nEnsure that your .env file is present and the required variables are set. \nSometimes starting fresh can help, since things like volumes will persist\neven after a container is removed, which can cause issues. You can remove all \ndocker containers and volumes using the command:\n```bash\ndocker-compose down && docker rm -f $(docker ps -a -q) && docker volume rm $(docker volume ls -q)\n```\nand then trying the above steps again.\n"
 },
 {
  "repo": "JonnyBurger/basketball-tracker",
  "language": "TypeScript",
  "readme_contents": "# React + Remotion basketball tracker\n\n<img src=\"thumbnail.gif\" style=\"width: 100%\">\n\n**See tutorial (8min)**: https://youtu.be/A8miHLSf_BI\n\nSince this is a fun project, no issues / pull requests are accepted.\n\n## Commands\n\n**Install Dependencies**\n\n```console\nnpm i\n```\n\n**Start Preview**\n\n```console\nnpm start\n```\n\n**Render video**\n\n```console\nnpm run build\n```\n\n**Upgrade Remotion**\n\n```console\nnpm run upgrade\n```\n\n## Docs\n\nGet started with Remotion by reading the [fundamentals page](https://www.remotion.dev/docs/the-fundamentals).\n\n## Help\n\nWe provide help [on our Discord server](https://discord.gg/6VzzNDwUwV).\n\n## Issues\n\nFound an issue with Remotion? [File an issue here](https://github.com/remotion-dev/remotion/issues/new).\n\n## License\n\nNotice that for some entities a company license is needed. Read [the terms here](https://github.com/remotion-dev/remotion/blob/main/LICENSE.md).\n"
 },
 {
  "repo": "nguyenank/shot-plotter",
  "language": "HTML",
  "readme_contents": "# Shot Plotter\n\n![A screenshot of the web application.](./resources/ice-hockey-screenshot.png)\n\n**09/13/22: Soccer (NCAA) has been added as a playing area**\n\nA [web application](https://shot-plotter.netlify.app/) for plotting events on a sport's playing area with a single click, while keeping track of any other details. The application supports download and upload of .csv files to retrieve that plotted data.\n\nCurrently 13 different playing areas across 9 different sports are supported: ice hockey (NHL, IIHF), floorball (IFF), handball (IHF), volleyball (NCAA), basketball (NBA, NCAA, WNBA), men's lacrosse (NCAA), women's lacrosse (NCAA), American football (NFL, NCAA), and soccer (NCAA).\n\n![A screenshot of the main page of the web application allowing you to pick between sports.](./resources/sport-select-screenshot.png)\n\nThe web application is primarily built using D3.js.\n\n### How to Use and Additional Information\n\nFrom the main page, click on the sport/playing area you want. Each option has information about the specifications that describe that particular playing area, and its dimensions, which correspond to the coordinates.\n\n#### Event Details\n\nBy default, four pieces of information can be specified for each event.\n\nThe period of the event can be logged through radio buttons.\n\nThe team can be specified through radio buttons and a text field that allows custom team names to be entered. The first team, which defaults to Home, corresponds to teal dots, and the second team, which defaults to Away, corresponds to orange dots. The legend below the rink clarifies which color corresponds to which team.\n\nThe player can be specified through a text field. If the player entry is 2 characters or less (for a player number, say), the player will appear on the event dot on the playing area.\n\nThe type of event can be specified, under Type or Outcome.Additional options can be specified by typing in the dropdown and selecting the new option that appears by clicking or pressing Enter. Each option corresponds to a different dot shape, as indicated by the legend below the rink.\n\nDetails logged for each event can be customized by clicking on the _Customize Details_ button at the bottom of the details panel. Details can only be customized when there are noevents recorded.\n\n##### Customizing Setup\n\nClicking the _Customize Setup_ button will bring up a modal with a list of the current details. Drag-and-drop detail names to reorder them. Click on the eye icon to toggle whether it is visible. Click on the trash can icon to delete details. For created details, click on the pencil-in-a-square icon to edit those details. Reordering details changes their position in both the details panel and the table. The _X_ and _Y_ details cannot be hidden or deleted.\n\nSpecial details can be added, which are details that do not take inputs but are specially calculated. Currently there a 3 types of special details:\n\n-   **2-Location Events:** Using the _Enable 2-Location Events_ toggle, the ability to have 2-location events can be enabled. When enabled, _X2_ and _Y2_ details are added to the list of details. Like the _X_ and _Y_ details, the _X2_ and _Y2_ details cannot be hidden or deleted. When 2-location events are enabled, 2-location events can be plotted by either holding down the SHIFT button and clicking on two points in the playing area or by switching between 1-location and 2-location mode using the toggle above the playing area. This option is incompatible with Heat Map View.\n-   **Distance:** For 1-location events, this detail will be the distance between the event and the closest net/hoop/end zone line center/etc. For 2-location events, this detail will be the be the distance between the two indicated locations.\n-   **Shot Value (basketball only):** This detail is the number of points (2 or 3) a shot from the indicated location would be worth. For 2-location events, it will be the number of points for the second location.\n\nThere are several appearance options, which modify the appearance of the application but do not impact the data tracked. There are currently 3 appearance options:\n\n-   **Widgets per Panel Row:** The number of widgets can be changed from its default value of 2 to 1 or 3 by choosing a new value in the dropdown labelled _Widgets per Panel Row_.\n-   **Rows per Table Page:** The default number of events per table page can be modified by changing the number in the field labelled _Rows Per Table Page_. The default number is 10; the number must be an integer between 1 and 999 (inclusive).\n-   **Heat Map View:** By toggling on the option labelled _Heat Map View_, the option for heat maps (2D density plots) view is enabled. This adds a toggle above the playing area that allows switching between the traditional view with event dots and view that shows the location density of events per team (if Team is a current detail). Two checkboxes below the toggle allow hiding and showing the heat map for each team. This option is incompatible with 2-Location Events.\n\nDefault details can be restored by clicking on the _Reset to Defaults_ button.\n\nDetails configurations can be saved or restored through download/upload. When a detail configuration is downloaded, it stores the current order and visibility of details, as well as any newly created details. Also, currently selected/entered options in the details panel are made the default options when the configuration is uploaded; if a detail is not visible, it preserves its original default value.\n\nClicking on the _Add Details_ Button allows creation of new details. There are four options for types of new details: radio buttons, text field, dropdown, and time widget. The name of all details must be 1-16 characters.\n\nRadio buttons are limited to at most 5 options; each option must be between 1-32 characters and all options must be unique. The default value can be selected by checking the appropriate radio button.\n\nFor a text field, a default value can be entered and can be up to 32 characters.\n\nFor a dropdown, options are entered in a text area, with each option on a new line. Each option must be between 1-50 characters. The first option is the default selection. Unlike with the _Type_ detail, new options cannot be added from the details panel, though options can still be searched.\n\nA time widget is a timer you can choose to have count up or countdown. The starting time can be inputted when creating the detail; times must be in the format MM:SS or M:SS, where (M)M is minutes and SS is seconds. When using the time widget in the details panel, the time can be edited any time the time widget is paused. The timer can be paused/started by clicking on the button next to the time.\n\n#### Playing Area\n\nTo plot events, simply click on the playin area where the event happened. When clicked, a dot will be added of the appropriate color based on team, shape based on type, and text based on player, and a row will be made in the table.\n\nThe playing area matches the specifications from the governing body as specified on the main page. For all playing areas, the center of the playing area has coordinates (0,0), the positive x-axis is to the right, and the positive y-axis is upward.\n\nCredit to [Bill Tran's guide on creating the NHL rink using TidyVerse](https://thewincolumn.ca/2021/01/15/r-tutorial-creating-an-nhl-rink-using-the-tidyverse/) for aid in interpreting the rule descriptions for the ice hockey rink and for the hex codes for the colors.\n\nMassive credit to the [sportyR package](https://github.com/rossdrucker/sportyR) created by [Ross Drucker](https://twitter.com/rossdrucker9), using which the American Football fields (NFL and NCAA) were constructed.\n\nThe playing area size is not pinned to the window size. This allows you to zoom in and place the event exactly where you want it, but does mean the layout can become strange if you change your window size. Refreshing will readjust the size to match the current window size.\n\n#### Table\n\nThe table logs the information for each event, as well as the row number of the event in the table. Events can be highlighted by clicking on the check box for the appropriate row. This will highlight the row in the matching team color, and both enlarge the dot on the rink and move it to the front if it was previously covered by other dots. Multiple events can be highlighted at once. Events can be deleted by clicking on the trash can in the appropriate row. All events can be deleted by clicking on the trash can in the header of the table; a prompt will confirm this choice.\n\nThe table, by default, shows the last page, which has the last 10 events recorded. Pages can be navigated using the _Prev_(ious) and _Next_ buttons at the lower-right of the table. The currently shown events and the total number of events recorded can be seen in the bottom-left of the table.\n\nBy click on the funnel icon in the header of the table, the filters become visible beneath the table headers and apply to the column in question. Multiple filters can be active at once; if there are multiple filters, only events that fit the criteria of all filters are visible. Events are filtered from both the table and playing area - in other words, events that do not fit the filter criteria are not visible as a row in the table or as a dot in the playing area. The form of the filter varies by the detail type:\n\n-   **Numeric/Time (e.g. X, Y, #):** Numeric or time details will have a filter that takes a _minimum_ and a _maximum_ value and filters out any events with values for that detail not in the range specified. The range is inclusive of the minimum and maximum. If no value is specified for either the minimum or maximum, it is treated as if there is no limit in that direction. For example, if the minimum is indicated to be 4 and there is no maximum value indicated, only rows with a value of 4 or greater will be visible.\n-   **Radio Buttons/Dropdown (e.g. Period, Team, Type):** Radio button and dropdown details will have a filter that takes the form of a dropdown and filters out any events with values not selected in the dropdown. If the dropdown has no selected options, it is as if the filter does not exist. It is possible to select multiple options in the dropdown filter; in this case, events with values corresponding to any currently selected in the dropdown will be visible. For example, if a dropdown filter currently has the values _Shot_ and _Goal_ selected, events with the value _Shot_ OR the value _Goal_ for that detail will be visible.\n-   **Text (e.g. Player):** Text details will have a filter that is just a text box: any string that contains the string in the text box filter will satisfy the filter. If the string is surrounded in quote marks, double or single, instead only exact matches for the string satisfy the filter. For example, for the filter value _hat_, both _hate_ and _chat_ will be visible, but for the filter value _'hat'_ only the value 'hat' will suffice. It is also possible to use regular expressions in the text box filter for more complex text queries.\n\nClicking on the funnel icon will toggle whether the filters are visible. Filters are applied regardless of whether the filters are visible or not; hiding them does not remove all filters. When at least one filter is active and the filters are visible, a small X-in-a-square icon will appear near the funnel icon; clicking this X icon will clear all filters.\n\nThe number of currently filtered rows is also visible in the bottom left of the table.\n\n#### Download/Upload Table\n\nThe event table information can be downloaded by pressing the _Download_ button. There is a text-field to customize the name of the file; otherwise, it defaults to the day and time when the web app was opened. Files are in .csv format, using comma separators, with the header row as it appears on the table, excluding _\\#_, included in the file. When filters are active, only currently visible events that satisfy the filters are included in the file; this is indicated by the text of the button saying _Download Filter_ rather than just _Download_.\n\nTo initialize the table, a .csv file can be uploaded using the _Choose File_ button next to the Upload label. Only .csv files are permitted. The header row must exactly match the header row of the table, excluding _\\#_, including order. Any custom shot types will be added in shot order. Custom teams will be added in order as they appear, alternating between the teal and orange team. This means if a shot by the orange team is logged first, when the file is downloaded and later uploaded, the team will be blue, but besides color there is no impact to the web app. _When a file is uploaded, any shots previously in the table are erased._\n\n### Running Locally\n\nTo run the application locally, any method of running an HTTP server is needed to prevent browser issues with CORS (cross-origin requests - essentially not allowing the JS files to be loaded using the file:// protocol). Some methods include [http-server in Node.js](https://www.npmjs.com/package/http-server), [http.server in Python](https://docs.python.org/3/library/http.server.html), or even some browser-based options like the [Web Server for Chrome extension](https://chrome.google.com/webstore/detail/web-server-for-chrome/ofhbbkphhbklhfoeikjpcbhemlocgigb?hl=en), but any option will do.\n\nThen, clone this repository; for most methods, it is sufficient to navigate into the repository folder and run the server, but check the exact way of starting a server for the chosen method. No additional packages need to be installed; additional packages are automatically acquired using CDNs.\n"
 },
 {
  "repo": "oussamabonnor1/Ball-Fall-game-Unity2D",
  "language": "C#",
  "readme_contents": "# Ball-Fall-Android-game \n![Downloads](https://img.shields.io/badge/Aptoide%20store-3k--5k-orange.svg)\n![Jetlight studio](https://img.shields.io/badge/Made%20by-Jetlight%20studio-blue.svg?color=082544)\n\nBall Fall is an addictive catch game. Keep your eyes open and your fingers ready.\n\n## Aptoide store link:\n[Download here](https://jetlight-studio-ball-fall.en.aptoide.com/)\n\n## screenshots:\n<img src=\"https://cloud.githubusercontent.com/assets/17766221/22110122/e1a1a010-de5a-11e6-85cd-f67e63ddea79.PNG\" width=\"250\"/> <img src=\"https://cloud.githubusercontent.com/assets/17766221/22110210/28964b38-de5b-11e6-8b0c-ce92b55fc2f4.png\" width =\"250\"/>\n\n## Tools used:\n* Visual studio (IDE)\n* C# (logic)\n* Unity (game engine)\n* Paint.Net (Image editting)\n\n## Contributing\n\nFeel free to `fork` this project and add whatever you like. If you have any suggestions or any comments please feel free to contact me or to open an issue.\n\n## Team:\n[Jetlighters](https://github.com/JetLightStudio) having fun.\n"
 },
 {
  "repo": "llimllib/ncaa-bracket-randomizer",
  "language": "Jupyter Notebook",
  "readme_contents": "# NCAA Bracket Randomizer\n\nGenerates a reasonable bracket for you, based on <a href=\"http://kenpom.com/\">Ken Pomeroy's</a>\ncollege basketball ratings.\n\nThis code was a hack when I first wrote it 14 years ago, another hack when I\nre-wrote it 8 years ago, and even worse today. I use it once a year though, and\nit works just fine even though it's still using jQuery and an ancient d3.\n\nFor each matchup, it compares the two teams in the game, calculates the odds of the favorite\nwinning the game, and chooses the winner. There are three settings that determine how it\ndoes so:\n\n#### No randomness\n\nAlways picks the favorite\n\n#### Some\n\nPicks the underdog if they win twice in a row.\n\nIf team A has a 75% chance of beating team B, the program will generate two random numbers\nbetween 0 and 100; if both of them are greater than 75, team B will advance. Otherwise,\nteam A will advance.\n\n#### Lots of randomness\n\nPicks the underdog if they win once\n\nIf team A has a 75% chance of beating team B, the program will generate a random number\nbetween 0 and 100; if it's greater than 75, team B will advance. Otherwise,\nteam A will advance.\n\n## Calculating the Odds\n\n[This ipython notebook](https://github.com/llimllib/ncaa-bracket-randomizer/blob/master/fitting_kenpom/fitting%20kenpom.ipynb) shows how I fit a very simple exponential curve to kenpom's predictions to reverse-engineer his win percentages. I then use the curve that fitted his predctions to decide how likely one team is to beat another, based on the difference between their kenpom ratings.\n"
 },
 {
  "repo": "brettfazio/CVBallTracking",
  "language": "Python",
  "readme_contents": "# Basketball Tracking \ud83c\udfc0\u26f9\ud83c\udffb\u200d\u2640\ufe0f\u26f9\ud83c\udfff\u200d\u2642\ufe0f\n\nCreated by [Brett Fazio](http://linkedin.com/in/brett-fazio/) and [William Chen](https://www.linkedin.com/in/william-chen-6474a216b/)\n\n![](assets/bron.gif)\n\n![](assets/davis.gif)\n\n## Overview\nRead our paper [here](https://github.com/brettfazio/CVBallTracking/blob/main/assets/Ball_Tracking.pdf).\n## Requirements \n\nThe libraries to run the code are [cv2](https://pypi.org/project/opencv-python/), [numpy](https://numpy.org/), [pandas](https://pandas.pydata.org/), and [h5py](https://www.h5py.org/) (if trying to run/evaluate on the A2D dataset). \n\nAn extended version of cv2, ```opencv-contrib-python```, is required. Make sure this is the only cv2 package installed. ```opencv-python``` is a different package that does not include support for the trackers. Do not install multiple different opencv packages in the same environment.\n```\npip install opencv-contrib-python\n```\n\nAdditionally access to the YOLO tracker is required but this is already included in the `/src/yolo` folder. However, you must download the weights for the YOLO model. It can be done as follows:\n\n```\ncd src/yolo/weights/\nbash download_weights.sh\n```\n\nIf you wish to use the GOTURN tracker instead of the CSRT tracker (we recommend CSRT) you must download the GOTURN model [here](https://github.com/Mogball/goturn-files) and place it within the `src` folder.\n\nTo run on the A2D dataset, the Release of the dataset itself is also required. It is available [here](https://web.eecs.umich.edu/~jjcorso/r/a2d/) and the unzipped folder entitled `Release` should be placed in the `/a2d` directory.\n\n## Usage\n\nThe main entry point for this project is `main.py`. To avoid errors, please run it from the `src` directory. \n\nThe most basic usage for the project would be to run on a single input video. It can be done as follows:\n\n```\npython3 main.py --video PATH\n```\n\nWhere `PATH` is a path to a video file, for example:\n\n```\npython3 main.py --video ../sample_data/lebron_on_court.mp4\n```\n\nAdding the `--fast` flag only tracks the ball in frames after the first detection. \n```\npython3 main.py --video ../sample_data/lebron_on_court.mp4 --fast\n```\n\nAdding the `--live` flag allows for real-time tracking. Live tracking is only available when used with the `--fast` flag.\nNote: performance may be vary depending on CPU/GPU.\n```\npython3 main.py --video ../sample_data/lebron_on_court.mp4 --fast --live\n```\n\nTo run A2D add the `--a2d` flag, and then to specify the number of samples use `--a2d_amt`. For example:\n\n```\npython3 main.py --a2d --a2d_amt 5\n```\n\n### Forward Pass Only\n![](assets/forwards.gif) \n\n### Track Backwards + Forwards\n![](assets/full.gif)\n\n## References / Credit\n\nThis project builds on the work of eriklindernoren's PyTorch Yolo implementation as a base, specifically the pre-trained model. The repository can be found [here](https://github.com/eriklindernoren/PyTorch-YOLOv3).\n"
 },
 {
  "repo": "sunkuo/joi-router",
  "language": "JavaScript",
  "readme_contents": "# joi-router\n:basketball: Input &amp; Output validated routing for Express\n\n[![npm version](https://badge.fury.io/js/joi-router.svg)](https://badge.fury.io/js/joi-router) [![Build Status](https://travis-ci.org/sunkuo/joi-router.svg?branch=master)](https://travis-ci.org/sunkuo/joi-router) [![Coverage Status](https://coveralls.io/repos/github/sunkuo/joi-router/badge.svg?branch=master)](https://coveralls.io/github/sunkuo/joi-router?branch=master) [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n## Todo List\n- :white_check_mark: Input Validated Routing\n- :white_check_mark: Output Validated Routing\n- :white_check_mark: Examples to show how to use joi-router\n- :white_check_mark: Self-contained Test\n- :white_check_mark: Continuous integration\n- :white_check_mark: Code coverage\n- :ballot_box_with_check: Joi-router to api documents\n\n## How to install\n\n`yarn add joi-router`\n\n## Get Started\n\n### Input Validaiton\n```\nconst express = require('express')\nconst Joi = require('joi')\nrequire('joi-router')\nconst app = express()\n\napp.get('/foo', {query: {\n  userId: Joi.string().alphanum().min(3).max(30).required()\n}}, function (req, res, next) {\n  res.json({\n    result: 'success'\n  })\n})\n```\n\n#### Output Validation\n```\napp.get('/foo', {\n  output: {\n    '200': { content: Joi.string().alphanum().min(3).max(30).required() }\n  }\n}, function (req, res, next) {\n  res.json({\n    content: 'Lorem'\n  })\n})\n\napp.listen(3000, () => {\n  console.log('Server Run!')\n})\n```\n\n## Node compatibility\n\nNodeJS `>= 6.0` is required.\n\n## Performance\n\nJoi-router only run once to add validation middleware when express start, so it does not make express slow.\n\n## LICENSE\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)"
 },
 {
  "repo": "hubsif/kodi-magentasport",
  "language": "Python",
  "readme_contents": "Kodi Magenta Sport Addon (ehem. Telekom Sport)\n==============================================\n\n\u00dcber\n----\n\nMit diesem Addon kann man die Sportstreams von [Magenta Sport][1] (ehem.\nTelekom Sport) ansehen.\n\nInstallation\n------------\n\nDas zipfile von der [Releases Seite][2] downloaden und in Kodi unter Addons\ninstallieren.\n\nBei Problemen gerne ein Github-Issue aufmachen oder eine E-Mail an\nhubsif@gmx.de.\n\nAbout\n-----\n\nThis addon let's you watch the sports streams from [Magenta Sport][1]\n(formerly Telekom Sport).\n\nInstallation\n------------\n\nDownload the addon zipfile from the [releases page][2] and install it in\nKodi -> Addons.\n\n[1]: https://www.magentasport.de\n[2]: https://github.com/hubsif/kodi-magentasport/releases\n"
 },
 {
  "repo": "ngbede/hoop",
  "language": "Dart",
  "readme_contents": "# Hoop\r\n\r\nAn NBA sporting app built with flutter(Googles UI framework) and the NBA-API.\r\n\r\n\r\n## Requirements\r\nNote: Its important to get your API Key, the below steps explain how you can acheive this. Always take care to keeping your Api keys a secret.\r\n\r\n- log on to https://rapidapi.com/ and register an account if you don't have one.\r\n- After registering your account, go to the Api marketplace and subscribe to the Api-NBA @ https://rapidapi.com/api-sports/api/api-nba\r\n- Select a free plan which allows you to make a 100 calls per day.\r\n- Once subscribed to the Api on a free plan, get your API key.\r\n- Now Navigate to this file path on this project repo i.e lib/services/apikey\r\n- create a new dart file called \"key.dart\"\r\n- paste below code in the dart file:\r\n\r\n```\r\nclass NbaApi {\r\n  static final key = \"YOUR-API-KEY-GOES-HERE\";\r\n}\r\n```\r\n\r\n- Save the file, you should now be able to run the app on your device.\r\n\r\n## Screenshots\r\n\r\n![hoop image1](https://github.com/ngbede/hoop/blob/master/screenshot/screenshot1.png?raw=false)\r\n![hoop image2](https://github.com/ngbede/hoop/blob/master/screenshot/screenshot2.png?raw=false)\r\n![hoop image3](https://github.com/ngbede/hoop/blob/master/screenshot/screenshot3.png?raw=false)\r\n![hoop image4](https://github.com/ngbede/hoop/blob/master/screenshot/screenshot4.png?raw=false)\r\n![hoop image5](https://github.com/ngbede/hoop/blob/master/screenshot/screenshot5.png?raw=false)"
 },
 {
  "repo": "liang3472/BasketBall",
  "language": "JavaScript",
  "readme_contents": "##1 \u642d\u5efa\u9879\u76ee\u5f00\u53d1\u73af\u5883\n1.1 \u5b89\u88c5 CocosCreator\n\n##2 \u6253\u5f00\u9879\u76ee\n2.1 \u9009\u62e9\u6253\u5f00\u5176\u4ed6\u9879\u76ee\uff0c\u7136\u540e\u9009\u62e9\u672c\u9879\u76ee\u76ee\u5f55\n\n2.2 \u9879\u76ee\u521d\u59cb\u5316\u540e\u4f60\u4f1a\u770b\u5230\n\n![Image][1]\n\n##3 \u8fd0\u884c\u9879\u76ee\n3.1 \u53ef\u4ee5\u9009\u62e9\u6d4f\u89c8\u5668\u548c\u6a21\u62df\u5668\u8fd0\u884c\u9879\u76ee\n\n![Image][5]\n\n3.2 \u70b9\u51fb\u5c0f\u4e09\u89d2\u8fd0\u884c\u9879\u76ee\n\n![Image][2]\n\n*\u6d4f\u89c8\u5668\u8fd0\u884c*\n\n![Image][4]\n\n*\u6a21\u62df\u5668\u8fd0\u884c*\n\n![Image][3]\n\n[1]: https://raw.githubusercontent.com/liang3472/BasketBall/master/screenshot/screenshot1.png\n[2]: https://raw.githubusercontent.com/liang3472/BasketBall/master/screenshot/screenshot2.png\n[3]: https://raw.githubusercontent.com/liang3472/BasketBall/master/screenshot/screenshot3.png\n[4]: https://raw.githubusercontent.com/liang3472/BasketBall/master/screenshot/screenshot4.png\n[5]: https://raw.githubusercontent.com/liang3472/BasketBall/master/screenshot/screenshot5.png\n"
 },
 {
  "repo": "rukmal/Scoreboard",
  "language": "JavaScript",
  "readme_contents": "# Scoreboard\n\n![Scoreboard landing page](bin/landing_page.png)\n\nScoreboard is a simple, secure and easy to use Scoreboard application built on [Node.js](http://nodejs.org) and [Socket.io](http://socket.io).\n\nScoreboard uses Socket.io's real time bidirectional event based communication system to integrate the scoreboard to the mobile-ready remote in real time.\n\n## Usage\n\nClone the repository from GitHub by running the following in the terminal.\n```bash\n$ git clone https://github.com/rukmal/Scoreboard.git\n```\n\nAll of the Scoreboard configuration is stored in the ```config.json``` file. It must have the following data:\n\n```JSON\n{\n\t\"_comment\": \"All times must be in milliseconds\",\n\t\"tournament_logo\": \"\",\n\t\"team_home\": \"\",\n\t\"team_away\": \"\",\n\t\"password\": \"\",\n\t\"half_length\": 0,\n\t\"timeout_length\": 0,\n\t\"halftime_length\": \"\",\n\t\"shot_clock_length\": 0\n}\n```\n\n*Note: all fields filled with a '0' must be numbers. Also note that the configuration file is loaded when the application starts, so if any changes are made, the app must be restarted.*\n\nNext, install all dependencies using npm (the Node.js package manager) and run the application.\n```bash\n$ cd Scoreboard\n$ npm install\n$ node app.js\n```\n\nNavigate to ```localhost:3000``` in your browser and enjoy!\n\n## Screenshots\n\n- Main scoreboard\n![Scoreboard main page](bin/scoreboard_screenshot.png)\n\n- Remote on an iPhone 5\n\n![Remote on iPhone 5](bin/iphone_remote_screenshot.png)\n\n## Contact\n\nThis is an open source project released under the [MIT License](LICENSE). Contact me if you want to suggest an improvement, or fork and send a pull request!\n\nFollow me on Twitter ([@rukmal](http://twitter.com/rukmal_w)) and [GitHub](http://github.com/rukmal).\n\nhttp://rukmal.me"
 },
 {
  "repo": "imadmali/bball-hmm",
  "language": "R",
  "readme_contents": "\n# Tagging Basketball Events with HMM\n\nThis case study shows how to implement Hidden Markov Models (HMM) in Stan using basketball player tracking data for the purpose of tagging events. The document `doc/hmm.html` discusses what a HMM is, how we fit HMMs in Stan, and how we apply this class of models to basketball data. We used a small sample of historical NBA player tracking data (see https://github.com/sealneaward/nba-movement-data for the raw data).\n\nThe workflow is separated into three parts (or model types):\n1. Example HMM\n2. Tagging a Drive Event\n3. Defensive Assignment\n\nAn outline of the project directory is provided below.\n\n* `hmm_example_fit.R`\n  * Simple HMM with 2 states and 1 output\n* `hmm_example_bad_fit.R`\n  * Above model without enforced ordering of parameters\n* `drive_0.R`\n  * Drive HMM with exponential likelihood\n* `drive_1.R`\n  * Drive HMM with normal likelihood\n* `defense_0a.R`\n  * Defensive assignment HMM example with fixed convex combination parameters\n* `defense_0b.R`\n  * Defensive assignment HMM example with estimated convex combination parameters\n* `defense_1_low_res.R`\n  * Defensive assignment HMM on player tracking data with estimated convex combination parameters\n* `defense_2_low_res.R`\n  * Defensive assignment HMM on player tracking data with fixed convex combination parameters\n* `graphics.R`\n  * Functions for plotting court/players/etc\n* `data/`\n  * Data scripts and data files\n* `doc/`\n  * Documentation\n* `media/`\n  * Video clips and plots of model output\n* `models/`\n  * Stan models\n* `results/`\n  * Stan model fits\n"
 },
 {
  "repo": "thunky-monk/kawhi",
  "language": "Haskell",
  "readme_contents": "# Kawhi : stats.NBA.com library \ud83c\udfc0\n\n[![Stackage](http://www.stackage.org/package/kawhi/badge/lts-9)](http://stackage.org/package/kawhi)\n[![Hackage](https://img.shields.io/hackage/v/kawhi.svg)](https://hackage.haskell.org/package/kawhi) [![Build Status](https://travis-ci.org/thunky-monk/kawhi.svg?branch=development)](https://travis-ci.org/thunky-monk/kawhi)\n\nA Haskell library for working with [NBA Stats](http://stats.nba.com) data. NBA Stats contains rich data, but accessing it is difficult and tedious. Kawhi helps to automate the data retrieval, allowing users to focus on statistics.\n\nIt's named after [Kawhi Leonard](http://cdn2.vox-cdn.com/assets/5039756/Kawhi-Leonard-portrait-oil.JPG).\n\n## Jump Ball\n\nTo get started:\n\n1. [Get Haskell](https://haskell-lang.org/get-started). If you've never done any computer programming, this could be challenging. [Never give up!](https://www.instagram.com/p/BENA9hpN_wL/)\n2. Read the [guide](https://github.com/thunky-monk/kawhi/blob/master/guide.md).\n3. Check out the [example](https://github.com/thunky-monk/kawhi/tree/master/example).\n"
 },
 {
  "repo": "EddM/boxscorereplay",
  "language": "Ruby",
  "readme_contents": "boxscorereplay.com\n==============\n\nThis is the source code for boxscorereplay.com, a dynamic, replayable box score for the NBA. It's not very good, but apparently people love the product.\n"
 },
 {
  "repo": "elwan9880/Yahoo_fantasy_basketball_analyzer",
  "language": "Python",
  "readme_contents": "## Yahoo Fantasy Basketball Analyzer\n\n* Description\n  * Average stats and Z-scores for teams in your Yahoo Fantasy Basketball league.\n  * Average stats and Z-scores for NBA players.\n  * Trade Analyzer for your Yahoo Fantasy Basketball league.\n\n* Requires\n  * python3.7\n\n* Installation\n  ```\n  git clone https://github.com/elwan9880/Yahoo_fantasy_basketball_analyzer.git\n  cd Yahoo_fantasy_basketball_analyzer\n  python setup.py install\n  ```\n\n* How to use\n  1. Create `oauth2.json` (https://yahoo-fantasy-api.readthedocs.io/en/latest/authentication.html).\n     1. Apply Yahoo API key (https://developer.yahoo.com/apps/create/). Select all read/write permission. It will give you `consumer_key` and `consumer_secret`.\n     2. Create `oauth.json` under the same directory with `yahoo_fantasy_basketball_analyzer.py` with your api key:\n        ```\n        {\"consumer_key\": <your consumer_key>, \"consumer_secret\": <your consumer_secret>}\n        ```\n  2. Run the script: `python yahoo_fantasy_basketball_analyzer.py`.\n     1. It will pop a web browser window with your verifier. Enter the verifier in terminal.\n     2. Enter the `year` and the `league_id` you would like to reference.\n  3. Choose the mode for analysis:\n     * `Fantasy Team Performance Analyzer`: Create `<season>_<league_name>_teams.csv`: Team performance with average stats and z-scores in your league\n     * `Fantasy Trade Analyzer`: create `<season>_<league_name>_<team_A>_<team_B>.csv`: Trade Analysis\n     * `NBA Players Performance Analyzer`: create `<season>_players.csv`: Players performance with average stats and z-scores\n  4. Import CSV files to google sheet or excel as CSV format (comma separated) to see the results.\n\n* Example:\n  ```\n  Chun-Tses-MacBook-Pro:Yahoo_fantasy_basketball_analyzer cshao$ python3 yahoo_fantasy_basketball_analyzer.py\n  ? Please choose a mode:  NBA Players Performance Analyzer\n  ? And a NBA season:  2018-2019\n  ? Select categories for analysis (default 9CAT):  done (9 selections)\n  Parsing Basketball Reference NBA players total stats ... Done\n  Calculating player performace ... Done\n  Finished! please import \"2018-2019_players.csv\" to excel as CSV format to see the results.\n  ```\n"
 },
 {
  "repo": "Franpanozzo/nba-api-rest",
  "language": "JavaScript",
  "readme_contents": "<p align=\"center\"><img width=\"600\" height=\"300\" src=\"https://elordenmundial.com/wp-content/uploads/2020/10/NBA-logo-baloncesto-historia-deporte-estados-unidos.jpg\"></p>\n\n<h1 align=\"center\">NBA REST API</h1>\n\n<h3 align=\"center\">\nOpen Source REST API for the best league in the world!\n</h3>\n\n<p align=\"center\">\n<img src=\"https://img.shields.io/badge/release-v1.0.0-1DA4D5\">\n<img src=\"https://img.shields.io/badge/uptime-100%25-369011\">\n<img src=\"https://img.shields.io/badge/interface-REST-brightgreen.svg?longCache=true&style=flat-square\">\n</p>\n\n<h4 align=\"center\">\n  <i>\n    We are not affiliated, associated, authorized, endorsed by, or in any way officially connected with NBA, or any of its subsidiaries or its affiliates. The names NBA as well as related names, marks, emblems and images are registered trademarks of their respective owners.\n  </i>\n</h4>\n\n<br>\n<br>\n\n<div>\n <b>Technologies used in this project: </b> \n <br />\n <br />\n<img src=\"https://img.shields.io/badge/JavaScript-323330?style=for-the-badge&logo=javascript&logoColor=F7DF1E\" />\n<img src=\"https://img.shields.io/badge/Node.js-339933?style=for-the-badge&logo=nodedotjs&logoColor=white\" />\n<img src=\"https://img.shields.io/badge/Express.js-000000?style=for-the-badge&logo=express&logoColor=white\" />\n<img src=\"https://img.shields.io/badge/MongoDB-4EA94B?style=for-the-badge&logo=mongodb&logoColor=white\" />\n<img src=\"https://img.shields.io/badge/Jest-C21325?style=for-the-badge&logo=jest&logoColor=white\" />\n<img src=\"https://img.shields.io/badge/AWS_Lambda-FF9900?style=for-the-badge&logo=amazonaws&logoColor=white\" />\n<img src=\"https://img.shields.io/badge/GitHub_Actions-2088FF?style=for-the-badge&logo=github-actions&logoColor=white\" />\n  <br />\n  <br />\n  \n  \n# Documentation\n  \n[![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/16013993-caf084a3-b439-4b43-9b9f-67a9fcf1d298?action=collection%2Ffork&collection-url=entityId%3D16013993-caf084a3-b439-4b43-9b9f-67a9fcf1d298%26entityType%3Dcollection%26workspaceId%3Daa0bb4e2-e714-4968-bd39-d9d56f9c0f3d)\n<br/>\n<br/>\n\n## Players\n  ### Get All Players\n  This endpoint retrieves all players from all seasons.\n  \n  - #### HTTP Request: \n  `GET https://klqn0hf9bk.execute-api.us-east-1.amazonaws.com/prod/v1/players`\n  \n  - #### Query parameters\n  \n| Parameter               | Default   | Description  |\n|-------------------------|-----------|--------------|\n| page       |1 | The page number used for pagination |\n| limit      | 20 | the number of results returned per call, used for pagination. Max 100    | \n| search   | | Used to filter players based on their name. For example, ?search=davis will return players that have 'davis' in their first or last name.  |\n\n  \n ### Post Player\n  This endpoint let\u00b4s you post a new player (for example to upload a new draft class) - You need a special API-KEY to do this.\n  - #### HTTP Request\n  `POST https://klqn0hf9bk.execute-api.us-east-1.amazonaws.com/prod/v1/players`\n  \n  - #### Body example\n  ![image](https://user-images.githubusercontent.com/62455934/165942148-d881a7c3-0595-461f-a5b8-f21838f36274.png)\n\n  \n  - #### Headers\n  `x-api-key: secretValue`\n  \n  ### Delete Player\n  This endpoint let's you delete a player (for example a player retires) - You need a special API-KEY to do this.\n  \n  - #### HTTP Request\n  `DELETE https://klqn0hf9bk.execute-api.us-east-1.amazonaws.com/prod/v1/players/<ID>`\n  \n  - #### URL Parameters\n  | Parameter | Description  |\n  |----------|--------------|\n  | ID        | ID of the player to Delete |\n  \n  - #### Headers\n  `x-api-key: secretValue`\n  \n  ## Teams\n  ### Get All Teams\n  This endpoint retrieves all teams for the current season.\n\n  - #### HTTP Request \n  `GET https://klqn0hf9bk.execute-api.us-east-1.amazonaws.com/prod/v1/teams`\n\n  ### Get Specific Team\n\n  - #### HTTP Request\n  `GET https://klqn0hf9bk.execute-api.us-east-1.amazonaws.com/prod/v1/teams/<ID>`\n\n  - #### URL Parameters\n  | Parameter | Description  |\n  |----------|--------------|\n  | ID        | ID of the team to retrieve |\n  \n  \n  \n  \n  \n\n  \n"
 },
 {
  "repo": "arbues6/Euroleague-ML",
  "language": "Jupyter Notebook",
  "readme_contents": "# Euroleague-ML\nThe aim of this repository is to publish several Python Notebooks to see how Machine Learning (ML) can be applied to basketball-based European Datasets. Although the given examples are quite simple (build-in scikit-learn functions), I expect these models to provide coaches/analysts/GM's with concrete baseline examples. \nIn particular, at the moment (January 12th 2020), three tutorials about ML gold-standards have been included:\n1. **Clustering**, where K-Means is used to group similar types of shooters based on shotchart-based features. \n2. **Classification**, where SVM is used to build a model able to classify player positions. \n3. **Regression**, where linear models are used in order to predict several statistics, as well as suggesting potentially interesting players for a given lineup. \n\nI really hope you find it useful. If you have any questions / suggestions, feel free to send me an email (adria.arbues@upf.edu) or a Twitter DM (@arbues6).\nBig shoutout also to Nacho G\u00e1mez (@ngamezj), who provided me with a notable dataset to get started. \n\n## Required Dependencies\nAll code has been written in Python (3.7); the following libraries should be installed (all of the are included in pip3):\n```\npip3 install numpy\npip3 install opencv-python\npip3 install pandas\npip3 install matplotlib\npip3 install scikit-learn\n```\n\n## Other Interesting Links and Resources\n- Andrew Patton's Repository \"Basic NBA Tutorials\": https://github.com/anpatton/basic-nba-tutorials\n- Talk \"Beyond the 4 Factors\" with Seth Partnow, Todd Whitehead and Justin Jacobs: https://www.youtube.com/watch?v=DKv-1n5OHEc&&ab_channel=Adri%C3%A0Arbu%C3%A9s\n- Some non-technical deep Euroleague reports: https://medium.com/@adria.arbues\n"
 },
 {
  "repo": "minimaxir/ncaa-basketball",
  "language": "R",
  "readme_contents": "# ncaa-basketball\n![](ncaa_count_attempts.png)\n\nR Code + R Notebook on how to process and visualize NCAA basketball data.\n\nThis repository is the complement to my blog post [Visualizing One Million NCAA Basketball Shots](http://minimaxir.com/2018/03/basketball-shots/).\n\n## Maintainer\nMax Woolf ([@minimaxir](http://minimaxir.com))\n\n*Max's open-source projects are supported by his [Patreon](https://www.patreon.com/minimaxir). If you found this project helpful, any monetary contributions to the Patreon are appreciated and will be put to good creative use.*\n\n## Special Credits\n\nEwen Gallic, for his implementation of a [basketball court in ggplot2](http://egallic.fr/en/drawing-a-basketball-court-with-r/), which saved me a lot of time.\n\n## License\nMIT"
 },
 {
  "repo": "kpascual/basketball-data-scraper",
  "language": "PLpgSQL",
  "readme_contents": "# PLAY BY PLAY AND BOX SCORE SCRAPING LIBRARY\n\n\n## Requirements\n\n\nThis library was created on a Mac, so the setup instructions are geared toward a *nix environment (sorry Windows users)\n\n* Python 2.5 or greater\n* BeautifulSoup4 (pip install beautifulsoup4)\n* lxml (used within BeautifulSoup) (pip install lxml)\n\n\n## Instructions\n\n\n* Clone the repository to your local machine (change your_folder_path to whatever folder you want to put the repo)\n\n```\ncd your_folder_path\ngit clone git@github.com:kpascual/basketball-data-scraper.git\n```\n\n* Add this new directory to your PYTHONPATH in ~/.bash_profile\n\n```\nPYTHONPATH=\"/your_folder_path/basketball-data-scraper:$PYTHONPATH\"\nexport PYTHONPATH\n```\n\n* Run the build.sh script\n\n\n```\nsh build.sh database_username database_password database_name\n```\n\nTo actually do scraping, run the scrape.py file. You will be asked what league you want to run.\n\n```\npython scrape.py\n```\n\n"
 },
 {
  "repo": "gabarlacchi/MASK-CNN-for-actions-recognition-",
  "language": "Python",
  "readme_contents": "# MASK R-CNN \u2028sport actions fine tuning\n\nMask R-CNN is a powerful framework developed by facebook ([here more](https://arxiv.org/abs/1703.06870)), main features are:\n- General and flexible for object instance segmentation \n- Part of Detectron, a state-of-the-art object detection algorithm collection\n- Powered in python and natively Coffe2 \n- Also available a [Keras + TensorFlow version](https://github.com/matterport/Mask_RCNN) (here you can find all the requirements)\n\n## Aims of this repo\n\nAddress the network towards Sport activities detection using fine tuning technique.\nWe want that the new will be able to detect only main subjects labelled as activity name (i.e. only people)\n\n![Aims](https://github.com/barloccia/MASK-CNN-for-actions-recognition-/blob/master/images/aims.png)\n\n## Dataset\n\nDataset used is ucf24 (subset of ucf101): a set for Action Recognition that consists of 3194 videos from 4 kind of action. Resolution of each video is 320x240 px.\nWe intending to work frame-by-frame, and also need an annotated groundtruth:\nA frame annotated version of this dataset it's available from this [repo by Gurkit](https://github.com/gurkirt/realtime-action-detection)\n#### but:\nNot whole dataset is annotated, only \u201cframe of interest\u201d: this produces the 70% of useless data.\nOnly bboxes groundtruth is available and no masks are annotated: so we produced a mask gt by ourselves.\n\n![Data distribution](https://github.com/barloccia/MASK-CNN-for-actions-recognition-/blob/master/images/data.png)\n\n\n## Getting Started\nHere we propose a bief explenation of the files and their usages (we strongly refer to ucf24 dataset above mentioned!):\nCoco weights used are available [here](https://arxiv.org/abs/1703.06870)\n\n- **actionCLSS_config.py**: extends and override net configuration.\n- **actionCLSS_dataset.py** and **actionCLSS_dataset_partitioned.py**: offers two dataset classes: the first can be instantiated specifying the number of samples which compose it, the second read the samples from `testList.txt` and `validationList.txt`.\n- **actionCLSS_training.py**: obviouslly, is the routine that manage the train.\n- **evaluation.py** : evaluate the model on the whole testSet and iteratively save local results.\n- **printPR.py**: use results produced by `evaluation.py` to compute Precision and Recall for each class.\n- **createMasks.py**: produce person masks for each frame of the dataset, like exposed below.\n\n![Mask Groundthrut generation](https://github.com/barloccia/MASK-CNN-for-actions-recognition-/blob/master/images/masks.png)\n\n## Results\n\nA brief argue can be over the divergence between a quantitative and a qualitative analysis on the maks and bb produced.\nBelow an example is showed: predictedion surclass the groundtruth, but numerically this means a penalization!\n![Qualitative Vs Quantitative](https://github.com/barloccia/MASK-CNN-for-actions-recognition-/blob/master/images/gtVsPred.png)\n\n- mAP without considering masks:  84.5%\n- mAP considering masks IoU=25: 37.4%\n- mAP considering masks IoU=50:  28.7%\n\n| Class        | No Mask           | IoU = 25  | IoU = 50  |\n| ------------ |:-----------------:| :--------:| :--------:|\n| WalkingWithDog\t| 85.8% | 57.2% | 48.9% |\n| BasketballDunk\t| 62.1% | 1.7% | 0.2% |\n| Biking\t| 92.4% | 38.3% | 27.5% |\n| CliffDiving\t| 22.7% | 3.2% | 0.0% |\n| CricketBowling\t| 47.2% | 3.8% | 2.7% |\n| Diving\t| 83.0% | 2.3% | 1.4% |\n| Fencing\t| 97.9% | 19.5% | 14.0% |\n| FloorGymnastics\t| 64.8% | 34.0% | 28.5% |\n| GolfSwing\t| 81.0% | 71.8% | 67.6% |\n| HorseRiding\t| 95.3% | 27.7% | 16.2% |\n| IceDancing\t| 93.7% | 68.8% | 64.3% |\n| LongJump\t| 59.9% | 25.1% | 22.1% |\n| PoleVault\t| 54.7% | 2.6% | 1.6% |\n| RopeClimbing\t| 90.6% | 30.8% | 20.5% |\n| SalsaSpin\t| 86.4% | 48.5% | 22.7% |\n| SkateBoarding\t| 86.7% | 46.9% | 34.2% |\n| Skiing\t| 80.7% | 46.3% | 37.2% |\n| Skijet\t| 87.8% | 21.9% | 13.0% |\n| SoccerJuggling\t| 85.8% | 58.3% | 52.8% |\n| Surfing\t| 78.2% | 18.1% | 12.7% |\n| TennisSwing\t| 64.9% | 59.3% | 56.1% |\n| TrampolineJumping\t| 83.5% | 16.3% | 13.8% |\n| VolleyballSpiking\t| 39.5% | 0.7% | 0.3% |\n\n## Requirements\nPython 3.4, TensorFlow 1.3, Keras 2.0.8 and other common packages listed in `requirements.txt`.\n\n### MS COCO Requirements:\nTo train or test on MS COCO, you'll also need:\n* pycocotools (installation instructions below)\n* [MS COCO Dataset](http://cocodataset.org/#home)\n* Download the 5K [minival](https://dl.dropboxusercontent.com/s/o43o90bna78omob/instances_minival2014.json.zip?dl=0)\n  and the 35K [validation-minus-minival](https://dl.dropboxusercontent.com/s/s3tw5zcg7395368/instances_valminusminival2014.json.zip?dl=0)\n  subsets. More details in the original [Faster R-CNN implementation](https://github.com/rbgirshick/py-faster-rcnn/blob/master/data/README.md).\n\nIf you use Docker, the code has been verified to work on\n[this Docker container](https://hub.docker.com/r/waleedka/modern-deep-learning/).\n\n\n## Installation\n1. Install dependencies\n   ```bash\n   pip3 install -r requirements.txt\n   ```\n2. Clone this repository\n3. Run setup from the repository root directory\n    ```bash\n    python3 setup.py install\n    ``` \n3. Download pre-trained COCO weights (mask_rcnn_coco.h5) from the [releases page](https://github.com/matterport/Mask_RCNN/releases).\n4. (Optional) To train or test on MS COCO install `pycocotools` from one of these repos. They are forks of the original pycocotools with fixes for Python3 and Windows (the official repo doesn't seem to be active anymore).\n\n    * Linux: https://github.com/waleedka/coco\n    * Windows: https://github.com/philferriere/cocoapi.\n    You must have the Visual C++ 2015 build tools on your path (see the repo for additional details)"
 },
 {
  "repo": "dsscollection/basketball",
  "language": "R",
  "readme_contents": "Repository for dsscollection submission \"Modeling Offensive Player Movement in Professional Basketball\" by Steven Wu and Luke Bornn.\n\nBelow are descriptions of the subdirectories of this repo:\n- analysis: contains all code and materials required to create the PDF of the paper submission. To create the PDF, you will need `knitr`, `dplyr`, `ggplot2`, `raster`, `grid`, `gridExtra` installed. Then, either (1) open 'article.Rnw' in RStudio and click 'File -> Preview' or (2) open up a Terminal and type \n\n> Rscript -e \"library(knitr); knit('./EPV_demo.Rnw')\".\n\n- data: contains .Rdata files of intermediate data that is helpful for testing changes to the implementation of functions\n- plots: contains static plots that the article uses, namely plots that were generated over a season's worth of data\n\nWe would like to acknowledge STATS, LLC for consenting the inclusion of a full-game data sample.\n"
 },
 {
  "repo": "gogonzo/sport",
  "language": "R",
  "readme_contents": "---\ntitle: \"`sport` an R package for Online Ranking Methods\"\noutput:\n  github_document:\n    pandoc_args: --webtex\n---\n```{r, echo = FALSE}\nknitr::opts_chunk$set(\n  collapse = TRUE,\n  comment = \"#>\",\n  fig.path = \"man/figures/README-\"\n)\n```\n\n# sport <img src=\"man/figures/hexlogo.png\" align=\"right\" />\n\n<!-- badges: start -->\n[![CRAN badge](https://cranlogs.r-pkg.org/badges/sport)](https://cran.r-project.org/web/packages/sport/index.html)\n[![Travis-CI Build Status](https://travis-ci.org/gogonzo/sport.svg?branch=master)](https://travis-ci.org/gogonzo/sport)\n[![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/github/gogonzo/sport?branch=master&svg=true)](https://ci.appveyor.com/project/gogonzo/sport)\n[![License: GPL v2](https://img.shields.io/badge/License-GPL%20v2-blue.svg)](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html)\n[![Coverage status](https://codecov.io/gh/gogonzo/sport/branch/master/graph/badge.svg)](https://codecov.io/gh/gogonzo/sport)\n<!-- badges: end -->\n\n# About\nName `sport` is an abbreviation for Sequential Pairwise Online Rating Techniques. Package contains functions calculating ratings for two-player or multi-player matchups. Methods included in package are able to estimate ratings (players strengths) and their evolution in time, also able to predict output of challenge. \nAlgorithms are based on Bayesian Approximation Method, and they don't involve any matrix inversions nor likelihood estimation. `sport` incorporates methods such glicko, glicko2, bayesian Bradley-Terry, dynamic logistic regression. Parameters are updated sequentially, and computation doesn't require any additional RAM to make estimation feasible. Additionally, base of the package is written in `C++` what makes `sport` computation even faster.\n\n# Package Usage\n\n## Installation\nInstall package from CRAN or development version from github.\n\n```{r eval=FALSE}\ndevtools::install_github(\"gogonzo/sport\")\ninstall.packages(\"sport\",repos = \"https://cloud.r-project.org/\")\n```\n\n## Available Data\nPackage contains actual data from Speedway Grand-Prix. There are two data.frames: \n\n1. `gpheats` - results SGP heats. Column `rank` is a numeric version of column `position` - rider position in race.\n2. `gpsquads` - summarized results of the events, with sum of point and final position.\n\n```{r echo=TRUE, message=FALSE, warning=FALSE}\nlibrary(sport) \nstr(gpheats)\n```\n\nData used in `sport` package must be in so called long format. Typically data.frame contains at least `id`, `name` and `rank`, with one row for one player within specific match. Package allows for any number of players within event and allows ties also. For all games, *output needs to be a rank/position in event*. Don't mix up rank output with typical 1-win, 0-lost. In `sport` package output for two player game is 1-winner 2-looser. Below example of two matches with 4 players each.\n\n```{r echo=FALSE}\ngpheats[1:8,c(\"id\",\"rider\",\"rank\")]\n```\n\n## Estimate dynamic ratings\n\nTo compute ratings using each algorithms one has to specify formula. Form `rank | id ~ name` is required, which estimates `name` - rating of a player, by observing outputs - `rank`, nested within particular event - `id`. Variable names in formula are unrestricted, but model structure remains the same. All methods are named `method_run`.\n`formula = rank|id ~ name` \n\n```{r warning=FALSE, message=FALSE}\nglicko  <- glicko_run(formula = rank|id ~ player(rider), data = gpheats)\nglicko2 <- glicko2_run(formula = rank|id ~ player(rider), data = gpheats)\nbbt     <- bbt_run(formula = rank|id ~ player(rider), data = gpheats)\ndbl     <- dbl_run(formula = rank|id ~ player(rider), data = gpheats)\n\nprint(dbl)\n```\n\n## Output\n\nObjects returned by `method_run` are of class `rating` and have their own `print`\n`summary` which provides most important informations. -`print.sport` shows \ncondensed informations about model performance like accuracy and consistency of \nmodel predictions with observed probabilities. More profound summary are given \nby `summary` by showing ratings, ratings deviations and comparing model win \nprobabilities with observed.\n\n```{r message=FALSE}\nsummary(dbl)\n```\n\nTo visualize top n ratings with their 95% confidence interval one can use \ndedicated `plot.rating` function. For DBL method top coefficients are presented \nnot necessarily ratings. It's also possible to examine ratings evolution in time, \nby specifying `players` argument.\n\n```{r message=FALSE, fig.show='hold', out.width = \"50%\"}\nplot(glicko, n = 15)\nplot(glicko, \n     players = c(\"Greg HANCOCK\",\"Tomasz GOLLOB\",\"Tony RICKARDSSON\"))\n```\n\nExcept dedicated `print`,`summary` and `plot` there is possibility to extract more detailed information to be analyzed. `rating` object contains following elements:\n\n```{r message=FALSE}\nnames(glicko)\n```\n\n* `rating$final_r` and `rating$final_rd` contains ratings and ratings deviations estimations.\n* `r` contains data.frame with sequential ratings estimations from first event to the last. Number of rows in `r` equals number of rows in input data.\n* `pairs` pairwise combinations of players in analyzed events with prior probability and result of a challenge. \n\n```{r message=FALSE}\ntail(glicko$r)\ntail(glicko$pairs)\n```"
 },
 {
  "repo": "kgilbert-cmu/basketball-gm",
  "language": "JavaScript",
  "readme_contents": "# Basketball GM 4.0.0\n\nA single-player basketball simulation game. Make trades, set rosters, draft\nplayers, and try to build the next dynasty, all from within your web browser.\nThe game is implemented entirely in client-side JavaScript, backed by IndexedDB.\n\nCopyright (C) Jeremy Scheff. All rights reserved.\n\n* Email: commissioner@basketball-gm.com\n* Website: <https://basketball-gm.com/>\n* Development: <https://github.com/dumbmatter/basketball-gm>\n* Discussion: <http://www.reddit.com/r/BasketballGM/>\n\n**Basketball GM is NOT open source, but it is also not completely closed. Please\nsee LICENSE.md for details.**\n\n## Development Info\n\nIf you just want to play the game, go to <http://basketball-gm.com/>.\nInstructions below are for developers who want to run a copy locally so they can\nmake changes to the code.\n\nIf you want to contribute but get stuck somewhere, please contact me! I'm happy\nto help.\n\n### License and Contributor License Agreement\n\n**Basketball GM is NOT open source, but it is also not completely closed. Please\nsee LICENSE.md for details.**\n\nIf you want to contribute code to Basketball GM, you must sign a contributor\nlicense agreement. There are separate forms for individuals and entities (such\nas corporations):\n\n* [Individual CLA](CLA-individual.md) (this is probably what you want)\n* [Entity CLA](CLA-entity.md)\n\nMake a copy of the form, fill in your information at the bottom, and send an\nemail to commissioner@basketball-gm.com with the subject line, \"Contributor\nLicense Agreement from YOUR_NAME_HERE (GITHUB_USERNAME_HERE)\".\n\n### Step 1 - Installing\n\nFirst, make sure you're using [Node.js](https://nodejs.org/) v6 or higher, older\nversions probably won't work. Then, all of the tooling used in development can\nbe set up by simply installing [npm](https://www.npmjs.com/) and running\n\n    npm install\n\nfrom within this folder.\n\n### Step 2 - Building\n\nBasketball GM uses Browserify for JS minification and clean-css for\nCSS minification. To build the app along with all its assets, run\n\n    npm run build\n\nHowever during development, you probably would rather do\n\n    npm run start-watch\n\nwhich will start the server and watch JS and CSS files for changes and\nrecompile. This simply runs both `npm start` and `npm run watch` together, which\nalternatively can be run separately if you wish.\n\nOpen `package.json` to see all available scripts.\n\n### Step 3 - Running\n\nTo run the game locally, you need some way of running a web server to display\nthe content. There are currently two ways to do it. It doesn't matter which\nyou use as long as you can get it to run on your computer.\n\n#### 1. Node.js (easiest)\n\nRun\n\n    npm start\n\nand point your browser to <http://localhost:3000/>. If you use the command\n`npm run start-watch` from above, then running the command `npm start` is not\nnecessary.\n\n#### 2. Apache\n\nThe mod_rewrite rules in `.htaccess` can be used to make Apache run Basketball\nGM. Everything should work if you point it at the `build` folder with\nmod_rewrite enabled. That's how it's done on play.basketball-gm.com.\n\n### Step 4 - Testing\n\nESLint, Flow, and, stylelint are used to enforce some coding standards. To run\nthem on the entire codebase, run\n\n    npm run lint\n\nIntegration and unit tests are bunched together in the `js/test` folder.\nCoverage is not great. They can be run from the command line in Karma with\n\n    npm test\n\nor\n\n    npm run test-watch\n\nor manually within a web browser by running `npm run build-test` (or\n`npm run watch-test`) and going to <http://localhost:3000/test> (this might be\nbroken currently).\n\n### Code Overview\n\nBasketball GM is a single-page app that runs almost entirely client-side by\nstoring data in IndexedDB. The core of the game runs inside a Shared Worker (or\na Web Worker in crappy browsers that don't support Shared Workers), and then\neach open tab runs only UI code that talks to the worker. The UI code is in the\n`src/js/ui` folder and the core game code is in the `src/js/worker` folder. They\ncommunicate through the `toUI` and `toWorker` functions.\n\nThe UI is built with React and Bootstrap.\n\nIn the worker, data is ultimately stored in IndexedDB, but for performance and\ncross-browser compatibility reasons, a cache (implemented in\n`src/js/worker/db/Cache.js`) sits on top of the database containing all commonly\naccessed data. The idea is that IndexedDB should only be accessed for uncommon\nsituations, like viewing stats from past seasons. For simulating games and\nviewing current data, only the cache should be necessary.\n\nThe cache is overly complicated because (1) the values it returns are mutable,\nso you better not mess with them accidentally, and (2) when you do purposely\nmutate a value (like updating a player's stats), you need to remember to always\nwrite it back to the cache manually by calling `idb.cache.*.put`.\n\nAlso in the worker, there is a global variable `self.bbgm` which gives you\naccess to many of the internal functions of Basketball GM from within your\nbrowser.\n\n### Git Workflow\n\nIf you want to contribute changes back to the project, first create a fork on\nGitHub. Then make your changes in a new branch. Confirm that the tests\n(hopefully including new ones you wrote!) and ESLint all pass. Finally, send me\na pull request.\n\nIt's also probably a good idea to create an [issue on\nGitHub](https://github.com/dumbmatter/basketball-gm/issues) before you start\nworking on something to keep me in the loop.\n\n## Less Important Development Info\n\n### Bootstrap\n\nBasketball GM's layout is currently based on Bootstrap 3.1.1 with the following\noptions:\n\n* @font-size-base set to 13px\n\n### Basketball stuff\n\nAbbreviations of stats should be done like basketball-reference.com stat pages.\nFor instance, \"defensive rebounds\" is \"drb\".\n\n### Cordova\n\nThe game runs equally well within a web browser and within Cordova (Android\n4.4+). The codebase is designed to handle both situations (the main difference\nis absolute vs relative paths, governed by window.inCordova in index.html).\n\nWarning: This hasn't been tested in a while and is probably broken by now.\n\n### Thank you BrowserStack\n\nShout out to [BrowserStack](https://www.browserstack.com/) for helping with\ncross-browser testing.\n"
 },
 {
  "repo": "nlgcat/sport_sett_basketball",
  "language": "Ruby",
  "readme_contents": "# SportSett:Basketball\n\nThis resource is designed to allow for research into Natural Language Generation.  In particular, with neural data-to-text approaches although it is not limited to these.  This page will be updated with more detail, as soon as I have time and am able to post examples of other work I am doing with this.  For the moment, see our [IntelLanG2020](https://intellang.github.io/papers/) paper [SportSett:Basketball - A robust and maintainabledataset for Natural Language Generation](https://intellang.github.io/papers/5-IntelLanG_2020_paper_5.pdf).\n\n# Denormalized Tables\nTo make things easier for people, I have uploaded on [Google Drive](https://drive.google.com/file/d/1CN74cxLrlBQpcStJIF1GQJO0TcTE6y2T/view?usp=sharing) a SQL script which will add some denormalized tables created from the core tables.  This provides things like:\n\n* Per player/team on game/period statistics, with each player/time-period on one row.\n* The same, except for some name information about each row.\n\nOn the statistics tables, each stat has a count, then also a \"_double\" column, which is one if it is \"double digits\", zero otherwise.  There are also columns at the end for whether the player had a \"double-double\" or \"triple-double\" etc.  These columns are included for teams, and per-period data as well, even though it does not always make sense to use it that way.\n\nThese have not been thoroughly tested yet, and I will at some point release the SQL scripts I used to make these tables.  I know the underlying table structure can seem daunting/obtuse.  It has been designed to allow for multiple sports and leagues whilst maintaining a high level of normalization.  It is like this, because I find it easier to work with, although I acknowledge that not everyone does.  For NLG research I am looking at simpler ways this data can be made available, and these 8 new tables are a first step in that direction.  You should be bale to just run the sql file with the psql command and write these tables atop your existing database.\n\n## Quick Start\nYou will need a working [PostgreSQL](https://www.postgresql.org/) installation, as well as a working Ruby environment if you want to use the ORM.  I suggest using [RVM](https://rvm.io/), you will also need [Bundler](https://bundler.io/).  The ORM are written in [Ruby Sequel](https://github.com/jeremyevans/sequel) rather than ActiveRecord.  Whilst this is all in a Rails app, there is no front-end implemented, it is just a convenient way for me to create scripts using rake tasks.  Note that this resource is not meant to be efficient.  If you require high data throughput for some reason, you can use the raw SQL.  The Ruby code is meant to provide a simple way to write scripts to export data, this might take an hour or two to run but it is simple to code and the training of models takes way longer than that anyway, so I find it to be acceptable.\n\nYou will need to set the password etc in config/database.yml\n```\ndevelopment:\n\tadapter: postgresql\n\tdatabase: sport_sett_development\n\tuser: postgres # Also accept 'username' as key, if both are present 'username' is used\n\tpassword: postgrespassword\n\thost: 127.0.0.1 # Optional\n\tport: 5432 # Optional\n\n```\nATTENTION!\nThe original SQL file contained a but where the team_in_games.winner column was often wrong.  This was a convenience column, the scores appear to all be correct.  The file has now been updated, using the score fields to derive then correct the winner column.\n\nThen navigate to root directory of repo, download database archive file, and ensure you have the correct ruby environment set (if using something like RVM).  Large files can be found in [Google Drive](https://drive.google.com/file/d/1NUEHzNmwlG-TQB6dAxSiTUQQ7z6vbkNL/view?usp=sharing).\n```\nbundle install\ntar -xvjpf db_after_statistics_2018.sql.tar.bz2\npsql -U postgres -d sport_sett_development < db_after_statistics_2018.sql\n```\n\nYou can now generate output files in the format required for the [system of Rebuffel et al.](https://github.com/KaijuML/data-to-text-hierarchical).  This takes about 1 hour to run.  The result of the below command has been uploaded to [Google Drive](https://drive.google.com/drive/folders/11MG7uVDi5tB8By9WT_OqqqZ1NbiEaS3Y?usp=sharing) if you just want the OpenNMT training data without changing anything.\n\n```\nrake export:rebuffel\n```\nThis will place several files in the **./exported_files** directory.  In order to create the partitions from these files as per our paper you need to combine the yearly files.  The yearly files contain data for just one season.\n```\ncd ./exported_files\ncat D1_2014_data.txt D1_2015_data.txt D1_2016_data.txt > D1_training_data.txt\ncat D1_2014_text.txt D1_2015_text.txt D1_2016_text.txt > D1_training_text.txt\ncp D1_2017_data.txt D1_valid_data.txt\ncp D1_2017_text.txt D1_valid_text.txt\ncp D1_2018_data.txt D1_test_data.txt\ncp D1_2018_text.txt D1_test_text.txt\n```\n\nor run\n\n```\nsh combine.sh\n```\n\nYou can of course combine these in other ways.  This is just the partition scheme we used in our paper.\n\n## Dimensions\nPlease see **app/models/rebuffel_open_nmt_record.rb** for code which creates this data.  If you wanted to change the data for each input sample, this is where you would do it, either by editing this file or creating your own similar class which is used in the rake script.\n\nNotice how the class names follow the dimensions highlighted in our paper.  The UML diagram shows these relationships.\n\nWARNING:  There are some issues with the play-by-play statistics.  Sometimes, they do not line up with what is reported in the box score.  I am working on scripts to automatically resolve these, although early investigation suggests there is only about 1 mistake every other game.  A mistake is commonly just one basket being attributed to the wrong player.  You can use the play-by-play, there is a lot of data there, but there are discrepancies.  Given this is such a large dataset, with original data entry likely by humans, it will not be 100% perfect.  My current plan for this is to take the game data, game period data, and play-by-play, then resolve discrepancies automatically where 2/3 of the sources agree on a correct answer, and the error can be resolved a net-zero effect (same team totals, points etc).\n\n## Playoff / Preseason Games\nWhilst some of these games are in the original Rotowire dataset, they are not yet included here.  The database is designed in such a way that they can be added later.  There are several reasons for not including them yet.  Firstly, it takes time to import this stuff.  Secondly, just doing regular season games makes the machine learning problem simpler (and it is still very, very difficult).  Finally, preseason games are played in all kinds of places, even against teams from different leagues.\n\n## A Note on Generated Files\nSome functions in Ruby such as sort_by are not deterministic beyond their given arguments.  This means that items which are of equal value when sorted are not always presented in the same order (just together).  The code has also been changed slightly to make it simpler (it used to be several different functions doing similar things).  I only mention this here so you know that the dataset generated is not the exact one used in the paper.  This is no bad thing, running on the exact same dataset over and over again is a bad idea.\n\n## This is a work in progress\nThis is code from an academic research project, trying to get us closer to a sensible data solution in this domain.  It is not finished, it is not a commercial product.  I am happy to answer questions if you are doing research, but please have reasonable expectations.\n\n## UML DIagram\nSome attributes are missing for this and it needs a general update and tidy, but it is mostly right.  You can find all attributes by looking at the SQL tables.  Rails Sequel naming conventions have been followed.\n![UML Diagram](https://raw.githubusercontent.com/nlgcat/sport_sett_basketball/master/class_diagram.png)\n\n\n"
 },
 {
  "repo": "dimgold/Artificial_Curiosity",
  "language": "Jupyter Notebook",
  "readme_contents": "# Artificial Curiosity\n## Adaptive Reinforcement Learning of curious AI basketball agents\n\n![](/robot.jpg?style=centerme)\n\n\nA machine learning project of learning NBA shots success ratio based on  410,000 records of [NBA players shots stats](http://stats.nba.com).\n\nThe project implements various ML techniques in order to create a \"Curious\" AI agent, which learns success ratios and implements the knowledge in [**exploration-exploitaition**](http://www.indigosim.com/tutorials/exploration/t0s1.htm) game simulation enviroment.\n\n## Part 1 - [Bayesian Inference and Information Gain](part1-bayes/cur_project_bayes.ipynb)\nAfter an [EDA](https://en.wikipedia.org/wiki/Exploratory_data_analysis) stage and preprocessing of shots data into categorical features we implemented a [bayesian inference](https://en.wikipedia.org/wiki/Bayesian_inference) algorithm and evaluated the feature selection with Expected [Information Gain](https://en.wikipedia.org/wiki/Information_gain_ratio) criteria.\n\n\n## Part 2 - [Neural Network Learning and Optimization](Part2-NN/cur_neural.ipynb)\n\nManual Neural Network implementation with numpy and SGD method. This part required new preprocess methods (to continuous features) and network structure optimization by improving [prediction AUC](https://en.wikipedia.org/wiki/Receiver_operating_characteristic#Area_under_the_curve) to 70%.\n\n### Extra:\n  - [Genetic algorithm optimization](Part2-NN/Genetic.ipynb)\n  \n    Implementation of a genetic algorithm for network structure optimization.\n    \n  - [Random Forest, SVM and PCA methods](Part2-NN/Other_models.ipynb)\n  \n    Benchmarks methods for accuracy estimation and feature selection.\n\n## Part 3 - [Curiosity Loop with Adaptive Reinforcement Learning](/Part3-RL/Artificial_Curiosity_Loop.ipynb)\nImplementaion of a Curosity Loop, using [Actor-Critic Method](https://cs.wmich.edu/~trenary/files/cs5300/RLBook/node66.html) and Bayesian Inference.\n\n### The Curiosity Loop:\n![](Part3-RL/loop.PNG)\n\nA \"new-born\" AI agent takes shots from different positions and learns the success of each shot, while trying to both learn the environment and score as much as possible.\n\n## Project Presentation:\n[Link to project presentation (pdf)](Pres.pdf)\n![presentation](presentation.png)\n\n## More Links:\n\n- [Big Data Lab @ TAU](http://bigdatalab.tau.ac.il/research/)\n- [Curiosity Lab @ TAU](http://gorengordon.wixsite.com/gorengordon)\n\n"
 },
 {
  "repo": "JKH-HCA2/BasketballRecLeague",
  "language": "JavaScript",
  "readme_contents": "# BasketballRecLeague\n\n## About\n\nThe purpose of this project is to demonstrate a combination of programming strategies we've learned over the duration of the bootcamp. The app will be basketball themed, and it will display a list of leagues, teams, and members registered with the site. Users will also be able to register, edit, and delete new teams or members.\n\n## Tech\n\nThe webpage will be written in HTML, CSS, and JavaScript. Additionally, the page will utilize a server file to dynamically pull data from a local JSON file.\n\n## How To\n\nTo launch the server, navigate to the parent folder BasketballRecLeague in your file directory. Drag that folder into your command line and change to that directory. Once there, perform a 'node server.js' to initialize the webserver. Then, enter 'http://localhost:8081/' in your browser's address bar.\n\n## Website\n\n![](public/images/screenshot.png)"
 },
 {
  "repo": "devinmancuso/nba-start-active-players-bot",
  "language": "Python",
  "readme_contents": "## nba-start-active-players-bot\n\n**What**\n\nPython Selenium script that logs into your Yahoo fantasy basketball account and starts active players for today and upcoming days. Accepts arguments username, password, the number of days you would like the bot to process into the future and whether you want to see what the browser is running (useful for debugging) or run in headless mode.\n\n**Why**\n\n1. Never leave a player on the bench because you forgot to set your lineup\n2. Why not\n\n**Dependencies**\n\n* Python 2.7\n* [Click](http://click.pocoo.org/)\n* Selenium WebDriver\n* [ChromeDriver](https://sites.google.com/a/chromium.org/chromedriver/downloads)\n* PhantomJS\n\n**How**\n\n1. Download script\n2. Install dependencies\n\n```bash\npip install selenium click \nbrew install node\ncurl https://www.npmjs.org/install.sh | sh\nnpm install phantomjs\n```\n\nYou'll have to grab ChromeDriver manually.\n\n3. Run the program\n\nTo run the program\n\n`python start-active-players.py`\n\nYou will be prompted to enter the number of days you want the script to process, your Yahoo credentials and whether you want the script to run in headless mode (you can't watch what it's doing in the browser). \n\nYou can include these details as options to avoid having to fill them in each time. For example to start active players for the next week including today.\n\n`python start-active-players.py --days=7 --username=YahooUsername@yahoo.com.au --password=Y0urYah00Passw0rd --headless=False`\n\nuse `--help` for help documentation.\n\n**To-Do**\n\n- [x] Try / Except for missing command line argv.\n- [x] Add headless support for PhantomJS\n- [ ] Try / Excepts for key UI elements to ensure Selenium can find them before we click them.\n- [ ] Put more asserts in places to tighten it all up\n- [x] Include confirmations for each date as they are processed\n\n**Contribute**\n\nIf you think this is a cool idea, but kind of inefficient, please submit a PR and let's make this better.\n\n\u00a9 2015, Devin Mancuso \u00b7 MIT License you know the deal\n"
 },
 {
  "repo": "cryptopunksnotdead/punks.bodies",
  "language": null,
  "readme_contents": "\n[Vol. 1 - Heads](https://github.com/cryptopunksnotdead/punks.blocks) \u00b7\n[Vol. 2 - Bodies & More](https://github.com/cryptopunksnotdead/punks.bodies)\n\n# Punk Building Block Series  Vol 2 - Bodies & More\n\n\n## Basic Punk Body Series (32\u00d732)\n\n\nHumans (m/f) - 3 skin tones (dark/mid/light)\n\nMale -\nxs - ![](basic/human1-male-xs.png)\n![](basic/human2-male-xs.png)\n![](basic/human3-male-xs.png),\nmid -\n![](basic/human1-male-m.png)\n![](basic/human2-male-m.png)\n![](basic/human3-male-m.png).\n\n\nFemale -\nmid - ![](basic/human1-female-m.png)\n![](basic/human2-female-m.png)\n![](basic/human3-female-m.png),\nlarge - ![](basic/human1-female-l.png)\n![](basic/human2-female-l.png)\n![](basic/human3-female-l.png),\nbig xxl -\n![](basic/human1-female-xxl.png)\n![](basic/human2-female-xxl.png)\n![](basic/human3-female-xxl.png).\n\n\n\nMore -\nZombies (m/f)\n![](basic/zombie-male-xs.png) ![](basic/zombie-male-m.png) ![](basic/zombie-female-m.png)  ![](basic/zombie-female-l.png) ![](basic/zombie-female-xxl.png),\nApes (m/f),\n![](basic/ape-male-xs.png) ![](basic/ape-male-m.png) ![](basic/ape-female-m.png) ![](basic/ape-female-l.png) ![](basic/ape-female-xxl.png),\nAliens (m/f)\n![](basic/alien-male-xs.png) ![](basic/alien-male-m.png) ![](basic/alien-female-m.png) ![](basic/alien-female-l.png) ![](basic/alien-female-xxl.png).\n\n\n\n### Men in Black Series (32\u00d732)\n\n_(Black) Smoking & Dinner Jackets_\n\n![](meninblack/suit1-black.png)\n![](meninblack/suit2-black.png)\n\n\n###  Hoodies Series (32\u00d732)\n\n_Brudda (& Sista), Welcome to the Hood_\n\n![](hoodies/m/hoodie1-black.png)\n![](hoodies/m/hoodie1-cream.png)\n![](hoodies/m/hoodie1-sky.png) <br>\n![](hoodies/m/hoodie2-dark.png)\n![](hoodies/m/hoodie2-pharoah.png)\n\n\n\n\n###  Football Jersey Series (32\u00d732)\n\n_National (Selection) Teams & Football Clubs From Around the World_\n\nNational (Selection) Teams -\n![](football/argentina.png)\n![](football/brazil.png)\n![](football/france.png)\n![](football/portugal.png)\n\nFootball Clubs -\n![](football/arsenal.png)\n![](football/liverpool.png)\n![](football/manchester_city.png)\n![](football/barcelona.png)\n![](football/internazionale.png)\n![](football/juventus.png)\n![](football/lille.png)\n![](football/bayern.png)\n![](football/austria_wien.png)\n![](football/rapid_wien.png)\n\n\n\n\n### Basketball Jersey Series  (32\u00d732)\n\nU.S. National Basketball Association (NBA) -\n![](basketball/atlanta_hawks.png)\n![](basketball/boston_celtics.png)\n![](basketball/brooklyn_nets.png)\n![](basketball/charlotte_hornets.png)\n![](basketball/chicago_bulls.png)\n![](basketball/chicago_bulls2.png)\n![](basketball/cleveland_cavaliers.png)\n![](basketball/dallas_mavericks.png)\n![](basketball/denver_nuggets.png)\n![](basketball/golden_state_warriors.png)\n![](basketball/golden_state_warriors2.png)\n![](basketball/los_angeles_lakers.png)\n![](basketball/los_angeles_lakers2.png)\n![](basketball/new_york_knicks.png)\n\n\n\n\n\n### Hotties in Bras Series (32\u00d732)\n\n_Hot or Not?_\n\n![](hotties/bra-black.png)\n![](hotties/bra-cyan.png)\n![](hotties/bra-pink.png)\n![](hotties/bra-yellow.png)\n\n\n\n\n## Questions? Comments?\n\nPost them on the [D.I.Y. Punk (Pixel) Art reddit](https://old.reddit.com/r/DIYPunkArt). Thanks.\n\n"
 },
 {
  "repo": "tutsplus/BasketballFreeThrowUnity",
  "language": null,
  "readme_contents": "Create a Basketball Free Throw Game with Unity\n==============================================\nThis repository includes the sample project used in [Create a Basketball Free Throw Game with Unity](https://code.tutsplus.com/tutorials/create-a-basketball-free-throw-game-with-unity--cms-21203).\n"
 },
 {
  "repo": "chrisdesilva/pickup",
  "language": "JavaScript",
  "readme_contents": "# [Shoot For Teams](https://shootforteams.com)\n\nApp designed to find nearby basketball courts for pick-up games. Starting off as an Austin-based project with plans for expansion to other areas as development continues.\n\n# Description\n\nShoot For Teams is designed to take the hassle out of finding nearby basketball courts. With user-generated information about courts, you get a much more detailed experience than traditional search sites. We make it easy to find the place so you can get out and play.\n\n# Install\n\nWhen accessing the [page](https://shootforteams.com) with your Android smartphone, you may select the \"Add to Home Screen\" button on the Chrome menu to access it as a regular app. For desktop Chrome you may go to Menu and then \"Install Shoot For Teams\" to add it to your desktop. As for iOS support, it is still just starting out, but you may access the site, then go to the menu, then \"Share\", and \"Add to Homescreen\" and you will be good to go.\n\n# Usage\n\nJust click on the \"Find a Court\" button, enable location access, and see the courts nearby you. The orange ball represents courts with scheduled games, the black ones represents free courts. Clicking on the ball let you see photos, location, current weather and future games. You may signin or login to be able to submit new court entries and schedule matches.\n\n# [License](https://github.com/chrisdesilva/pickup/blob/master/LICENSE)\n\n# Contribute\n\nI'd love to have your help with this project. The steps [here](https://github.com/chrisdesilva/pickup/blob/master/Contributing.md) should get you going. If not, make a contribution by updating the docs!\n"
 },
 {
  "repo": "alfremedpal/PandasBasketball",
  "language": "Python",
  "readme_contents": "# PandasBasketball\nPandasBasketball is a small module intended to scrape data from [basketball-reference](https://www.basketball-reference.com/) and convert it to useful pandas data structures, such as data frames, for future analytical purposes. The use of jupyter notebooks is encouraged.\n\n# Installation\n```\npip install PandasBasketball\n```\n\nAfter installation you can then import it to your environment like this:\n```\nfrom PandasBasketball import pandasbasketball as pb\n```\n\n## Requirements\nPlease make sure you meet the following rquirements:\n- Python 3.6+\n- requests\n- pandas\n- Beautiful Soup 4\n\nAll the requirements can easily be met with the installation of the [Anaconda](https://www.anaconda.com/download/) distribution.\n\n# Usage\n## :basketball: Players\nInside a player's page on the basketball-reference website you can find several tables, and most of these tables can be obtained as a pandas data frame by calling `get_player(player, stat)`. The 'player' refers to the name of the html file used by basketball-reference inside the url, and the 'stat' means the type of table.\n\nThe currently supported tables are:\n- Per Game (`per_game`)\n- Totals (`totals`)\n- Per 36 Minutes (`per_minute`)\n- Per 100 Poss (`per_poss`)\n- Advanced (`advanced`)\n- Playoffs Per Game (`playoffs_per_game`)\n- Playoffs Totals (`playoffs_totals`)\n- Playoffs Per 36 Minutes (`playoffs_per_minute`)\n- Playoffs Per 100 Poss (`playoffs_per_poss`)\n- Playoffs Advanced (`playoffs_advanced`)\n\nThe rest of the tables will come in the future.\n\n### Example\nTo get the 'Per Game' table for LeBron James you would do something like this:\n```\ndf = pb.get_player(\"jamesle01\", \"per_game\")\n```\n\n### Optional Arguments\nThe `get_player()` method supports two optional arguments:\n- `numeric` - returns the data frame with its columns alreay converted to numeric\n- `s_index` - returns the data frame with its column 'Season' as the index\n\nBoth are set to `False` by deault.\n\n### Considerations\n- The resulting data frame **does not** include the table's footer.\n- The resulting data frame will have the same column names as the table's header but it will not have a set index. To set the 'Season' column as index set the argument `s_index` to `True`. \n- The columns will be of type 'object', so in order to perform arithmetic functions on them you will need to convert them to numeric. You can do something like this:\n```\nlbj_pg = pb.get_player(\"jamesle01\", \"per_game\")\nlbj_pg[lbj_pg.columns] = lbj_pg[lbj_pg.columns].apply(pd.to_numeric, errors=\"ignore\")\n```\nOr you cant set the optional argument `numeric` to `True`.\n\n## :basketball: Player Game Logs\nYou can get all of a player's games in a season by calling `get_player_gamelog(player, season)`. The `season` argument must be the last year in which the season took place. \n\n### Example\nTo get all of Kawhi Leonard's games during the 2017-2018 season:\n```\ndf = pb.get_player_gamelog(\"leonaka01\", \"2018\")\n```\n\n### Optional Arguments\nThe function `get_player_gamelog` supports one optional argument:\n- `playoffs` - returns **only** the playoffs games if set to `True`\n\nSet to `False` by default.\n\n### Considerations\n- The resulting data frame will use the 'Rk' column as its index\n- The data frame does not include those rows which are just the header again\n- If the player missed a game, the row will be filled with blanks (\"\")\n\n## :basketball: Last n days\nGet a data frame with all the season's available players stats over the last n days by calling `get_n_days(days)`.\n\n### Example\n```\ndf = pb.get_n_days(10)\n```\n### Optional arguments\n`get_n_days` supports one optional argument: \n- `player` - returns a pandas series with the stats of the specifed player\n\n`player` is set to `all` by default.\n\n### Considerations\n- The resulting data frame will have the column 'Players' as its index by default\n- The data frame is in descending order by GmSc\n\n## :basketball: Teams\nYou can call a team's seasons table with `get_team(name)`. The argument `name` is the team's three-letter abbreviation (e.g. OKC, MAV).\n\n### Example\nTo get OKC's table:\n```\ndf = pb.get_team(\"OKC\")\n```\n\n## :basketball: Generate player code\nBaskteball-reference uses a special code to build each player's unique html page. As of now, *almost* all functions in `PandasBasketball` expect that code to get the stats for the specified athlete. If you don't want to copy and paste the code from the URL into the function you can try calling `pb.generate_code(player)`. \n\n**Note:** this is not fully tested, so it is possible to get an incorrect code.\n\n### Example\nTo get the player code for LeBronJames:\n```\npb.generate_code(\"LeBron James\")\n```\nThis will output `'jamesle01'` \n\nUsing it with other functions:\n```\ndf = pb.get_player(pb.generate_code(\"Donovan Mitchell\"), \"per_game\")\n```\n\n\n# Future\n- ~~Make this project pip-installable~~\n- Add support for the rest of tables on a player's page\n- Implement function to obtain team stats per season\n- ~~Implement function to get the last n days stats~~\n- Implement function to obtain game results by date\n\n# Contributions & Known Issues\nIf you notice an issue or want to contribute open an issue over at the [issues section](https://github.com/alfremedpal/PandasBasketball/issues)."
 },
 {
  "repo": "chenyukang/Basketball_demo",
  "language": "C++",
  "readme_contents": "this is a basketball game demo, base on OpenGL for grapic render,\nsome simple AI technology.\n\nnow this is the first version, it is just an framework,\nlater I will add some funny things.\n\nProgramming language: C++\n\nlib file related:\nglu, glut, glui.\n\nTODO list:\n\n1 More detailed AI in game, more real than now.\n2 Read some parameters from conf file, this is going to be implemented through Lua.\n3 User control from keyboard, so user can play with computer.\n4 ...\n\n\n#snapshot\n\n![snapshot](https://github.com/chenyukang/Basketball_demo/blob/master/imgs/basketball.png?raw=true)\n"
 },
 {
  "repo": "gkaramanis/FIBA-Basketbal-World-Cup",
  "language": "R",
  "readme_contents": "# 2019 FIBA Basketball World Cup  \nData from the 18th tournament of the FIBA Basketball World Cup for men's national basketball teams  \nSpanish translation by [Julio Spairani](https://github.com/jas1)  \n\n## R  \n`scrape.R:` Code for scraping and cleaning rosters  \n`scrape-results.R:` Code for scraping and cleaning results  \n`scrape-playerstats.R:` Code for scraping and cleaning player stats  \n\n---  \n\n`height.R:` Height distribution  \n`height-dist.R:` Height distribution  \n`age-dist.R:` Age distribution  \n`shooting-stats.R:` First round shooting percentages  \n`teampoints-perc.R:` Players with most team points  \n`teampoints-game.R:` Team points in all the games before the final\n\n## Data  \n`FIBA-WBC19-rosters.csv:` Rosters scraped from [Wikipedia](https://en.m.wikipedia.org/wiki/2019_FIBA_Basketball_World_Cup_squads) (accessed 2019-08-31)  \n`FIBA-WBC19-results.csv:` Results scraped from [Basketball reference](https://www.basketball-reference.com) (accessed 2019-09-18)  \n`FIBA-WBC19-totalteamstats.csv:` Total team statistics saved as csv from [Basketball reference](https://www.basketball-reference.com) (accessed 2019-09-18)  \n`FIBA-WBC19-playerstats.csv:` Player statistics saved as csv from [Basketball reference](https://www.basketball-reference.com) (accessed 2019-09-18)  \n`FIBA-WBC19-venues.csv:` Venues of the 2019 Tournament  \n`FIBA-WBC19-history.csv:` Winners of previous tournaments  \n\n### TODO  \ncreate data dictionary\n\n## Figures  \n<div class=\"row\"> \n  <div class=\"column\">\n    <a href=\"\"><img src=\"figures/teampoints-game.png\"></a>\n    <a href=\"\"><img src=\"figures/shooting-stats.png\"></a>\n    <a href=\"\"><img src=\"figures/height-dist.png\"></a>\n  </div>\n  </div>\n    \n"
 },
 {
  "repo": "cxong/Dunkman",
  "language": "MoonScript",
  "readme_contents": "# Dunkman\n\ud83c\udfc0A minigame of slam dunk for TIC-80\n\n## [Play Online](https://tic80.com/play?cart=1179)\n\n![](https://raw.githubusercontent.com/cxong/Dunkman/master/cover.gif)\n\nCompo game for Ludum Dare 46: https://ldjam.com/events/ludum-dare/46/dunkman\n"
 },
 {
  "repo": "dcampuzano101/Hoopr",
  "language": "JavaScript",
  "readme_contents": "\n<p align=\"center\"><img src=\"https://hoopr.herokuapp.com/assets/hoopr_logo-4226649bf78ff71ec2459fabfd440f8a7dc6bf96c69360ebd06348b4a645b0c3.png\" /></p>\n\n</hr>\n\n#### Hoopr is a place where basketball enthusiasts can find parks and gyms to play the sport they love. Know before you go: Hoopr allows users to write reviews and check if a park or gym meets their needs.\n\n*Only available in the NYC area.*\n</hr>\n\n#### Hoopr: https://hoopr.herokuapp.com/#/\n\n</hr>\n\n## Technologies:\n\n* Ruby on Rails: used to set up Hoopr's backend structure.\n\n* PostgreSQL: used to host our database.\n\n* Javascript: primary language used for our front-end logic.\n\n* jQuery/Ajax: used primarily to make requests to our database.\n\n* React/Redux: used to create functional rendering / displays of our data to users. \n\n* CSS: used to style HTML elements.\n</hr>\n\n\n## User Authentication:\n\n  * Implemented a multi-step login process that allows Hoopr users to create profiles securely without having to worry about their personal and sensitive information being leaked. We do this through the encryption of passwords and never storing any of their passwords directly into our database. \n\n## Reviews:\n  * Modal that allows users that are logged in to create a review and rate a basketball court. The rating system temporarily sets the state as users choose their rating. The rating then persists and is automatically added to the profile of the basketball court.\n</hr>\n\n<p align=\"center\"><img width=\"100%\" src=\"http://davidcampuzano.com/images/hoopr_review.gif\" /></p>\n\n```JSX\nrender(){\n    const basketballs = [];\n\n    for (let i = 1; i <= 5; i++) {\n      let klass = 'ball-icon';\n      if (this.state.temp_rating >= i && this.state.temp_rating != null) {\n          klass += ' is-selected';\n      }\n      const icon = \n        <img \n          className={klass}\n          src={window.ballicon}\n          onClick={this.rate(i)}\n          key={i}\n          onMouseOver={this.ball_over(i)} \n        />;\n      basketballs.push(icon);\n    }\n\n    const { currentBiz } = this.props;\n    if (this.props)\n    return(\n      <div>\n        <div className=\"review-form-container\">\n          <Link to={`/businesses/${currentBiz.id}`}><h1>{currentBiz.name}</h1></Link>\n            <form onSubmit={this.handleSubmit}>\n            <section className=\"form-wrapper\">\n              <div className=\"ball-rating modal\">\n                  {basketballs}\n              </div>\n              <label>\n                \n                <textarea\n                  placeholder=\"I decided to stop by the park. Perfect opportunity to sweat out last night's tacos and cerveza. The gang was all there shooting hoops. One of the best spots to play pick up in nyc. 4/5 Would come back.\"\n                  // maxlength=\"5000\"\n                  value={this.state.body}\n                  onChange={this.update('body')}\n                  className=\"review-body\"\n                  rows=\"10\"\n                  cols=\"65\">\n                </textarea>\n              </label>\n            </section>\n            <input className=\"review-submit\" type=\"submit\" value=\"Post Review\" />\n            </form>\n        </div>\n```\n\n## Search:\n  * Hoopr's search function allows users to search by borough, neighborhood, or park name. It also displays a map that is relevant to the user's query.\n\n<p align=\"center\"><img width=\"100%\" src=\"http://davidcampuzano.com/images/hoopr_search.gif\" /></p>\n"
 },
 {
  "repo": "thisisevanfox/nba-my-team-ios-widget",
  "language": "JavaScript",
  "readme_contents": "\n# \"NBA-MyTeam\" Scriptable iOS widget  \ud83c\udfc0\nI created a widget for iOS and the [Scriptable.app](https://scriptable.app/) to always see on the homescreen of my iPhone when the next games are up for my favorite NBA team.\n\n## Table of Content\n\n1.  [Features](https://github.com/thisisevanfox/nba-my-team-ios-widget#features-) \ud83d\udca1\n2.  [Getting started with the widget](https://github.com/thisisevanfox/nba-my-team-ios-widget#getting-started-with-the-widget-) \ud83d\ude80\n3.  [Register for updates](https://github.com/thisisevanfox/nba-my-team-ios-widget#register-for-updates-) \ud83d\udce5\n4.  [Frequently Asked Questions (FAQs)](https://github.com/thisisevanfox/nba-my-team-ios-widget#frequently-asked-questions-faqs-) \u2753\n5. [Support the project \ud83d\udcaa / Buy me a coffee \u2615](https://github.com/thisisevanfox/nba-my-team-ios-widget#support-the-project---buy-me-a-coffee-)\n6. [Bugs](https://github.com/thisisevanfox/nba-my-team-ios-widget#bugs-) \ud83d\udc1e\n7. [References](https://github.com/thisisevanfox/nba-my-team-ios-widget#references-) \ud83c\udfc6\n8. [Disclaimer](https://github.com/thisisevanfox/nba-my-team-ios-widget#disclaimer)\n\n## Features \ud83d\udca1      \n<p align=\"center\">\n<a href=\"https://i.ibb.co/jWR9nNw/Screenshotv1.png\"><img src=\"https://i.ibb.co/XJzLx5x/Screenshotv1small.png\" alt=\"Widget supports light- and dark-mode\" border=\"0\" /></a>\n</p>  \n\nCurrently small (2x2) and medium (4x2) sized widgets are supported. Some features are not available in the small widget. I have written in the brackets after the features in which variant it is available.\n                                                     \n* Shows date and time of next game (local timezone) (Small + Medium)\n* Shows city where the next game takes place (Small + Medium)\n* Show live score of next game. \"Live\" depends on how often the widget on the homescreen updates itself. It is not possible to say exactly, when it updates. (Medium)\n* Shows stats of both teams (wins, losses) (Small + Medium) \n* Shows standings of both teams (Small + Medium)\n* Shows top scorer of your team and the opponent (Small + Medium)\n* Shows next 4 games with date (Medium)\n* Caches logos to save data volume (Small + Medium)  \n* Supports light- and dark-mode (Small + Medium) \n* Supports [no-background.js](https://github.com/supermamon/scriptable-no-background) (Medium)\n\nNote: I don't know how the api displays the games when it comes to playoffs. I'll have to check again when the season is at this point.\n\nYou want to have more information on the releases? Check the [changelog](https://github.com/thisisevanfox/nba-my-team-ios-widget/blob/main/Changelog.md).\n\n## Getting started with the widget \ud83d\ude80\nThere are 2 options to install this widget. For both options, make sure to download Scriptable from the AppStore before starting with the installation of the widget. Click [here](https://apps.apple.com/us/app/scriptable/id1405459188?uo=4) to get to AppStore.\n\n### 1. Install with ScriptDude\n[![Download with ScriptDude](https://scriptdu.de/download.svg)](https://scriptdu.de/?name=NBA%20MyTeam&source=https://raw.githubusercontent.com/thisisevanfox/nba-my-team-ios-widget/main/NBA-MyTeam-Widget.js&docs=https://github.com/thisisevanfox/nba-my-team-ios-widget#generator)\n\n### 2. Manual Installation\n1. Click the \"+\"-Icon in the Scriptable-app.\n2. Copy all the text from the NBA-MyTeam-Widget.js-file. Click [here](https://raw.githubusercontent.com/thisisevanfox/nba-my-team-ios-widget/main/NBA-MyTeam-Widget.js) to get to the file.\n3. Step through the user settings in the script.\n4. Add a Scriptable-widget to your homescreen.\n   * Add it with size \"medium\".\n   * Make sure to choose \"Run script\" for \"When Interacting\".\n\nHaving troubles with installing? Check the detailed installation guide [here](https://github.com/thisisevanfox/nba-my-team-ios-widget/blob/main/Installation%20guide.md). \n   \n## Register for updates \ud83d\udce5\nDon't want to miss a update for this widget? Just head over to [this](https://forms.gle/6tcB5juGenEaZHqL7) GoogleForm, type your email address and I'll send you an email when a new update is released.\n   \n## Frequently Asked Questions (FAQs) \u2753\nAll Frequently Asked Question are collected [here](https://github.com/thisisevanfox/nba-my-team-ios-widget/blob/main/FAQ.md).\n\n## Support the project \ud83d\udcaa / Buy me a coffee \u2615\nAs some users asked how to donate to the project I created this section:\n\nOf course I won't take anything for the widget, but if you really want to donate, feel free to buy me a coffee via paypal.\n\n<p align=\"center\">\n<a href=\"http://paypal.me/thisisevanfox\" target=\"_blank\"><img src=\"https://camo.githubusercontent.com/74865d9b3ad7b0a216f64653cee3d2027790220fb7b0302cf693e5a9e7c20c7a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f70617970616c2d646f6e6174652d79656c6c6f772e737667\" alt=\"Donate via Paypal\" border=\"0\" /></a>\n</p>  \n\n## Bugs \ud83d\udc1e\nFound a bug? Feel free to create a issue.\n\n## References \ud83c\udfc6\nI used the publicly accessible NBA api which is documented by [kashav](https://github.com/kashav/nba.js/blob/master/docs/api/DATA.md). The logos are taken from [thesportsdb.com](https://thesportsdb.com). \n\n## Disclaimer\nThis is a project developed by myself. It is not an official widget of the NBA. I have no relationship with the NBA.\n"
 },
 {
  "repo": "Innocence713/BasketballBoard",
  "language": "Java",
  "readme_contents": "# BasketballBoard\n##\u7bee\u7403\u6218\u672f\u753b\u677f\n\n        \u4f53\u80b2\u5b66\u9662\u7684\u4e00\u4e2a\u8001\u5e08\u505a\u4e00\u4e2a\u521b\u65b0\u6559\u5b66\u7684\u8bfe\u9898\uff0c\u627e\u6211\u4eec\u5b9e\u9a8c\u5ba4\u7684\u8001\u5e08\u505a\u4e00\u4e2a\u7bee\u7403\u6218\u672f\u753b\u677f\uff0c\u7531\u4e8e\u6211\u4eec\u5b9e\u9a8c\u5ba4\u4e3b\u8981\u662f\u505a\u786c\u4ef6\u5d4c\u5165\u5f0f\u7684\uff0c\u6240\u4ee5\n        \n    \u8001\u5e08\u5c31\u8ba9\u6211\u548c\u53e6\u4e00\u4e2a\u540c\u5b66\u7528DE1-SOC-MTL2\u5f00\u53d1\u5e73\u53f0\u7684FPGA\u505a\u3002\u6211\u4eec\u7528\u57fa\u4e8eFPGA\u7684Nios II\u8f6f\u6838\u642d\u4e00\u4e2aCPU\uff0c\u7136\u540e\u7528C\u8bed\u8a00\u5199\u88f8\u673a\u7a0b\u5e8f\u3002\n    \n    \u7531\u6ca1\u6709\u64cd\u4f5c\u7cfb\u7edf\u3001Nios II \u8f6f\u6838\u5b9e\u73b0\u7684CPU\u7684\u6027\u80fd\u4e5f\u975e\u5e38\u5dee\uff0c\u800c\u4e14\u7528C\u8bed\u8a00\u5199\u8d77\u6765\u4e5f\u975e\u5e38\u590d\u6742\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u5b9e\u73b0\u4e86\u975e\u5e38\u7b80\u5355\u7684\u529f\u80fd\u3002\u8fc7\u5e74\n    \n    \u6765\u4e86\u540e\u53e6\u4e00\u4e2a\u540c\u5b66\u590d\u4e60\u8003\u7814\u4e86\uff0c\u6240\u4ee5\u6211\u5c31\u6253\u7b97\u7528Android\u5199\u4e00\u4e2aApp, \u5728\u8fd9\u4e4b\u524d\u6211\u5199\u8fc7\u4e00\u4e9b\u975e\u5e38\u7b80\u5355\u7684\u5c0f\u7a0b\u5e8f\uff0c\u5982wifi\u5c0f\u8f66App\u548c\u89c6\u9891\n    \n    \u76d1\u63a7App\u7b49\uff0c\u800c\u4e14\u81ea\u5df1\u4e5f\u5bf9Android\u5f00\u53d1\u6bd4\u8f83\u611f\u5174\u8da3\uff0c\u5e73\u65f6\u6709\u7a7a\u65f6\u4e5f\u770b\u4e86\u4e00\u4e9bAndroid\u77e5\u8bc6\uff0c\u4e5f\u60f3\u4eca\u540e\u5f80\u8fd9\u65b9\u9762\u53d1\u5c55\uff0c\u81ea\u5df1\u4e5f\u6bd4\u8f83\u6709\u70ed\u60c5\uff0c\n    \n    \u6574\u4e2a\u8fc7\u7a0b\u4e5f\u8fd8\u7b97\u6bd4\u8f83\u987a\u5229\u3002\n    \n        \u91cc\u9762\u7684\u8d44\u6e90\u56fe\u7247\u662f\u627e\u7684\u522b\u4eba\u7684App\u91cc\u7684\u89e3\u538b\u51fa\u6765\u7684\uff0c\u6574\u4e2a\u6846\u67b6\u53ea\u662f\u7528\u7684AndroidStudio\u81ea\u5e26\u7684Navigation Drawer Activity, \u7136\u540e\u53bb\n    \n    \u6389\u4e86Toolbar\u7b49\uff0c\u81ea\u5df1\u91cd\u65b0\u6dfb\u52a0\u4e86TitleBar\uff0c\u4fa7\u8fb9\u680f\u4e5f\u505a\u4e86\u4e00\u4e9b\u4fee\u6539\u3002\n  \n  \n   \n###\u529f\u80fd\uff1a\n- 1. \u5206\u6bb5\u753b\u6218\u672f\u8f68\u8ff9\uff0c\u6700\u540e\u5408\u6210\u64ad\u653e\n- 2. \u591a\u6b21\u91cd\u590d\u64ad\u653e\n- 3. \u6539\u53d8\u8f68\u8ff9\u989c\u8272\u548c\u5bbd\u5ea6\n- 4. \u6218\u672f\u4fdd\u5b58\n- 5. \u6218\u672f\u5e93\u8bfb\u53d6\u64ad\u653e\uff0c\u5220\u9664\u6218\u672f\n\n\n\n--------\n###\u6f14\u793agif\n![](https://github.com/Innocence713/BasketballBoard/blob/master/GifDemo/1.gif)&ensp;&ensp;&ensp;&ensp; &ensp;&ensp;&ensp;&ensp;     \t&ensp;&ensp;&ensp;&ensp; &ensp;&ensp;&ensp;&ensp; \t![](https://github.com/Innocence713/BasketballBoard/blob/master/GifDemo/2.gif)&ensp;&ensp;&ensp;&ensp; \n\n![](https://github.com/Innocence713/BasketballBoard/blob/master/GifDemo/3.gif)&ensp;&ensp;&ensp;&ensp; &ensp;&ensp;&ensp;&ensp; &ensp;&ensp;&ensp;&ensp; &ensp;&ensp;&ensp;&ensp;      ![](https://github.com/Innocence713/BasketballBoard/blob/master/GifDemo/4.gif)    \n \n"
 },
 {
  "repo": "thunderdome-data/ncaa-bracket",
  "language": "JavaScript",
  "readme_contents": "ncaa-bracket\n============\n\nWhat is this?\n-------------\n\nInteractive and printable bracket for the annual NCAA March Madness basketball tournament. You can use this to publish the first round matchups, and it lets people pick their winners then print out their brackets. You can also use this to publish the current state of the tournament all the way down to the championship, ala [this 2015 NCAA Tournament men's results bracket](http://www.denverpost.com/colleges/ci_27715608/ncaa-mens-tournament-bracket-2015)\n\nThis is not responsive, but please feel free to fork this and make it so. We accept pull requests! Demo: http://www.bracketadvisor.com/interactive-bracket/\n\n![interbrack](screenshots/interbrack.png)\n\nContributors\n---------\n* [Nelson Hsu](https://github.com/hsunelson)\n* [Joe Murphy](https://github.com/freejoe76)\n\nAssumptions\n-----------\n\n* Google docs\n* jQuery\n* Miso\n\nWhat's in here?\n---------------\n\nThe project contains the following folders and important files:\n\n* ``index.html`` -- Blank bracket\n* ``/js`` -- Javascript\n* ``/css`` -- Strangely enough, stylesheets\n\nHow to use this\n---------------\n\n1. Make a copy of this Google doc: https://docs.google.com/spreadsheets/d/1K4luNfy1yXkD4I-6CKEzvwPKCRAqCu9R6qo0ZMGQBn8/edit?usp=sharing\n2. The teams for each region are in separate tabs including the play-in games.  All the labels are in the first tab. Once you have entered all the teams and information, \"Publish to the web...\"\n3. In the Publish window, you'll find a URL that will contain a key. Copy that and paste into line 16 of js/bracket.js\n4. You'll probably want to update the year- and tournament-specific information at the top of index.html\n\nLicense\n----------\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Digital First Media\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
 },
 {
  "repo": "elishayer/mRchmadness",
  "language": "R",
  "readme_contents": "# mRchmadness\nmRchmadness is *not* designed to predict the winners of tournament games, but\nit *is* designed to answer the question: *Given the true probabilities\ndictating tournament results and given the probabilities with which my pool\nopponents make their picks, what bracket maximizes my chances of winning my\npool?* To answer this question, we simulate tournament results and opponent\npicks over and over again, testing a set of candidate brackets against pool\nopponents in each simulation and choosing the bracket that performs best.\n\n## Installation\n\n``` r\n# For the latest version of the package, updated frequently during the first\n# couple weeks of March, install directly from this GitHub repository.\ndevtools::install_github('elishayer/mRchmadness')\n\n# If you're not using this R package to fill out a bracket on a deadline, you\n# might prefer to install the latest stable version from CRAN.\ninstall.packages('mRchmadness')\n```\n\n## Introduction\n\n``` r\n# For a tutorial on the primary use case of the package, check out the vignette\nvignette('mRchmadness')\n```\n\n## Shiny\n\nFor those who prefer a point-and-click interface, check out our\n[Shiny app](https://saberpowers.shinyapps.io/mRchmadness/).\n\nYou can also use the Shiny app locally by running\n`shiny::runApp('inst/shinyApp')` from the mRchmadness directory.\n"
 },
 {
  "repo": "Asterisk4Magisk/Sing4Magisk",
  "language": "Shell",
  "readme_contents": "# Sing4Magisk\n\n## Disclaimer\n\n- I'm not responsible for bricked devices, dead SD cards, or burning your Soc.\n- If you really don't know how to configure this module, you might need apps like v2rayNG, SagerNet etc.\n\n# Module config\ntemplate: `sing/etc/sing.config`\nModule config use shell variable\n\n# Usage\n\n- Turn on/off on Magisk manager\n- Turn on/off by executing `/data/adb/sing/scripts/sing.service`\n\n## Manual mode\nIf you want to control sing-box by running command totally, just add a file `/data/adb/sing/manual`.  In this situation, sing-box service won't start on boot automatically and you cann't manage service start/stop via Magisk Manager App.\n\n**For further infomation, please visit [sing-box wiki](https://sing-box.sagernet.org/)**"
 },
 {
  "repo": "elizabethsiegle/nba-stats-twilio-sms-bot",
  "language": "Python",
  "readme_contents": "Compare NBA stats with Openpyxl and Twilio!\n<img src = \"https://user-images.githubusercontent.com/8932430/27196835-0f338ff0-51da-11e7-8faf-93c606b65895.png\">\n\n<a href = \"https://github.com/elizabethsiegle/twilio-sms-bot-compare-nba-stats/blob/master/app.py\">app.py</a>: Text a Twilio number \"play,\" then text \"a\" or \"b\" for regular season 2016-1017 versus playoffs, and then text either one or two players separated by a space and a statistic (based on the text you got.)\n\n<a href = \"https://github.com/elizabethsiegle/twilio-sms-bot-compare-nba-stats/blob/master/simplifiedapp.py\">simplifiedapp.py</a>: Text a Twilio number two NBA players (first and last names) separated by a space and a statistic to compare.\n\nWe all know Excel sheets hold useful information, but it can be hard to read the data we want, and especially hard to compare two specific datasets within all that data. Bots, on the other hand, can do that hard work of finding the information for us. \n\nWe will read some NBA statistics from Excel sheets in Python using the Openpyxl library. How will we know which statistics to look for and return? Incoming SMS is two players and a type of NBA statistic, and then the outgoing SMS looks up the statistics of the corresponding players.\n\n<h3>Data</h3>\nThe data we use is about specific NBA players from <a href = \"stats.nba.com/players\"target=\"_blank\">this past season</a>.\nThere, you can specify which season, season type (playoffs versus regular season), data type (game average versus total for the season), which dates, and more. Fun, right? \n\nNo Microsoft Excel? No problem! You can copy and paste the data directly into Google Sheets and export it as a .xlsx file. Here is an excerpt from the the Excel sheet (lots more data not shown to the right and below.) \n\n<img src = \"https://user-images.githubusercontent.com/8932430/27196938-6cbfa208-51da-11e7-9469-98d30a62ac92.png\">\nSome statistics above include age, games played, wins, losses, minutes, points, field goal percentage, three-point shot percentage, and more.\n\n<h3>Setup your Developer Environment</h3>\nMake sure your Python and Flask development environment is set up, like <a href = \"https://www.twilio.com/docs/guides/how-to-set-up-your-python-and-flask-development-environment#create-a-simple-flask-application\">this</a>. If you don\u2019t have a Twilio number to send and receive SMS messages, let\u2019s do that <a href = \"https://www.twilio.com/console\">here</a>.\n\n\nOnce your environment is up and running, run the following command in the directory your python file will live in. \n<img src = \"https://user-images.githubusercontent.com/8932430/27196974-8e4d2148-51da-11e7-89a5-7cea43505961.png\"/>\n\n\n<h3>Building the Flask app</h3>\nMake a file called app.py, and import these libraries at the top.\n<img src = \"https://user-images.githubusercontent.com/8932430/27197002-ae6e5dde-51da-11e7-8ba4-7961b2475760.png\"/>\n\nAnd then make our Flask object:\nhttps://user-images.githubusercontent.com/8932430/27197789-9ad16264-51dd-11e7-8fec-2bf0295342a1.png\n\nDon't forget to run <a href = \"ngrok.com\" target=\"_blank\">Ngrok</a> http 5000 in terminal! In your terminal in the same directory, run ngrok http 5000.\n<img src =\"https://user-images.githubusercontent.com/8932430/27196971-8a1114b8-51da-11e7-821a-b61939f8b597.png\"/>\n\nNow onto some fun stuff.\n\n<h3>Parse the Data with Openpyxl</h3>\n<a href = \"https://openpyxl.readthedocs.io/en/default/\">Openpyxl</a> is an open source Python library that reads and writes Microsoft Excel 2010 files.\n \nThe higher-order function below takes in our entire Excel file of NBA data returns a dictionary of the data in our Excel file. Players are the keys, and the specific statistic data per each player as the values. \n\n<img src =\"https://user-images.githubusercontent.com/8932430/27197009-b18fce58-51da-11e7-8070-be60cabb2644.png\">\n\nThe data structures we use are two separate lists of players and their corresponding statistics we want to search (ie. just games played, wins, losses, minutes, points, field goal percentage, etc.) We then map those statistics to different columns of the Excel sheet, represented by letters, in stat_dict.\n \nThen, we need to load the Excel file full of data with load_workbook and create a worksheet. More complex apps or data may have different sheets (with NBA data, one could be Regular Season while another could be for the Playoffs.) Since we only have one worksheet, we just want the one at index zero. Then, beginning with the for loop, we loop through each item in our Excel spreadsheet. \n \nFinally, we loop through our Excel spreadsheet. The \u201cA\u201d column is for players, so each player in the column (and thus the sheet) are added to our list. Then, we loop through the column which is the value of our dictionary of statistics and columns and add each to the separate statistics list.\n \nSay you want to read from columns. Each column is represented by a letter (that\u2019s why we made the dictionary above, but the dictionary values match the columns in the Excel sheets.) To search multiple columns and just the front row, you could search something like this:  \n<img src = \"https://user-images.githubusercontent.com/8932430/27197012-b43cf73e-51da-11e7-838c-77eb6d819cd1.png\">\n\nWith our data, this returns the name of the player in the first row (Russell Westbrook) and the statistics from columns D, E, and F (wins, losses, and minutes played.)\n \nIf you want to access an individual cell, the following code are two different ways to return whatever is in the B column in the second row. (Without using value, you would just get \u201c<Cell u'Sheet1'.B2>\u201d.)\n<img src =\"https://user-images.githubusercontent.com/8932430/27197029-c494b70c-51da-11e7-8c9a-15696598675c.png\">\n\n(another way of writing this same line of code is: <em>b2v2 = ws.cell(row=2, column=2)</em>)\n\nWhat does our code do after searching through the cells and rows creating our two distinct lists? These two lists are then zipped together into one dictionary with players as keys and the corresponding statistic numbers as values. This dictionary will be returned in our SendSms() function so we can check if the inputSMS message is in the dictionary (and thus in the Excel sheet.)\n\nNow, onto the core of the code! \n\n<img src = \"https://user-images.githubusercontent.com/8932430/27197031-c7165166-51da-11e7-8bcd-30478e7fdaaa.png\">\n\nLet\u2019s break this down. First, we get our input SMS and convert it to lowercase so it\u2019s easier to check. Then, we break it up by whitespace and add each piece to a string array. If that array has a length of five (which is what we expect, because input should be two players (first and last names) and a statistic), then we assign variables to the two players and the statistic.\n \nNext, we call our higher-order function parseDataIntoDict, and use the dictionary it returns to check that the variables are in it. If they are, we check if the data of one player is greater than the other. Depending on that, a different message is returned. If one or both of the players are not in the dictionary, we return an error message. \n \nLastly, we run our Flask app!\n\n<img src =\"https://user-images.githubusercontent.com/8932430/27197035-cb3202d6-51da-11e7-8fd2-73d8467cf2c6.png\">\n\nWow! You just used Openpyxl to read an Excel spreadsheet. Isn\u2019t it a very handy tool? Who knew reading and writing an Excel spreadsheet could be done this way?\n \nSo what\u2019s next? Think of the possibilities! You can use Openpyxl for financial data, for baseball data, etc. \n\nQuestions? Comments? Tweet at me <a href = \"twitter.com/lizziepika\" target=\"_blank\">@lizziepika</a>.\n\n"
 },
 {
  "repo": "Tanapruk/fb_emoji_basketball",
  "language": "Python",
  "readme_contents": "# Facebook emoji Basketball Script\n\nPython shell script to automate playing Facebook basketball. It is a script that use uiautomator python\n[![Facebook Basketball Shooter](https://github.com/Tanapruk/fb_emoji_basketball/blob/master/fb_demo.gif)](http://www.youtube.com/watch?v=DkmA7ZoSWr4)\n\n####Requirement\n* Android phone with root access\n* PC (Mac or Linux are preferable)\n* ADB\n* Python\n* [uiautomator](https://github.com/xiaocong/uiautomator)\n\n####Instruction\n* Plug your Android device to your PC and connect to ADB\n* Launch the basketball game\n* Run the script (Required python, uiautomate and adb)\n* Enjoy\n\n#### Level Support\n* score 1-10 (100%)\n* score 11-20 (100%)\n* score 21-30 (98%)\n* score 31-40 (90%)\n* score 41-50 (70%)\n* in progress..\n\n#### Explanation\n* score 1-10 The rim is stationary. We can simply use drag function from the ball to the rim.\n* score 11-20 The rim is moving and has a constant speed. Releasing the ball and set shooting location as an offset of the releasing position by constant pixels.\n* score 21-30 The moving rim speed is quicker than the score 11-20 and has an unstable speed. We cannot use the method in the previous level. By trial and error, I found that we should fix the shooting position to the middle of the screen. The decision making will be made in the releasing position. However, the optimal releasing position is so small, so the ball get shot not very often. I counter this problem by adding a delay when the rim moves to area before the optimal releasing position.\n* score 31-40 The rim is moving around across two axis in a transparent container. By statistic, it move to the middle of the screen very often, so I fixed the shooting position to the frequent passing position. The logic is similar to the score 21-30.\n* score 41-50 Similar to the score 31-40, but with bigger boundary. The logic is being developed. Initial guess is like the previous 3 sections.\n\n### Support Devices\n* I only test in my Nexus 4, but it should be fine on other devices.\n"
 },
 {
  "repo": "jbowens/nbagame",
  "language": "Go",
  "readme_contents": "# nbagame\nA Go client to retrieve NBA statistics from stats.nba.com. The client also supports syncing data to a mysql database.\n\n[![GoDoc](https://godoc.org/github.com/jbowens/nbagame?status.svg)](https://godoc.org/github.com/jbowens/nbagame)\n\n![Russ](https://github.com/jbowens/nbagame/blob/master/russ.jpg)\n\n## nbaapi.com\n\nIf you're just looking for an API for the NBA, check out the [nbaapi.com repo](https://github.com/jbowens/nbaapi.com) that uses nbagame to sync its database.\n\n## Overview\n\nThe endpoints exposed by nba.com are not intended for public consumption, and no public documentation exists. This package attempts to wrap these endpoints in a clean, well-documented interface.\n\n```go\nteams, err := nbagame.Client.Teams()\nif err != nil {\n  panic(err)\n}\n\nfor _, team := range teams {\n  fmt.Printf(\"%s, %s - %v\\n\", team.Name, team.City, team.Wins)\n}\n```\n\n## Database Syncing\n\nNBAGame is most useful as a means to populate a MySQL database with up-to-date NBA statistics. The [nbagame/db/sync](https://godoc.org/github.com/jbowens/nbagame/db/sync) package provides a programmatic interface for syncing data. If you don't need the programmatic interface or will be using a language other than go, you can use the command-line tool in the [nbagame/cmd](https://github.com/jbowens/nbagame/tree/master/cmd) package. First, follow the directions in the [nbagame/db README](https://github.com/jbowens/nbagame/tree/master/db) to setup your MySQL database and your goose dbconf.yml configuration file. If you have permissions to create new MySQL databases and access them without credentials, you can create the database by running\n\n```\nmysql -e \"CREATE DATABASE nbagame\"\ngo get bitbucket.org/liamstask/goose/cmd/goose\ngoose up\n```\n\nOnce your database is constructed, `go install ./cmd/...` to install the command-line utilities.\n\nTo sync data to the entire database, run the following command:\n\n```bash\nnbagamesync -season=\"2015-16\"\n```\n\nBy default, the command-line tool only loads data from the current season (except for players, which will load all historical players too). If you want to load data from a particular season, add the season flag.\n\n```bash\nnbagamesync -season=\"2015-16\"\n```\n\nIf you don't want to sync everything, specify which entities you want to sync as arguments, ex:\n\n```\nnbagamesync teams games\n```\n\nOnce you've loaded the data, open a MySQL client and try querying. Here's a sample query that calculates average blocks per game by team.\n\n```sql\nSELECT teams.id, teams.name, AVG(stats.blocks) AS avg_blocks_per_game\nFROM teams\nLEFT JOIN team_game_stats ON teams.id = team_game_stats.team_id\nLEFT JOIN stats ON team_game_stats.stats_id = stats.id\nGROUP BY teams.id ORDER BY avg_blocks_per_game DESC;\n```\n"
 },
 {
  "repo": "EvanZ/bayesian-win-probability",
  "language": "Jupyter Notebook",
  "readme_contents": ""
 },
 {
  "repo": "dlm1223/march-madness",
  "language": "R",
  "readme_contents": "---\noutput: md_document\n---\n\n## March Madness Optimization\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\nThis is the full code used for the [Shiny march madness app](https://bracketmath.shinyapps.io/ncaa/). You can run the code yourself to customize more things such as increasing the number of simulations, increasing the bracket pool size, changing the projection model, and more. To run, the order of files is: 1-simulate-tournament, 2-simulate-brackets, 3-calculate payouts, 4-optimize-brackets in that order. The data for the shiny app is in the Shiny folder but it is just less customizable. Below I explain the methodology. <br /> <br />\n\n### 1. Projection and Simulation\nThe algorithm starts by projecting all the tournament matchups and then simulating the tournament:\n\n```{r , echo=F, eval=T , include=F}\nload(\"Shiny/2018/team-data.RData\")\nload(\"Shiny/2018/BracketResults_FullTournament_1000sims.Rda\")\nload(\"Shiny/2018/TourneySims_1000sims.Rda\")\n\ninput<-list(r1=10, r2=20, r3=40, r4=80, r5=160, r6=320, upset1_mult=1, upset2_mult=1, upset3_mult=1,\n            r1_seed_mult=0, r2_seed_mult=0, r3_seed_mult=0, r4_seed_mult=0, r5_seed_mult=0, r6_seed_mult=0,\n            r1_seed_bonus=0, r2_seed_bonus=0, r3_seed_bonus=0, r4_seed_bonus=0, r5_seed_bonus=0, r6_seed_bonus=0,\n            year=2018)\n\nsource(\"functions.R\", encoding = \"UTF-8\")\nsource(\"Shiny/optimize-brackets.R\")\nsource(\"Shiny/calculate-bracket-payouts.R\")\n\n# brackets<-calcBrackets(brackets[, 1:63], brackets, tourneySims) #calculate bracketpayouts/percentiles\n\n##calculate data\nsims<-max(tourneySims$Sim)-backtest\ninspect<-as.data.frame.matrix(table(tourneySims$Team_Full[tourneySims$Sim<=sims], tourneySims$Round[tourneySims$Sim<=sims])/sims) \nprobs<-inspect[order(inspect$R6,inspect$R5,inspect$R4,inspect$R3, inspect$R2,  decreasing = T), ]\n\n\nnumBrackets<-nrow(brackets)\n\nr1<-as.data.frame(table(as.vector(unlist(brackets[, grepl(\"R1\", colnames(brackets))])))/numBrackets);colnames(r1)<-c(\"Team_Full\", \"R1\")\nr2<-as.data.frame(table(as.vector(unlist(brackets[, grepl(\"R2\", colnames(brackets))])))/numBrackets);colnames(r2)<-c(\"Team_Full\", \"R2\")\nr3<-as.data.frame(table(as.vector(unlist(brackets[, grepl(\"R3\", colnames(brackets))])))/numBrackets);colnames(r3)<-c(\"Team_Full\", \"R3\")\nr4<-as.data.frame(table(as.vector(unlist(brackets[, grepl(\"R4\", colnames(brackets))])))/numBrackets);colnames(r4)<-c(\"Team_Full\", \"R4\")\nr5<-as.data.frame(table(as.vector(unlist(brackets[, grepl(\"R5\", colnames(brackets))])))/numBrackets);colnames(r5)<-c(\"Team_Full\", \"R5\")\nr6<-as.data.frame(table(as.vector(unlist(brackets[, grepl(\"R6\", colnames(brackets))])))/numBrackets);colnames(r6)<-c(\"Team_Full\", \"R6\")\nownership<-Reduce(function(x, y) merge(x, y, all=TRUE), list(r1, r2, r3, r4, r5, r6))\nownership[is.na(ownership)]<-0\n\nanalyze<-TourneySeeds[TourneySeeds$Season==year, ]\nanalyze$Team_Full<-Teams$Team_Full[match(analyze$Team, Teams$TeamID)]\nnames<-unique(analyze[, c(\"Team_Full\", \"Seed\")])\nnames$Seed<-as.numeric(substring(names$Seed, 2, 3))\npasteSeed<-function(teams){\n  paste(names$Seed[match( teams, names$Team_Full)], teams, sep=\" \")\n}\n\nownership$Team_Full<-pasteSeed(ownership$Team_Full)\nownership<-ownership[order(ownership$R6, ownership$R5, ownership$R4, ownership$R3, ownership$R2, ownership$R1, decreasing = T), ]\n\nrow.names(probs)<-pasteSeed(row.names(probs))\n\n```\n\n```{r , echo=T, eval=T , include=T}\nhead(probs, 20)\n\n```\n\nAbove are the probabilities of teams reaching each round for 2018, 1000 simulations <br /> <br />\n\n\n### 2. Bracket-Pool Simulation\nThen, using [ESPN Pick Percentages](http://games.espn.com/tournament-challenge-bracket/2018/en/whopickedwhom), you can simulate a pool of brackets.\n\n\n\n```{r , echo=T, eval=T , include=T}\nhead(ownership, 20)\n\n```\n\nAbove are the ownership percentages by round for the pool of brackets, 1000 brackets. You can start to see that certain teams are overvalued in the pool of brackets compared to their projections, while others seem to be undervalued in the pool relative to their projection.\n\n\n### 3. Optimization\nFinally, you can apply your scoring to get finishes for each bracket in the pool compared to eachother across the simulations. You can set up an optimization to return the optimal bracket(s) for any number of specifications, Ex: Return 1 Bracket to maximize P(90th percentile). 3 brackets to maximize P(97th), 1 bracket to maximize points, etc. I can also test out other brackets against the pool of 1000 brackets in order to get alternative brackets which may do well but weren't included in the pool.\n\n```{r , echo=F, eval=T , include=F}\n#load improved pool--\nload(\"Shiny/2018/Improved-Brackets.Rda\")\nbrackets<-customBracket2\n\n```\n\nBelow is the bracket which maximized P(90th percentile) for 2018:\n\n\n```{r , echo=T, eval=T , include=T,fig.width=11, fig.height=9 }\nbrackets$Prob90<-apply(brackets[, grepl(\"Percentile\", colnames(brackets)) & !grepl(\"Actual\", colnames(brackets))], 1, function(x) sum(x>=.90)/sims)\nmax(brackets$Prob90) #projected P(90th percentile)\nplotBracket(brackets[which.max(brackets$Prob90), 1:63], text.size = .8)\n\n```\n\n\n```{r , echo=T, eval=T , include=T}\nbrackets[which.max(brackets$Prob90), c(\"Percentile.Actual\", \"Score.Actual\")]\n\n```\n\nUsing this system allows you optimize the brackets you enter for march madness. In addition, it allows you to change the scoring system, pool sizes, number of brackets entered, and projection system. By testing out the projected finish based on different strategies like point maximization, or point maximization in R1-2 only, or other ideas, you can get an idea of how you should balance expected point maximization with being contrarian.\n\n\n\n\n"
 },
 {
  "repo": "jordanvolz/BasketballStats",
  "language": "Scala",
  "readme_contents": "# BasketballStats\nBasketball Statistics Demo\n\nRaw stats are in /data. \n"
 },
 {
  "repo": "matchvs/BasketBall",
  "language": "JavaScript",
  "readme_contents": "# BasketBall\nCC\u6e38\u620f\u6848\u4f8b\u4e4b \u70b8\u5f39\u5bf9\u653b\n\n## \u4f53\u9a8c\u8bf4\u660e\n\n\u8054\u7f51\u6e38\u620f\u901a\u5e38\u4e3a\u591a\u4eba\u6e38\u620f,\u9700\u8981`\u5f00\u542f\u591a\u4e2a\u5ba2\u6237\u7aef`,\u8be6\u60c5\u89c1[\u591a\u5f00\u8bf4\u660e](http://www.matchvs.com/service?page=MultipleIdentities)\n\n## \u5728\u7ebf\u4f53\u9a8c\n\u4f53\u9a8c\u5730\u5740 [\u4f53\u9a8c\u94fe\u63a5](http://demo.matchvs.com/BasketBall)\n\n## \u6e90\u7801\u4f53\u9a8c\n### \u51c6\u5907\n\n1. \u4e0b\u8f7d\u5b89\u88c5cocos creator(v1.8.1\u4ee5\u4e0a,v2.0\u4ee5\u4e0b)(http://www.cocos.com/download)\n2. \u53ef\u4ee5\u4e0d\u66f4\u65b0\u672c\u9879\u76ee\u4f7f\u7528\u7684matchvs\u63d2\u4ef6,\u5982\u679c\u60f3\u9700\u8981\u4f7f\u7528\u6700\u65b0\u7684\u63d2\u4ef6,\u53ef\u4ee5\u5728cocos creator\u4e2d\u4e0b\u8f7d\u63d2\u4ef6,\n\n\n### \u4e0b\u8f7d\u4ee3\u7801\n\n1. git clone https://github.com/matchvs/BasketBall.git\n2. \u7528cocos creator\u6253\u5f00\u8be5\u9879\u76ee\u6587\u4ef6\n\n### \u8fd0\u884c\u6e38\u620f\n\n####  \u8fd0\u884c\u5728web\n\n1. IDE\u6253\u5f00\u9879\u76ee\n2. \u70b9\u51fb\u8fd0\u884c\u6309\u94ae,\u5373\u53ef\u8fd0\u884c\u6e38\u620f\n3. \u5f00\u59cb\u4f53\u9a8c\u6e38\u620f\n\n####  \u8fd0\u884c\u5728\u5fae\u4fe1\u5c0f\u6e38\u620f\n\n1. \u5728cocos creator\u6253\u5305\u8f93\u51fa\u5fae\u4fe1\u5c0f\u6e38\u620f\u9879\u76ee,\u70b9\u51fbcocos creator\u4e0a\u7684\u5bfc\u822a\u680f\u4e2d\u7684\u9879\u76ee\n2. \u5728\u6784\u5efa\u53d1\u5e03\u754c\u9762\u4e2d,\u53d1\u5e03\u5e73\u53f0\u4e3a\"Wechat Game\",\u586b\u5165appid(\u5982\u679c\u662f\u4f60\u81ea\u5df1\u7684\u9879\u76ee,\u4f60\u9700\u8981\u5728\u5fae\u4fe1\u5f00\u53d1\u8005\u5e73\u53f0\u4e2d\u7533\u8bf7).\n3. \u70b9\u51fb\u6784\u5efa,\u4e4b\u540e\u53d1\u5e03.\n4. \u7528\u5fae\u4fe1\u5f00\u53d1\u8005\u5de5\u5177\u6253\u5f00.\n5. \u5f00\u59cb\u4f53\u9a8c\u6e38\u620f \n"
 },
 {
  "repo": "WolverineSportsAnalytics/basketball",
  "language": "Python",
  "readme_contents": ""
 },
 {
  "repo": "dataprofessor/basketball-heroku",
  "language": "Python",
  "readme_contents": "# Basketball web app\n\nTry out the Basketball web app by clicking on the button below:\n\n[![Streamlit App](https://static.streamlit.io/badges/streamlit_badge_black_white.svg)](https://share.streamlit.io/dataprofessor/basketball-heroku/basketball_app.py)\n"
 },
 {
  "repo": "chonyy/daily-nba",
  "language": "Python",
  "readme_contents": "<p align=center>\n    <img src=\"img/features/menu.jpg\" width=\"400\" height=\"566.6\">\n</p>\n\n<p align=center>\n    <a target=\"_blank\" href=\"https://travis-ci.com/chonyy/daily-nba\" title=\"Build Status\"><img src=\"https://travis-ci.com/chonyy/daily-nba.svg?branch=master\"></a>\n    <a target=\"_blank\" href=\"#\" title=\"top language\"><img src=\"https://img.shields.io/github/languages/top/chonyy/daily-nba?color=orange\"></a>\n    <a target=\"_blank\" href=\"https://img.shields.io/github/pipenv/locked/python-version/chonyy/daily-nba\" title=\"Python version\"><img src=\"https://img.shields.io/github/pipenv/locked/python-version/chonyy/daily-nba?color=green\"></a>\n    <a target=\"_blank\" href=\"https://opensource.org/licenses/MIT\" title=\"License: MIT\"><img src=\"https://img.shields.io/badge/License-MIT-blue.svg\"></a>\n    <a target=\"_blank\" href=\"#\" title=\"repo size\"><img src=\"https://img.shields.io/github/repo-size/chonyy/daily-nba\"></a>\n    <a target=\"_blank\" href=\"http://makeapullrequest.com\" title=\"PRs Welcome\"><img src=\"https://img.shields.io/badge/PRs-welcome-brightgreen.svg\"></a>\n</p>\n\n> \ud83c\udfc0 The NBA LINE Bot with 9 features!\n\nWatch NBA games, check the schedule, lookup the stats, search for players by using Daily-NBA. [Button carousel templates](https://developers.line.biz/en/reference/messaging-api/#buttons) are designed and implemented in every feature. Instead of directly typing the commands to the LINE bot, users can just simply **press buttons** on the carousel template to browse the features and access the NBA information!\n\nThere are four main componenets in this project\n\n- **LINE Bot:** Built by the official [LINE Messaging API](https://developers.line.biz/en/docs/messaging-api/overview/)\n- **Web Scraping:** Use [BeutifulSoup](https://www.crummy.com/software/BeautifulSoup/bs4/doc/) to scrape several websites to retrieve NBA information\n- **Backend:** Built the backend with [Flask](https://www.palletsprojects.com/p/flask/) to handle the webhook\n- **FSM:** Create FSMs with [pytransitions](https://github.com/pytransitions/transitions) for the users state management\n\n## FSM\n\n<p align=center>\n    <img src=\"img/fsm.png\">\n</p>\n\n[**Finite State Machine**](https://en.wikipedia.org/wiki/Finite-state_machine) is implemented for the state management of the users. A FSM is maintained for each individual user. This way, every user has their own independent state, and the operations between two different users will not affect each other.\n\nFinite state machine is a model in [Theory of Computation](https://en.wikipedia.org/wiki/Theory_of_computation). This model is implemented in Daily-NBA. Each feature is represented by a **state**, and the button that user pressed on the carousel template will trigger the **transitions** between states. The FSM graph is drawn by **GraphMachine** in [transitions.extensions](https://github.com/pytransitions/transitions).\n\n## Features\n\n### Watch Games\nChecking out all the scores of the games on that day. (Today / Yesterday / Manually input date)\n<p align=center>\n    <img src=\"img/features/game1.jpg\" width=\"240\" height=\"340\">\n</p>\n<p align=center>\n    <img src=\"img/features/game2.jpg\" width=\"240\" height=\"340\">\n</p>\n\n### Search Player\nSearching for a specific player. (Manually input player name)\n<p align=center>\n    <img src=\"img/features/player1.jpg\" width=\"240\" height=\"340\">\n</p>\n<p align=center>\n    <img src=\"img/features/player2.jpg\" width=\"240\" height=\"340\">\n</p>\n<p align=center>\n    <img src=\"img/features/player3.jpg\" width=\"240\" height=\"340\">\n</p>\n\n### Search Team\nSearching for a specific team. (Manually input team name)\n<p align=center>\n    <img src=\"img/features/team1.jpg\" width=\"240\" height=\"340\">\n</p>\n<p align=center>\n    <img src=\"img/features/team2.jpg\" width=\"240\" height=\"340\">\n</p>\n\n### Standings\nShowing the team standing from both Eastern and Western conference.\n<p align=center>\n    <img src=\"img/features/standings.jpg\" width=\"240\" height=\"340\">\n</p>\n\n### Game Schedule\nShowing the game schedule tomorrow.\n<p align=center>\n    <img src=\"img/features/schedule.jpg\" width=\"240\" height=\"340\">\n</p>\n\n### Stat Leader\nShowing the stat leaders. (Most Points / Assist / Rebound / 3PM / Steal / Block)\n<p align=center>\n    <img src=\"img/features/statleader.jpg\" width=\"240\" height=\"340\">\n</p>\n\n### Game Result\nChecking out the box score of a specific game. (Manually input date and team)\n<p align=center>\n    <img src=\"img/features/result.jpg\" width=\"240\" height=\"340\">\n</p>\n\n## Special Features\n\n### NBA Meme\nMy favoritie feature! Brininging the best and newest NBA meme to you by pressing one button.\n<p align=center>\n    <img src=\"img/features/meme.jpg\" width=\"240\" height=\"340\">\n</p>\n\n### NBA News\nBringing the hottest NBA news to you by pressing one button.\n<p align=center>\n    <img src=\"img/features/news.jpg\" width=\"240\" height=\"340\">\n</p>\n\n## Play with it!\n<p align=center>\n    <img src=\"img/qrcode.png\">\n</p>\n\n## Reference\n\nAll data comes from [basketball-reference.com](https://www.basketball-reference.com/).<br>\nNBA memes come from [twitter@NBAMemes](https://twitter.com/NBAMemes).<br>\nNBA news come from [realgm](https://basketball.realgm.com).<br>\n\n## License\n\nMIT \u00a9 [chonyy](https://github.com/chonyy)\n\n\n## Demo\n<p align=center>\n<img src=\"img/demo/1.jpg\" width=\"384\" height=\"682.4\">\n</p>\n<p align=center>\n<img src=\"img/demo/2.jpg\" width=\"384\" height=\"682.4\">\n</p>\n<p align=center>\n<img src=\"img/demo/3.jpg\" width=\"384\" height=\"682.4\">\n</p>\n<p align=center>\n<img src=\"img/demo/4.jpg\" width=\"384\" height=\"682.4\">\n</p>\n<p align=center>\n<img src=\"img/demo/5.jpg\" width=\"384\" height=\"682.4\">\n</p>\n<p align=center>\n<img src=\"img/demo/6.jpg\" width=\"384\" height=\"682.4\">\n</p>\n<p align=center>\n<img src=\"img/demo/7.jpg\" width=\"384\" height=\"682.4\">\n</p>\n<p align=center>\n<img src=\"img/demo/8.jpg\" width=\"384\" height=\"682.4\">\n</p>\n<p align=center>\n<img src=\"img/demo/9.jpg\" width=\"384\" height=\"682.4\">\n</p>\n<p align=center>\n<img src=\"img/demo/10.jpg\" width=\"384\" height=\"682.4\">\n</p>\n<p align=center>\n<img src=\"img/demo/11.jpg\" width=\"384\" height=\"682.4\">\n</p>\n<p align=center>\n<img src=\"img/demo/12.jpg\" width=\"384\" height=\"682.4\">\n</p>\n<p align=center>\n<img src=\"img/demo/13.jpg\" width=\"384\" height=\"682.4\">\n</p>\n<p align=center>\n<img src=\"img/demo/14.jpg\" width=\"384\" height=\"682.4\">\n</p>\n<p align=center>\n<img src=\"img/demo/15.jpg\" width=\"384\" height=\"682.4\">\n</p>\n<p align=center>\n<img src=\"img/demo/16.jpg\" width=\"384\" height=\"682.4\">\n</p>\n<p align=center>\n<img src=\"img/demo/17.jpg\" width=\"384\" height=\"682.4\">\n</p>\n<p align=center>\n<img src=\"img/demo/18.jpg\" width=\"384\" height=\"682.4\">\n</p>\n<p align=center>\n<img src=\"img/demo/19.jpg\" width=\"384\" height=\"682.4\">\n</p>\n<p align=center>\n<img src=\"img/demo/20.jpg\" width=\"384\" height=\"682.4\">\n</p>\n<p align=center>\n<img src=\"img/demo/21.jpg\" width=\"384\" height=\"682.4\">\n</p>\n"
 },
 {
  "repo": "shermanash/DFSharp",
  "language": "Python",
  "readme_contents": "# DFSharp\nOpen Source Tools For Daily Fantasy Basketball\n\nOptimizer and Live projections are at-\nDFSharp.com\n\nKibana dashboard can be viewed at-\nDFSharps.com\n\n\n## *Daily Pipeline*\n\n**-generate_model.py**\n\nthis file runs daily at 6am, pulling down stats from rotoguru.net and training/saving a gradient boosted regression model, while splitting off todays players and saving them as a csv\n\n**-make_projections.py**\n\nthis file runs every 10 minutes from noon to 11pm, it reads depth charts, injury reports, and live twitter updates, loads latest model, and makes projections.  it inserts the latest projections into elasticsearch and saves a csv of the day's projections\n\n**-optimizer_openopt.py**\n\nthis is the lineup optimizer file- the optimize() function can take a host of parameters, and returns a dataframe of the players in the optimized lineup.  it also writes the latest lineup to ES.  this file is called from the flask app\n\n**-/dflask/dflaskr.py**\n\nthis is the flask app- it allows users to use the optimizer, manually adjust minutes, and view the latest projections, using AJAX, jquery and datatables.\n\n**-/dflask/templates/layout.html**\n\nthis holds the html and javascript required to run the site\n\n\n### Working files, not yet integrated into dfsharp.com:\n\n-Sentiment.py\n\nthis file reads in tweets from this list https://twitter.com/RotoViz/lists/dfs-follows , does sentiment analysis on each one and adds it to elasticsearch\n\n-otp_Elastic.py\n\nthis file reads live NBA ownership information from the OwnThePlay.com API and adds it to elasticsearch\n[OwnThePlay has shut down until october]\n\n-carrot2.py\n\nthis file is for live clustering of elasticsearch results\n\n-webhoser.py\n\nthis file uses webhose.io to pull in any articles related to \"NBA DFS\", and adds them to elasticsearch\n"
 },
 {
  "repo": "bziarkowski/euRobasket",
  "language": "R",
  "readme_contents": "# euRobasket\n\neuRobasket is an R package which helps download, prepare and analyze data from\nEuropean basketball leagues. In current version data sources include: realgm.com,\nfibalivestats.com, live.fibaeurope.com.\n\n\n# Installation\n\n```R\ndevtools::install_github('bziarkowski/euRobasket')\nlibrary(euRobasket)\n```\n\n# Play by play functions\nWith euRobasket you can download play by play data from fibalivestats.com and live.fibaeurope.com and prepare it for further analysis.\n\nThis package makes play by play data easier to analyze by converting it to stints (stint is a period of time that the same set of ten players are on the court). But you can also download raw play by play.\n\n```R\n#download raw play by play\nget_raw_pbp_fibalivestats(742430)\nget_raw_pbp_livefibaeurope(108510)\n\n#get stints from play by play\nget_stints_fibalivestats(742430)\nget_stints_livefibaeurope(108510)\n```\n\nWith stints you can calculate lineup stats and on/off splits.\n```R\n#calculate lineups stats from single game with lineup_stats()\nget_stints_fibalivestats(742430) %>% \nlineups_stats()\n\n#calculate on/off splits for \u0141. Koszarek and J. Florence from single game with on_off_splits()\nget_stints_fibalivestats(742430) %>% \non_off_splits(players = c('\u0141. Koszarek', 'J. Florence'))\n\n```\n\n# Getting the ids for fibalivestats.com and live.fibaeurope.com\n\nIds for fibalivestats.com and live.fibaeurope.com are available with this package.\nYou can get them by using `data()`\n\n```R\n#fibalivestats.com\ndata(\"fibalivestats_matches_ids\")\n\n#live.fibaeurope.com\ndata(\"livefibaeurope_matches_ids\")\n```\n\n# Download stats tables from realgm.com\n\nStats tables with teams or players stats. You can download different types of\nstats such as: Totals, Advanced Stats, Averages, Per48, Per40, Per36, Miscellaneous.\n\n```R\n#get available realgm.com leagues\nget_realgm_league_names()\n\n#download teams stats\nget_team_stats_realgm(league = 'Spanish ACB', season = 2017, type = 'Totals')\nget_team_stats_realgm(league = 'Polish TBL', season = 2014, type = 'Advanced_Stats', split = 'Team_Starters')\n\n#download players stats\nget_players_stats_realgm(league = 'Israeli BSL', season = 2014, type = 'Advanced_Stats')\nget_players_stats_realgm(league = 'German BBL', season = 2016, type = 'Totals', position = 'PG')\n```\n\n# Download scores and box scores from realgm.com\nScores and box scores from european league for given period of time.\nDate format is YYYY-MM-DD.\n\n```R\n#download scores\nget_scores_realgm('2017-10-01', '2017-11-01', league = 'Polish TBL')\nget_scores_realgm('2015-09-01', '2016-02-01', league = 'Danish Basketligaen')\n\n#download box scores\nget_boxscores_realgm(start_date = '2016-10-01', end_date = '2016-10-02', league = 'Turkish TBL')\n\n```\n# Download and visualize shots\neuRobasket lets you download and visualize shot data for various leagues from fibalivestats.com and live.fibaeurope.com. \n\nDownload data from single games with game id.\n```r\n#from fibalivestats.com\nget_shots_data_fibalivestats(742430)\n\n#from live.fibaeurope.com\nget_shots_data_fibalivestats(108510)\n\n```\nVisualize shots\n\n```R\n#one chart from single game with shot_chart()\nget_shots_data_fibalivestats(742430) %>%\ndplyr::filter(player == 'F. Matczak') %>%\nshot_chart(type = 'Scatter')\n```\nYou can also create dashboard with shots.\n```R\n#download shots from multiple games with for loop\nshots = data.frame()\nfor(i in c(742430, 766471)) {\nshots = rbind(shots, get_shots_data_fibalivestats(i))  \n}\n\n#create dashboard\nshots_dashboard(shots)\n```\n\n# Assists\nDownload assists and create assists networks for teams\n\n```R\n#download assists\nget_assists_fibalivestats(742430) %>%\nassist_network()\n```\n\n\n\n\n\n"
 },
 {
  "repo": "whsky/smarter-than-nate-silver",
  "language": "HTML",
  "readme_contents": "Smarter Than Nate Silver\n========================\n\n![Web app](https://github.com/whsky/smarter-than-nate-silver/blob/master/README_images/ScreenShot1.png?raw=true)\n\n[SmarterThanNateSilver.com](http://smarterthannatesilver.com) - website is live!\n\n\nMaking NCAA March Madness predictions\n-------------------------------------\n**It's about that time of year again!**\n\nTime to fill out a bracket and pick the best college basketball team in America.\n\n_But, how should we pick who wins?_\n\nTons of very smart people spend an inordinate amount of time trying to answer exactly this question. Nate Silver's website [FiveThirthyEight.com](https://fivethirtyeight.com/sports/) does a good job of showing probabilities of any team winning the tournament.\n\n_So why the beef with Nate, dog?_\n\nMost of his predictions _(as well as others')_ rely heavily on stats like BPI, Power Ratings, and Elo scores which are themselves based mostly on the ranking of the team going into the tournament. These rank-based stats take many names, sometimes it's \"Strength of Schedule\", or \"Opponent Strength\". But those stats skip over the fact that they have not defined what determines highly ranked team to begin with.\n\n![Circular Reasoning](https://github.com/whsky/smarter-than-nate-silver/blob/master/README_images/CircularReasoning.png?raw=true)\n\nSo, models built on this information lean toward picking a winning team based on who is the better seed. You can see this effect based on who [FiveThirtyEight](https://fivethirtyeight.com/sports/) has picked to be in the Final Four from the last couple of tournaments:\n\n|**Year**|**Team**|**Seed**|**Made Final Four**\n-----|-----|-----|:-----:|-----\n2016|Kansas|1|No\n||UNC|1|Yes\n||Mich. St.|2|No\n||Oklahoma|2|Yes\n2015|Kentucky|1|Yes\n||Villanova|1|No\n||Duke|1|Yes (won championship)\n||Arizona|2|No\n2014|Florida|1|Yes\n||Arizona|1|No\n||Louisville|4|No\n||Mich. St.|4|No\n\n\nHmmmm...that seems to be a lot of No.1 seeds. Perhaps they are seeded higher because they are the better team, so we _should_ use this number, right?\n\nNot exactly, ranking and placing teams in the opening round of the tournament is far more complicated, and even worse, dependent on a panel to decide where each team should rank.\n\nA Rank Agnostic Approach\n------------------------\n\nWhy not just ignore the rankings, and mine through historical data to evaluate team performance based solely on player-level data?\n\nWe can then use this game data to predict the outcome of future matches based on the patterns seen in the historical data. Machine Learning techniques like Neural Nets do a great job of finding these type of patterns. So let's build a Multilayer Perceptron to take player data from regular season game data to predict the margin of victory _(the point-spread)_ of post-season games like the March Madness tournament.\n\nThis data was scraped for every game that had complete boxscores for the last decade using my `scrapey.py` file in this repo. Also, csv files for player data of each season are available in the `data` folder.\n\n**What is a point-spread?**\n\nPoint-spreads were introduced by [Charles K. McNeil](https://en.wikipedia.org/wiki/Charles_K._McNeil) _(who later became JFK's math teacher)_ as an attempt to balance out betting between both outcomes. For example, if **Team 1** is a strong favorite to beat **Team 2**, you would expect that a majority of the bets will be for **Team 1** to win. This is a huge disadvantage to whomever is taking the bet. If **Team 1** wins, they have a massive amount of payouts to make. But, if we make the bet over whether **Team 1** will win _by more than an certain number of points_ rather than just if they will win. We now can move this handicap to persuade bets to take one side or the other and thus keep an even number of bets on both sides.\n\n_Wait, why would the people taking the bet want an even number on both sides?_\n\nGreat question, because they want to minimize their exposure to risk. With balanced betting they can trust that regardless of the outcome, there is no risk of one side having to pay out more than the other. Don't worry though, they still get a piece of every bet they see, so they still make money.\n\nNeural Nets\n-----------\n\nNeural Nets _(NN)_ adapt to the data being feed into them. They are adapting to what they see in relation to the desired outcome. This adaptation of the model is why these methods are referred to as Machine Learning. The model changes a neuron's weighted input that minimizes the error between the model output and desired output.\n\nTo build the Multilayer Perceptron NN I used Keras and followed a lot of what Jason Brownlee blogged about on [Machine Learning Mastery](http://machinelearningmastery.com/regression-tutorial-keras-deep-learning-library-python/). Because we are concerned with predicting point_spreads, this is a regression model. I used a deep network in the hopes that it would allow the NN to find more interactive patterns in the player stats, like an underlying synergy or \"team-i-ness\". I tested just under 100 different parameter tweaks (e.g. number of hidden layers, width of input layer, activation function, and epoch/batch sizes). Using the following model I achieved the lowest RMSE and highest percentange of correct calls on game winner:\n\n```python\ndef baseline_model():\n    model = Sequential()\n    model.add(Dense(200, input_dim=X2_reg.shape[1], init='uniform',\n        activation='softsign'))\n    model.add(Dense(75, input_dim=X2_reg.shape[1], init='uniform',\n        activation='softsign'))\n    model.add(Dense(10, input_dim=X2_reg.shape[1], init='uniform',\n        activation='relu'))\n    model.add(Dense(1, init='uniform'))\n\n    model.compile(loss='mean_squared_error', optimizer='adam')\n    return model\n```\n\n\n2017 March Madness\n------------------\n\nThis same approach was used to model data from the 2016-2017 dataset. Results of all predictions _(all 351 tems playing each other, roughly 62,000 predictions)_ were computed and dumped into a python `dict` which allows fast access to results without the unnecessary re-modeling and re-predicting. Because `dict`s are hash-mapped, they are also incredible fast and web-friendly since they resemble JSON elements. These predictions get served over the web using a Flask app which you can find here: [SmarterThanNateSilver.com](http://smarterthannatesilver.com)\n\nAfter **\"Selection Sunday\"** on March 12th, I will be filling out a bracket with choices made solely by my model, as well as predicted results for daily match-ups throughout the tournament.\n\nI have also modified this model to conform to Kaggle's \"March Machine Learning Mania\" so you can track how well it's holding up against other Data Science Nerds:\n\n[Kaggle Leaderboard](https://www.kaggle.com/c/march-machine-learning-mania-2017/leaderboard)\n\nContact\n-------\n\nFeel free to reach out if you are in the market for a data scientist!\n\n**Steve Iannaccone - Denver, CO**\n\n[LinkedIn](https://www.linkedin.com/in/steve-iannaccone/)\n\n[GitHub](https://github.com/whsky)\n"
 },
 {
  "repo": "danielforsyth/NBA-SportsVU",
  "language": null,
  "readme_contents": "# NBA-SportsVU\nAnalyzing NBA data\n\nhttp://www.danielforsyth.me/exploring_nba_data_in_python/\n"
 },
 {
  "repo": "embirico/basketball-object-tracker",
  "language": "Python",
  "readme_contents": "basketball-object-tracker\n=========================\n\nCS 231 Project Winter 2014\n\nProject to perform single-view 3D reconstruction of basketball scenes\nusing commonly available TV footage of games.\n\nOur main objective is to identify location of court relative to camera.\n\nSource code is located in the `src` directory:\n\n* To get an understanding of how the 4-point selection works, look at\n  `image_object.py`, which calls most other files.\n  (This script can be run without arguments.)\n* The homography estimation is done in `homography.py`.\n\t(This script can be run without arguments.)\n* Frame extraction is done in `extract_frames.py`.\n\t(This script requires arguments, which you can find by running with `-h`.)\n"
 },
 {
  "repo": "louis70109/PLeagueBot",
  "language": "Python",
  "readme_contents": "# P+ League LINE Chatbot\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n[![Python Version](https://img.shields.io/badge/Python-%3E%3D%203.5-blue.svg)](https://badge.fury.io/py/lotify)\n\n<a href=\"https://line.me/R/ti/p/%40611lsquw\"><img height=\"50\" border=\"0\" alt=\"\u52a0\u5165\u597d\u53cb\" src=\"https://scdn.line-apps.com/n/line_add_friends/btn/zh-Hant.png\"></a>\n\n# Prerequisite\n\n- flask/Python 3.8\n- LINE v10.14\n- PostgreSQL\n\n> You need Github, LINE, Heroku accounts to deploy this bot.\n\n# Developer Side\n\n## Environment property\n\nFill in the following environment variables:\n\n```\nLINE_CHANNEL_ACCESS_TOKEN=\nLINE_CHANNEL_SECRET=\nDATABASE_URL=postgres://USER:PASSWORD@127.0.0.1:5432/postgres\n```\n\n> You need to modify DATABASE_URL as your postgresql settings.\n\n## LINE account (LINE_CHANNEL_ACCESS_TOKEN, LINE_CHANNEL_SECRET)\n\n- Got A LINE Bot API developer account Make sure you already registered, if you need use LINE Bot.\n\n* Go to LINE Developer Console\n    - Close auto-reply setting on \"Messaging API\" Tab.\n    - Setup your basic account information. Here is some info you will need to know.\n        - Callback URL: `https://{YOUR_URL}/webhooks/line`\n        - Verify your webhook.\n* You will get following info, need fill back to `.env` file.\n    - Channel Secret\n    - Channel Access Token (You need to issue one here)\n\n## Local testing\n\n1. Run `Scripts/` profiles first, sync official website data to database as crawler.\n\n2. first terminal window\n\n```\ncp .env.example .env # Modify variables value\n\n# By docker (choose one)\ndocker-compose up # and go to DOCKER_IP:4040\n\n# By localized (choose one)\npip install -r requirements.txt --user\npython api.py\n```\n\n3. Create a provisional Https:\n\n```\nngrok http 5000\n```\n\nor maybe you have npm environment:\n\n```\nnpx ngrok http 5000\n```\n\n![](https://i.imgur.com/azVdG8j.png)\n\n4. Copy URL to LINE Developer Console\n\n## Heroku\n\n[![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy)\n\n- Enable `clock` button to schedule corn.\n\n![](https://i.imgur.com/iA0dvI9.png)\n\n- Add `Heroku Postgres` and it would create `DATABASE_URL` environment variable automatically.\n\n![](https://i.imgur.com/wCFeUlu.png)\n\nIf you are not sure where are files in, use following up commands:\n\n```\nheroku run bash\nheroku logs --tail\n```\n\n# License\n\nMIT License\n"
 },
 {
  "repo": "caravancodes/consumable-code-the-sport-db-api",
  "language": "Kotlin",
  "readme_contents": "![ScreenShoot Apps](https://raw.githubusercontent.com/amirisback/amirisback/master/docs/image/deprecated.png?raw=true)\n\n## consumable-code-the-sport-db-api\n[![](https://jitpack.io/v/amirisback/consumable-code-the-sport-db-api.svg?style=flat-square)](https://jitpack.io/#amirisback/consumable-code-the-sport-db-api) <br>\nEliminates the method of retrieving json data using retrofit repeatedly. so this project has a set of functions to retrieve data without the need for fetching data using the retrofit of the API\n\n## Attention Please :bangbang:\nPlease use frogo-consume-api [Click Here](https://github.com/frogobox/frogo-consume-api) to get the latest updates\n\n## Screenshoot Apps\n\n| The Sport DB API |   Chuck Data 1              |   Chuck Data 2  |\n|:------------------:|:----------------------------:|:---------------------:|\n|<span align=\"center\"><img width=\"200px\" height=\"360px\" src=\"docs/image/ss_main.png\"></span> | <span align=\"center\"><img width=\"200px\" height=\"360px\" src=\"docs/image/ss_chuck_1.png\"></span> | <span align=\"center\"><img width=\"200px\" height=\"360px\" src=\"docs/image/ss_chuck_2.png\"></span>\n\n## Version Release\nThis Is Latest Release\n\n    $version_release = 1.1.1\n\nWhat's New??\n\n    * Update Build Gradle *\n    * Enhance Performance *\n\n## How To Use This Project\n<h3>Step 1. Add the JitPack repository to your build file</h3>\n\nAdd it in your root build.gradle at the end of repositories:\n\n\tallprojects {\n\t\trepositories {\n\t\t\t...\n\t\t\tmaven { url 'https://jitpack.io' }\n\t\t}\n\t}\n  \n  \n<h3>Step 2. Add the dependency</h3>\n\n\tdependencies {\n\t        // library consumable code the sport db api\n            implementation 'com.github.amirisback:consumable-code-the-sport-db-api:1.1.1'\n\t}\n\t\n<h3>Step 3. Declaration ConsumeTheSportDbApi</h3>\n\n\tval consumeTheSportDbApi = ConsumeTheSportDbApi(\"1\") // \"1\" is API KEY\n\t\n\tconsumeTheSportDbApi.usingChuckInterceptor(this) // This is Code Chuck Interceptor\n\t\n    consumeTheSportDbApi.searchForPlayerByName(\n        \"Danny Welbeck\",\n        object : SportResultCallback<Players> {\n            override fun getResultData(data: Players) {\n                \n                // * PLACE YOUR CODE HERE FOR UI / ARRAYLIST *\n\n            }\n\n            override fun failedResult(statusCode: Int, errorMessage: String?) {\n                // failed result\n            }\n\n            override fun onShowProgress() {\n                // showing your progress view\n            }\n\n            override fun onHideProgress() {\n                // hiding your progress view\n            }\n        })\n\n## Documentation THE SPORT DB API\nhttps://www.thesportsdb.com/api.php\n\n## Function Main From This Project\n\n    // Switch For Using Chuck Interceptor\n    fun usingChuckInterceptor(context: Context)\n\n    // Search for team by name\n    fun searchForTeamByName(teamName: String?, sportResultCallback: SportResultCallback<Teams>)\n\n    // Search for team short code\n    fun searchForTeamByShortCode(shortCode: String?, sportResultCallback: SportResultCallback<Teams>)\n\n    // Search for all players from team *Patreon ONLY*\n    fun searchForAllPlayer(teamName: String?, sportResultCallback: SportResultCallback<Players>)\n\n    // Search for players by player name\n    fun searchForPlayer(playerName: String?, sportResultCallback: SportResultCallback<Players>)\n\n    // Search for players by player name and team name\n    fun searchForPlayer(playerName: String?, teamName: String?, sportResultCallback: SportResultCallback<Players>)\n\n    // Search for event by event name\n    fun searchForEvent(eventName: String?, sportResultCallback: SportResultCallback<Events>)\n\n    // Search For event by event name and season\n    fun searchForEvent(eventName: String?, season: String?, sportResultCallback: SportResultCallback<Events>)\n\n    // Search for event by event file name\n    fun searchForEventFileName(eventFileName: String?, sportResultCallback: SportResultCallback<Events>)\n\n    // List all sports\n    fun getAllSports(sportResultCallback: SportResultCallback<Sports>)\n\n    // List all leagues\n    fun getAllLeagues(sportResultCallback: SportResultCallback<Leagues>)\n\n    // List all Leagues in a country\n    fun searchAllLeagues(countryName: String?, sportResultCallback: SportResultCallback<Countrys>)\n\n    // List all Leagues in a country specific by sport\n    fun searchAllLeagues(countryName: String?, sportName: String?, sportResultCallback: SportResultCallback<Countrys>)\n\n    // List all Seasons in a League\n    fun searchAllSeasons(idTeam: String?, sportResultCallback: SportResultCallback<Seasons>)\n\n    // List all Teams in a League\n    fun searchAllTeam(league: String?, sportResultCallback: SportResultCallback<Teams>)\n\n    // List all Teams in Sportname & Country Name\n    fun searchAllTeam(sportName: String?, countryName: String?, sportResultCallback: SportResultCallback<Teams>)\n\n    // List All teams details in a league by Id\n    fun lookupAllTeam(idLeague: String?, sportResultCallback: SportResultCallback<Teams>)\n\n    // List All players in a team by Team Id *Patreon ONLY*\n    fun lookupAllPlayer(idTeam: String?, sportResultCallback: SportResultCallback<Players>)\n\n    // List all users loved teams and players\n    fun searchLoves(userName: String?, sportResultCallback: SportResultCallback<Users>)\n\n    // League Details by Id\n    fun lookupLeagues(idLeague: String?, sportResultCallback: SportResultCallback<Leagues>)\n\n    // Team Details by Id\n    fun lookupTeam(idTeam: String?, sportResultCallback: SportResultCallback<Teams>)\n\n    // Player Details by Id\n    fun lookupPlayer(idPlayer: String?, sportResultCallback: SportResultCallback<Players>)\n\n    // Event Details by Id\n    fun lookupEvent(idEvent: String?, sportResultCallback: SportResultCallback<Events>)\n\n    // Player Honours by Player Id\n    fun lookupHonour(idPlayer: String?, sportResultCallback: SportResultCallback<Honors>)\n\n    // Player Former Teams by Player Id\n    fun lookupFormerTeam(idPlayer: String?, sportResultCallback: SportResultCallback<FormerTeams>)\n\n    // Player Contracts by Player Id\n    fun lookupContract(idPlayer: String?, sportResultCallback: SportResultCallback<Contracts>)\n\n    // Lookup Table by League ID and Season\n    fun lookupTable(idLeague: String?, season: String?, sportResultCallback: SportResultCallback<Tables>)\n\n    // Next 5 Events by Team Id\n    fun eventsNext(idTeam: String?, sportResultCallback: SportResultCallback<Events>)\n\n    // Next 15 Events by League Id\n    fun eventsNextLeague(idLeague: String?, sportResultCallback: SportResultCallback<Events>)\n\n    // Last 5 Events by Team Id\n    fun eventsLast(idTeam: String?, sportResultCallback: SportResultCallback<Results>)\n\n    // Last 15 Events by League Id\n    fun eventsPastLeague(idLeague: String?, sportResultCallback: SportResultCallback<Events>)\n\n    // Events in a specific round by league id/round/season\n    fun eventsRound(idLeague: String?, round: String?, season: String?, sportResultCallback: SportResultCallback<Events>)\n\n    // All events in specific league by season (Free tier limited to 200 events)\n    fun eventsSeason(idLeague: String?, season: String?, sportResultCallback: SportResultCallback<Events>)\n\n\n## Colaborator\nVery open to anyone, I'll write your name under this, please contribute by sending an email to me\n\n- Mail To faisalamircs@gmail.com\n- Subject : Github _ [Github-Username-Account] _ [Language] _ [Repository-Name]\n- Example : Github_amirisback_kotlin_admob-helper-implementation\n\nName Of Contribute\n- Muhammad Faisal Amir\n- Waiting List\n- Waiting List\n\nWaiting for your contribute\n\n## Attention !!!\nPlease enjoy and don't forget fork and give a star\n- Don't Forget Follow My Github Account\n- If you like this library, please help me / you can donate to buy patreon services\n"
 },
 {
  "repo": "Basket-Analytics/BasketTracking",
  "language": "Python",
  "readme_contents": "# BasketTracking\n\n![](resources/logo_large.png \"Logo\")\n\nTactics and statistics in professional basketball teams are widespread. This operation can be optimized and speed up by\nan automatic computer vision system. We aim at developing such system capable of action tracking and understanding in\nbasketball games using computer vision approaches and ideas alongside deep learning models such as Detectron2. Our\nsystem tracks player trajectories from videos and rectifies them to a standard basketball court, showing also the player\nwho owns the ball.\n\n## Table of Contents\n\n* [Demo](#demo)\n* [Dependencies](#dependencies)\n* [Usage](#usage)\n\n### Demo\n\n<p align='center'>\n  <img src=\"resources/demo.gif\" width=\"80%\"/>\n</p>\n\n### Dependencies\n\n* [Python](https://www.python.org/)\n* [OpenCV](https://opencv.org/)\n* [Detectron2](https://github.com/facebookresearch/detectron2)\n* [Pytorch-Cuda](https://pytorch.org/)\n* [Numpy](https://numpy.org/)\n* [Matplotlib](https://matplotlib.org/)\n\n### Usage\n\nThe system can be executed from the ```main.py```.\n\n* ```main.py```: Initializes classes and loads or rectifies the needed images\n* ```video_handler.py```: Manages the frame reading procedure from the input video.\n* ```rectify_court.py```: Produces homographies, rectified images, panoramas.\n* ```ball_detect_track.py```: Detects and tracks the ball\n* ```player_detection.py```: Detects and tracks the players\n* ```player.py```: Contains the class ```Player```.\n* ```tools```: Helper functions.\n* ```resources```: Contains template images, input video.\n"
 },
 {
  "repo": "jtpavlock/nbapy",
  "language": "Python",
  "readme_contents": "<p align=\"center\">\n<a href=\"https://github.com/jtpavlock/nbapy/actions\"><img alt=\"Actions Status\" src=\"https://github.com/jtpavlock/nbapy/workflows/CI/badge.svg\"></a>\n<a href=\"https://pypi.org/project/nbapy/\"><img alt=\"PyPI\" src=\"https://img.shields.io/pypi/v/nbapy\"></a>\n<a href=\"https://pepy.tech/project/nbapy\"><img alt=\"Downloads\" src=\"https://pepy.tech/badge/nbapy\"></a>\n</p>\n\n# *nbapy - [stats.nba.com](https://stats.nba.com) API for python*\n\n## Summary\nA python facing API for `stats.nba.com`\n\n***Warning*** `stats.nba.com` is notorious for being extremely unreliable. Please report any issues you find.\n\n## Usage\n\nAll data is returned as a pandas dataframe (check out the [starter docs](https://pandas.pydata.org/pandas-docs/stable/user_guide/10min.html) if you're new to pandas). For example:\n\n```python\nfrom nbapy import game\nimport pandas as pd\n\ngame_id = '0021900017'  # taken from 'https://stats.nba.com/game/0021900017/'\nstats = game.BoxScore(game_id).players_stats()\nprint(stats)\n```\n\nIf you want to cache results so you don't have to reach the api every time, you can use [requests-cache](https://pypi.org/project/requests-cache/)\n```python\nfrom nbapy import game\nimport pandas as pd\nimport requests_cache\n\nrequests_cache.install_cache('nbapy_cache')\n\ngame_id = '0021900017'\nstats = game.BoxScore(game_id).players_stats()\nprint(stats)\n```\n\n## Documentation\nA constant work-in-progress, but [check them out](https://nbapy.readthedocs.io/en/latest/)!\n\n\n## Installation\nTo install from pypi:\n\n```bash\n$ python -m pip install nbapy\n```\n\n## Contributing\n#### 1. Fork the repository and create a feature/bug fix branch\n\n#### 2. Install development requirements\n\nYou will to first install [poetry](https://pypi.org/project/poetry/) if you don't already have it.\n```bash\n$ python -m pip install poetry\n```\n\nAfter that, just run `poetry install` inside of your fork.\n\n#### 3. Hack away\n\n*Coding conventions*\n\n* [black](https://github.com/psf/black) for formatting\n* [google docstrings](https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings)\n* [flake8](https://flake8.pycqa.org/en/latest/index.html#quickstart) for linting\n* [mypy](http://mypy-lang.org/) for static typing analysis\n* [conventional commits](https://www.conventionalcommits.org/en/v1.0.0/) for commit style.\n* [isort](https://github.com/timothycrosley/isort/) for import organization.\n\nWhew, that's a lot, but I'm a big fan of clean code, and I hope you are too! The good news is that if you follow the following advice, you'll find these aren't too hard to manage :smile:\n\n*Optional (but recommended)*\n\n`nbapy` has a [pre-commit](https://pre-commit.com/) file that you can install to automatically enforce these conventions prior to committing via a git hook.\n\nTo install: `$ pre-commit install`\n\nYou can also use `$ pre-commit run -a` to run the checks manually.\n\nFor commit messages, I recommend using [commitizen](https://github.com/commitizen-tools/commitizen). It is automatically installed in the dev dependencies, so to commit, you just run `cz c` and follow the prompts.\n\nIf you're using pre-commit, and either the black or isort check fails, the good news is it will fix the problems for you. However, it won't continue the commit automatically so that you get a chance to look over the changes. You'll have to re-stage the changes, and then you can run `cz c --retry` so you don't lose that nice commit message you just wrote.\n\n#### 4. Create some tests\n\n#### 5. Make sure everything looks good\n`$ pytest --cov`* \n\n`$ sphinx-build -n -W -q -b html docs docs/_build/html`\n\n`$ pre-commit run -a` (if you didn't install the pre-commit git hook)\n\n\\* note the first time you run this, it may take a few minutes. However, the requests will cache, and subsequent runs should be much faster.\n\n#### 6. Submit a pull request\n\nOther ways to contribute involve submitting any issues or adding some documentation!\n\n## To-Do\n- Finish Jupyter Notebook documentation\n\n## Authors\n\nThis is orginally based off of https://github.com/seemethere/nba_py so a lot of the work was done by those guys. My goal with this project is to clean up the code, add some proper documentation, and keep it up to date.\n"
 },
 {
  "repo": "donejs/bitballs",
  "language": "JavaScript",
  "readme_contents": "@page bitballs Bitballs\n@group bitballs.components Components\n@group bitballs.clientModels Client Models\n@group bitballs.services Services\n@group bitballs.serviceModels Service Models\n@hide contents\n\n[![Build Status](https://travis-ci.org/donejs/bitballs.svg?branch=master)](https://travis-ci.org/donejs/bitballs)\n\nBitballs is a [DoneJS](https://donejs.com) app that enables users to coordinate\nthe players, teams, games, rounds and recordings of a basketball tournament.\nIt also serves as an example of how to use DoneJS with sessions, user\nprivileges, RESTful services, and ORM models.\n\nTo run the Bitballs app locally, run its tests, or generate its documentation\nfollow the steps outlined below.\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Setup Environment](#setup-environment)\n  - [Installing PostgreSQL on OSX](#installing-postgresql-on-osx)\n  - [Installing PostgreSQL on Linux](#installing-postgresql-on-linux)\n  - [Installing PostgreSQL on Windows](#installing-postgresql-on-windows)\n- [Download Source](#download-source)\n- [Install Dependencies](#install-dependencies)\n- [Prepare the Database](#prepare-the-database)\n- [Start the Server](#start-the-server)\n- [Register a User](#register-a-user)\n- [Enjoy](#enjoy)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n### Setup Environment\n\nMake sure you have installed:\n\n- [Node 5](https://nodejs.org/en/download/)\n- NPM 3 *(packaged with Node)*\n- [PostgreSQL](https://www.postgresql.org/download/)\n\n#### Installing PostgreSQL on OSX\n\nOn a Mac, the easiest way to install and configure [PostgreSQL](https://www.postgresql.org)\nis using the [brew](https://brew.sh/) utility:\n\n```\nbrew install postgresql\n```\n\nPay special attention to the end of the [brew](https://brew.sh/) command's\noutput, which includes instructions on how to start `postgres`:\n\n```\nTo load postgresql:\n  launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist\nOr, if you don't want/need launchctl, you can just run:\n  postgres -D /usr/local/var/postgres\n```\n\nThe provided `launchctl` command ensures the `postgres` process is always\nrunning, even after a system restart. The alternative `postgres` command\nstarts the `postgres` process manually.\n\nWe recommend the `launchctl` option. If desired, `postgres` can be\nstopped and uninstalled by running:\n\n```\nbrew uninstall postgresql\n```\n\n#### Installing PostgreSQL on Linux\n\n*Coming Soon*\n\n#### Installing PostgreSQL on Windows\n\nDownload and use the graphical installer available on [postgresql.org](http://www.postgresql.org/download/windows/). Make sure you host it listen to port `5432`.\n\nOpen `pg_hba.conf`, which should be in _C:\\Program Files\\PostgreSQL\\9.5\\data_, and change from `md5` authentication to `trust`. For example, change:\n\n> host    all             all             127.0.0.1/32            md5\n\nto:\n\n> host    all             all             127.0.0.1/32            trust\n\n`trust` should not be used in a production environment.  We are only using it here as a substitute for the `peer` mode available in UNIX environments. Read more about it [here](http://www.postgresql.org/docs/9.5/static/auth-methods.html).\n\n\n\nFinally, using `pgAdmin III` graphical database manager, which should have been installed with `postgres`, create a `bitballs` database.\n\n\n### Download Source\n\nClone this repo using git:\n\n```\ngit clone https://github.com/donejs/bitballs.git\n```\n\nNavigate to the repository's directory\n\n```\ncd bitballs\n```\n\n### Prepare the Database\n\nMake sure the `postgres` process is running:\n\n```\nps | grep postgres\n```\n\nYou should see \"postgres -D\" among the output:\n\n```\n92831 ttys000    0:00.02 postgres -D /usr/local/var/postgres\n92856 ttys000    0:00.00 grep postgres\n```\n\nWith that confirmed we can create the database that the bitballs app\nwill persist its data to:\n\n```\ncreatedb bitballs\n```\n\n### Install Dependencies\n\nTo install the project's JavaScript dependencies run:\n\n```\nnpm install\n```\n\nAdditionally DoneJS's command line utilities need to be installed globally:\n\n```\nnpm install -g donejs-cli\n```\n\n### Start the Server\n\nWith all the prerequisite setup completed the server can be started by running:\n\n```\ndonejs develop\n```\n\n### Register a User\n\nNavigate to [http://localhost:5000/register](http://localhost:5000/register)\nin your browser and follow the instructions.\n\n### Enjoy\n\nYou're finished! Explore some of the app's features:\n\n- Live reload (`donejs develop`)\n- Run the tests (`donejs test`)\n- Generate the documentation (`donejs document`)\n"
 },
 {
  "repo": "historicalsource/nba-hangtime",
  "language": "Assembly",
  "readme_contents": "# nba-hangtime\n"
 },
 {
  "repo": "AlexEidt/Basketball-Statistics-Tracking",
  "language": "Java",
  "readme_contents": "# Basketball-Statistics-Tracking\n### By: Alex Eidt\nA program that can track player statistics for a Basketball Game\n\n***\n\n**All Icons in the 'Image' Folder are not mine and all rights are reserved to their respective owners.**\n\n**Visit [pngtree.com](https://pngtree.com) for Free Icon Downloads.**\n\n***\n\n# Home Screen:\n\nWhen the program is launched from `BasketballMain` the **Home Screen** is created and is\nshown below:\n\n<p align = \"center\">\n  <img src = \"Screenshots/GetPlayersPanelwPlayers.PNG\" width = \"600\" alt = \"Home Screen\">\n</p>\n\n## Buttons and Labels:\nIcon | Component Name | Description\n--- | :---: | ---\n<img src = \"Image/submit.png\" width = \"50\" alt = \"Add Player Icon\"> | **Add Player** | Adds the player name entered in the text field. \n<img src = \"Image/undo.png\" width = \"50\" alt = \"Undo Icon\"> | **Undo** | Removes the most recently added player.\n<img src = \"Image/player.png\" width = \"50\" alt = \"Player Icon\"> | **Players** | The players entered by the user. The most recently added player appears at the top of the list.\n<img src = \"Image/start.png\" width = \"50\" alt = \"Start Game Icon\"> | **Start Game** | Becomes enabled when the user enters the minimum required players. The default minimum is 5, however the user can change this in the **Settings**.\n<img src = \"Image/oldGames.png\" width = \"50\" alt = \"Old Games Icon\"> | **Old Games** | Loads any games previously tracked using this software. In the case of a crash or unwanted closure of the program, statistic tracking can resume without any concerns.\n<img src = \"Image/instructions.png\" width = \"50\" alt = \"Instructions Icon\"> | **Instructions** | Opens a new window with the documentation for the program. There is text that walks the user through all the components of the program and has interactive panes where the user can become familiar with the mechanics of the program. \n<img src = \"Image/settings.png\" width = \"50\" alt = \"Settings Icon\"> | **Settings** | Allows user to change the rules governing gameplay and the background color of the program while they use it.\n<img src = \"Image/close.png\" width = \"50\" alt = \"Close Icon\"> | **Close** | Closes the program.\n\n## Settings Window:\nThe settings window features several Radio Button groups to change the configurations of the game. There is also the option of changing the background color of the program. The settings window is shown below:\n\n<p align = \"center\">\n  <img src = \"Screenshots/SettingsWindow.PNG\" width = \"600\" alt = \"Settings Window\">\n</p>\n\n***\n# Starter Selection:\n\nIf the number of players entered in the **Home Screen** is greater the number\nof starters selected in the settings window, then you will need to choose\nwho will start in your game. \n\nClicking on the player names will add them to a list of players currently\nselected to start the game. You will only be able to start the game\nonce you have selected the appropriate number of starters.\n\n<p align = \"center\">\n  <img src = \"Screenshots/StartersPanelwPlayers.PNG\" width = \"600\" alt = \"Starters Selection\">\n</p>\n\n## Buttons and Labels:\nIcon | Component Name | Description\n--- | :---: | ---\n<img src = \"Image/undo.png\" width = \"50\" alt = \"Undo Icon\"> | **Undo** | Removes the most recently added starter.\n<img src = \"Image/start.png\" width = \"50\" alt = \"Start Game Icon\"> | **Start Game** | Becomes enabled when the correct number of starters have been entered. Opens a **Roster Management** window.\n<img src = \"Image/close.png\" width = \"50\" alt = \"Close Icon\"> | **Close** | Closes the **Starter Selection** window.\n***\n# Roster Management\n\nIf the number of players entered equals the number of starters specified (either by default or in\nthe settings) then you will be directed to this window after clicking the Start Game\nbutton in the **Home Screen** or if the game you are loading with the **Old Games**\nbutton had as many players as starters specified. \n\n<p align = \"center\">\n  <img src = \"Screenshots/ManagementPanelNoBench.PNG\" width = \"600\" alt = \"Roster Management\">\n</p>\n\nIf the number of players entered was greater than the number of starters specified, then you were redirected to the **Starter Selection** window where you chose your starters. Once you pressed the **Start Game** button there, you will be redirected to an alternate version of the **Roster Management** window with starters and a bench. Players who foul out of the game have their button marked red and disabled. If the foul that got that player ejected is removed through the **Undo** Button, then that player's button will become enabled and will be colored light gray to show they are back on the bench and can be substituted in. If only five players remain (or however many starters were specified in the **Settings**) due to player ejections or injuries, then no player that has fouled out will be allowed into the game, contrary to the NBA Rule where the first player who fouled out comes back into the game.\n\n<p align = \"center\">\n  <img src = \"Screenshots/ManagementPanelwBench.PNG\" width = \"600\" alt = \"Roster Management with Bench\">\n</p>\n\n## Buttons and Labels:\nIcon | Component Name | Description\n--- | :---: | ---\n<img src = \"Image/score.png\" width = \"50\" alt = \"Score Icon\"> | **Score** | Shows the total points scored by the team.\n<img src = \"Image/boxscore.png\" width = \"50\" alt = \"Box Score Icon\"> | **Box Score** | Opens a new window showing all player statistics in the traditional Box Score format used for Basketball Games.\n<img src = \"Image/undo.png\" width = \"50\" alt = \"Undo Icon\"> | **Undo** | Opens a new window allowing the user to correct any statistics they entered by deleting them. All periods of the game are shown and clicking on a period shows the user all statistics that were entered during that period. Clicking on any statistic closes the Undo window and removes that statistic.\n<img src = \"Image/done.png\" width = \"50\" alt = \"Done Icon\"> | **Done** | Stops the game and closes the **Roster Management** window.\n<img src = \"Image/play.png\" width = \"50\" alt = \"Play Button Icon\"> | **Start/Stop** | Starts/Stops the timer for the game.\n<img src = \"Image/timeout.png\" width = \"50\" alt = \"Pause Button Icon\"> | **Timeouts** | Takes away one timeout (Timeouts remaining shown on button) and stops the  timer.\n<img src = \"Image/fouls.png\" width = \"50\" alt = \"Team Fouls Icon\"> | **Team Fouls** | Shows the current number of team fouls in the period. Resets after each period.\n\n## Box Score Button:\n\nThe window that appears when the **Box Score** Button is pressed. It shows all player statistics in the traditional 'Box Score' format. The table is shown below:\n\n<p align = \"center\">\n  <img src = \"Screenshots/BoxScoreTable.PNG\" width = \"600\" alt = \"Box Score Table\">\n</p>\n\n## Player Buttons:\n\nThere are some additional features in the **Roster Management** window. When a player's button is clicked (who is on the court), a new window will open that allows the user to select from all possible statistics. Pressing on any statistic will increment that statistic for the given player by the correct amount. This window is shown below:\n\n<p align = \"center\">\n  <img src = \"Screenshots/AddStatPanel.PNG\" width = \"600\" alt = \"Add Statistic to Player\">\n</p>\n\nSome statistics increment several other statistics when they are incremented:\n1. Made FG\n2. Made 3pt FG\n3. OREB/DREB\n\nFor example, if a Made 3pt FG is selected, then **Points, Made FG, FGA, Made 3pt FG, and 3PA** are all incremented as well.\n\nThe program incorporates several features to make statistical tracking quicker during actual game play. Hotkeys are shown in square brackets for quicker statistic entries and several statistics have built in functionality to avoid redundancy. **Made Shots**, **Missed Shots** and **Blocks** will ask the user if the shot was **Assisted**, **Offensive Rebounded**, or **Defensive Rebounded** respectively. \n\n**For Example:** If the statistic is a missed shot, then the user is asked if the shot was rebounded by a teammate, if that is the case, then the user will be asked who got the reboudn. These windows are shown below:\n\nDid a team member get the Offensive Rebound? | Who got the Rebound?\n:---: | :---:\n<img src = \"Screenshots/OffensiveRebounded.PNG\" width = \"410\" alt = \"Offensive Rebound Question Frame\"> | <img src = \"Screenshots/WhoGotTheOffensiveRebound.PNG\" width = \"410\" alt = \"Who got the offensive rebound?\">\n\n\nIf the **Roster Management** window has a bench panel on it, then clicking on one of the players on the bench will open a window that will ask the user to substitute the player that was clicked into the game. The window is shown below:\n\n<p align = \"center\">\n  <img src = \"Screenshots/PlayerSubstitution.PNG\" width = \"400\" alt = \"Player Substitution Window\">\n</p>\n\n## Undo Button:\n\nIf there was a mistake when entering a statistic, it is possible to undo this mistake with the **Undo** Button. When clicked, a window will open with a bar at the top allowing the user to chose from any period of the game. If that period has not yet started, then those buttons will be disabled. When the desired period button is clicked, a list of buttons will appear each showing the statistics entered in chronological order. Clicking on a statistic will close the window and remove that statistic. The window is shown below:\n\n<p align = \"center\">\n  <img src = \"Screenshots/UndoButton.PNG\" width = \"400\" alt = \"Undo Button Window\">\n</p>\n"
 },
 {
  "repo": "msmykowski/basketball-game-matter.js",
  "language": "JavaScript",
  "readme_contents": ""
 },
 {
  "repo": "acheng1230/Web_Scraping_NBA_Data",
  "language": "Jupyter Notebook",
  "readme_contents": "![Fastbreak Data](https://cdn-images-1.medium.com/max/313/1*gEWgrI7ceDHQLVaPdGbP4g@2x.png)\n\n# Web Scraping NBA Data Using Selenium\n\n#### By Alex Cheng\n\n### Description\n\nThis web scraper is a tool to scrape data from [Basketball-Reference.com](www.basketball-reference.com). Using the web scaper module, you can go to a specific player's page on [Basketball-Reference.com](www.basketball-reference.com) and scrape the career statistics from these tables:\n\n- `Per Game`\n- `Per 100 Possessions`\n- `Advanced`\n- `Shooting`\n\n#### Example\n\nSource: [Russell Westbrook](http://www.basketball-reference.com/players/w/westbru01.html)\n\n![](https://cdn-images-1.medium.com/max/1200/1*6tDALTxPy0bQZUVSIvn7rA.png)\n\n### Data\n\n[Basketball-Reference.com](www.basketball-reference.com)\n\n### More Information\n\n[SeleniumHQ](http://www.seleniumhq.org/)"
 },
 {
  "repo": "isovector/time2jam",
  "language": "Haskell",
  "readme_contents": "# Time2Jam\n\n### Dedication\n\n> \u201cIf you make every game a life and death proposition, you\u2019re going to have\n> problems. For one thing, you\u2019ll be dead a lot.\u201d\n>\n> \u2013- Dean Smith\n\n\n\n## Art Tools\n\n* https://github.com/khalim19/gimp-plugin-export-layers\n\n"
 },
 {
  "repo": "ddayto21/NBA-Time-Series-Forecasts",
  "language": "HTML",
  "readme_contents": "# Repository Overview\nThe first section of this application involves scraping NBA statistics from Basketball Reference in order to train a machine learning model we can use to generate time-series predictions for each player, in regards to their chance of winning the MVP for a certain year. \n\n## Data Collection\nWe use Python to scrape data from Basketball Reference, a website that provides basketball statistics and player data from the past 30 years in the NBA. \n\n- Source: https://www.basketball-reference.com/\n- Datasets: MVP Data, Player Statistics, Team Statistics\n\n### Scraping MVP Data\nThe following block of code scrapes MVP data from the past 30 years (1991 to 2022), then creates an HTML file for each year. After we are finished webscraping, we will extract the relevant data from each HTML file, and convert those files into individual CSV files.\n\n```python\ndef Scrape_MVP():   \n    years = range(1991, 2022)\n    url_start = \"https://www.basketball-reference.com/awards/awards_{}.html\"\n    for year in years:\n        url = url_start.format(year)\n        data = requests.get(url)        \n        with open(\"mvp/{}.html\".format(year), \"w+\") as f:\n            f.write(data.text)\n```\n\n### Scraping NBA Player Statistics\nThe webpages that contain NBA player statistics contain dynamic content, making it a challenge to scrape all of the data we need in order to train our machine learning model. However, we address this problem using a Selenium chrome driver in order to loa  block of code scrapes MVP data from the past 30 years (1991 to 2022), then creates an HTML file for each year. After we are finished webscraping, we will extract the relevant data from each HTML file, and convert those files into individual CSV files.\n\n### Preparing Datasets - CSV Files\nAfter collecting the MVP data from the past 30 years, we iterate every year in our 'mvp' folder and apply the following operations to each HTML file:\n- Create an empty array that will be used to store multiple dataframes\n- Extract relevant information from each HTML file, specifying the 'id' attribute of the table we need.\n- Use Pandas to read the HTML table using Pandas as a dataframe\n- Create a CSV file in the \"mvp\" folder using the .to_csv() operation \n\n```python\ndef Parse_MVP(years):\n    dfs = []\n    years = range(1991, 2022)\n    for year in years:\n        with open(f\"mvp/{year}.html\") as f:\n            page = f.read()\n        soup = BeautifulSoup(page, \"html.parser\")\n        soup.find('tr', class_=\"over_header\").decompose()\n        mvp_table = soup.find(id=\"mvp\")\n        mvp_df = pd.read_html(str(mvp_table))[0]\n        mvp_df[\"Year\"] = year        \n        dfs.append(mvp_df)\n    mvps = pd.concat(dfs)\n    mvps.to_csv(\"mvp/mvps.csv\")    \n```\n\n- Avoid overloading website by sending too many requests\n- Google Chrome Version: 102.0.5.005.61\n- Selenium Chrome Driver: https://chromedriver.storage.googleapis.com/index.html?path=102.0.5005.61/\n \n Run in Command-Line:\n >>> xattr -d com.apple.quarantine /Users/danieldayto/Downloads/chromedriver\n\n## Machine Learning\nScikit-learn is a free software machine learning library for the Python programming language. It features various classification, regression and clustering algorithms. \n\n\n### Ridge Regression\nRidge regression is a regularization technique that performs L2 regularization. It modifies the loss function by adding the penalty equivalent to the square of the magnitude of coefficients.\n\n```python\n  train = stats[stats[\"Year\"] < 2021]\n  test = stats[stats[\"Year\"] == 2021]\n  reg = Ridge(alpha=.1)\n  reg.fit(train[predictors], train[\"Share\"])\n  predictions = reg.predict(test[predictors])\n  predictions = pd.DataFrame(predictions, columns=[\"Predictions\"], index=test.index)\n```"
 },
 {
  "repo": "kshvmdn/nba-player-tracker",
  "language": "JavaScript",
  "readme_contents": "## nba-player-tracker\n\n> Track and compare player stats, news, and game logs.\n\n<a href='https://play.google.com/store/apps/details?id=com.kshvmdn.nbaplayertracker' target=\"_blank\"><img alt='Get it on Google Play' src='https://play.google.com/intl/en_us/badges/images/generic/en_badge_web_generic.png' width='20%'/></a>\n\n### Screenshots\n\n<img src=\"./art/screenshots/1.png\" width=\"150\"> <img src=\"./art/screenshots/2.png\" width=\"150\"> <img src=\"./art/screenshots/3.png\" width=\"150\"> <img src=\"./art/screenshots/4.png\" width=\"150\"> <img src=\"./art/screenshots/5.png\" width=\"150\"> <img src=\"./art/screenshots/6.png\" width=\"150\"> <img src=\"./art/screenshots/7.png\" width=\"150\">\n\n### Installation\n\n  - Be sure to have [React Native](https://facebook.github.io/react-native/docs/getting-started.html#installing-dependencies) installed, as well as [Android Studio & AVD](https://facebook.github.io/react-native/docs/getting-started.html#android-development-environment).\n\n  - Clone the repo., install dependenices.\n\n    ```sh\n    $ git clone https://github.com/kshvmdn/nba-player-tracker.git\n    $ cd nba-player-tracker/NBAPlayerTracker\n    $ yarn install\n    ```\n\n### Usage\n\n  - I strongly suggest using this with an actual device if you can, but an emulator should work just as well.\n\n  - With a device connected (or emulator running):\n\n    ```sh\n    $ react-native run-android\n    ```\n\n### Contribute\n\nHave a request or find a bug? This project is completely open source, feel free to open an issue or submit a pull request.\n\nThe project uses a variety of [tools](./data) (incl. [Python 3](https://www.python.org/download/releases/3.0/), [jq](https://stedolan.github.io/jq/) and [cairosvg](http://cairosvg.org/)) to aggregate logo images and player data. This data is served from a public domain (http://nba.kshvmdn.com) and used within the application. If you're interested in local development, you generally _shouldn't_ need to worry about this stuff though.\n\n"
 },
 {
  "repo": "nuno-faria/HeadToHead",
  "language": "C#",
  "readme_contents": "![logo](ReadmeResources/logo.png)\r\n\r\nAn arcade 1v1 football(soccer)/volley/basket game (single or local multiplayer). It can be played online [here](https://nuno-faria.itch.io/headtohead). It was made using the Unity game engine.\r\n\r\n\r\n\r\n## Gameplay\r\n\r\nThe gameplay is straightforward: two players try to get the ball on the opposition's goal; the winner of the game is the one that reaches the goal limit first (if a limit was set).\r\n\r\n\r\n### Demo\r\n\r\n![demo](ReadmeResources/demo.gif)\r\n\r\n\r\n### Game Modes\r\n\r\nThere are three game modes available: football, volley and basket.\r\n\r\n#### Football\r\n\r\n<img src=\"ReadmeResources/football.png\" width=\"60%\">\r\n\r\n#### Volley\r\n\r\n<img src=\"ReadmeResources/volley.png\" width=\"60%\">\r\n\r\nThere is a 7 second limit for how long the ball can be in the same area.\r\nIf the limit is exceeded, the other player scores a point.\r\n\r\n#### Basket\r\n\r\n<img src=\"ReadmeResources/basket.png\" width=\"60%\">\r\n\r\n\r\n### Abilities\r\n\r\nThe game offers three different abilities:\r\n\r\n- **Kick** - kick the ball, with a specific power and direction;\r\n<img src=\"ReadmeResources/kick.gif\" width=\"40%\" style=\"margin-bottom: 20px\">\r\n\r\n- **Lift** - lift the ball (90 degrees angle);\r\n<img src=\"ReadmeResources/lift.gif\" width=\"40%\" style=\"margin-bottom: 20px\">\r\n\r\n- **Stop** - stop the ball;\r\n<img src=\"ReadmeResources/stop.gif\" width=\"40%\" style=\"margin-bottom: 20px\">\r\n\r\n\r\n## Controls\r\n\r\nBoth the keyboard and the controller are supported, although the controller is recommended way to play. The input used can be changed in the 'Controls' menu.\r\n\r\n<img src=\"ReadmeResources/controls.png\" width=\"40%\">\r\n\r\nThe menu can be navigated both with the mouse and the keyboard/controller. The goal limit can be changed selecting the input field and entering the number or using the vertical keys (W,S,up,down,LB).\r\n\r\n\r\n## AI\r\n\r\nThe player's AI was implemented using the concept of **decision trees**. But instead of writing the functions and all the ifs/elses needed, it was used a YAML file to specify the tree. This file is then parsed by a Python script, that converts it to C# code. With this, the AI can be written faster (less boilerplate code) and it's easier to understand/manage.\r\n\r\n### Specification\r\n\r\nA specification file has three main fields:\r\n- **include** - other specification files to include (relative path);\r\n- **expressions** - aliases for expressions to be used in the nodes' specification;\r\n- **nodes** - specification of the tree:\r\n    - **info** - what the node does (to serve as documentation);\r\n    - **action** - instructions to be executed before the decision is made (ex: setting variables);\r\n    - **decision** - logic expression;\r\n    - **yes** - nodes to execute (can be multiple) when the decision is true (or there is no decision);\r\n    - **no** - nodes to execute (can be multiple) when the decision is false.\r\n\r\n\r\nThere are two dictionaries that must be provided to the tree:\r\n- `state` - the state of the game;\r\n- `data` - (empty) dictionary to set variables (to be used to pass the result and/or to use internally).\r\n\r\nFor example, let's say we want to create an AI that just follows the ball. The state provides us with the ball and the player's position. We could implement this AI like so (this could be simplified even further by having an action like `data[\"move\"] = state[\"playerPosX\"] - state[\"ballPosX\"] < 0 ? 1 : -1`, it's just a simple illustrative example):\r\n\r\n```yaml\r\nexpressions:\r\n    # the expression is not needed, it's used just to make the code more readable\r\n    left_of_ball: state[\"playerPosX\"] < state[\"ballPosX\"]\r\n\r\nnodes:\r\n    ROOT:\r\n        info: Is the player to the left of the ball?\r\n        decision: left_of_ball # or state[\"playerPosX\"] < state[\"ballPosX\"]\r\n        yes: MOVE_RIGHT; SPRINT\r\n        no: MOVE_LEFT; SPRINT\r\n\r\n    MOVE_LEFT: data[\"move\"] = -1\r\n    # same as\r\n    # MOVE_LEFT:\r\n    #    action: data[\"move\"] = -1\r\n\r\n    MOVE_RIGHT: data[\"move\"] = 1\r\n\r\n    # the SPRINT node could be a ROOT action, since it's simple and always used\r\n    SPRINT: data[\"sprint\"] = 1\r\n```\r\n\r\nThis results in the following tree (using the Assets/Scripts/AI/plot_specification.py script):\r\n\r\n<img src=\"ReadmeResources/sample_tree.png\" width=\"100%\">\r\n\r\n#### Trees Used\r\n\r\n##### Football\r\n\r\n\r\n<img src=\"Assets/Scripts/AI/plots/FootballTree.png\" width=\"100%\">\r\n\r\n##### Volley\r\n\r\n<img src=\"Assets/Scripts/AI/plots/VolleyTree.png\" width=\"100%\">\r\n\r\n##### Basket\r\n\r\n<img src=\"Assets/Scripts/AI/plots/BasketTree.png\" width=\"100%\">\r\n\r\n\r\n### Execution\r\n\r\nThe structure is converted in instructions that adds the nodes to a tree, starting with the leaves and ending with the root. In runtime, the game `state` is passed to the tree, as well as the `data` dictionary. The result is provided using the reference to the `data`."
 },
 {
  "repo": "jprustv/Basketball-Game",
  "language": "C#",
  "readme_contents": "# Basketball Game\n## Unity3D + PSMove\n\n<img src=\"http://i.imgur.com/AUke9EP.jpg\"></img>\n\n### Synopsis ####\nThis is an in-development Basketball game, where the player will be able to play using the Playstation PSMove Controller.\n\n### Installation ###\nYou can run this source code by downloading, and opening the main scene on any 5.x + version of the Unity3D engine.\n\n### API Reference ###\nWe are using the <a href=\"https://github.com/thp/psmoveapi\">libpsmoveapi API</a> and the <a href=\"https://github.com/CopenhagenGameCollective/UniMove\">UniMove Package</a> for Unity.\n\n### Contributors ###\nThis project was created by me, <a href=\"https://br.linkedin.com/in/jpvernizzi\">Jonathan Prust Vernizzi</a> and my friends <a href=\"https://github.com/guvitorino\">Gustavo Vitorino</a> and Gustavo Mendes.\n\n\n\n\n"
 },
 {
  "repo": "szacho/basketball-detection",
  "language": "Jupyter Notebook",
  "readme_contents": "# Basketball detection \n**Authors:** Micha\u0142 Szachniewicz [(szacho)](https://github.com/szacho), Anna Klimiuk [(Stardust87)](https://github.com/Stardust87)\n\nThis project automates the process of extracting a basketball trajectory from a video. It saves results and creates a pretty visualization:\n\n![visualization of detected trajectory](https://raw.githubusercontent.com/szacho/basketball-detection/main/assets/output_123629AA.gif)\n![visualization of detected trajectory 2](https://raw.githubusercontent.com/szacho/basketball-detection/main/assets/output_test_163955AA.gif)\n\nThe algorithm used for object detection is YOLO, forked from https://github.com/ultralytics/yolov5. It has been trained on a custom dataset of privately recorded videos. The whole process is automated and it can handle a directory of videos one by one. \n\n## Evaluation of the model\nThe test set was created from two sceneries. Scenery *0* was present in a training set, but different recordings were used. Scenery *1* was completely new to the model. Every video was split into 4 categories:\n- *in_hands* - the ball is in or near the hands of a player\n- *in_air* - the ball was thrown and is in the air until it hits something\n- *near_basket* - the ball is close to the basket or even going through one (it can be occluded by a rim etc.)\n- *bouncing* - the ball is bouncing on the ground \n\nFurthermore, an additional category *custom* was added and it consisted of different images from the internet to assure that the model can generalize well.  We evaluated the performance of the model on every scenery and category by intersection over union and distance error between (x_true, y_true) and (x_pred, y_pred) in pixel space.\n\nFull results are available in the *yolo_analysis* notebook. In short: predictions are very accurate -- the average error in the distance for unseen scenery was equal to only 1.3px! That is comparable to human error.\n\nBelow are grouped per scenery and per category boxplots of IoU and distance error on the test set. \n\n![boxplot grouped by scenery](https://raw.githubusercontent.com/szacho/basketball-detection/main/assets/boxplots_scenery.png)\n![boxplot grouped by category](https://raw.githubusercontent.com/szacho/basketball-detection/main/assets/boxplots_category.png)\n"
 },
 {
  "repo": "hinkelman/Shiny-Scorekeeper",
  "language": "R",
  "readme_contents": "![Shiny Scorekeeper](docs/img/screenshot.png)\n\n# Shiny Scorekeeper\n\nShiny Scorekeeper is a basketball scorekeeper app built with the Shiny web framework for R. The app is a hobby project that I took on as a learning exercise. It is likely only of interest to a small subset of people building Shiny apps. \n\n### Installation\n\n1. Install [R](https://www.r-project.org)\n2. Install [RStudio Desktop](https://www.rstudio.com/products/rstudio/download/)\n3. Clone or download this repository\n4. Open Shiny-Scorekeeper.Rproj\n5. Run the following code to install required packages (only needs to be done once)\n```\ninstall.packages(c(\"shiny\", \"shinydashboard\", \"shinyWidgets\", \"shinyjs\", \"DT\", \"dplyr\", \"tidyr\"), dependencies = TRUE)\n```\n6. Run the following code to launch the app\n```\nshiny::runApp()\n```\n\nInstructions for how to use the app are found [here](https://github.com/hinkelman/Shiny-Scorekeeper/blob/master/instructions.md). Background information about the app is found [here](https://github.com/hinkelman/Shiny-Scorekeeper/blob/master/about.md). \n\n\n"
 },
 {
  "repo": "ahnuchen/cxk-basketball",
  "language": "JavaScript",
  "readme_contents": "# cxk\u8d85\u8fdc\u8ddd\u79bb\u6295\u7bee\u6e38\u620f\n## \u5728\u7ebf\u9884\u89c8\uff1a<a href=\"https://xue.ccy1994.top/demos/cxk-basketball/\" target=\"_blank\">cxk\u6295\u7bee</a>"
 },
 {
  "repo": "andreweatherman/toRvik",
  "language": "HTML",
  "readme_contents": "---\noutput: github_document\n---\n\n<!-- README.md is generated from README.Rmd. Please edit that file -->\n\n# toRvik <a href=\"https://www.torvik.dev/\"><img src=\"man/figures/logo.png\" align=\"right\" width=\"20%\" min-width=\"100px\"/></a>\n\n<!-- badges: start -->\n\n[![CRAN status](https://www.r-pkg.org/badges/version/toRvik)](https://CRAN.R-project.org/package=toRvik) [![Lifecycle: stable](https://img.shields.io/badge/lifecycle-stable-brightgreen.svg)](https://lifecycle.r-lib.org/articles/stages.html#stable) [![R-CMD-check](https://github.com/andreweatherman/toRvik/workflows/R-CMD-check/badge.svg)](https://github.com/andreweatherman/toRvik/actions) [![Codecov test coverage](https://codecov.io/gh/andreweatherman/toRvik/branch/main/graph/badge.svg)](https://app.codecov.io/gh/andreweatherman/toRvik?branch=main)\n\n<!-- badges: end -->\n\n[**`toRvik`**](https://github.com/andreweatherman/toRvik) is an R package for working with and scraping men's college basketball.\n\nThere are a lot of college basketball data out there, but most are difficult to pull and clean or they are behind a paywall. With `toRvik`, you have immediate access to some of the most detailed and extensive college basketball statistics publicly available -- all returned in tidy format with just a single line of code! Best of all, no subscription is required to access the data.\\\n\\\nMost of `toRvik`'s functions are powered by a dedicated Fast API framework -- delivering data at rapid speeds with dependable up-times.\n\nAs of version 1.0.3, the package includes nearly 30 functions for pulling player and team data, game results, advanced metric splits, play-by-play shooting, and more. Leveraging the same data and models as [Barttorvik](https://www.barttorvik.com), the package now offers game and tournament predictor functions, allowing you to simulate games between any pair of teams on any date at any venue back to the 2014-15 season. `toRvik` also offers extensive transfer histories for over 5,000 players back to the 2011-12 season and detailed player recruiting rankings for over 6,000 players back to 2007-08.\n\n## Package Installation\n\n```{r, include=FALSE}\nlibrary(dplyr)\nlibrary(toRvik)\n```\n\n\nInstall the released version of `toRvik` from CRAN:\n\n```{r, eval=FALSE}\ninstall.packages(\"toRvik\")\n```\n\nOr install the development version from GitHub with:\n\n```{r, eval=FALSE}\nif (!requireNamespace('devtools', quietly = TRUE)){\n  install.packages('devtools')\n}\ndevtools::install_github(\"andreweatherman/toRvik\") \n```\n\n## Package Highlights\n\n-   Detailed game-by-game + season-long statistics by player and split\n-   Extensive transfer + recruiting histories\n-   Custom game and tournament predictions\n-   Shooting splits + shares by team\n-   Game box scores for all D-1 games\n-   Team + conference four factors by split\n-   Game-by-game four factors\n-   NCAA committee-style team sheets\n-   D-1 head coaching changes\n\n## Basic Uses\n\nAll `toRvik` functions fall into one of six categories:\n\n-   **Rating**, pulling and slicing T-Rank + four factor data\n-   **Player**, pulling player data and histories\n-   **Team**, pulling team statistics and histories\n-   **Game**, pulling game-by-game data and schedules\n-   **Tournament**, pulling raw and adjusted tournament performance\n-   **Miscellaneous**\n\n### Pull T-Rank ratings:\n\nCalling `bart_ratings` will return the current T-Rank ranks and ratings.\n\n```{r}\nhead(bart_ratings())\n```\n\n### Pull team statistics\n\nCalling `bart_factors` will return four factor stats on a number of splits. To filter by home games, set venue to 'home.'\n\n```{r}\nhead(bart_factors(location='H'))\n```\n\nCalling `bart_team_box` will return team box totals and per-game averages by game type. To find how Duke performed during the month of March:\n\n```{r}\nbart_team_box(team='Duke', split='month') |>\n  dplyr::filter(month=='March')\n```\n\n### Pull player statistics\n\nCalling `bart_player_season` will return detailed season-long player stats. To pull per-game averages for Duke players:\n\n```{r}\nhead(bart_player_season(team='Duke', stat='box'))\n```\n\nCalling `bart_player_game` will return detailed game-by-game player stats. To pull advance splits by game for Duke players:\n\n```{r}\nhead(bart_player_game(team='Duke', stat='advanced'))\n```\n\n### Pull transfer histories\n\nCalling `transfer_portal` will return transfer histories with matching player IDs to join with other statistics. To find all players who transferred to Duke:\n\n```{r}\nhead(transfer_portal(to='Duke'))\n```\n\n### Pull recruiting rankings\n\nCalling `player_recruiting_rankings` will return extensive recruit histories with matching player IDs. To find all 5-star players who played high school basketball in North Carolina:\n\n```{r}\nhead(player_recruiting_rankings(stars=5, state='NC'))\n```\n\n### Predict games and tournaments\n\nCalling `bart_game_predictions` will returns expected points, possessions, and win percentage for a given game on a given date. To simulate North Carolina at Duke in mid-January:\n\n```{r}\nbart_game_prediction('Duke', 'North Carolina', '20220113', location = 'H')\n```\n\nCalling `bart_tournament_prediction` will simulate a single-elimination tournament between a group of teams on a given date. To simulate the 2022 Final Four 25 times:\n\n```{r}\nbart_tournament_prediction(teams = c('Duke', 'North Carolina', 'Kansas', 'Villanova'), '20220402', sims = 25, seed = 10)\n```\n\n## Documentation\n\nFor more information on the package and its functions, please see the [**`toRvik`** reference](https://www.torvik.dev/).\n\n## The Author\n\n[Andrew Weatherman](https://www.linkedin.com/in/andrewweatherman/)\n\n<a href=\"https://twitter.com/andreweatherman\" target=\"blank\"><img src=\"https://img.shields.io/twitter/follow/andreweatherman?color=blue&amp;label=%40andreweatherman&amp;logo=twitter&amp;style=for-the-badge\" alt=\"@andreweatherman\"/></a>\n"
 },
 {
  "repo": "berrysauce/basketball",
  "language": "HTML",
  "readme_contents": "<h1 align=\"center\">\ud83c\udfc0 Basketball</h1>\n<p align=\"center\">A self-hosted Dribbble Playbook alternative</p>\n<p align=\"center\">\n  <img alt=\"GitHub repo size\" src=\"https://img.shields.io/github/repo-size/berrysauce/basketball?label=size\">\n  <img alt=\"Minimum Python version\" src=\"https://img.shields.io/badge/python-%5E3.8-blue\">\n  <img alt=\"GitHub release (latest by date)\" src=\"https://img.shields.io/github/v/release/berrysauce/basketball?label=stable%20release\">\n  <img alt=\"GitHub last commit (main)\" src=\"https://img.shields.io/github/last-commit/berrysauce/basketball/main\">\n  <img alt=\"CodeQL (main)\" src=\"https://github.com/berrysauce/basketball/actions/workflows/codeql-analysis.yml/badge.svg?branch=main\">\n</p>\n\n## What is Basketball?\nBasketball is a self-hosted alternative to the quite pricey Dribbble Playbook. Playbook is a portfolio site which automatically displays your Dribbble Shots, and that's what Basketball can also do! It's easier than manually uploading all your shots to a portfolio site, and also it just looks cool to have a custom portfolio with a custom domain. Of course, Basketball is hackable, so you can create your own themes or do more with the Dribbble API.\n\n\n\n## How does it look?\n> Live preview available at https://demo.usebasketball.com\n<img src=\"https://usebasketball.com/assets/img/img1.png\" alt=\"Basketball Screenshot\">\n\n| <img alt=\"GitHub repo size\" src=\"https://ph-files.imgix.net/5cb93a7f-1e52-468a-b656-893b31260bee.png?auto=format&auto=compress&codec=mozjpeg&cs=strip&w=635&h=380&fit=max&bg=0fff&dpr=1\"> | <img alt=\"Minimum Python version\" src=\"https://ph-files.imgix.net/11392a58-0d27-4b79-b547-77e1fb22129b.png?auto=format&auto=compress&codec=mozjpeg&cs=strip&w=635&h=380&fit=max&bg=0fff&dpr=1\"> | <img alt=\"GitHub release (latest by date)\" src=\"https://ph-files.imgix.net/827df69c-0be1-4d99-8e33-164591ff717f.png?auto=format&auto=compress&codec=mozjpeg&cs=strip&w=635&h=380&fit=max&bg=0fff&dpr=1\"> |\n|---|---|---|\n\n## Is there a full list of features?\nYes there is:\n\n- [x] \ud83d\udd17 **Custom domain support** (Connect your own domain, like example.com)\n- [x] \u26a1\ufe0f **Fast loading times** (Thanks to Dribbble request caching with custom cache expiry)\n- [x] \ud83d\udcf8 **Dribbble synchronization** (Basketball automatically fetches your Dribbble posts)\n- [x] \u2728 **Great design** (Basketball's design is minimalistic yet functional)\n- [x] \u2699\ufe0f **Extensible** (Make your own themes and add functionality)\n- [x] \ud83d\udce6 **Easy to install** (Basketball is super easy to install and doesn't need to be maintained)\n- [x] \ud83d\udcb8 **Save money** (You can host Basketball for free when using Deta - Don't pay $12 /month for Dribbble's Playbook!)\n- [x] \ud83c\udfc0 **Open Source** (Basketball is maintained by contributors on GitHub - The source code is public)\n\n<hr>\n<p align=\"center\">\n  What are you waiting for?<br>\n  <a href=\"https://go.deta.dev/deploy?repo=https://github.com/berrysauce/basketball\"><img alt=\"Deploy to Deta\" src=\"https://button.deta.dev/1/svg\"></a>\n</p>\n<hr>\n\n## Credit\nMade possible by [FastAPI](https://fastapi.tiangolo.com/). Thanks for making such an awesome framework \u2764\ufe0f\n\n## License\nBasketball: A self-hosted Dribbble Playbook alternative\nCopyright (C) 2022 berrysauce (Paul Haedrich)\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nFor legal questions, contact legal[at]berrysauce[dot]me.\n\n<a href=\"https://deta.sh/?ref=basketball\" target=\"_blank\"><img src=\"https://cdn.berrysauce.me/assets/deta-sponsor-banner.jpg\" alt=\"Sponsored by Deta\"></a>\n"
 },
 {
  "repo": "aistairc/rotowire-modified",
  "language": "Python",
  "readme_contents": "# Rotowire-modified\n\nScript for generating the rotowire-modified dataset for Learning to Select, Track, and Generate for Data-to-Text (Iso et al; ACL 2019).\n\n## Data\nThis script generates the dataset \"rotowire-modified\" by extracting required data from the original rotowire dataset. \nWe are not allowed to distribute the dataset itself due to the copyright issue, so we distribute only the script. \nThe new dataset generated by this script is almost the same as, but not identical to the dataset used in the paper (Iso et al; ACL 2019). \nACL's dataset contains 14 games that do not appear in the original rotowire and have to be obtained from https://www.rotowire.com and https://www.nba.com. \nFurther information of the 14 games is listed in additional_games.txt.\nIn addition, there are a number of slight differences in data records due to the update of the original pages. \nFor empirical comparison by other researchers, we also distribute the experimental result on this new rotowire-modified dataset at the [sports-reporter](https://github.com/aistairc/sports-reporter) repo.\n\n#### Statistic of the datasets\n|Data|Train|Validation|Test|Total|\n|----|-----|----------|----|-----|\n|rotowire (Wiseman'2017)|3398|727|728|4853|\n|rotowire-modified (Iso et al; ACL 2019)|2714|534|500|3748|\n|rotowire-modified (This repo)|2705|532|497|3734|\n\n## Format\n\nSince this script simply removed duplicate records from the original dataset, the data format is the same as that of the original rotowire dataset.\nPlease refer to [boxscore-data](https://github.com/harvardnlp/boxscore-data) repo.\n\n## Usage\n\nYou can download the original dataset (Wiseman'2017) from the [boxscore-data](https://github.com/harvardnlp/boxscore-data) repo, \nand then, transform it as bellow.\nThe script will create a directory \"rotowire-modified\", which contains train.json, valid.json, and test.json files. \n~~~\nDATA_PATH=<path to the locally downloaded original dataset>\npython script/generate_rotowire_modified.py --src_dir $DATA_PATH\n~~~\n\n\n"
 },
 {
  "repo": "SravB/NBA-Predictive-Analytics",
  "language": "Python",
  "readme_contents": "# NBA Predictive Analytics\n\nAs Fall 2017 Exam Season reaches its climax, I did what any other university student would do - make a side project! \n\nFrom any NBA match, you can tell that many basketball players have a unique style of play. We have players like Stephen Curry and Kyrie Irving dominating the 3-point range or like LeBron James and Russell Westbrook who devastate their opponents near the rim. \n\nBut avid NBA fans know these characteristics out of instinct after watching the NBA for weeks, months, maybe even years. I wanted to find a concrete method of arriving at these conclusions. This led me to create a Python program which analyzes any current NBA player's gameplay to find which areas of the court they have most shooting success and the probability of shooting from certain spots. With this analysis, it can allow coaches and players to know their opponents gameplay and can show them which areas of the court to prioritize their defense.\n\n![Screenshot](images/Jordan.jpg)\n\n\n\n## How It Works\n\nUsing datasets from Kaggle (formatted with Pandas), we can use Matplotlib to illustrate our data analysis. This dataset includes every shot taken in the 2016-2017 Regular Season so any player who played a game during this season can be analyzed. By incorporating machine learning through Python's Scikit-Learn (using a K-Nearest Neighbours Classifier) we can also simulate a player's shooting from every position on the court. \n\nI incorporated multiple methods of analyzing shooting habits so let's take a look!\n\n\n\n## Stephen Curry Shooting Analysis\n\n![Screenshot](images/Stephen_Curry_Shots.jpg)\n\nLet's start off with the two time MVP from the Golden State Warriors, Stephen Curry. In this plot, the green dots represent scoring shots while the red dots represent missed shots. The black dots represent spots that Curry is most likely to shoot from. The size of the dots represent the relative probability of Curry shooting from that position and the darkness of the dot illustrates his shot accuracy from that spot (with darker shades representing a higher accuracy).\n\nHowever, the black dots are a bit hard to see because of the green and red dots, so let's simplify the plot.\n\n\n\n![Screenshot](images/Stephen_Curry_Shots2.jpg)\n\nSo how did we do? Our plot says that Curry is most likely to shoot from very close range (at layup distance) or from the 3-point range. Any NBA fans can verify the accuracy of this prediction since Curry is known for his 3-point shooting and his ability to rush past defenders for layups.\n\nFor our next analysis let's change things up and take a look at another player - Curry's teammate, Kevin Durant.\n\n\n\n## Kevin Durant Shooting Analysis\n\n![Screenshot](images/Kevin_Durant_Shots.jpg)\n\nIn this analysis we are incorporating machine learning by using a Decision Tree to simulate Kevin Durant's shooting throughout the court. With this analysis we have a more uniform distribution for our analysis so we can predict how Durant will shoot based on his past shooting habits. In this plot, the green dots represent scoring shots and the red dots represent missed shots. \n\nFrom this analysis we can determine that Durant is more dominant on the right side of the court (which is the case for right-handed players). He also is predicted to score with high consistency throughout the key and around the 3-point perimeter - another prediction which is confirmed by his known playing style.  \n\nBut we can take this one step further, let's compare Kevin Durant's shooting to the average NBA player.\n\n\n\n![Screenshot](images/Kevin_Durant_Shots2.jpg)\n\nSimilar to how we simulated Kevin Durant's shooting with machine learning, we can use the data for all NBA players in the 2016-2017 Regular Season to find the shooting habits of the average NBA player. In this plot, green dots represent shots that Durant made but the NBA average player missed (meaning Durant is above average shooting at this positions). In contrast, the red dots represent shots that Durant missed but the average player scored (meaning Durant is below average at these spots). Additionally, the yellow dots represent neutral areas where both Durant and the average player scored or missed. \n\nFrom the plot, we can see that Durant is above average in the majority of the court. He dominates shooting throughout the key and around the 3-point range - once again aligning with his known game style. \n\n\n\n## How Did We Do?\n\nOverall, our predictive models can predict NBA players' shooting habits with a high degree of effectiveness as seen from the analysis on Curry and Durant. We can determine exactly which areas a player is above average at shooting and which they are below. We can also predict where they are most likely to shoot from and their accuracy from these positions. With this data, NBA coaches can plan defense strategies with much higher precision. \n\nTry it out with your favourite NBA players!\n\n![Screenshot](images/all_stars.jpg)\n"
 },
 {
  "repo": "rintaromasuda/bleaguer",
  "language": "R",
  "readme_contents": ""
 },
 {
  "repo": "solmos/rfeb",
  "language": "R",
  "readme_contents": "---\noutput: github_document\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n# rfeb\n\nrfeb provides a set of tools for scraping and analyzing basketball data from Spain's FEB leagues.\n\n\n## Installation\n\n```{r, eval = FALSE}\n# install.packages(\"devtools\")\ndevtools::install_github(\"solmos/rfeb\")\n```\n\n## Examples\n\n```{r}\nlibrary(rfeb)\nlibrary(ggplot2)\ngame_ids <- 2010208:2010216\nshots <- extract_shots(game_ids)\nplot_shotchart(shots, color = made) +\n    facet_wrap(~game_id)\n```\n"
 },
 {
  "repo": "jharrilim/balldontlie-client",
  "language": "TypeScript",
  "readme_contents": "# balldontlie-client\n\n[![Build Status]](https://dev.azure.com/josephharrisonlim/josephharrisonlim/_build/latest?definitionId=2&branchName=master)\n[![NPM Badge]](https://www.npmjs.com/package/@jharrilim/balldontlie-client)\n[![NPM Downloads]](https://www.npmjs.com/package/@jharrilim/balldontlie-client)\n\nJavascript client for [Balldontlie](https://github.com/ynnadkrap/balldontlie). \n\nAPI Docs for this client can be found [here](https://jharrilim.github.io/balldontlie-client/classes/_api_v1_index_.v1client.html).\n\n![Rasheed Wallace - Ball Dont Lie](https://media.giphy.com/media/Jm2hosNfVeNjy/giphy.gif)\n\n\n\n## API Implementation Status\n\n|                                                            API | Status |\n| -------------------------------------------------------------: | :----- |\n|                 [Players](https://www.balldontlie.io/#players) | \u2705      |\n|                     [Teams](https://www.balldontlie.io/#teams) | \u2705      |\n|                     [Games](https://www.balldontlie.io/#games) | \u2705      |\n|                     [Stats](https://www.balldontlie.io/#stats) | \u2705      |\n| [Season Averages](https://www.balldontlie.io/#season-averages) | \u2705      |\n\n## Install\n\n```sh\nnpm i @jharrilim/balldontlie-client\n```\n\n## Usage\n\nThis library uses async generators for handling pagination. You may use this in conjunction with\n[for-await-of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of)\nto make multiple API requests. You may also request for one page at a time by awaiting `.next()`.\n\nAxios is used interally, and axios configuration options may be passed into `.v1()` if needed.\n\n> Warning: This API is rate limited. You may only make up to [60 requests per minute](http://www.balldontlie.io/#getting-started).\n\n### Example with for-await-of\n\n```js\nimport { BallDontLie } from '@jharrilim/balldontlie-client';\n\nvoid async function main() {\n    const v1Client = BallDontLie.v1();\n    for await(const teams of v1Client.teams(0)) {\n        // paginate through all the teams\n        for(const team of teams) {\n            console.log(team.full_name);\n        }\n    }\n}().catch(console.error);\n```\n\n### Example with .next()\n\n```js\nimport { BallDontLie } from '@jharrilim/balldontlie-client';\n\nvoid async function main() {\n    const v1Client = BallDontLie.v1();\n    const teamGenerator = v1Client.teams(0, 10); // starting from 0, 10 per page\n    \n    const teams1 = (await teamGenerator.next()).value; // get the first 10 teams\n    teams1.forEach(team => console.log(team.full_name));\n\n    const teams2 = (await teamGenerator.next()).value; // get the next 10 teams after the first 10\n    teams2.forEach(team => console.log(team.full_name));\n\n}().catch(console.error);\n```\n\nMore examples can be found in the [tests](./test/integration/api.test.ts).\n\n[Build Status]: https://dev.azure.com/josephharrisonlim/josephharrisonlim/_apis/build/status/jharrilim.balldontlie-client?branchName=master\n\n[NPM Badge]: https://img.shields.io/npm/v/@jharrilim/balldontlie-client.svg\n[NPM Downloads]: https://img.shields.io/npm/dt/@jharrilim/balldontlie-client.svg\n"
 },
 {
  "repo": "LightBuzz/Kinect-Basketball-Spinner",
  "language": "C#",
  "readme_contents": "# kinect-basketball-spinner\nBasketball Spinner using Kinect v2 and Unity3D. Augmented Reality App.\n"
 },
 {
  "repo": "ramvibhakar/basketball-analytics",
  "language": "Python",
  "readme_contents": "# Basketball-Analytics\nAnalytics with NBA player salaries with data from [basketball-reference.com](http://www.basketball-reference.com). This is part of [IS5126: Hands on with Business Analytics](http://www.comp.nus.edu.sg/~phantq/IS5126/)\n\n## Requirements\n\n* Python 2.7\n* BeautifulSoup 4.0\n* SQLite 3\n\n## Step 1: Scrapping the data\n\nTo scrap the data from [basketball-reference.com](http://www.basketball-reference.com) run the following scripts\n\n*  **py player_crawler.py** : To extract the information about the players. The starting URL is [http://www.basketball-reference.com/players/](http://www.basketball-reference.com/players/). The output is generated as csv files **data/player\\_basic\\_profile_info.csv** and **data/player\\_stats.csv** \n*  **py team_crawler.py** : To extract the team information and player salaries. The starting URL is [http://www.basketball-reference.com/teams/](http://www.basketball-reference.com/teams/). The output csv files are **data/player\\_salary.csv**, **data/team\\_basic\\_profile\\_info.csv** and **data/player\\_stats.csv** "
 },
 {
  "repo": "jbrudvik/yahoo-fantasy-basketball",
  "language": "Python",
  "readme_contents": "# Scripts for Yahoo fantasy basketball\n\n## Install dependencies\n\n    $ virtualenv venv\n    $ . venv/bin/activate\n    $ pip install -r requirements.txt\n\n## Activate virtualenv (if not already done)\n\n    $ . venv/bin/activate\n\n## Authentication\n\nSet Yahoo credentials in the `YAHOO_USERNAME` and `YAHOO_PASSWORD` [environment variables](http://en.wikipedia.org/wiki/Environment_variable#Assignment).\n\n## Start active players\n\n    $ python start_active_players.py <league_id> <team_id> <date (default: today, format: YYYY-MM-DD)> <num_days (default: 1, max: 100)>\n\n### Usage examples with output\n\nStart active players for the next week:\n\n    $ python start_active_players.py 847591 8 8\n    Superteams League - Lamarc Gasolridge's Team:\n\n    - Sat, Feb 07, 2015: Started active players\n        - Alternate: Gerald Henderson (Cha - SG,SF) [@Phi]\n    - Sun, Feb 08, 2015: Started active players\n    - Mon, Feb 09, 2015: Started active players\n    - Tue, Feb 10, 2015: Started active players\n    - Wed, Feb 11, 2015: Started active players\n    - Thu, Feb 12, 2015: Started active players\n    - Fri, Feb 13, 2015: Started active players\n    - Sat, Feb 14, 2015: Started active players\n\nStart active players for the week starting with March 3, 2015:\n\n    $ python start_active_players.py 847591 8 2015-03-03 7\n    Superteams League - Lamarc Gasolridge's Team:\n\n    - Tue, Mar 03, 2015: Started active players\n    - Wed, Mar 04, 2015: Started active players\n    - Thu, Mar 05, 2015: Started active players\n    - Fri, Mar 06, 2015: Started active players\n        - Alternate: DeMarcus Cousins (Sac - PF,C) [@Orl]\n        - Alternate: Dennis Schroder (Atl - PG) [Cle]\n    - Sat, Mar 07, 2015: Started active players\n    - Sun, Mar 08, 2015: Started active players\n    - Mon, Mar 09, 2015: Started active players\n\n## Project matchup\n\n    $ python project_matchup.py <league_id> <team_id>\n"
 },
 {
  "repo": "dhatch/schneiderman",
  "language": "Python",
  "readme_contents": "# schneiderman\nPredictive analytics for daily fantasy basketball.\n\n# Installation\n\n`pip install -r requirements.txt`\n\n# Project Structure\n\n## Executables\n\n## Code\n\nThe python code is contained within the `schneiderman` module.\n\nAny executable files (python or otherwise) are within `bin/`.\n\n### `schneiderman/`:\n\n- `scrape/` Various data scrapers.\n- `models/` Persistent storage for scraped and processed data.\n- `regresssion/` The linear modeling tools used on the gathered data to predict weekly scores.\n- `lineup/` Randomized algorithm used in generating lineups from predicted weekly scores.\n\n## Data\n\n- `static` Static data.  Supports analysis, changes infrequently, fetched manually.\n- `data/` The user local data folder.  Used for temporary storage of pipeline\n  stage data.  *Ignored* by git.\n    - `data/clean` Output data from `bin/clean`.\n    - `data/scrape` Output data from `bin/scrape`\n    - `data/games` Output data from `bin/load_games`\n    - `data/train` Output data from `bin/train`\n    - `data/predict` Output data from `bin/predict`\n    - `data/lineup` Output data from `bin/lineups`\n"
 },
 {
  "repo": "hkair/Basketball-Action-Recognition",
  "language": "Jupyter Notebook",
  "readme_contents": "# Basketball-Action-Recognition\nSpatio-Temporal Classification of \ud83c\udfc0 Basketball Actions using 3D-CNN Models trained on the SpaceJam Dataset.\n\n**LeBron shooting over Deandre Jordan**\n![Lebron Shoots](examples/lebron_shoots.gif)\n\n**Live Example**\n![](examples/live_basketball.gif)\n\n## Motivation\nUtilizing the SpaceJam Basketball Action Dataset [Repo](https://github.com/simonefrancia/SpaceJam), I aim to create a model that takes a video of a basketball game to classify a given action for each of the players tracked with a bounding box. There are two essential parts for this program: R(2+1)D Model (Can be any 3D CNN architecture) and the player tracking. The deep learning framework used to train the network was PyTorch and the machine used to train the model was the Nvidia RTX 3060ti GPU.\n\nThis is a demo video from the SpaceJam Repo.\n\n[Demo Video](https://www.youtube.com/watch?v=PEziTgHx4cA)\n\n## Action/Video Classification\nA pretrained baseline R(2+1)D CNN (pretrained on kinetics-400 dataset) from [torchvision.models](https://pytorch.org/vision/0.8/models.html) is used and further fine-tuned on the SpaceJam dataset. Any 3D CNN architecture can be used, but for this project it was decided that the R(2+1)D was a perfect balance in terms of number of parameters and overall model performance. It was also shown in the [paper](https://arxiv.org/pdf/1711.11248.pdf) that factorizing 3D convolutional filters into separate spatial and temporal dimensions, alongside residual learning yields significant gains in accuracy. The training was done at [train.py](https://github.com/hkair/Basketball-Action-Recognition/blob/master/train.py).\n\n### Dataset\nAs mentioned above, the SpaceJam Basketball Action Dataset was used to train the R(2+1)D CNN model for video/action classification of basketball actions. The [Repo](https://github.com/simonefrancia/SpaceJam) contains two datasets (clips->.mp4 files and joints -> .npy files) of basketball single-player actions. The size of the two final annotated datasets is about 32,560 examples. Custom dataloaders were used for the basketball dataset in the [dataset.py](https://github.com/hkair/Basketball-Action-Recognition/blob/master/dataset.py).\n\n![alt text](https://raw.githubusercontent.com/simonefrancia/SpaceJam/master/.github/histogram.png)\n\n#### Augmentations\nAfter reading the thesis [Classificazione di Azioni Cestistiche mediante Tecniche di Deep Learning](https://www.researchgate.net/publication/330534530_Classificazione_di_Azioni_Cestistiche_mediante_Tecniche_di_Deep_Learning), (Written by Simone Francia) it was determined that the poorest classes with examples less than 2000 examples were augmented. Dribble, Ball in Hand, Pass, Block, Pick and Shoot were among the classes that were augmented. Augmentations were applied by running the script [augment_videos.py](https://github.com/hkair/Basketball-Action-Recognition/blob/master/augment_videos.py) and saved in a given output directory. Translation and Rotation were the only augmentations applied. After applying the augmentations the dataset has 49,901 examples.\n\n##### Rotate\n![rotate](examples/0000000_flipped_rotate_330.gif)\n##### Translate\n![translate](examples/0000000_translate_32_0.gif)\n\n### Training\nThe training was done at [train.py](https://github.com/hkair/Basketball-Action-Recognition/blob/master/train.py). The training was run for 25 epochs and with a batch size of 8. The model was trained with the classic 70/20/10 split. Where 70% of the data was use to train and 20% was used to validate the model. And, the rest of the 10% was used in the inference to test the final model. It was found that a learning rate of 0.0001 was better than a learning rate of 0.001.\n\n#### Checkpointing\nBoth history and checkpointing is done after every epoch with [checkpoints.py](https://github.com/hkair/Basketball-Action-Recognition/blob/master/utils/checkpoints.py) in the utils directory.\n\n### Validation and Evaluation\nThe final model was a R(2+1)D CNN trained on the additional augmented examples. For validation on the test set, the model at epoch 19 was used as it was the best performing model in terms of validation f1-score and accuracy. The model performs significantly better than the reported 73% in the thesis [Classificazione di Azioni Cestistiche mediante Tecniche di Deep Learning](https://www.researchgate.net/publication/330534530_Classificazione_di_Azioni_Cestistiche_mediante_Tecniche_di_Deep_Learning), acheiving 85% for both validation accuracy and test accuracy. The confusion matrix was attained using the [inference.py](https://github.com/hkair/Basketball-Action-Recognition/blob/master/inference.py) code. Further analysis on predictions and errors is done on [error_analysis.ipynb](https://github.com/hkair/Basketball-Action-Recognition/blob/master/error_analysis.ipynb) notebook.\n\n#### Confusion Matrix \n\n**- 0: Block, 1: Pass, 2: Run, 3: Dribble, 4: Shoot, 5: Ball in Hand, 6: Defence, 7: Pick, 8: No Action, 9: Walk**\n\n##### Test on Training and Validation Set\n![training and validation](examples/epoch_19_checkpoint.png)\n\n##### Testing on the 10% of the leftover data.\n![confusion matrix](examples/confusion_matrix.png)\n\n#### Inference Examples - Error Analysis\n\n|   State   |   Shooting   |   Dribble   |   Pass   |   Defence   |   Pick   |   Run   |   Walk   |   Block   |   No Action   |\n:----------:|:------------:|:-----------:|:--------:|:-----------:|:--------:|:-------:|:--------:|:---------:|:--------------:\nTrue | ![true_shoot](examples/true_shoot.gif) | ![true_dribbble](examples/true_dribble.gif) | ![true_pass](examples/true_pass.gif) | ![true_defence](examples/true_defence.gif) | ![true_pick](examples/true_pick.gif) | ![true_run](examples/true_run.gif) | ![true_walk](examples/true_walk.gif) | ![true_block](examples/true_block.gif) | ![true_no_action](examples/true_no_action.gif)\nFalse | ![false_shoot](examples/false_shoot.gif) | ![false_dribbble](examples/false_dribble.gif) | ![false_pass](examples/false_pass.gif) | ![false_defence](examples/false_defence.gif) | ![false_pick](examples/false_pick.gif) | ![false_run](examples/false_run.gif) | ![false_walk](examples/false_walk.gif) | ![false_block](examples/false_block.gif) | ![false_no_action](examples/false_no_action.gif)\n\n## Player Tracking \nAll player tracking is done in [main.py](https://github.com/hkair/Basketball-Action-Recognition/blob/master/main.py). Players are tracked by manually selecting the ROI using the opencv TrackerCSRT_create() tracker. In theory, an unlimited amount of people or players can be tracked, but this will significantly increase the compute time. In the example above only 2 players, LeBron James (Offence) & Deandre Jordan (Defence) were tracked. A simple example of player tracking is available in [Basketball-Player-Tracker](https://github.com/hkair/Basketball-Player-Tracker).\n\n## Output\nAfter extracting the bounding boxes from TrackerCSRT_create(), a cropped clip of 16 frames is used to classify the actions. The 16 frame length clip is determined by the vid_stride (Set to 8 in the example video above) which is set in the cropWindows() function in [main.py](https://github.com/hkair/Basketball-Action-Recognition/blob/master/main.py). Within the cropped window time frame the action is displayed on top of the bounding boxes to show the action of the tracked player.\n\n## Future Additions\n- Separate augmented examples from validation and only in training.\n- Utilize better player tracking methods. \n- Restrict Box size to 176x128 (Or with similar Aspect Ratio), so resize of image is not applied.\n- Fully automate player tracking. Potentially using YOLO or any other Object Detection Models.\n- Play around with hyperparameters such as learning rates, batch size, layers frozen, etc.\n- Try various 3D-CNN Architectures or sequential models such as CONV-LSTMs.\n- Improve model to +90% accuracy and f1-score.\n\nNote:\n- The Model does not perform well with off-ball actions for some reason. Often times, the defender is classified to be dribbling when they are not. This might be because of the similarity of the stance while dribbling the ball and playing defence. For both movements, players generally lower their torsos forward in order to lower their centre of gravity.\n\n## Credits\nMajor thanks to [Simone Francia](https://github.com/simonefrancia) for the basketball action dataset and paper on action classification with 3D-CNNs. \n"
 },
 {
  "repo": "3DSage/GBA-Audio-Basketball-Game",
  "language": "C",
  "readme_contents": "# GBA-Audio-Basketball-Game\n\nI found a way to play audio clips on the Game Boy Advance.\nThis has several thing to help teach you how to make a simple game. \nCheck out my YouTube channel too! www.youtube.com/c/3dsage\n"
 },
 {
  "repo": "My-Machine-Learning-Projects-CT/College-Basketball-Final-Four-Prediction",
  "language": "Jupyter Notebook",
  "readme_contents": "# Project: College Basketball Final Four Prediction\r\n\r\n## Project Goal\r\nAnalyze basketball metrics of different college basketball teams and predict which teams can make it to the NCAA Final Four.\r\n\r\n## Dataset Information: \r\nThis dataset is about the performance of basketball teams. The cbb.csv data set includes performance data about five seasons of 354 basketball teams. \r\n\r\n## Tech Stack\r\nPython<br />\r\nJupyter Notebook<br />\r\nNumPy<br />\r\nPandas<br />\r\nMatplotlib<br />\r\nScikit-learn<br />\r\nIBM Watson Studio<br />\r\n\r\n## Featured ML Algorithms\r\nK-Nearest Neighbors (KNN)<br />\r\nDecision Tree<br />\r\nSupport Vector Machines (SVM)<br /> \r\nLogistic Regression<br />\r\n\r\n## Things to Note\r\nThis Jupyter Notebook is also hosted on [IBM Watson Studio](https://dataplatform.cloud.ibm.com/analytics/notebooks/v2/967af07f-20f4-441d-9b77-1c71ad1fb54a/view?access_token=19ad526b688b2b7d02e93fa615a35124fc97a6fcb28ccf8385244b451868409e)\r\n\r\n"
 },
 {
  "repo": "arnav-kr/BasketBall",
  "language": "C#",
  "readme_contents": "<p align=\"center\"><img src=\"https://basketball.projects.thearnav.dev/assets/appLogo.png\" alt=\"Logo\" height=\"150\" width=\"150\"></p>\n\n# Basket & Ball\n\nThe Game of Baskets And basketballs. Collect balls and earn points. Play and Share with your friends.\n\n![Platform](https://img.shields.io/badge/Platform%20Supported-Android-blue?style=for-the-badge)\n![Platform](https://img.shields.io/badge/Platform%20Supported-Windows-blue?style=for-the-badge)\n![Platform](https://img.shields.io/badge/Platform%20Supported-Web-blue?style=for-the-badge)\n\n![Release](https://img.shields.io/github/v/release/arnav-kr/BasketBall?color=blue&label=Release%20Version&style=for-the-badge)\n[![Issues](https://img.shields.io/github/issues/arnav-kr/BasketBall?style=for-the-badge)](https://github.com/arnav-kr/BasketBall/issues)\n[![Forks](https://img.shields.io/github/forks/arnav-kr/BasketBall?style=for-the-badge)](https://github.com/arnav-kr/BasketBall/network)\n[![Stars](https://img.shields.io/github/stars/arnav-kr/BasketBall?style=for-the-badge)](https://github.com/arnav-kr/BasketBall/stargazers)\n\n## Website: https://basketball.projects.thearnav.dev/\n\n<p>\u200b</p>\n\n<p align=\"center\"><a href=\"https://basketball.projects.thearnav.dev/\" alt\"Download Now\"><img src=\"https://user-images.githubusercontent.com/72879799/162629829-173df35f-5e50-4f56-afb4-b2b069bf9e46.png\" alt=\"Logo\" height=\"70\"></a></p>\n"
 },
 {
  "repo": "Tw1ddle/samcodes-gamecircle",
  "language": "Haxe",
  "readme_contents": "Haxe GameCircle\n==============\nUnofficial Amazon GameCircle 2.x leaderboards and achievements support for OpenFL Android target.\n\n*Deprecation note. GameCircle has been [deprecated](https://developer.amazon.com/docs/gamecircle/faq-gamecircle.html), and so are these Haxe support bindings.*\n\n### Features ###\n\nSupports:\n* GameCircle sign-in.\n* Showing leaderboards and achievement popover screens.\n* Submitting leaderboard scores, unlocking and updating achievement progress.\n* React to player login or logout with a custom listener.\n\nDoesn't Support:\n* iOS target.\n* Whispersync.\n* Fetching leaderboard/achievement/player data from the Amazon servers.\n\nIf there is something you would like adding let me know. Pull requests welcomed too! Here it is in action:\n\n![Screenshot of it working](https://github.com/Tw1ddle/samcodes-gamecircle/blob/master/screenshots/screen1.png?raw=true \"Screenshot\")\n\n### Install ###\n\n```bash\nhaxelib install samcodes-gamecircle\n```\n\n### Usage ###\n\nProject.xml\n\n```xml\n<haxelib name=\"samcodes-gamecircle\" />\n\n<!-- Add your GameCircle API key. Refer to the Amazon documentation:\nhttps://developer.amazon.com/public/apis/engage/gamecircle/docs/create-a-gamecircle-configuration#Generate API Keys\n-->\n<template path=\"android/debug_gamecircleapikey.txt\" rename=\"assets/api_key.txt\" if=\"debug\" />\n<template path=\"android/release_gamecircleapikey.txt\" rename=\"assets/api_key.txt\" unless=\"debug\" />\n```\n\nExample usage:\n\n```haxe\n// Your wrapper of the GameCircle leaderboards functionality\nclass GameCircleLeaderboards {\n\tpublic static var get(default, never):GameCircleLeaderboards = new GameCircleLeaderboards();\n\t\n\tprivate var leaderboards:GameCircle;\n\t\n\tprivate function new() {\n\t\tleaderboards = new GameCircle();\n\t}\n\t\n\tpublic function setListener(listener:GameCircleListener):Void {\n\t\tleaderboards.setListener(listener);\n\t}\n\t\n\tpublic function openLeaderboard(id:String):Void {\n\t\tleaderboards.games.showLeaderboard(id);\n\t}\n\t\n\tpublic function openAchievements():Void {\n\t\tleaderboards.games.showAchievements();\n\t}\n\t\n\tpublic function isSignedIn():Bool {\n\t\treturn leaderboards.games.isSignedIn();\n\t}\n\t\n\tpublic function signIn():Void {\n\t\tleaderboards.games.showSignInPage();\n\t}\n\t\n\tpublic function submitScore(id:String, score:Int):Void {\n\t\tleaderboards.games.submitScore(id, score, \"\");\n\t}\n\t\n\tpublic function updateAchievementProgress(id:String, percent:Float):Void {\n\t\tleaderboards.games.updateAchievement(id, percent, \"\");\n\t}\n\t\n\tpublic function setPopUpLocation(location:PopUpLocation):Void {\n\t\tleaderboards.games.setPopUpLocation(location);\n\t}\n}\n\n// Your game\nclass MyGame {\n\tpublic var leaderboards:GameCircleLeaderboards;\n\t\n\tpublic function create():Void {\n\t\tleaderboards = GameCircleLeaderboards.get;\n\t\tleaderboards.setPopUpLocation(PopUpLocation.TOP_CENTER);\n\t\t\n\t\tif (!leaderboards.isSignedIn()) {\n\t\t\tleaderboards.signIn();\n\t\t}\n\t}\n\t\n\tpublic function onLevelEnd() {\n  \t\tif (leaderboards.isSignedIn()) {\n  \t\t\t// Create your leaderboards and achievements and set their ids through the Amazon developer console\n  \t\t\tleaderboards.submitScore(\"my_leaderboard_id\", 1000);\n\t\t\tleaderboards.updateAchievementProgress(\"my_achievement_id\", 50); // 50% complete\n\t\t\tleaderboards.updateAchievementProgress(\"my_other_achievement_id\", 100); // Unlocks/100% complete\n  \t\t}\n\t}\n}\n```\n"
 },
 {
  "repo": "scottwillson/play-by-play",
  "language": "Ruby",
  "readme_contents": "Play by Play\n============\nRuby basketball simulation. Partial recreation of a BASIC college basketball simulation I wrote in the 1980s. Inspired by discussion about [The Hot Hand in Basketball: On the Misperception of Random Sequences](http://bit.ly/1PkU2Qh): \"Kobe Bryant shooting a basketball is essentially flipping a coin.\" Given seasons of NBA data, I can model those coin flips.\n\nThe project reads [NBA play-by-play game files](/) and builds a probability distribution. It uses the probability distribution and a model to simulate games. There is also a web app to browse imported data.\n\nGame simulation is very simple. There is a \"home\" team and a \"visitor\" team, each with exactly equal chances, league-average to make field goals, block shots, etc. There isn't even the concept of players, yet! Even this simulation is interesting: given two perfectly-matched teams, ~10% of games are 20-point blowouts. Maybe there's [more than coin-flipping](http://www.sloansportsconference.com/?p=11265) going on? An entire simulated season routinely produces at least one 50-win team and one 33-win team.\n\nInstall\n=======\n * On OS X, just run bin/setup\n * [Install Ruby](https://www.ruby-lang.org/en/documentation/installation/), [node.js](https://nodejs.org/en/download/)\n * Postgres\n * `gem install bundler`\n * `bundle`\n * `cd web; npm install; npm run dist:dev`\n\nTest\n====\n`rspec`\n\nSimulate a single game\n======================\n`rake`\n\nThis Rake task also populates the probability distribution from three sample games in spec/data.\n\nDevelopment\n===========\n`rake spec:fast` runs all specs, skipping any that rely on the database or web server\n\n`rake import:game` imports a single game. Use `rake parse:game` to check parsing logic without saving the results.\n\nSee the Rakefile for options and other Rake tasks.\n\n`rackup` to run the web app and browse http://localhost:9292/ to view import errors.\n\nDatabase: `psql play_by_play_development`\n\nTech stack\n==========\nRuby 2.5 with minimal gems\n[Sinatra](http://www.sinatrarb.com/) for web API\n[React](https://facebook.github.io/react/) for frontend web UI\nPostgres\n\nModel\n=====\nThe model and simulation borrows concepts from [finite-state machines](https://en.wikipedia.org/wiki/Finite-state_machine), [Markov chains](https://en.wikipedia.org/wiki/Markov_chain), Redux and [Monte Carlo](https://en.wikipedia.org/wiki/Monte_Carlo_method) simulations.\n\nGames are modeled as state machines. State is described by a small number of attributes (is the ball in play?, which team has the ball?, what period is it?, are free throws pending?). Each state has a set number of valid transitions to other states. Each transition also has a probability.\n\nTaken together, a game is a chain of game states. This is, more or less, a Markov model and a Markov chain. See Markov below.\n\nTerminology\n-----------\nEach game state is a Ruby [Possession](lib/play_by_play/model/possession.rb) class. Each transition between Possessions is a [Play](lib/play_by_play/model/play.rb). A [Simulation::Game](lib/play_by_play/simulation/game.rb) is a chain of Possessions.\n\nA Game is a store of immutable Possessions and Plays. Each Play is a state transition that produces a new Possession. A new Possession can only be created by a Play.\n\nIn state machines, plays could also be considered actions or events. \"Possession\" is  nebulous in common usage. Here, it could also have been called a \"game\" or \"game state\".\n\nThe probability distribution is the probability that a transition (Play) will occur given a game state (Possession). It could also be called a transition matrix or a conditional probability distribution.\n\nOnly some transitions are valid from certain states. For example, steals can never occur when free throes are pending. All states are valid from each other. They are all \"accessible\" Markov states.\n\nIn some places, it is easier to express plays and possessions with symbols. For example: { ball_in_play: true, team: :home } => [ :turnover ] => { ball_in_play: true, team: :visitor }\n\nRedux\n-----\nWhile not strictly a Redux app, the simulation uses the reducer, state, and action ideas from [Redux](http://redux.js.org/docs/basics/Reducers.html). Possessions are immutable Redux states, Plays are actions, and the [GamePlay](lib/play_by_play/model/game_play.rb) play! method is a reducer. GamePlay.play!(possession, play) => possession is equivalent to Redux's function(previousState, action) => newState.\n\nA Play is a record of an \"applied\" action, either from a real-world sample or a simulation. The Play key (:rebound, team: :defense) is the Redux action.\n\nThis is a handy way to model basketball games that leads to concise, testable model code.\n\nSystem\n------\nThe larger system accepts play-by-play JSON files as input and outputs Simulation::Game.\nInput: historical state transitions. Output: chain of states\n\nModules:\n * Sample. Import JSON files from real world games.\n * Model. Abstract model of basketball game.\n * Simulation. Use probabilities from Sample to run Model to simulation a game or season of games.\n * View. Display Simulation output as text.\n * Web. Web UI.\n\nMany modules have duplicate names (Game, Team), but these duplicates are different, though related concepts. Mixing those concepts makes for confusing code.\n\nStates\n------\nPossessions are game states at a point in time. Game state can be considered essentially infinite. Every combination of players, time remaining, score, fouls, etc. can produce different transition probabilities.\n\nHowever, to model what is _possible_ is much more finite. The model uses just:\n * ball in play?\n * team has possession?\n * pending free throws?\n * pending technical free throws?\n\nTaken in order, the states are exclusive, so game state can be reduced in [PlayMatrix](lib/play_by_play/model/play_matrix.rb) to just: technical free throws?, free throws?, team?, ball in play?, any time remaining?.\n\nGames could be modeled as several concurrent game state machines. One each for possession, FTs, etc., but that isn't helpful in practice.\n\nSimulation\n----------\nThe simulation is inspired by the Monte Carlo method, but isn't really a Monte Carlo simulation. It could be considered a Monte Carlo generator run once. (And could be run multiple times to be a true Monte Carlo simulation).\n\nThe RandomPlayGenerator is a \"roulette wheel\". The model determines which slots (plays) are on the wheel. Historical sample data determines the width of those slots. Similar to [log5](https://web.archive.org/web/20140123014747/http://www.chancesis.com/2010/10/03/the-origins-of-log5).\n\nMarkov\n------\nMarkov models and chains help build a game model, but they are tools for predicting the probability of future states, not for simulations. This simulation care about the *type* of transition for counting stats like points, field goals made, assists, and more.\n\nOur model also has multiple transitions from two states. Typical Markov examples only have one transition between two states, because only the probability matters. Matrices also aren't very useful here, though there are good applications for [baseball strategy](http://www.pankin.com/markov/theory.htm).\n\nOld game\n========\nThe old BASIC game had a text box score and a scrolling play-by-log. Similar to what you might hear on the radio or view on [nba.com](http://stats.nba.com/game/#!/20160108/playbyplay/#qtr1). \"Coaches\" playing the game could sub players in and out, assign position, defensive assignments, and choose basic strategy (offense, defense, rebound, steals, set picks, pass).\n\nFirst steps on the new simulation are to build a solid game model and feed it good data. With that in place, it should be possible to make a playable simulation.\n"
 },
 {
  "repo": "Ed-Zh/Basketball-Analytics",
  "language": "Jupyter Notebook",
  "readme_contents": "# Basketball-Analytics\nInvestigated quantitatively the optimal body mechanics for shooting basketball by employing pose estimation and sports theory.\n\n\n\n## Background \n\nIf there is one thing that I wish I had learned earlier in my ten years of experience in basketball, it is shot mechanics. \n\n\n\nToo often, when training for better performance, beginners put too much emphasis on the drills: \"I should complete 80 behind-the-back dribbles, 100 free throws, 50 three-pointers, etc.\" Focusing on the drills usually means very little attention paid to their body mechanics during the moves. How much should I bend my knees? Should I contract my glute first or quad first? \n\n\n\nAs a wise man once observed, \"form before strength,\" which means one should priortize body mechanics over brute force in most skill-intensive sports.  The attention to details and mind-muscle connection is often what sets professional players apart from street hoopers. But how can we learn from those superstars? What's the secret magic that helps them optimize their forms to achieve longer shooting range and higher explosiveness?\n\n\n\nThough there are rule-of-thumbs about shooting forms, little quantitative work has been done regarding the underlying body mechanics. By employing pose estimation and sports theory, this project aims to unscramble to myth behind optimal shot mechanics in basketball. \n\n\n\n## Research Question\n\nDifferent key muscle groups are activated at different time intervals when a player shoots. \n\n**What's the optimal timing and order for activating these muscle groups?** \n\n\n\n## Model Methodology\n\n1. Use the *mediapipe* API to obtain the locations of each joint (e.g. ankle, knee, hip)\n2. Connect neighbouring joints to model limbs (e.g. connecting hip and knee gives the line representing thigh)\n3. Compute the angular acceleration at each joint using the limbs stemming from it (e.g. the rotational movement thigh and lower leg determines the angular acceleration at knee)\n4. Estimate the activation of a specific muscle group using angular acceleration at the corresponding joint (e.g. glute corresponds to hip). This follows from the angular part of Newton's Second Law (angular acceleration proportional to torque)\n\n## Addtional Functionality\n\n1. Produce a graph describing the player's shot mechanics as muslce activation vs. time\n2. Evaluate the efficiency of the shot as a score \n3. Give suggestions on how to improve the shot mechanics\n\nNote: the speed and acceleration are in relative terms, scaled for comparision across players\n\n\n\n## Codes\n\nThe *AnalyzerModule.py* file wraps an *Analyzer* class, the instance of which can be used to analyze a video of a player shooting. \n\nThe *pipeline.py* file applies *Analyzer* to produce i) a slow-motion video tracking (at real time) the activation of each muscle groups and ii) a graph illustrating the graph. \n\nThe *Scoring.py* file implements a scoring system to evaluate the efficiency of the player's shot mechanics.\n\n\n\n## Demo\n\nSee the Demo folder for demo videos and graphs.\n\n"
 },
 {
  "repo": "jnebrera/Amateur_Basketball_Broadcasting",
  "language": "Python",
  "readme_contents": "# Amateur Basketball Broadcasting Camera System\n\n![](./images/Title.jpg \"Cover\")\n\n# First software releases as of April 27th 2021\n\nYou can see the design and consideration in the [about section](https://github.com/jnebrera/Amateur_Basketball_Broadcasting/blob/main/about.md).\n\nIn this past week, both Sameer and me have found some time to finally work on the coding aspects of the project. In the repository you have both scripts.\n\nBear in mind this software needs a video recorded with a panoramic camera and some tunning for the specific playground.\n\nMy script is a refined version of Sameer's, but I have left out by now the recording of the video itself, thus the script is good to play with and see if the algorithmic ideas are right or not.\n\n# The background\n\nIn both cases we create a static background by extracting some random frames from the video and averaging them. This system should be improved so it is able to work in a streaming fashion instead of loading from a recorded video. Also, it is hard to get a static image with no players in such facilities, specially if you consider changing lighting conditions and different baskets utilized, so I have discarded such option. This is an area of improvement.\n\n# Motion detection\n\nMotion detection is done every nth frame by substracting the background image. From there, only bigger than a limit area are considered. To those, the feet position is computed and seen if it is withing the playground area.\n\nIn the case of Sameer's, the center of gravity is computed just with the center of the feet. In my version, both the position and the area are considered. My alternative makes biggher rectangles weight more in the positioning decision (for example, multiple players detected as just one box, have significant weight as the area is big).\n\nMy version implements the idea of the [Automatic Camera Selection](https://hal.archives-ouvertes.fr/hal-01835033/file/automatic-camera-selection.pdf) paper.\n\nIn my version, I believe there is a better way to compute it, working directly with arrays.\n\nAlso, might be interesting to apply some Non Maximum Substraction (NMS) to reduce false positives, but reality is, as those tend to happen were there are players, I'm not worried by this factor.\n\nStill, the possibility of shapes entering the field while their feet are outside of it and not being related to the game (like coach or public) is clearly affecting the results if their body is partially boxed. In many cases the bounding box doesn't cover the whole body and it is within the field (for example, the upper torso). It would be very important to reduce this effect to the maximum by proper camera placement (in our lab unfortunately the bodies of the coaches clearly enter the field many times).\n\nI just purchased a Jetson Nano 2GB Dev Kit. Hope that by using a more advanced motion detection mechanism while still being able to sustain the framerate, will improve this situation.\n\n# The panning (April 29th)\n\nI just commited a better panning system solving mostly the jitter in the movement. Now is quite smooth and in case of necessity, jumps forward faster. For sure it could be further improved by someone with PTZ management experience, but for now is ok.\n\n# Async video capture\n\nThe last improvement to my version has been to make the reading of the video async. Performance improved from 16 to 24 FPS which is a huge boost. For the background computation I don't use it, but I'm not worried by now about that is it is only computed once in its current form and is outside of the hot code path.\n\nWhat is more important, the same [VidGear](https://abhitronix.github.io/vidgear/v0.2.1-stable/) library provides methods to read video from a RTSP server (most CCTV cameras have one) and to send the final video to Youtube or Facebook using RTMP (which is the ultimate goal of the project). \n\nSo not only we have improved performance, but found the way to easily support source and sink video streams !!!\n\n# Discarded ideas\n\nOne way to speed up the center of gravity computation was to do it directly over the mask image. It does work, producing good results but surprisingly is slower that finding the contours and iterating over them, thus we discarded it.\n\nAlso, instead of using an static background image we tried to detect movement by substracting a prior frame. We tried both frame -1 and frame -skip but the results were too erratic (the problem of the coach being partially detected as within the field).\n\n# Async video writing and others (As of May 4th)\n\nThanks to the help of VidGear's main developer, now the code is able to record the resulting video. In my Mac I get around 12FPS when eanbling recording. He also made some little improvements on other parts of the code.\n\n# Things to do (We would love some help here)\n\n1. Improve rectangle selection by applying some Non Maximum Suppresion\n2. Improve center of mass calculation by using matrix operations after NMS\n3. Apply bitmask to remove areas where we know movement detection is undesirable and could lead to many false positives (public)\n4. Apply some correction to area computation based on the distance to the camera as further rectangles weight less than closer ones\n5. Port code to Nvidia Jetson Nano 2GB\n6. Port code to Adlink Vizi-AI board based on Intel Myriad X\n\n\n"
 },
 {
  "repo": "yankovai/College-Basketball-Prediction",
  "language": "Python",
  "readme_contents": "College-Basketball-Prediction\n=============================\n\nPredict the outcome when division I college basketball teams compete. \n\t\n\t- Uses historical data from the 2003-2013 NCAA DI basketball seasons for\n\t  training data.\n\n\t- Considers each team's strength of schedule, abilitiy of opponents, \n\t  field goal percentage, defensive rebounds, fouls, three point percentage,\n\t  assists, turnovers, free throw shooting, ..., etc.  \n\t \n\t- Uses difference in teams' cummultive statistics to learn which features\n\t  are most important in predicting game outcomes using a logistic regression\n\t  model. \n\n\n'cbb_acquire_team_data.py' \n--------------------------\n\nThe purpose of this python script is to obtain descriptive statistics of team \nperformance from www.sports-reference.com/cbb. Team descriptive statistics are,\nfor example, points per game, free throw percentegae, and the number of blocks\nper game. Within this file is a class called 'CBB_Acquire_Team_Data', which \naccepts a span of years and a csv file name as input. This class scrapes the \nsports-reference site for descriptive statistics for every division I college\nbasketball team that played within the span of years input by the user. The \nresults are output to the specified csv file. Each descriptive statistic will be\nused as a feature in a predictive model.   \n\n'cbb_acquire_game_data.py' \n--------------------------\n\nScrapes www.sports-reference.com/cbb for the results of all games played during \nsome span of seasons. The user inputs the starting season, an end season, and a \ncsv file name to a class named 'CBB_Acquire_Scoring_Data'. For every game in the\nspan of season the class will output the two teams playing and points scored by\neach team to the specified csv file. The results are used to form the\nclassification in a predictive model.\n\n'make_ratings_dict.py'\n---------------------\n\nUsing the description in http://www.pro-football-reference.com/blog/?p=37, this\npython script calculates several additional team descriptive statistics based on\nthe results from 'cbb_acquire_game_data.py'. Specifically, the statistics output\nby the class 'Strength_of_Sched' summarize the degree of competion faced be each\nteam during a given season. The feature 'strength of schedule' accounts for how\neasy or difficult a team's schedule has been. The feature 'margin' summarizes  a\nteam's margin of victory against all of its opponents. Finally, the feature\n'rating' combines both the margin and strength of schedule of each team to\nproduce a coarse metric that can be used to rank all the teams. All the features\nare output to a dictionary named 'ratings_dict.cpickle'.\n\n'prepare_for_ml.py'\n-------------------\n\nConverts the raw data from www.sports-reference.com/cbb to data structures that\nthe libraries in scikit-learn can easily use. The ultimate result of the\nroutines included in this file is a numpy array containing all the features and\ngame results for the historical game data. The structure 'features.npz' contains\nthis output and is eventually loaded by scikit-learn. The features have not been\nnormalized. \n\n'make_predictions.py'\n---------------------\n\nUses scikit-learn and historical game results to make predictions on college \nbasketball games that have not been played. A logistic regression predictive \nmodel is created. Using this model, all the teams during the current season are\nranked by simulating the results when each team plays every other DI team.\nAnalysis of results can be output to csv files for further analyses in something\nlike Tableau. \n\n\n"
 },
 {
  "repo": "michael-langaman/fntsylu",
  "language": "Python",
  "readme_contents": "# fntsylu\n\n# Does not work anymore because ESPN changed their website.\n\n=========================================================================================================================================\n\nESPN Fantasy Basketball Daily Lineup Automator\n\nThis is my script to set my ESPN Fantasy Basketball lineup daily. Not fully automative as it does not add players off \nthe bench and into the starting lineup if all the spots are taken, and of course, the players in those spots have games.\nIn that case, the script sends me an email with the amount of players who were unable to be added to the lineup.\n\n# How to use\n\nFirst, you'll need to install:\n - google-chrome\n - selenium webdriver\n\nNext, clone or download the repository and extract the fntsylu folder. Now, open up the fntsylu.py file in any text editor and edit the following:\n```python\n def login(self):\n   // some code //\n   username = \"\"  # Insert your email here\n   password = \"\"  # Insert your password\n   // rest of the code //\n```\nBefore you edit this code, you'll need to create a gmail account that will notify you when there are players still on your bench. After you create the email, go back into the fntsylu.py file and edit the sendEmail function:\n```python\n def sendEmail(self, players):\n   // some code ///\n   email = \"\"          # Insert the email you just created\n   password = \"\"       # Insert the password for the email you just created\n   recipientEmail = \"\" # Insert the email you want to be notified (your personal email)\n   // rest of the code //\n```\nNext, you'll need to know your league ID and team ID in order to enter the command to run the script. \n\nHere's an example of correct command:\n > python fntsylu.py 7609 18 2018\n\n'7609' is the ID of the league that I want to enter. '18' is the team ID. You can find your league and team ID by reading the url of the homepage of your fantasy league.'2018' is just the current year. Once you find your league and team IDs, go to your command line and change directory to the fntsylu folder, then type the following:\n > python fntsylu.py 'Insert your league ID here' 'Insert your team ID here' 'Insert your season ID here (current year)'\n\nChrome should open up and the script should be setting your lineup\n\n# Crontab\n\nNext, you can set up cron to run the command for you. In the terminal, type \n > crontab -e \n\nAnd enter the following at the bottom of the crontab file:\n > 0 11 * * * export DISPLAY=:0; /usr/bin/python /path/to/fntsylu.py 'insert league id' 'insert team id' 'insert season id'\n\nFor the example line above, cron will run the script every day at 11. \n"
 },
 {
  "repo": "magnusbakken/espn-fantasy-autopick",
  "language": "JavaScript",
  "readme_contents": "# ESPN Fantasy Autopick Chrome Extension\nA pair of Chrome extensions that let you automatically add active players to the current roster in an ESPN NBA/NHL fantasy league.\n\n# How to install\nThe extensions can be found in the Chrome Web Store:\n- [NBA](https://chrome.google.com/webstore/detail/espn-nba-fantasy-team-aut/nmehekgchlioodlggejkfhiglajaonie)\n- [NHL](https://chrome.google.com/webstore/detail/espn-nhl-fantasy-team-aut/nageaaodmancfbkhklidfjdhahghejle)\n\n# How to build\nRun `yarn unpacked` to create a folder suitable for loading as an unpacked extension in Chrome. `yarn package` creates a zipped version of the extension, ready to be uploaded to the extension store.\n\nTo build only the NBA extension, run `yarn unpacked-nba` or `yarn package-nba`. For the NHL extension, run `yarn unpacked-nhl` or `yarn package-nhl`.\n\n# Bug reports\nIf the extension isn't working properly, please report a bug on the GitHub page. To help me figure out what the problem is, the following is very helpful:\n1. Include screenshots or text that shows your roster and your league settings.\n2. Check the developer console in your browser for any error messages.\n\nTo check for errors, do the following:\n1. Open the developer console by pressing the F12 key, and go to the Console tab.\n2. There's a dropdown that sets the log levels. Make sure the \"Verbose\" level is included so it says \"All levels\".\n3. Clear the log by clicking the Clear button.\n4. Click the Auto button added by the extension.\n5. The extension should print some debug information to the console. If something goes wrong there may be a red error message or a yellow warning message as well. Either copy the relevant text or take a screenshot that contains all of it.\n"
 },
 {
  "repo": "kurtawirth/ncaahoopsscraper",
  "language": "R",
  "readme_contents": "---\r\ntitle: \"ncaahoopsscraper\"\r\nauthor: \"Kurt Wirth\"\r\ndate: \"`r Sys.Date()`\"\r\noutput: github_document\r\n---\r\n\r\n```{r setup, include=FALSE}\r\nknitr::opts_chunk$set(echo = TRUE)\r\n```\r\nA tool to easily scrape NCAA basketball game results from [Sports Reference](https://www.sports-reference.com/cbb/).\r\n\r\n## Install\r\n\r\nInstall from GitHub with the following code:\r\n\r\n```{r install, eval = FALSE}\r\nif (!requireNamespace(\"devtools\", quietly = TRUE)) {\r\n  install.packages(\"devtools\")\r\n}\r\ndevtools::install_github(\"kurtawirth/ncaahoopsscraper\")\r\n```\r\n\r\nIncluded in this package as dependents are [dplyr](https://github.com/tidyverse/dplyr) and [rvest](https://github.com/hadley/rvest).\r\n\r\n## Usage\r\n\r\nThere is currently only one functions currently live for ncaahoopsscraper. \r\n\r\nSimply input the beginning date of the season desired in quotes followed by the end date. Importantly, these dates must be in YYYY/MM/DD format.\r\n\r\n```{scrape, eval = FALSE}\r\nncaahoopsscraper(\"2017/11/10\", \"2018/04/02\")\r\n```\r\n\r\nThe tool will output a tidy object that includes the games' dates, home team and its score, and the visiting team and its score. If you choose, you may then ouput this object as you wish (write.csv, for example). The package also includes files for each season from 2010 (the earliest this tool currently works for) until 2018 as well as a consolidated version with all seasons during that timespan.\r\n"
 },
 {
  "repo": "djblechn-su/nba-player-team-ids",
  "language": "R",
  "readme_contents": "# NBA Player and Team ID Database\n\n## Intro\n\nThis project allows users to easily access a wide-variety of in-depth stats in one location. Currently, advanced NBA stats are spread out across various websites such as: ESPN, NBA.com, Basketball Reference and Spotrac. The main issue with the data being spread out is that it makes it especially difficult to scrape and analyze. Our project collects player IDs and puts them in one location. Thus, this will allow us to have all the advanced NBA metrics in one database that is easily accessible. All the data in one place leads to a reduction in the time it takes to scrape it. The new central location of the advanced metrics will allow for basketball statistics to be scraped more easily. Data is up-to-date as of the beginning of the 2019-2020 NBA season.\n\nTo scrape player data from each key basketball statistics website (https://stats.nba.com/, https://www.basketball-reference.com/, http://www.espn.com/nba/statistics/rpm, https://www.spotrac.com/nba/), we used R packages such as `rvest`, `XML`, and `RSelenium` to gather important information from each site. For each player we scraped their name (according to the site), link, ID (last few characters of link), and birth date (if available) to be able to match tables from different sites. Data was merged by name and birth date, but due to small differences in naming, some merging was done by hand. The corresponding code to scrape each website is provided, so we encourage users to utilize this code to scrape following years of data.\n\nTo gather the data necessary for identifying each team, we first went to every major basketball statistics website and examined the unique URLs of each team page on their respective websites. Then, we found what parts of the URL make each page unique from each other for the specific websites and logged those changes in excel. For example, the URL for the Los Angeles Clippers on basketball-reference is https://www.basketball-reference.com/teams/LAC/, while the URL for the Los Angeles Lakers is https://www.basketball-reference.com/teams/LAL/. We noted the difference at the end of each URL for each team, so that each URL would be accessible when plugging in the different endings, and did this for each website listed.\n\n## Variables\n\n### NBA_Player_IDs.csv\n\n* _**BBRefName**_ \u2013 player name according to Basketball Reference\n* _**BBRefLink**_ \u2013 player link according to Basketball Reference\n* _**BBRefID**_ \u2013 player ID according to Basketball Reference\n* _**BBRefBirthDate**_ \u2013 player birth date according to Basketball Reference\n* _**NBAName**_ \u2013 player name according to NBA\n* _**NBALink**_ \u2013 player link according to NBA\n* _**NBAID**_ \u2013 player ID according to NBA\n* _**NBABirthDate**_ \u2013 player birth date according to NBA\n* _**ESPNName**_ \u2013 player name according to ESPN (RPM)\n* _**ESPNLink**_ \u2013 player link according to ESPN (RPM)\n* _**ESPNID**_ \u2013 player ID according to ESPN (RPM)\n* _**ESPNBirthDate**_ \u2013 player birth date according to ESPN (RPM)\n* _**SpotracName**_ \u2013 player name according to Spotrac\n* _**SpotracLink**_ \u2013 player link according to Spotrac\n* _**SpotracID**_ \u2013 player ID according to Spotrac\n\n### NBA_Team_IDs.csv\n\n* _**Season**_ \u2013 first year of season (ex. 2019-2020 season would be 2019)\n* _**League**_\t - NBA or ABA\n* _**BBRef_Team_Name**_ \u2013 team name according to Basketball Reference for given season\n* _**BBRef_Team_Abbreviation**_ \u2013 team abbreviation according to Basketball Reference for given season\n* _**Current_BBRef_Team_Name**_ \u2013 current (2019-2020) team name according to Basketball Reference for given season\n* _**Current_BBRef_Team_Abbreviation**_ \u2013 current (2019-2020) team abbreviation according to Basketball Reference\n* _**ESPN_Current_Link_ID**_ \u2013 current (2019-2020) team link ID according to ESPN\n* _**NBA_Current_Link_ID**_ \u2013 current (2019-2020) team link ID according to NBA\n* _**Spotrac_Current_Link_ID**_ \u2013 current (2019-2020) team link ID according to Spotrac\n\n## Conclusion\n\nBy taking note of the differences in how each website identifies players and teams, we were able to effectively bring all of the information from each site into one place. Bringing this data into one location will streamline the data gathering process for future research projects.\n\n### Acknowledgements\n\n* Check out https://syracusesportanalytics.weebly.com/basketball.html for Syracuse Basketball Analytics content.\n* Check out https://syracusesportanalytics.weebly.com/ for Syracuse Sport Analytics content.\n\n#### Authors\n\n* Dylan Blechner, Alejandro Pesantez, Davis Showell, Chris Thomas, Ben Wachtel, Preston Klaus, Ian Archer\n"
 },
 {
  "repo": "JackLich10/gamezoneR",
  "language": "R",
  "readme_contents": "# gamezoneR <a href='http://jacklich10.github.io/gamezoneR'><img src=\"man/figures/gamezoneR_40trans.png\" align=\"right\" height=\"139\"/></a>\n<!-- badges: start -->\n<!-- badges: end -->\n\n`gamezoneR` is an R package for working with NCAA Men's Basketball play-by-play data \nfrom STATS LLC's [GameZone](http://gamezone.stats.com/). The package allows users to scrape team and master schedules as well as play-by-play data with shot locations into a tidy format. The main benefit of `gamezoneR` is the volume of shot location data available. While ESPN also charts shots, as of March 10th 2021, ESPN has charted approximately 70,000 shots while STATS LLC has charted over 170,000 from the 2020-21 college basketball season alone!\n\n## Installation\n\nYou can install `gamezoneR` from\n[GitHub](https://github.com/JackLich10/gamezoneR) with:\n\n``` r\n# Install via devtools package using the following:\ndevtools::install_github(repo = \"JackLich10/gamezoneR\")\n```\n\n## Getting started\n\nFor a quick introduction to the package, visit the Intro to `gamezoneR` [article](https://jacklich10.github.io/gamezoneR/articles/intro-to-gamezoneR.html).\n\nIf you want to load in all available play-by-play data dating back to the 2017-18 season, use the following code:\n```r\nfuture::plan(\"multisession\")\ntictoc::tic()\nprogressr::with_progress({\n  pbp <- gamezoneR::load_gamezone_pbp(gamezoneR:::available_seasons())\n})\ntictoc::toc()\n## 48.078 sec elapsed\nlength(unique(pbp$game_id))\n## 24,994 games\npbp %>% dplyr::filter(!is.na(loc_x)) %>% nrow()\n## 2,843,392 shot locations\n```\n\n## Documentation\n\nFor more information on the package and function reference, please see the `gamezoneR` [documentation](https://jacklich10.github.io/gamezoneR/index.html).\n\n## Code of Conduct\n\nPlease note that the `gamezoneR` project is released with a [Contributor Code of\nConduct](https://contributor-covenant.org/version/2/0/CODE_OF_CONDUCT.html).\nBy contributing to this project, you agree to abide by its terms.\n"
 },
 {
  "repo": "DavidNester/SportStreamer",
  "language": "Python",
  "readme_contents": "#     SportStreamer     <img align=\"right\" src=\"https://github.com/DavidNester/SportStreamer/blob/master/logo.png\" height=\"150\" width=\"150\">\nApplication used to mine streaming links for various sports from reddit forums designated for\nposting stream links. I use Beautiful Soup to parse the pages and get the links. This uses\nacestreams and opens them automatically in [SodaPlayer](https://www.sodaplayer.com/). It also\ngives links to web streams and will open them as a new tab in your browser.\n## *Check out the Web version of this app here: [davidnester.github.io/sportstreamer](https://davidnester.github.io/sportstreamer). Site is still being developed.*\n\n- GUImain.py -- main file to run. Runs GUI\n- Utility.py -- contains a few functions, global variables, and import statements\n- Forum.py -- Class for a reddit streaming forum like [Soccer Streams](https://www.reddit.com/r/soccerstreams/)\n- Game.py -- Class for a game (also a post in a forum)\n- Column.py -- Stores list of buttons and wrapper for scrollable frame\n- scrframe -- Scrollable frame class found on stackoverflow\n- OLD -- Files that I no longer use. Command line interface and more basic GUI version\n\nThis works on my 2013 Macbook Pro with HighSierra 10.13.2. Have not tested on other platforms or OS versions.\n\n# Things I Intend To Do\n- Compile into app so that script doesn't have to be run every time\n- Get game data\n- Directly to chromecast\n- GUI improvements\n\nPlease feel free to add to it or suggest updates. I am using this as a learning experience\nand am adding things as I discover them. I am sure I am doing many things in bad ways -- some I\nam aware of and intend to fix and others I am unaware of a better way to do them. Any advice,\nsuggestions, and improvements are welcomed.\n\n#     To Use\nUses [Python 3.6.2](https://www.python.org/downloads/release/python-362/)\nInstall with [pip](https://pip.pypa.io/en/stable/installing/#installing-with-get-pip-py) \n\n*Mac users may need to go to /Applications/Python 3.6/ and run Install Certificates.command (double click on the file)*\n\nIn your command line:\n```\ncd location/to/save/project/in/\nmkdir SportStreamer\ncd SportStreamer\ngit init\ngit clone https://github.com/DavidNester/SportStreamer.git\ncd SportStreamer\npip install -r requirements.txt\npython GUImain.py \n```\nMac users may have to use ```python3 GUImain.py```\n\nHow it looks on my screen:\n![Example](https://github.com/DavidNester/SportStreamer/blob/master/UseScreenshot.png \"Use Screenshot\")\n"
 },
 {
  "repo": "TaniaFontcuberta/Android-Basketball",
  "language": "Java",
  "readme_contents": "# Android_JHipster_Basketball\nAndroid frontend that integrates with JHipster backend via OAuth 2.0\n\nThis is the corresponding JHipster repository: https://github.com/TaniaFontcuberta/Spring-Basketball-oAuth2.git\n\nYou simply need to properly configure the properties:\nhttps://github.com/alfredorueda/Android_JHipster_Basketball/blob/master/app/src/main/assets/app.properties\nas defined in your JHipster app:\nhttps://github.com/alfredorueda/basketballOAuth2/blob/master/src/main/resources/config/application.yml\n\nsecurity:\n        authentication:\n            oauth:\n                clientid: basketballapp\n                secret: mySecretOAuthSecret\n                # Token is valid 30 minutes\n                tokenValidityInSeconds: 1800\n        rememberme:\n            # security key (this key should be unique for your application, and kept secret)\n            key: a2a6c0b3627730ff7edad3f9b829c9d80969fe7a\n            \n            \nThen, you simply need to add some players using the AngularJS Web interface as usual.\nAfter that, you can query your new players from your Android application!\n\nTODO: \n1. Complete CRUD\n2. Use best practices from this nice book: https://leanpub.com/retrofit-love-working-with-apis-on-android (interceptor)\n   (https://futurestud.io/blog/retrofit-series-round-up)\n\n"
 },
 {
  "repo": "JonJonHuang/Hoops",
  "language": "Python",
  "readme_contents": "# Hoops\n\n\n# Useful Links\nhttp://cvlab.epfl.ch/research/body/surv/  \nhttp://cmuems.com/excap/readings/forsyth-ponce-computer-vision-a-modern-approach.pdf  \nhttp://cvgl.stanford.edu/data2/pr2dataset/  \nhttp://www.pyimagesearch.com/2015/11/09/pedestrian-detection-opencv/  \nhttp://www.pyimagesearch.com/2014/11/10/histogram-oriented-gradients-object-detection/  \nhttps://github.com/ITCoders/Human-detection-and-Tracking  \nhttp://www.pierrebaque.com/page-DeepOcclusion/  \nhttp://www.pyimagesearch.com/2015/09/14/ball-tracking-with-opencv/  \nhttp://www.pyimagesearch.com/2016/12/05/macos-install-opencv-3-and-python-3-5/  \nhttp://www.pyimagesearch.com/2016/12/19/install-opencv-3-on-macos-with-homebrew-the-easy-way/\nhttp://docs.opencv.org/3.2.0/d5/de5/tutorial_py_setup_in_windows.html\nhttps://www.learnopencv.com/object-tracking-using-opencv-cpp-python/\nhttp://www.pyimagesearch.com/2017/02/13/recognizing-digits-with-opencv-and-python/\nhttps://stackoverflow.com/questions/10948589/choosing-correct-hsv-values-for-opencv-thresholding-with-inranges\n"
 },
 {
  "repo": "Esedicol/BasketballPlayerDetectection-BABPD",
  "language": "Jupyter Notebook",
  "readme_contents": "# Basketball-Shot-Detectection\n\nMajor improvements data extraction in sports enables sport analyst to study and output an evaluation report of an athletes capabilities. Major teams and even players themselves have acted quickly to these turn of events and are now investing in the\nidea of data driven decisions to win games.\n\nI have decided to create an computer vision application based on the sport of Basketball. The following application will take in a recorded video of a player shooting a basktball as its input. Using computer vision methods in python I aim to display player position on a 2D court and display total count of make and missed shots on a score board.\n\n#### Project Explanation/ Demo: <p><a href=\"https://www.youtube.com/watch?v=aW3IlB3nBoI\">https://www.youtube.com/watch?v=aW3IlB3nBoI</a></p>\n#### Project Poster: <p><a href=\"https://github.com/Esedicol/BasketballPlayerDetectection-BABPD/blob/master/FYP_DOCUMENTS/POSTER.pdf\">/FYP_DOCUMENTS/POSTER.pdf</a></p>\n#### Project Report: <p><a href=\"https://github.com/Esedicol/BasketballPlayerDetectection-BABPD/blob/master/FYP_DOCUMENTS/KCOMP_20072377_FinalReport.pdf\">/FYP_DOCUMENTS/KCOMP_20072377_FinalReport.pdf</a></p>\n\n\n## Ball Detection using OpenCV\n![Demo](RESULTS/DEMO.gif)\n\n## Ball Detection using OpenCV\n- frame masked using lower and upper hsv colour range \n- countour detection and labelling usingOpenCV an\n![Demo](RESULTS/BALL_D.gif)\n\n## Player Detection using YOLO \n- detection player using YOLOv3\n- label using OpenCV\n\n<img src=\"RESULTS/PLAYER_D.gif\" height=\"300\">\n\n## 3D player position to 2D player position \n- extract points using hough transform and line intersection methods\n- warped 3D points onto coresponding 2D points\n- detection player using colour range masking\n![Demo](RESULTS/POSITION_D.gif)\n"
 },
 {
  "repo": "DevEMCN/Kinect-Unity-Basketball",
  "language": "C#",
  "readme_contents": "# Kinect-Unity-Basketball\nA basketball game built in Unity and played using the Kinect v2\n\n# Table of Contents\n* [Introduction](#introduction)\n* [Installation](#installation)\n* [Project Details](#details)\n\n<a name=\"introduction\"></a><b>Introduction</b><br/>\nTeam: Eamon McNicholas & Alan Niemiec\nWith the aim of this module focusing on gestures we have decided to implement multiple gestures using a Basketball free throw game in Unity as a basis for this research. Our technology of choice has been the Kinect v2 as the Kinect v1 version did not allow for the tracking of as many joints as we needed.<br/>\nThe application allows one or two users to compete in a free throw basketball game over who can get more shots into the basket. The application works whether or not there is a second user.The players use their raised left hand to throw the basketball at the correct power level.\n\nGame code sourced from : https://code.tutsplus.com/tutorials/create-a-basketball-free-throw-game-with-unity--cms-21203\nand : https://github.com/tutsplus/BasketballFreeThrowUnity\n\nBody Joints List : https://www.codeproject.com/articles/743862/kinect-for-windows-version-body-tracking <br/>\nThe UI has multiple elements to help the user:<br/>\n\n* In the top left there is a camera output that shows what the Kinect can see. We have tried but couldn't get it to output the Skeleton or Joints of the current users.\n\n* Top Middle \u2013 This is the basketball hoop that the players have to shoot at.\n\n* Bottom left & right \u2013 The user scores are shown as digit values in both corners. They increase when the user gets a basket.\n\n* Bottom middle \u2013 This is the outline of the basketball to imitate the baskebtall being held by the user.\n\n* Bottom left & right of the basketball outline \u2013 These are the power bars. When they start moving the user knows that the Kinect is ready to shoot.\n\n\n<a name=\"installation\"></a><b>Installation</b><br/>\nTo play the game you will need the Kinect V2 equipment for Windows as well as the Kinect SDK. You Will also need Unity.\n\n#<a name=\"details\"></a><b>Project Details</b><br/>\n\nThere are three gestures in this application both of which imitate an actual throw in basketball:\n\n* Closed fist \u2013 The user has to start the the game with the fist closed to imitate the holding of a basketball. This is also crucial for the shooting as the Kinect shoots as soon as the hand is opened.\n\n* Arm raised above shoulder \u2013 In order for Kinect to allow the user to shoot, the users arm must be raised above his shoulder. The user can then Move his hand back and forth to adjust the power of the shot. The distance between the hand and shoulder joints is the force that is added to the ball.\n\n* Open hand gesture \u2013 Once the user completes the predefined action of raising back the arm he has to shoot by opening the palm of his hand and swinging forward.\n\nWe have determined for these to be the most natural actions a person would take during a basketball throw. Apart from the closed fist which was a necessity these imitate the actions taken during a throw.\n\nA dribbling gesture could also be implemented to allow for the bouncing of the ball from the ground (perhaps with possible sound feedback) but we didn't have enough time to implement it.\n\n"
 },
 {
  "repo": "lvh1g15/ARKit-BasketBall-Shoot",
  "language": "Swift",
  "readme_contents": ""
 },
 {
  "repo": "myblackbeard/basketball-betting-bot",
  "language": "Rust",
  "readme_contents": "# Basketball Betting Bot - Another Ball Brother\n[![Build Status](https://travis-ci.com/myblackbeard/basketball-betting-bot.svg?token=pakYHByBsjWsRucgfyXf&branch=master)](https://travis-ci.com/myblackbeard/basketball-betting-bot)\n\n**TELEGRAM: @BasketballBettingBot**\n\nThe fourth Ball Brother didn't make it to the *NBA* and slipped off into sports\ngambling and wants to play with you! He sends you 11 NBA games to bet on each week,\n10 good ones and one battle between the supreme tank commanders.\nThe one who gets the most games right in a week gets one point.\n\nYou play against the other members of your group chat and the overall winner is\nthe one with the most points at the end of the season.\nThere's also an alternative ranking that's just looking at the total number of\nbets you guys got right, and doesn't care about weekly wins if that's more\nyour style.\n\nTo get started add the bot (@BasketballBettingBot) to your group chat and \nsend /start into the chat. Afterward you'll receive the games to bet on \nfor the upcoming week. Each game is sent to you in the form of a poll, \nso just answer these to participate in the game. \nAfter sending /start for the first time, all you need to do is answer the polls\nthat will be sent to you weekly.\nThis continues until the NBA season ends or you end the season yourself (/stop_season).\nThe bot can't read your group chat's messages, just the ones starting with an '/',\nso don't worry about trash talking him - he won't know. \n\n**These are the commands he understands:**\n\n- **/start** -> Start your season! (wait until everyone who wants to participate was\nadded to the group)\n\n- **/standings** -> Show standings for the ongoing week\n\n- **/full_standings** -> Show standings for the whole season\n\n- **/all_bets** -> Show fraction of correct bets for the whole season\n(Alternative to weekly standings)\n\n- **/week_standings** -> Show standings for a specified week\n\n- **/sage** -> Cleanse the chat from toxic energy\n\n- **/stop_season** -> End the betting season and receive final standings.\nTHIS CAN'T BE UNDONE!\n\nHere's an example of what it looks like:\n\n\n<img src=\"./screenshots/weekly_bets.png\" alt=\"Weekly Bets\" height=\"500\" /><img src=\"./screenshots/weekly_standings.png\" alt=\"Weekly Standings\" height=\"200\" />\n"
 },
 {
  "repo": "seankross/bracketology",
  "language": "R",
  "readme_contents": "# bracketology\n\nThis R data package contains over 2.8 million bracket predictions for the 2015\nNCAA March Madness Men's Basketball Tournament. This package is 49MB so it may\ntake some time to download depending on the speed of your internet connection.\n\n## To install\n\n```\n# install.packages(\"devtools\")\nlibrary(devtools)\ninstall_github(\"seankross/bracketology\")\n```\n"
 },
 {
  "repo": "koki25ando/NBAloveR",
  "language": "R",
  "readme_contents": "# NBAloveR\n\n[![CRAN\nstatus](https://www.r-pkg.org/badges/version/NBAloveR)](https://cran.r-project.org/package=NBAloveR)\n[![Rdoc](http://www.rdocumentation.org/badges/version/NBAloveR)](http://www.rdocumentation.org/packages/NBAloveR)\n[![CRAN RStudio mirror downloads](https://cranlogs.r-pkg.org/badges/NBAloveR)](http://www.r-pkg.org/pkg/NBAloveR)\n[![total downloads](http://cranlogs.r-pkg.org/badges/grand-total/NBAloveR)](http://cranlogs.r-pkg.org/badges/grand-total/NBAloveR)\n\n\"NBAloveR\" is an R package that helps you analyze basketball data easily using statistical software tool, R.\n\n+ [koki25ando/NBAloveR](https://rdrr.io/github/koki25ando/NBAloveR/)\n+ [CRAN Official Page](https://cran.r-project.org/web/packages/NBAloveR/index.html)\n\n## Installation\n\n```{r}\n# devtools::install_github(\"koki25ando/NBAloveR\")\ninstall.packages(\"NBAloveR\")\nlibrary(NBAloveR)\n```\n\n## Official Document\n+ [Package \"NBAloveR\"](https://cran.r-project.org/web/packages/NBAloveR/NBAloveR.pdf)\n\n## Data Source\nData you can get using this package are from following websites.\n+ [Basketball Reference](https://www.basketball-reference.com/)\n+ [nbadraft.net](https://www.nbadraft.net)\n+ [RealGM](https://basketball.realgm.com/)\n\n## Hands-on Tutorial\nVisit [my blog posts](http://kokiando.hatenablog.com/entry/2018/09/10/121855) to learn more about NBAloveR package!\n+ [Introducing \"NBAloveR\"](http://kokiando.hatenablog.com/entry/2018/09/10/121855)\n+ [NBAloveR is now updated!](http://kokiando.hatenablog.com/entry/2018/12/23/202938)\n"
 },
 {
  "repo": "lilleswing/March-Madness",
  "language": "Jupyter Notebook",
  "readme_contents": "# March-Madness\n[blogpost](http://karlleswing.com/2018/03/12/MarchMadness-2018.html)\n\n"
 },
 {
  "repo": "nwpu-basketball-robot/vision",
  "language": "C++",
  "readme_contents": "# 2020\u5e74\u7bee\u7403\u673a\u5668\u4eba\u89c6\u89c9\u4ee3\u7801\n\n## 1. \u7b97\u6cd5\u7b80\u4ecb\n\n### 1.1 \u8bc6\u522b\u68c0\u6d4b\uff1a\n\n+ \u4f7f\u7528[Yolo V4](https://github.com/AlexeyAB/darknet)\uff08C++\u7248\uff09\u5728`yolov4.conv.137`\u6743\u91cd\u4e0a\u5229\u7528\u81ea\u5df1\u91c7\u96c6\u7684\u4e0a\u5343\u5f20\u6570\u636e\u96c6\u8fdb\u884c\u8fc1\u79fb\u5b66\u4e60\uff0c\u8bad\u7ec3\u51fa\u5408\u9002\u7684\u6a21\u578b\u3002\n\n+ \u4f7f\u7528TensorRT[https://github.com/NVIDIA/TensorRT]\u5e93\u5bf9\u539f\u6a21\u578b\u8fdb\u884c\u63a8\u7406\uff0c\u5b8c\u6210Float32->Float16\u5230\u8f6c\u6362\uff0c\u4fdd\u5b58\u534a\u7cbe\u5ea6\u8ba1\u7b97\u7684engine([Yolo-TensorRT\u4ed3\u5e93](https://github.com/enazoe/yolo-tensorrt))\uff0c\u63d0\u9ad8\u673a\u5668\u4eba\u8bc6\u522b\u5e27\u7387\u3002\n+ \u4f7f\u7528\u76f8\u673a\u8bfb\u53d6\u6700\u65b0\u5e27\u56fe\u50cf\uff0c\u5b8c\u6210\u68c0\u6d4b\u5e76\u8fd4\u56de`labels`\u548c`boundingboxes`\u3002\n\n### 1.2 \u5b9a\u4f4d\n\n#### 1.2.1 \u7403\u7c7b\u5b9a\u4f4d\n\n+ \u5229\u7528\u56fe\u50cf\u68c0\u6d4b\u5f97\u5230\u7684`boundingbox`\u4e2d\u5fc3\u548c\u76f8\u673a\u5185\u53c2\uff0c\u8ba1\u7b97\u7403\u7684\u6b63\u6295\u5f71\u76f8\u5bf9\u673a\u5668\u4eba\u4e2d\u5fc3\u6295\u5f71\u7684\u7269\u7406\u89d2\u5ea6\u3002\n+ \u4f7f\u7528Hokuyo\u96f7\u8fbe\u83b7\u53d6\u673a\u5668\u4eba\u5230\u6307\u5b9a\u65b9\u5411\u4e0a\u7403\u7684\u8ddd\u79bb\uff08\u9700\u8981\u914d\u5408\u4e00\u4e9b\u53bb\u9664\u566a\u70b9\u7684\u7b97\u6cd5\uff09\n+ \u5229\u7528\u89d2\u5ea6\u548c\u8ddd\u79bb\uff0c\u89e3\u7b97\u51fa\u7403\u7684\u5750\u6807\u3002\n\n<img src=\"./images/detection.png\" alt=\"detection_and_location\" style=\"zoom:50%;\" />\n\n#### 1.2.2 \u6807\u5b9a\u67f1\uff08\u7bee\u7b50\uff09\u5b9a\u4f4d\n\n+ \u5229\u7528`HSV`\u53c2\u6570\u6761\u4ef6\u7ec4\u5408\u8bc6\u522b\u84dd\u7eff\u84dd\u7684\u6807\u5b9a\u67f1\n+ \u5229\u7528\u6df1\u5ea6\u5b66\u4e60\u5b66\u4e60\u8bc6\u522b\u989c\u8272\u7279\u5f81\u660e\u663e\u7684\u6807\u5b9a\u67f1\n\n![](./images/shoot.png)\n\n## 2. \u4f9d\u8d56\n\n### 2.1 \u786c\u4ef6\u73af\u5883\n\n+ Nvidia Jetson Xavier NX\n\n### 2.2 \u8f6f\u4ef6\u73af\u5883\n\n+ ROS\n+ Ubuntu18\n+ Opencv4.1.0\n\n+ Usbcapture\u76f8\u673a\u9a71\u52a8\uff08intel x86\u4e0b\u53ef\u7528\uff0cXavier\u6682\u4e0d\u53ef\u7528\uff09\n\n## 3. \u4f7f\u7528\u65b9\u6cd5\n\n#### 3.1 \u7f16\u8bd1\n\n```\nmkdir build & cd build\ncmake ../\nmake \n```\n\n#### 34.2 \u8fd0\u884c\n\n```\n# \u8d4b\u4e88\u96f7\u8fbe\u7aef\u53e3\u6743\u9650\nsudo chmod a+rw /dev/ttyACM0\n# \u542f\u52a8Roscore\nroscore\n# \u8bbe\u7f6e\u96f7\u8fbe\u53c2\u6570\nrosparam set hokuyo_node/calibrate_time false\nrosparam set hokuyo_node/port /dev/ttyACM0\n# \u6d4b\u8bd5\u8fd0\u884c\uff08\u5982\u679c\u548c\u5176\u4ed6\u63a7\u5236\u4ee3\u7801\u4e00\u8d77\u7f16\u8bd1\uff0c\u53ef\u4ee5\u901a\u8fc7rosrun\u8fd0\u884c\uff09\n./build/vision/main\n```\n\n"
 },
 {
  "repo": "MojoJolo/fb_basketball",
  "language": "HTML",
  "readme_contents": "# BasketballGA\n\nAn AI created for Facebook Messenger's basketball game using simple Genetic Algorithm.\n\n![alt tag](http://41.media.tumblr.com/d529c6956842d317e462e3635722a994/tumblr_inline_o4v5glWAOF1r61qr8_400.png)\n\nMore info about it and watch the AI in action here:\n\n[http://www.summarizerman.com/post/141963213990/simple-genetic-algorithm-ai-for-fb-messengers](http://www.summarizerman.com/post/141963213990/simple-genetic-algorithm-ai-for-fb-messengers)\n\n#### To install\n```\npip install -r requirements.txt\npython run.py\n```\n\nUsed [Phaser](http://phaser.io/) as the game engine.\n"
 },
 {
  "repo": "yagmurdogan8/Basketball_Team",
  "language": "Java",
  "readme_contents": ""
 },
 {
  "repo": "EsmaShr/Ansong-Basketball",
  "language": "HTML",
  "readme_contents": "# Ansong Basketball\nA basketball trainer Website. \nhttps://www.ansongbasketball.com\n"
 },
 {
  "repo": "Yao-Shao/Basketball-Game-Goal-Detector",
  "language": "Python",
  "readme_contents": "# BallDetection\nImplementation of Machine learning algorithms to detect a goal in basketball games.\n\n- Naive classifier\n- Logistic regression\n- SVM\n- Multiple layer perceptron\n- CNN\n\n## Introduction\n\n### Dataset\n\nOur dataset is four basketball videos containing about 400, 000 frames.\n\n### Annotation\n\nBasically, we label each frame as goal(1) or not goal(0). A frame is labeled as goal if from the time when the bottom of the basketball touches the loop to the time when the top of the ball is leaving the nets. \n\n### Preprocess\n\nLabel, cut, and randomly shuffle the frames. See details in [preprocess](https://github.com/Yao-Shao/Basketball-Game-Goal-Detector/blob/master/preprocess/PrepareData.py).\n\n### Feature extraction\n\nFor naive classifier, LR, SVM, we use [HoG](https://dl.acm.org/citation.cfm?id=1069007) to extract features.\n\n### Evaluation\n\nA ROC curve is used for evaluation.\n"
 },
 {
  "repo": "domkia/android-basketball-game",
  "language": "Java",
  "readme_contents": "Individual work - is to make an app or game of a given topic in Android Studio or xCode. \n\nBasketball game for Android\n\n![](https://i.imgur.com/Zxpiicj.gif)\n"
 },
 {
  "repo": "johnsylvain/cbb",
  "language": "JavaScript",
  "readme_contents": "# College Basketball CLI\n\n> Get live scores and game times from your terminal\n\n![screenshot](./screenshot.png)\n\n## Usage\n\nYou can install globally with `npm install -g cbb` or use with `npx`.\n\n```bash\n# Usage\nnpm install -g cbb\nnpx cbb\n\n# Help menu\ncbb --help\n\n# Filter by AP top 25\ncbb --ap\n\n# Filter by conference\ncbb --conference big-ten\ncbb -c big-ten\n\n# Filter by name\ncbb --name purdue\n\n# watch live games\ncbb watch\n```\n"
 },
 {
  "repo": "christopherjenness/Similar-Shooter",
  "language": "Python",
  "readme_contents": "# Similar-Shooter\n\n![CI](https://travis-ci.org/christopherjenness/Similar-Shooter.svg?branch=master) [![Coverage Status](http://coveralls.io/repos/github/christopherjenness/Similar-Shooter/badge.svg?branch=master)](https://coveralls.io/github/christopherjenness/Similar-Shooter?branch=master)\n\nFind basketball players with similar shot charts\n\n# Examples\n\nA live version of this flask app can be seen at: https://similar-shooter.herokuapp.com/.  Note, I am not paying anything to host this, so it could take forever to run...\n\nHere are some static examples, though.\n\nWho is most similar to **DeAndre Jordan**? Top shot-chart match: **Rody Gobert**\n![Jordan](http://i.imgur.com/dB6cT2s.png?1)\n![Gobert](http://i.imgur.com/Lt64djC.png?1)\n\nWho is most similar to **Buddy Hield**? Top shot-chart match: **Tim Hardaway**\n![Hield](http://i.imgur.com/yfHK0kL.png?1)\n![Hardaway](http://i.imgur.com/BzG8mBI.png?1)\n\n# How does it work?\n\nI played around with a lot of different algorithms to define what makes shot charts similar.  It's an interesting question: **what does it mean for two shot charts to be similar?**\n\nI made the following assumptions:\n* If two shot charts are the exact same, but with different densities, they are still very similar.  Players with different usage rates shouldn't be penalized as being different.\n* The most important features are distance from the hoop, and 2PT vs 3PT shots.  I largely disregard things like which side of the court players shoot from.\n\nUsing these assumptions, I compare the [Kullback-Leibler divergence](https://en.wikipedia.org/wiki/Kullback%E2%80%93Leibler_divergence) of each players shot distributions.  Players with low KL divergence have high similarity.\n\n# What data are used?\n\nShot data and shot charts are scrapped seperately (design flaw).  These data were scraped March 7 2017, so they contain data from the 2017 season up until this data.  \n\nTo get up-to-date data, rerun `scraper/scraper.py` and `shotchart/shotchart.py`.\n\nTo get historic data, change global parameter `YEAR` before scraping.\n\n\n"
 },
 {
  "repo": "snestler/wncaahoopR",
  "language": "R",
  "readme_contents": "# wncaahoopR <img src=\"figures/wncaahoopR_hexsticker.png\" align=\"right\" />\n`wncaahoopR` is an R package for working with women's NCAA Basketball play-by-play (and other) data.\n\nThis package relies heavily on the work done by Luke Benz (lbenz730) in his package `ncaahoopR`, designed for working with men's NCAA basketball play-by-play data.\n\n`wncaahoopR` also scrapes data from ESPN, but differs in that it does not have scraping provided in multiple functions, choosing to only scan in the data once and then makes use of that `pbp` object within R to produce win-probability and game flow charts, as well as assist networks.\n\n`wncaahoopR` is a joint effort between Seth Berry (saberry) and Scott Nestler (snestler).  They welcome bug identification and ideas via the Issues tab, but please look at open issues before creating a new one.\n\n## Installation\nYou can install `wncaahoopR` from GitHub with:\n\n``` r\n# install.packages(\"devtools\")\ndevtools::install_github(\"snestler/wncaahoopR\")\n```\n\n## Functions\nSeveral functions use ESPN game_ids. You can find the game_id in the URL for the game summary, as shown below in the URL for the summary of the Notre Dame - Michigan game played on Nov. 23, 2019.\n![game_id](figures/espn.png)\n\n### Scraping Data\n* ```get_pbp_game(game_ids)```:  Get play-by-play data for a specific vector of one or more ESPN game_ids.\n* ```get_pbp_season(team, season)```: Game entire current season's worth of play-by-play data for a given team and season. `season` defaults to current season, but can be specified in \"2019-20\" form. \n* ```get_roster(team, season)```: Get a particular team's roster, `season` defaults to current season, but can be specified in \"2019-20\" form. \n* ```get_game_ids(team, season)```: Get a vector of ESPN game_ids for all games in which ```team``` plays in. `season` defaults to current season, but can be specified in \"2019-20\" form. \n\nThe `team` parameter in the above functions must be a valid team name from the `ids` dataset built into the package. See the __Datasets__ section below for more details.\n\n### Win-Probability and Game-Flow Charts\n\n__Win Probability Charts__\n\nThere is a function (```wp_chart```) for plotting win probability charts, using the ```ggplot2``` library. NOTE: This is equivalent to the  (```gg_wp_chart```) function in ncaahoopR package.  We did not see the need to maintain a base R graphics function.  \n\n1. _NOTE 1:  For now, all win probability charts are \"naive,\" in that they do not incorporate a pre-game line or spread, until we determine a reliable and freely available source (since this is not provided on ESPN, like for the mens game)._  \n2. _NOTE 2:  For now, the WP calculations are based on historical data from NCAA MBB games; this will be updated in a future release._\n\n```wp_chart(pbp, home_col, away_col, show_legend = T)```\n\n* ```pbp``` Play-by-play (pbp) object created from w_get_pbp_game function.\n* ```home_col``` Chart color for home team; defaults to the primary color ine ncaa_colors. \n* ```away_col```: Chart color for away team; defaults to the primary color in ncaa_colors.\n* ```show_gei```: Logical, whether or not to show Game Excitement Index on chart. Default = `TRUE`.\n\n__Game Flow Charts__\n\n```game_flow(pbp, home_col, away_col)```\n\n* ```pbp``` Play-by-play (pbp) object created from w_get_pbp_game function.\n* ```home_col``` Chart color for home team; defaults to the primary color ine ncaa_colors.\n* ```away_col```: Chart color for away team; defaults to the primary color ine ncaa_colors.\n\n__Game Excitement Index__\n\n```game_exciment_index(pbp)```\n\nReturns ```GEI``` (Game Excitement Index) for given ESPN game_id. For more information about how these win-probability charts are fit and how Game Excitement Index is calculated, check out the below links\n\n* [Model Methodology](https://lukebenz.com/post/ncaahoopr_win_prob/ncaahoopr_win_prob/)\n* [Game Excitement Index](https://lukebenz.com/post/gei/)\n\n__Game Control Measures__\n\n```average_win_prob(game_id)```\n\n* ESPN game_id for which to compute time-based average win probability (from perspective of home team).\n\n```average_score_diff(game_id)```\n\n* ESPN game_id for which to compute time-based average score differential (from perspective of home team).\n\n\n### Assist Networks\n\n__Traditional Assist Networks__\n\n```assist_net(pbp, team, node_col, three_weights, threshold, message = NA, listing = T)```\n\n* ```team``` is the ESPN team name, as listed in the `ids` data frame.  Or can be 'home' or 'away' (without quotes).\n* ```season```: Options include \"2018-19\" (for entire season), or a vector of ESPN game IDs. \n* ```node_col``` is the node color for the graph.\n* ```three_weights``` (default = ```TRUE```): Logical. If TRUE, assisted three-point shots are given 1.5 weight. If FALSE, assisted three-point shots are given weight 1. In both cases, assisted two-point shots are given weight 1. \n* `threshold`: Number between 0-1 indicating minimum percentage of team assists/baskets a player needs to exceed to be included in network. Default = 0.\n* ```message``` (default = ```NA```) Option for custom message to replace graph title when using a subset of the season (e.g. conference play).\n* `listing`: Return list of assist network related statistics (default = `TRUE`)\n\n__Circle Assist Networks and Player Highlighting__\n\n```circle_assist_net(pbp, team, season, highlight_player, highlight_color, three_weights, message = NA, listing = T)```\n\n* ```team``` is the ESPN team name, as listed in the `ids` data frame.    Or can be 'home' or 'away' (without quotes).\n* ```season```: Options include \"2018-19\" (for entire season), or a vector of ESPN game IDs. \n* ```highlight_player```: Name of player to highlight in assist network. `NA` yields full team assist network with no player highlighting. Default = `NA`.\n* ```highlight_color```: Color of player links to be highlighted. `NA` if ```highlight_player``` is `NA`.\n* ```three_weights``` (default = ```TRUE```): Logical. If TRUE, assisted three-point shots are given 1.5 weight. If FALSE, assisted three-point shots are given weight 1. In both cases, assisted two-point shots are given weight 1. \n* `threshold`: Number between 0-1 indicating minimum percentage of team assists/baskets a player needs to exceed to be included in network. Default = 0.\n* `message`: User supplied plot title to overwrite default plot title, if desired. Default = `NA`.\n* `listing`: Return list of assist network related statistics (default = `TRUE`)\n\n### Shot Charts\n`wncaahoopR` does not currently include the ability to plot shot location data, as this information is not currently available on ESPN, like it is for some mens games.\n\n## Datasets\n\n```dict``` A dataframe for converting between team names from various sites.\n \n * ```NCAA```: the name of the team, as listed on the NCAA website\n * ```ESPN```: the name of the team, as listed on the ESPN URLs\n * ```ESPN_PBP```: the name of the team, as listed on the ESPN Play-By-Play logs\n * ```Warren_Nolan```: the name of the team, as listed on WarrenNolan.com\n * ```Trank```: the name of the team, as listed on barttorvik.com\n * ```name_247```: the name of the team, as listed on 247Sports.com\n\n```ids``` A data frame for converting between team names from various sites.\n \n * ```team```: the name of the team to be supplied to function in ncaahoopR package\n * ```id```: team id; used in ESPN URLs\n * ```link```: link; used in ESPN URLs\n \n \n ```ncaa_colors``` A data frame of team color hex codes, pulled from [teamcolorcodes.com](https://teamcolorcodes.com/). Additional data coverage provided by [Luke Morris](https://lukesmorris.com).\n \n\n* `ncaa_name`: The name of the team, as listed on the NCAA website (same as `dict$NCAA`)\n* `espn_name`: The name of the team, as listed on the ESPN URLs (same as `dict$ESPN`)}\n* `primary_color`: Hexcode for team's primary color.\n* `secondary_color`: Hexcode for team's secondary color, when available.\n* `tertiary_color`: Hexcode for team's tertiary color, when available.\n* `color_4`: Hexcode for team's 4th color, when available.\n* `color_5`: Hexcode for team's 5th color, when available.\n* `color_6`: Hexcode for team's 6th color, when available.\n\n![Available Colors](figures/ncaa_colors.png)\n_Primary and secondary colors for all 351 teams._\n\n\nThese datasets can be loaded by typing ```data(\"ids\")```, `data(\"ncaa_colors\")`, or ```data(\"dict\")```, respectively.\n\n## Examples\n\n#### Creating a PBP Object\n```ND_Mich <- w_get_pbp_game(401171130)```\n\n#### Win Probability Charts\n![wp](figures/wp_chart_ND_Mich_default.png)\n```wp_chart(ND_Mich)```\n\n![wp](figures/wp_chart_ND_Mich_contrast.png)\n```wp_chart(ND_Mich, away_col = \"#C99700\")```\n\n#### Game Flow Chart\n![game_flow](figures/game_flow_ND_Mich.png)\n```game_flow(ND_Mich, away_col = \"#C99700\")```\n\n#### Single-Game Assist Network\n![Assist Single](figures/assist_net_ND.png)\n```assist_net(ND_Mich, team = \"Notre Dame\")```\n\n#### Circle Assist Networks\n![Oregon](figures/circle_assist_net_ND.png)\n```circle_assist_net(ND_Mich, team = \"Notre Dame\")```\n\n![Brunelle Highlight](figures/circle_assist_net_ND_Brunelle.png)\n```circle_assist_net(ND_Mich, team = \"Notre Dame\", highlight_player = \"Sam Brunelle\", highlight_color = \"#C99700\")```\n\n## Glossary\nPlay-by-Play files contain the following variables:\n\n* ```play_id```: Unique identifier of play/event in sequence of game events.\n* ```period```: Period of action in the game. 1, 2, 3, and 4 denote the four quarters of regulation play, while 5 denotes OT1, 6 denotes OT2 etc.\n* ```time_remaining_period```: Time remaining in the period as it would appear on a scoreboard.\n* ```secs_remaining```: Time remaining in regulation, in seconds.\n* ```secs_remaining_absolute```: The time remaining until the game is over, in seconds. For example a game that goes to overtime would begin with 2700 seconds remaining (2400 for regulation and 300 for overtime), and regulation would end with 300 seconds remaining.\n* ```description```: A description of the play/game event.\n* ```home_score```: Home team's score.\n* ```away_score```: Away team's score.\n* ```score_diff```: Score differential from the home team's perspective (```home_score``` - ```away_score```)\n* ```play_length```: Duration of the the given play, in seconds.\n* ```win_prob```: Win probability for the home team.\n* ```home```: Name of the home team.\n* ```away```: Name of the away team.\n* ```home_timeout_remaining```: Number of timeouts remaining for the home team.\n* ```away_timeout_remaining```: Number of timeouts remaining for the away team.\n* ```home_timeout_ind```: Binary (0-1) indicator if home team took a timeout in previous 60 seconds.\n* ```away_timeout_ind```: Binary (0-1) indicator if away team took a timeout in previous 60 seconds.\n* ```home_favored_by```: Number of points by which the home team is favored, prior to tip-off. If Vegas point spread is available on ESPN, that is used as the default. When not available, an attempt is made to impute the pre-game point spread from derived team strengths. Imputed point spreads are not available for games prior to the 2016-17 season or when one of the teams is not in Division 1.\n* ```game_id```: ESPN game_id for the game in question.\n* ```date```: Date of game.\n* ```whichScored```: A team name indicating which team scored on a play.\n"
 },
 {
  "repo": "gbrunner/court-js",
  "language": "HTML",
  "readme_contents": "# court-js\nLooking for cool ways to visualize basketball shotcharts in a web app? Check out the samples in court-js.\n\n# Check Out the Apps\n- Shots Over Time in 3D: https://gbrunner.github.io/court-js/shots-over-time-3d/index.html\n- Player Comparison in 3D: https://gbrunner.github.io/court-js/player-comparison-3d/LeBron_vs_Steph.html\n- Makes vs. Misses in 3D: https://gbrunner.github.io/court-js/makes-vs-missed-3d/\n- Jupyter Notebook as Slides with Reveal.js: http://gbrunner.github.io/Courtside-Geography/RussellWestbrook/Basketball_Shotcharts_in_AGOL.slides.html#/\n"
 },
 {
  "repo": "uom-android-team2/WeBall_Statistics-Backend",
  "language": "PHP",
  "readme_contents": "# WeBall Statistics\n\n<h4>The WeBall Statistics application is a league statistics application for basketball, which was created as part of the course \"Apps development for Mobile Devices\" (University of Macedonia - Applied Informatics, academic year 2021-2022, 6th semester).</h4>\n<h4>Part of the course, was to get organized into groups of 10 people. Our team (#Team 2) consists of the following students alphabetically:</h4>\n<ul>\n  <li><b><i>Ampatzidou Elisavet</i></b></li>\n  <li><b><i>Charakopoulos Minas - Theodoros</i></b></li>\n  <li><b><i>Dasyra Evmorfia - Elpida </i></b></li>\n  <li><b><i>Iordanou Sofia</i></b></li>\n  <li><b><i>Lougaris Dionisis </i></b></li>\n  <li><b><i>Lousta Aravella</i></b></li>\n  <li><b><i>Machairas Panagiotis</i></b></li>\n  <li><b><i>Ouzounidis Kyriakos</i></b></li>\n  <li><b><i>Pepa Leonard</i></b></li>\n  <li><b><i>Stefou George-John</i></b></li>\n</ul>\n\n<h4>Video presentation of the app on YouTube: <a href=\"https://www.youtube.com/watch?v=ouzMwkUCQ-s&list=LL&index=12\"><b><i>presentation video</i></b><a/></h4>\n<h4>Visit the other repository, with the android mobile application: <a href=\"https://github.com/uom-android-team2/WeBall_Statistics\"><b><i>Android App - Front-End</i></b><a/></h4>\n  \n# Navigating the app's back-end UI  \n<img src=\"screenshots-github/index.png\" width=\"950\" />\n<h4>This is the home/index page of the back-end admin UI. From there one can see information about the software that was developed, such as team members, course teachers, etc. Through this page, the admin user has the options to Login or create an account by selecting the appropriate link from the nav bar.</h4>\n<hr width=\"70%\">\n<br>\n<div float=\"left\">\n  <img src=\"screenshots-github/admin-login-page.png\" width=\"400\" />\n  <img src=\"screenshots-github/admin-register-page.png\" width=\"400\" />\n</div>\n<h4>Through the first screen, the admin can login to their account. If he does not have an account, he can create one through the form shown on the second screen.</h4>\n<hr width=\"70%\">\n<br>\n<img src=\"screenshots-github/admin-panel-page.png\" width=\"950\" />\n<h4>After successfully logging into his account, he will go to the admin panel. From there he has the following possibilities:</h4>\n<ul>\n  <li><b><i>Create Team and view a list with all the teams in the MySQL Database</i></b></li>\n  <li><b><i>Create Player and view a list with all the players in the MySQL Database</i></b></li>\n  <li><b><i>Create league manually for every week</i></b></li>\n  <li><b><i></i>Championship draw selection automatically, through our own algorithm.</b></li>\n  <li><b><i></i>Reset his password</b></li>\n  <li><b><i></i>Load data from json files with ready data for players and teams so he doesn't have to put it all in manually.</b></li>\n  <li><b><i>Check the manual</i></b></li>\n  <li><b><i>Logout</i></b></li>\n</ul>\n<hr width=\"70%\">\n<br>\n<img src=\"screenshots-github/teams-page.png\" width=\"950\" />\n<h4>Through this screen he can create teams and see the existing ones.</h4>\n<hr width=\"70%\">\n<br>\n<img src=\"screenshots-github/palyers-page.png\" width=\"950\" />\n<h4>Through this screen he can create players and see the existing ones.</h4>\n<hr width=\"70%\">\n<br>\n<img src=\"screenshots-github/matches-championship-page.png\" width=\"950\" />\n<h4>Through this screen, the admin can create the league matches manually.</h4>\n<hr width=\"70%\">\n<br>\n<img src=\"screenshots-github/random-week-matches-page.png\" width=\"950\" />\n<h4>Through this screen, the admin can create the league matches automatically by simply pressing the button and waiting 5sec for the process to complete.</h4>\n<hr width=\"70%\">\n<br>\n<img src=\"screenshots-github/manual.png\" width=\"950\" />\n<h4>This is the last screen, where the admin will find information about managing the admin panel.</h4>\n\n# Prerequisites\n<ul>\n  <li>Android Studio</li>\n  <li>XAMPP Control Panel</li>\n  <li>An emulator installed e.g. Nexus 5 API 30, Pixel 3 XL API 29</li>\n  <li>Internet Connection</li>\n</ul>\n\n# Local Installation\n<h4>For the correct use of the application, the following actions are required:</h4>\n\n```\nRun at first the back-end:\ngit clone https://github.com/uom-android-team2/WeBall_Statistics-Backend.git or download the zip from github and extract it\nStore or move the root folder WeBall_Statistics-Backend(-master) in <PATH>\\xampp\\htdocs folder\nOpen XAMPP Control Panel and start Apache and MySQL servers\nVisit from your browser http://localhost/WeBall_Statistics-Backend/index/ then register or login and follow the manual\n\nNow, for the Mobile Application:\ngit clone https://github.com/uom-android-team2/WeBall_Statistics.git or download the zip from github and extract it\nStore or move the root folder WeBall_Statistics(-main) in <PATH>\\AndroidStudioProjects\\\nOpen Android Studio and the app root folder.\nConfig the App:\npublic static final String IP = <YOUR_IP>  --> (java/uom/team2/weball_statistics/configuration/Config.java)\n<domain includeSubdomains=\"true\"><YOUR_IP></domain>  --> (res/xml/network_security_config.xml)\nStart any emulator, and then you are ready to launch the app!\n```\n\n<h4>Note: Maybe you will see already data for live matches because of the real time cloud service was used, firebase real-time database!</h4>\n"
 },
 {
  "repo": "uom-android-team2/WeBall_Statistics",
  "language": "Java",
  "readme_contents": "# WeBall Statistics\n\n<h4>The WeBall Statistics application is a league statistics application for basketball, which was created as part of the course \"Apps development for Mobile Devices\" (University of Macedonia - Applied Informatics, academic year 2021-2022, 6th semester).</h4>\n<h4>Part of the course, was to get organized into groups of 10 people. Our team (#Team 2) consists of the following students alphabetically:</h4>\n<ul>\n  <li><b><i>Ampatzidou Elisavet</i></b></li>\n  <li><b><i>Charakopoulos Minas - Theodoros</i></b></li>\n  <li><b><i>Dasyra Evmorfia - Elpida </i></b></li>\n  <li><b><i>Iordanou Sofia</i></b></li>\n  <li><b><i>Lougaris Dionisis </i></b></li>\n  <li><b><i>Lousta Aravella</i></b></li>\n  <li><b><i>Machairas Panagiotis</i></b></li>\n  <li><b><i>Ouzounidis Kyriakos</i></b></li>\n  <li><b><i>Pepa Leonard</i></b></li>\n  <li><b><i>Stefou George-John</i></b></li>\n</ul>\n\n<h4>Video presentation of the app on YouTube: <a href=\"https://www.youtube.com/watch?v=ouzMwkUCQ-s&list=LL&index=12\"><b><i>presentation video</i></b><a/></h4>\n<h4>Visit the other repository, with the back-end of our application: <a href=\"https://github.com/uom-android-team2/WeBall_Statistics-Backend\"><b><i>back-end</i></b><a/></h4>\n\n<h2>R1 &nbsp;&nbsp; Display matches - Admin Login - Guest Starting Page</h2>\n<div float=\"left\">\n  <img src=\"screenshots/R1/start-page.png\" height=\"450\" />\n  <img src=\"screenshots/R1/admin-login.png\" height=\"450\" />\n  <img src=\"screenshots/R1/upcoming-matches-admin-view-before-start.png\" height=\"450\" />\n</div>\n<br>\n<p><b><i>Requirement 1</i></b> is handled by the administrator (admin) and it concerns the match selection, and manage the card of the selected match. This includes the appearance of players and the corresponding ones logos. First, the administrator must enter the username and password in the form is requested, after choosing the button \u201cLOGIN AS ADMIN\". The admin account can created by the backend website through it register. It then goes to the \u201cMatches\u201d screen, where there are three columns with the corresponding matches (Previous Matches, Live Matches, Upcoming Matches). From there the administrator can choose a match and edit the tab of. More specifically, by pressing it arrow a popup appears menu, which includes the players of the groups. With the edit button, is transferred to the \u201cWelcome Admin\u201d screen, where it is match management (see R2). <br>\nNote: The edit option concerns ONLY the live and upcoming matches, not the completed.</p>\n\n<h2>R2 &nbsp;&nbsp; Match management by Admin</h2>\n<div float=\"left\">\n  <img src=\"screenshots/R2/admin-live-match-panel.png\" height=\"450\" />\n  <img src=\"screenshots/R2/live-match-admin.png\" height=\"450\" />\n  <img src=\"screenshots/R2/pop-add-points.png\" height=\"450\" />\n</div>\n<br>\n<p><b><i>Requirement 2</i></b> constitutes the next possibility of the administrator (admin), which includes all functions related to managing a match (Shoot with\ntype and result, Rebound or Assist or Block, Steal, Turnover and Foul). Necessary condition for starting the game, but also to activate the buttons, it is to click the button \"Start\". After it's click, the same button turns into \u201cEnd\u201d, through which the match could be terminated. In addition, the administrator can stop the timer and start it (from where you stopped it) via the \u201cPause\u201d button, the which turns into \u201cContinue\u201d when pressed, and vice versa. Still, for registering any action, it is necessary, the administrator to follow a series of steps. Initially, the administrator during his navigation on this screen, sees the home team selected (by default). To if he can change team, he uses the Banner of which located at the top as an image. Once he selects any from the 2 teams, the key players of the selected team, appear at the bottom of the screen. In the same way that the team is selected, a player can also be selected, that is, by clicking on his image. <br>\nNote: The match does not end when \"Done\" is pressed. Only will paused and the admin will moved back to all matches.</p>\n\n<h2>R3 &nbsp;&nbsp; Recording statistics</h2>\n<p>This particular requirement deals with calculating stats for players and the groups, when the administrator performs a corresponding action. These actions include the basic events that occur in a match basketball skills such as free throws and attempts (two-pointers, three-pointers). In addition, assists, rebounds, steals, cuts, fouls are also recorded and mistakes. The specific statistics are recorded in the database at the moment which the administrator presses a similar button from its graphical interface which is fragment_admins_view. Statistics recording can begin the moment a match is live. For something like this to happen, it is necessary o\nadministrator to press the start button from its graphical interface. On the contrary, if the administrator seeks to increase statistics for a player, team respectively buttons will be disabled. Beyond the simple recording of statistics n application modifies the above data into a more logical form for the user. Specifically, in the frontend, a percentage calculation is also carried out through a condition. To if the application succeeds in the specific process, it stores its data in classes statistics for players and teams from the database.</p>\n\n<h2>R4 &nbsp;&nbsp; Watch the progress of the Live Match</h2>\n<div float=\"left\">\n  <img src=\"screenshots/R4/live-progress-1.png\" height=\"450\" />\n  <img src=\"screenshots/R4/live-progress-2.png\" height=\"450\" />\n  <img src=\"screenshots/R4/live-comments-1.png\" height=\"450\" />\n</div>\n<br>\n<p>The purpose of implementing <b><i>requirement 4</i></b> is that users as well as match administrators (admins) can watch the progression of a live match in real time, through verbal descriptions and comments for more details. In order to watch the progress of a live match, one must first choose one, from the list of live matches (Live matches), by clicking anywhere on its layout. Thus, it will be transferred to a new screen, where the 2 teams, the current score, the match week, as well as the current minutes of the match, are shown above. Below, is a menu available where gives the opportunity to watch the match through brief descriptions by selecting the \"Progress\" tab, as well as through comments and more detailed descriptions by pressing the \"Comments\" tab. He can also see the statistics of the teams and the respective players by going to the \"Statistics\" tab (R5). <br><br>\nAbout the <b><i>\"Progress\"</i></b> tab, short descriptions are displayed for actions registered by the admin and performed in the match such as the following: </p>\n<ul>\n  <li>Start, complete, pause and resume of the match.</li>\n  <li>Successful freethrow, 2-point and 3-point</li>\n  <li>Rebound</li>\n  <li>Steal</li>\n  <li>The name of the player who made the Assist in parentheses (only for 2 points or 3 points).</li>\n  <li>Block</li>\n  <li>Foul</li>\n  <li>Turnover</li>\n  <li>Player Substitution</li>\n</ul>\n<p>About the <b><i>\"Comments\"</i></b> tab, all actions previously mentioned in the \u201cProgress\u201d tab are described in the form of comments with the extra addition of the display of missed free throws, 2-points and 3-points.</p>\n<p>Left-aligned descriptions refer to the home team, right-aligned to the away team and in the center there are descriptions generally related to the flow of the match without specifically addressing any team.</p>\n<p><b>Note: </b> <b><i>All descriptions are realtime and no refresh is required to display the newest events. Each new action will appear on top, first, at the beginning. Also, the score and the time shown in the header of the match are realtime and directly obey the actions of the admin.</i></b></p>\n<h4>For the implementation of the real time data, the possibility of the real time database offered by the <a href=\"https://firebase.google.com/\">Firebase</a> platform was utilized.</h4>\n\n<h2>R5 &nbsp;&nbsp; Watch the Statistics of the Live Match (Both for Teams and Players)</h2>\n<div float=\"left\">\n  <img src=\"screenshots/R5/live-team-statistics.png\" height=\"450\" />\n  <img src=\"screenshots/R5/live-players-statistics-1.png\" height=\"450\" />\n  <img src=\"screenshots/R5/live-players-statistics-2.png\" height=\"450\" />\n</div>\n<br>\n<p><b><i>Requirement 5</i></b> will give the opportunity to the user to watch live stats of a match as it is live. The user, having selected a live match, has the possibility to see the relevant statistics of the teams from the last column of the \"Live Game\" screen. Here again the elements on the left side of the screen represent the home team, while the elements on the right represent the away team. In addition, the bars visually show the statistics of the teams by category <i> (Successful effort, Total effort, Successful freethrow, Total freethrow, Successful twopointer, Total twopointer, Successful threepointer, Total threepointer, Steal,\nAssist, Block, Rebound, Foul, Turnover)</i>, while the number above each bar indicates the total number of attempts, successful shots, etc. The \u201cView Players Live Statistics\u201d button at the bottom of the screen, refers the user to the individual player statistics by category again. The team's overall data (e.g. total effort) is displayed on the right and the number representing each player on the left. The bar again indicates the corresponding percentage. Additionally, the user can select the player from the bottom of the screen or change team from the pop-up menu on the top left of the screen.</p>\n<p><b>Note: </b> <b><i>Firebase was used to record and store the data, so that the comments of each match are always updated, without the need for further action by the user (e.g. refreshing the page).</i></b></p>\n\n<h2>R6 &nbsp;&nbsp; Statistics of completed matches</h2>\n<div float=\"left\">\n  <img src=\"screenshots/R6/completed-match-statistics-1.png\" height=\"450\" />\n  <img src=\"screenshots/R6/completed-match-statistics-2.png\" height=\"450\" />\n  <img src=\"screenshots/R6/completed-match-statistics-3.png\" height=\"450\" />\n</div>\n<br>\n<p><b><i>Requirement 6</i></b> will offer the user the option to view the stats of a completed match. From the user's home match screen and the \u201cPrevious Matches\u201d column, the user can select a completed match to view its statistics. In more detail, after selecting one, the individual statistics of the five most efficient players of each team are displayed, and below, a list of the leading players in the specific statistics for the selected match. The following are the total statistics of the two teams per category <i>(Team Efficiency, 3 Pointers Made, 2 Pointers Made, Total Freethrows, Team Assists, Total Fouls.\n10)</i>. The left side is for the home team, while the right side is for the away team.</p>\n\n<h2>R7 &nbsp;&nbsp; League Scoreboard</h2>\n<div float=\"left\">\n  <img src=\"screenshots/R7/score-board.png\" height=\"450\" />\n</div>\n<br>\n<p>In <b><i>requirement 7</i></b>, the scores of all the teams will be presented, after they have completed the match in which they are participating. More specifically, the user goes to the scoreboard screen from the \"CHAMPIONSHIP LEADERBOARD\" button located on the home screen. This screen shows the teams sorted according to their score (PTS). To the left of the columns is the position number of each team (#), followed by the team name, total games played so far (GM), wins (W) and losses (L) respectively and finally the points scored have collected (PTS). Points are calculated as the sum of wins times 2 and losses. Additionally, there are two buttons on this screen. The \u201cSTATISTICS\u201d button, which leads to\nteam and player statistics, and the \u201cTOP 5\u201d button, which leads to the best 5 players (regardless of team).</p>\n\n<h2>R8 &nbsp;&nbsp; Overall team stats</h2>\n<div float=\"left\">\n  <img src=\"screenshots/R8/team-stats-all-time.png\" height=\"450\" />\n</div>\n<br>\n<p>In <b><i>requirement 8</i></b>, the total statistics of the teams will be displayed. The user from the \"STATISTICS\" button of requirement 7 goes to the \"Championship Statistics\" screen, which has two tabs. The second tab \u201cTEAM STATS\u201d (related to R8), contains four tables per category. In each table the five teams with the highest percentages per category <i>(points per game, assists per game, rebounds per game, blocks per game, up to the given moment in the league)</i> are shown. For example, in \u201cPoints Per Game\u201d, the user can see the top five teams that collected the most points per game.</p>\n\n<h2>R9 &nbsp;&nbsp; Personal player stats</h2>\n<div float=\"left\">\n  <img src=\"screenshots/R9/top-players-all-time.png\" height=\"450\" />\n</div>\n<br>\n<p>In <b><i>requirement 9</i></b>, the personal statistics of the players throughout the league are displayed. The \"STATISTICS\" button of requirement 7 navigates the user to the \"Championship Statistics\" screen, which has two tabs. The first tab on the left (PLAYERS STATS) corresponds to requirement 9 and concerns the statistics of the players by category <i>(points per game, assists per game, rebounds per game, blocks per game, fouls per game)</i>, i.e. how many points, rebounds, assists, etc. collected by the respective player per game (up to the given moment in the league). In each category, the 5 players who collected the highest percentages per category, in the matches they have participated in so far, are displayed. These statistics are updated as the match progresses.</p>\n\n<h2>R10 &nbsp;&nbsp; Top-5 players for each week</h2>\n<div float=\"left\">\n  <img src=\"screenshots/R10/top5-per-week.png\" height=\"450\" />\n</div>\n<br>\n<p>In <b><i>requirement 10</i></b>, the best 5 of the Competition are calculated based on the evaluation system (Efficiency meter). By pressing the button \"TOP 5\" the user enters the page and displays the 5 best players of the matchday (last matchday / current week), according to the position in which they play. For the selection of the top five, the statistics of all players who participated in the completed matches of the current week are gathered, the efficiency index of each player is calculated and then these indices are compared between players of the same position. The player with the greatest efficiency emerges as the best of the week for the position he plays. In addition, the data of the 5 best players is displayed in a frame with a background color that dominates the team they play.</p>\n\n# Prerequisites\n<ul>\n  <li>Android Studio</li>\n  <li>XAMPP Control Panel</li>\n  <li>An emulator installed e.g. Nexus 5 API 30, Pixel 3 XL API 29</li>\n  <li>Internet Connection</li>\n</ul>\n\n# Local Installation\n<h4>For the correct use of the application, the following actions are required:</h4>\n\n```\nRun at first the back-end:\ngit clone https://github.com/uom-android-team2/WeBall_Statistics-Backend.git or download the zip from github and extract it\nStore or move the root folder WeBall_Statistics-Backend(-master) in <PATH>\\xampp\\htdocs folder\nOpen XAMPP Control Panel and start Apache and MySQL servers\nVisit from your browser http://localhost/WeBall_Statistics-Backend/index/ then register or login and follow the manual\n\nNow, for the Mobile Application:\ngit clone https://github.com/uom-android-team2/WeBall_Statistics.git or download the zip from github and extract it\nStore or move the root folder WeBall_Statistics(-main) in <PATH>\\AndroidStudioProjects\\\nOpen Android Studio and the app root folder.\nConfig the App:\npublic static final String IP = <YOUR_IP>  --> (java/uom/team2/weball_statistics/configuration/Config.java)\n<domain includeSubdomains=\"true\"><YOUR_IP></domain>  --> (res/xml/network_security_config.xml)\nStart any emulator, and then you are ready to launch the app!\n```\n\n<h4>Note: Maybe you will see already data for live matches because of the real time cloud service was used, firebase real-time database!</h4>\n"
 },
 {
  "repo": "timdagostino/NCAAsimulator",
  "language": "R",
  "readme_contents": "**The NCAA simulator application contains the following:**\n- Game simulator built on an individual posession framework (customizable options available)\n- Simualted Game Stats (for each simulated Game)\n- NCAAA Basketball Team Stats Hub\n- *In Development - Upcoming Game Predictions (Vegas Betting Lines Included)*\n\nPublished Here: https://tdagostino.shinyapps.io/NCAA-Basketball-Sim/\n\n**Game Simulator:**\nAs noted above, the simulator is built on an an individual posession framework using over 35 different team statistics as inputs. Users can choose to from a total of 353 NCAA basketball teams when simulating games. Users can choose to have the model adjust for home field advantage and/or strength of schedule. \n\n\n-More Info to Come-\n"
 },
 {
  "repo": "rlabausa/nba-schedule-data",
  "language": "Python",
  "readme_contents": "# NBA-Schedule-Data\nThis repository contains tools, information, and documentation for accessing NBA season/post-season data that is available through `data.nba.com`. \n\n## Accessing the Schedule Data\nThe full JSON file for an NBA season schedule (_2015 or later_) can be accessed through the URL:\n```\nhttps://data.nba.com/data/10s/v2015/json/mobile_teams/nba/{YEAR}/league/00_full_schedule.json\n\n```\n## JSON Structure\n```\n + lscd\n    + mscd\n        + mon\n        + g\n            - gid\n            - gcode\n            - seri\n            - is\n            - gdte\n            - htm\n            - vtm\n            - etm\n            - an\n            - as\n            - st\n            - stt\n            + bd\n                + b ...\n            + v\n                - tid\n                - re\n                - ta\n                - tn\n                - tc\n                - s\n            + h\n                - tid\n                - re\n                - ta\n                - tn\n                - tc\n                - s\n            - gdtutc\n            - utctm\n            - ppdst\n            + ptsls ...\n    + mscd \n    + mscd\n    ...\n               \n```\n\n\n## JSON Breakdown\n\nName | Description | Value Type | Example\n------------ | ------------ | ------------ | ------------ \n| `lscd` | League Schedule | _Array of JSON Objects_ | \n| `mscd` | Month Schedule | _Array of JSON Objects_ |\n| `mon` | Month | _String_ | `\"June\"`\n| `g` | Games | _Array of JSON Objects_ |\n| `gid` | Game ID | _String_ | `\"0041500407\"`\n| `gcode` | Game Code | _String_ | `\"20160619/CLEGSW\"`\n| `seri` | Playoff Series Summary | _String_ | `\"CLE wins series 4-3\"`\n| `gdte` | Game Date | _String_ | `\"2016-06-19\"`\n| `an` | Arena | _String_ | `\"ORACLE Arena\"`\n| `ac` | Arena City | _String_ | `\"Oakland\"`\n| `as` | Arena State | _String_ | `\"CA\"`\n| `stt` | Game Status | _String_ | `\"Final\"`\n| `bd` | Broadcast Information | _JSON Object_ |\n| `b` | Broadcasters | _Array of JSON Objects_ |\n| `v` | Visiting Team Information | _JSON Object_ |\n| `h` | Home Team Information | _JSON Object_ | \n| `tid` | Team ID | _Integer_ | `1610612739`\n| `re` | W-L Record | _String_ | `\"16-5\"`\n| `ta` | Team Abbreviation | _String_ | `\"CLE\"`\n| `tn` | Team Name | _String_ | `\"Cavaliers\"`\n| `tc` | Team City | _String_ | `\"Cleveland\"`\n| `s` | Team Score | _String_ | `\"93\"`\n| `gdtutc` | Game Date UTC | _String_ | `\"2016-06-20\"`\n| `utctm` | UTC Time | _String_ | `\"00:00\"`\n\nExamples for data collection can be found [here](https://github.com/rlabausa/nba-schedule-data/tree/master/python).\n\n\n\n\n\n\n"
 },
 {
  "repo": "yichenzhu1337/justplay",
  "language": "JavaScript",
  "readme_contents": "## justPlay - play more, plan less\n\njustPlay is a web application that enables students to play more and plan less. We believe that there are often too many obstacles to simply play a game that requires multiple human beings to participate (Badminton, Basketball, Table Tennis, Tennis etc...). justPlay attempts to take the pain out of organizing and finding others to play with by providing an intelligent match making system that groups people together based on their availability and preferences.\n\nWe have a live Alpha Version at www.just-play.ca, feel free to create an account and play around (Let us know if there are any bugs by posting an issue and labeling it with bug)\n\n<h3> Frontend build guide </h3>\n<p> Make sure you have bower installed, go to public and type bower install</p>\n\n<h3> Backend Update Guide </h3>\n<p> first time install -> php artisan migrate --package=cartalyst/sentry </p>\n<p> Every time an update has been made in the backend, run these commands </p>\n<ol>\n  <li> Import Sentry Authentication Package: \"php artisan migrate --package=cartalyst/sentry\" </li>\n  <li> Install Laravel: \"composer install\" </li>\n  <li> Install Laravel: \"composer update\" </li>\n  <li> Migrate your database: \"php artisan migrate\" </li>\n  <li> Seed your database: \"php artisan db:seed\" </li>\n  <li> Autoload All files: \"composer dump-autoload -o\" </li>\n</ol>\n\n<h3> Testing with PHPUnit </h3>\n<ul>\n  <li> Windows Aliasing: @DOSKEY phpunit=vendor\\bin\\phpunit </li>\n  <li> Linux Aliasing: alias phpunit=vendor\\bin\\phpunit </li>\n  <li> phpunit </li>\n</ul>\n\n<h3> API </h3>\n<ul>\n  <li> php artisan serve </li>\n  <li> localhost:8000/api-docs </li>\n</ul>\n"
 },
 {
  "repo": "sportsdataverse/wehoop",
  "language": "R",
  "readme_contents": "---\noutput: github_document\n---\n\n# wehoop <a href='https://wehoop.sportsdataverse.org'><img src=\"https://raw.githubusercontent.com/sportsdataverse/wehoop/main/logo.png\" align=\"right\"  width=\"20%\" min-width=\"100px\"/></a>\n```{r setup_readme, include = FALSE}\nrequire(knitr)\nif (!requireNamespace('pacman')){\n  install.packages('pacman')\n}\npacman::p_load(wehoop, magick, grid, dplyr, lubridate)\n# You can install using the pacman package using the following code:\n\n```\n\n<!-- badges: start -->\n[![CRAN status](https://img.shields.io/badge/dynamic/json?style=for-the-badge&color=success&label=CRAN%20version&prefix=v&query=%24.Version&url=https%3A%2F%2Fcrandb.r-pkg.org%2Fwehoop)](https://CRAN.R-project.org/package=wehoop)\n[![CRAN downloads](https://img.shields.io/badge/dynamic/json?style=for-the-badge&color=success&label=Downloads&query=%24%5B0%5D.downloads&url=https%3A%2F%2Fcranlogs.r-pkg.org%2Fdownloads%2Ftotal%2F2021-10-26%3Alast-day%2Fwehoop)](https://CRAN.R-project.org/package=wehoop)\n[![Version-Number](https://img.shields.io/github/r-package/v/sportsdataverse/wehoop?label=wehoop&logo=R&style=for-the-badge)](https://github.com/sportsdataverse/wehoop) [![R-CMD-check](https://img.shields.io/github/workflow/status/sportsdataverse/wehoop/R-CMD-check?label=R-CMD-Check&logo=R&logoColor=blue&style=for-the-badge)](https://github.com/sportsdataverse/wehoop/actions/workflows/R-CMD-check.yaml) [![Lifecycle:maturing](https://img.shields.io/badge/lifecycle-maturing-blue.svg?style=for-the-badge&logo=github)](https://github.com/sportsdataverse/wehoop)\n[![Twitter Follow](https://img.shields.io/twitter/follow/saiemgilani?color=blue&label=%40saiemgilani&logo=twitter&style=for-the-badge)](https://twitter.com/saiemgilani)\n[![Twitter Follow](https://img.shields.io/twitter/follow/hutchngo?color=blue&label=%40hutchngo&logo=twitter&style=for-the-badge)](https://twitter.com/hutchngo) [![Twitter Follow](https://img.shields.io/twitter/follow/SportsDataverse?color=blue&label=%40SportsDataverse&logo=twitter&style=for-the-badge)](https://twitter.com/SportsDataverse) \n\n<!-- badges: end -->\n\n`wehoop` is an R package for working with women's college and professional basketball data. The package has functions to access **live play by play and box score** data from ESPN with shot locations when available.\n\nA scraping and aggregating interface for ESPN's women's college basketball and WNBA statistics. It provides users with the capability to access the API's game play-by-plays, box scores, standings and results to analyze the data for themselves.\n\n## **Installation**\n\nYou can install the CRAN version of [**```wehoop```** ](https://CRAN.R-project.org/package=wehoop) with:\n```{r readme_cran_install, eval=FALSE}\ninstall.packages(\"wehoop\")\n```\nYou can install the released version of [**`wehoop`**](https://github.com/sportsdataverse/wehoop) from [GitHub](https://github.com/sportsdataverse/wehoop) with:\n\n```{r pacman_readme, eval=FALSE}\n# You can install using the pacman package using the following code:\nif (!requireNamespace('pacman', quietly = TRUE)){\n  install.packages('pacman')\n}\npacman::p_load_current_gh(\"sportsdataverse/wehoop\", dependencies = TRUE, update = TRUE)\n```\n\n\n## **Quick Start**\n\n### **WNBA full play-by-play seasons (2002-2021) ~ 1-2 minutes**\n```{r wnba_load_pbp_readme}\n\ntictoc::tic()\nprogressr::with_progress({\n  wnba_pbp <- wehoop::load_wnba_pbp()\n})\ntictoc::toc()\n```\n\n```{r wnba_pbp_message, echo = FALSE}\nglue::glue(\"{nrow(wnba_pbp)} rows of WNBA play-by-play data from {length(unique(wnba_pbp$game_id))} games.\")\n```\n\n### **Women's college basketball full play-by-play seasons (2004-2021) ~ 2-3 minutes**\n```{r wbb_load_pbp_readme}\n\ntictoc::tic()\nprogressr::with_progress({\n  wbb_pbp <- wehoop::load_wbb_pbp()\n})\ntictoc::toc()\n\n```\n\n```{r wbb_pbp_message, echo = FALSE}\nglue::glue(\"{nrow(wbb_pbp)} rows of women's college basketball play-by-play data from {length(unique(wbb_pbp$game_id))} games.\")\n```\n\n## **Documentation**\n\nFor more information on the package and function reference, please see the  [**`wehoop`** documentation website](https://wehoop.sportsdataverse.org).\n\n## **Breaking Changes**\n\n[**Full News on Releases**](https://wehoop.sportsdataverse.org/news/index.html)\n\n## Follow the [SportsDataverse](https://twitter.com/SportsDataverse) on Twitter and star this repo\n\n[![Twitter Follow](https://img.shields.io/twitter/follow/SportsDataverse?color=blue&label=%40SportsDataverse&logo=twitter&style=for-the-badge)](https://twitter.com/SportsDataverse) \n\n[![GitHub stars](https://img.shields.io/github/stars/sportsdataverse/wehoop.svg?color=eee&logo=github&style=for-the-badge&label=Star%20wehoop&maxAge=2592000)](https://github.com/sportsdataverse/wehoop/stargazers/)\n\n\n# **Our Authors**\n\n-   [Saiem Gilani](https://twitter.com/saiemgilani)       \n<a href=\"https://twitter.com/saiemgilani\" target=\"blank\"><img src=\"https://img.shields.io/twitter/follow/saiemgilani?color=blue&label=%40saiemgilani&logo=twitter&style=for-the-badge\" alt=\"@saiemgilani\" /></a>\n<a href=\"https://github.com/saiemgilani\" target=\"blank\"><img src=\"https://img.shields.io/github/followers/saiemgilani?color=eee&logo=Github&style=for-the-badge\" alt=\"@saiemgilani\" /></a>\n\n-   [Geoff Hutchinson](https://twitter.com/hutchngo)       \n<a href=\"https://twitter.com/hutchngo\" target=\"blank\"><img src=\"https://img.shields.io/twitter/follow/hutchngo?color=blue&label=%40hutchngo&logo=twitter&style=for-the-badge\" alt=\"@hutchngo\" /></a>\n<a href=\"https://github.com/hutchngo\" target=\"blank\"><img src=\"https://img.shields.io/github/followers/hutchngo?color=eee&logo=Github&style=for-the-badge\" alt=\"@hutchngo\" /></a>\n\n\n## **Citations**\n\nTo cite the [**`wehoop`**](https://wehoop.sportsdataverse.org) R package in publications, use:\n\nBibTex Citation\n```bibtex\n@misc{hutchinson_gilani_2021_wehoop,\n  author = {Saiem Gilani and Geoff Hutchinson},\n  title = {wehoop: The SportsDataverse's R Package for Women's Basketball Data.},\n  url = {https://wehoop.sportsdataverse.org},\n  year = {2021}\n}\n```\n"
 },
 {
  "repo": "kpelechrinis/adjusted_plusminus",
  "language": "R",
  "readme_contents": "# adjusted_plusminus\nData and R code to calculate the adjusted plus minus in basketball\n\nThe data are obtained from http://basketballvalue.com/downloads.php\n\nThe matchups file includes information about line-ups while the players file includes information about the players \n\nThe code provided assumes the structure of these files, however it can be easily adjusted if the structure is different.\n"
 },
 {
  "repo": "hqadeer/nba_scrape",
  "language": "Python",
  "readme_contents": "# nba_scrape\n\nAn easy-to-use Python utility to scrape professional basketball data off stats.nba.com using Selenium and BeautifulSoup.\n\n## Installation:\n\n`pip install nba_scrape`\n\n## Usage:\n\n`from nba_scrape import NBA`\n\n#### Example:\n\n`>>> league = NBA()`\n\n`>>> lebron = league.get_player('lebron james')`\n\n`>>> lebron.get_stat('pts', '2016-17', playoffs=True)`\n\n`>>> 32.8`\n\n`>>> lebron.get_stats(['pts', 'reb', 'ast', 'ts%'], '2015-18', mode='playoffs')`\n\n`>>> {'2015-16': (26.3, 9.5, 7.6, 0.585), '2016-17': (32.8, 9.1, 7.8, 0.649), '2017-18': (34, 9.1, 9, 0.619)}`\n\n#### Get an instance of the NBA class:\n\n`league = NBA()`\n\n#### Get a player:\n\n`player = league.get_player(player_name)`\n\nOR\n\n`player = league.get_player_by_id(id_number)`\n\n#### Get a single stat:\n\n`player.get_stat(stat_name, season)`\n\n#### Get multiple stats (formatted as a dict with tuples as items):\n\n`player.get_stats([stat1, stat2, stat3], season_range, mode=mode)`\n\n(Possible modes are 'season', 'playoffs', or 'both'; 'season' is the default.)\n\n## Current functionality:\n\n1) Compile a list of all NBA players and their IDs when initializing the NBA class.\n\n2) Easily load all regular season and playoff stats off a player's career page to a SQLite database. Only the player's name is required as input.\n\n3) Retrieve all traditional stats and select advanced ones (such as True Shooting Percentage) via database queries; only the requested stats and seasons are required as input.\n\n4) Browser-agnostic; uses the best available browser or raises an error if no supported browser is available.\n\n5) Test suite to ensure correct statistics are returned.\n"
 },
 {
  "repo": "DeepSportRadar/player-reidentification-challenge",
  "language": "Python",
  "readme_contents": "[![Discord](https://badgen.net/badge/icon/discord?icon=discord&label)](https://discord.gg/JvMQgMkpkm)\n[![Compete on EvalAI](https://badgen.net/badge/compete%20on/EvalAI/blue)](https://eval.ai/web/challenges/challenge-page/1689/overview)\n[![Win $1000](https://badgen.net/badge/win/%241%2C000.00/yellow)](http://mmsports.multimedia-computing.de/mmsports2022/challenge.html)\n\n# The DeepSportRadar Player Re-Identification Challenge\n\n## ** The DeepSportRadar Challenges will come back next year (2023) with some improvements, stay tuned on our [Discord channel](https://discord.gg/JvMQgMkpkm)! **\n\n\nWelcome to the DeepSportRadar Player Re-Identification Challenge, which is one of the [ACM MMSports 2022 Workshop](http://mmsports.multimedia-computing.de/mmsports2022/index.html) challenges. \nAn opportunity to publish, as well as a $1000 prize by competing on [EvalAI](https://eval.ai/web/challenges/challenge-page/1685/overview). \nSee [this page](http://mmsports.multimedia-computing.de/mmsports2022/challenge.html) for more details.\nIn this challenge, participants will have to re-identify basketball players across multiple video frames captured from the same camera viewpoint at various time instants.\nFor that purpose, we provide our Synergy Re-Identification dataset with image crops of players, referees and coaches.\nThe dataset is split into a training, test and challenge set. \nTest and challenge sets are both split into queries and galleries, similar to traditional ReID datasets.\nThe testing-set should be used to evaluate your model, both on the public EvalAI leaderboard that provides the temporary ranking, and when communicating about your method.\nThe challenge-set will be used for the official challenge ranking.\n\nIf you use any DeepSportradar dataset in your research or wish to refer to the baseline results and discussion published in [our paper](https://arxiv.org/abs/2208.08190), please use the following BibTeX entry:\n\n    @inproceedings{\n    Van_Zandycke_2022,\n    author = {Gabriel Van Zandycke and Vladimir Somers and Maxime Istasse and Carlo Del Don and Davide Zambrano},\n\ttitle = {{DeepSportradar}-v1: Computer Vision Dataset for Sports Understanding with High Quality Annotations},\n\tbooktitle = {Proceedings of the 5th International {ACM} Workshop on Multimedia Content Analysis in Sports},\n\tpublisher = {{ACM}},\n    year = 2022,\n\tmonth = {oct},\n    doi = {10.1145/3552437.3555699},\n    url = {https://doi.org/10.1145%2F3552437.3555699}\n    }\n    \nMaintainer: Vladimir Somers (v.somers@sportradar.com) from Synergy Sports, a division of Sportradar.\nAuthor of this repository: Davide Zambrano from Synergy Sports (d.zambrano@sportradar.com).\n\n**NOTE this code is based on Open-reid repo: https://github.com/Cysu/open-reid.git\"**\n\n_Open-ReID is a lightweight library of person re-identification for research\npurpose. It aims to provide a uniform interface for different datasets, a full\nset of models and evaluation metrics, as well as examples to reproduce (near)\nstate-of-the-art results._\n\nWe want to thank the authors for providing this tool. This version applies some changes to the original code to specifically adapt it to the DeepSportradar Challenge on Person Re-Identification. \n\nThis challenge is a fork of the [player re-identification challenge](https://github.com/VIPriors/vipriors-challenges-toolkit/tree/master/re-identification) proposed in the [2nd VIPriors workshop challenges](https://vipriors.github.io/challenges/)\n\n&nbsp;\n<p align=\"center\"><img src=\"assets/banner.png\" width=\"740\"></p>\n\n## Installation\n\n**Note that the file ```setup.py``` specifies the libraries version to use to run the code.**\n\nInstall [PyTorch](http://pytorch.org/). \n\n```shell\ngit clone https://github.com/DeepSportRadar/player-reidentification-challenge.git\ncd player-reidentification-challenge\npip install -e .\n```\n\n## Example\n\nRun the following command to train a baseline model:\n```shell\npython baseline/synergyreid_baseline.py -b 64 -j 2 -a resnet50 --logs-dir logs/synergy-reid/\n```\n\n## Data\n\nPerson re-identification data are provided by [Synergy Sports](ttps://synergysports.com). \nData come from short sequences of basketball games, each sequence is composed by 20 frames. \nFor the test and challenge sets, the query images are persons taken at the first frame, while the gallery images are identities taken from the 2nd to the last frame.\n\nThe idea behind the baseline is to provide a quick introduction to how to handle the re-id data. \nSpecifically, attention should be put on the dataset creation and the dataloaders.\nThe data files are provided under ```baseline/data/synergyreid/raw/synergyreid_data.zip```.\n\nThe baseline code extracts the raw files in the same directory and prepares the splits to use for training, test and challenge.\n\nSpecifically the dataset is divided as:\n\n```shell\nSynergyReID dataset loaded\n  subset      | # ids | # images\n  ---------------------------\n  train       |   436 |     8569\n  query test   |    50 |       50\n  gallery test |    50 |      910\n  traintest    |   486 |     9529\n  ---------------------------\n  query challenge  |   468 |      468\n  gallery challenge |  8703 |     8703\n```\n\nTrain and test identities can be merged (to improve performance) using the flag ```--combine-traintest```.\n\nThe image filename is divided in three numbers: the first one is the person-id; the second one is the sequence where the image was taken; and the third one is the frame number.\n\nThe test-set is divided in query and gallery to match the challenge-set format. With the flag ```--evaluate``` the distance matrix for the test set is also saved.\nThe identities of the gallery are NOT provided; gallery ids are just random.\n\n## Submission on EvalAI\nSubmit your result through the [challenge page on the EvalAI platform](https://eval.ai/web/challenges/challenge-page/1689/overview).\nYou need to submit a _.csv_ file as the pairwise distance matrix of size (m+1) x (n+1), where m is the number of query images and n is the number of gallery images. \nThe first row and the first column are the query and gallery ids respectively.\nQuery ids have to be ordered. \nPlease check the example provided in the baseline ```baseline/synergyreid_baseline.py``` with the 'write_mat_csv' function.\n\nPlease refer to the challenge webpage for complete rules, timelines and awards: [https://deepsportradar.github.io/challenge.html](https://deepsportradar.github.io/challenge.html).\n\n## Questions and remarks\nIf you have any question or remark regarding the challenge and related materials, please raise a GitHub issue in this repository, or contact us directly on [Discord](https://discord.gg/JvMQgMkpkm).\n"
 },
 {
  "repo": "gbrunner/Courtside-Geography",
  "language": "HTML",
  "readme_contents": ""
 },
 {
  "repo": "HeroChan0330/Play-Video-With-Stm32",
  "language": "C",
  "readme_contents": "# [\u6b63\u7ecf\u5411]\u5982\u4f55\u4f7f\u7528STM32\u64ad\u653e\u7bee\u7403\u89c6\u9891  \n## \u7b2c\u4e00\u6b65  \n\u7b2c\u4e00\u6b65\u5f53\u7136\u662f\u8981\u5148\u914d\u7f6e\u73af\u5883\u5566\uff0copencv\u3001KEIL\u90fd\u4e0d\u4f1a\u914d\u600e\u4e48\u548c\u5927\u5bb6\u4e00\u8d77\u6253\u7bee\u7403  \n<div align=\"center\"><img src =\"img/1.jpg\"/></div>\n\n\u5f53\u7136\u8fd8\u8981\u4e70\u786c\u4ef6\uff1a\u4e00\u4e2aStm32F4\uff08\u5185\u5b58\u3001flash\u6ca1\u4ec0\u4e48\u5927\u7684\u8981\u6c42\uff09\u3001Stm32\u4e0b\u8f7d\u5668\u3001\u4e00\u57573.2\u82f1\u5bf8LCD\u5c4f\u5e55(ILI9341)\u3001\u4e00\u4e2amicro sd(TF)\u5361\u3002  \n\u6dd8\u5b9d\u4e70\u5230\u7684Stm32F4\u5f00\u53d1\u677f\u90fd\u662f\u628a\u4e00\u4e9b\u5e38\u7528\u63a5\u53e3\u548c\u5916\u8bbe\u90fd\u8bbe\u8ba1\u597d\u7684\uff0c\u4e00\u822c\u6bd4\u8f83\u840c\u65b0\u53cb\u597d(\u5751\u94b1)\u7684\u4f1a\u914d\u5957\u663e\u793a\u5c4f\u4e00\u8d77\u5356\uff0c\u76f4\u63a5\u63d2\u4e0a\u53bb\u5c31\u53ef\u4ee5\u7528\u7684\u90a3\u79cd\uff0cSD\u5361\u69fd\u4e00\u822c\u4e5f\u4f1a\u6709\u7684\u3002  \n\u628a\u663e\u793a\u5c4f\u7684\u7ebf\u63a5\u597d(\u4f7f\u7528fsmc\u63a7\u5236\u5668)\uff0c\u5927\u5bb6\u5982\u679c\u6ca1\u4e70\u90a3\u79cd\u914d\u5957\u8bbe\u8ba1\u7684\u663e\u793a\u5c4f\u7684\u8bdd\uff0c\u63a5\u7ebf\u5c31\u53ef\u80fd\u4f1a\u50cf\u4f5c\u8005\u8fd9\u4e48awesome\u4e86  \n<div align=\"center\"><img src =\"img/6.jpg\"/></div>\n\n## \u7b2c\u4e8c\u6b65\n\u9996\u5148\u6211\u4eec\u8981\u77e5\u9053\u4e00\u5f20\u56fe\u7247\u662f\u50cf\u7d20\u70b9\u9635\u7ec4\u6210\u7684\uff0c\u7ecf\u8fc7\u5404\u79cd\u7684\u7f16\u7801\u538b\u7f29\u65b9\u5f0f\u5c31\u53d8\u6210\u4e86\u5e38\u8bf4\u7684jpg,png,gif\u3002\u89c6\u9891\u662f\u7531\u4e00\u5e27\u5e27\u56fe\u7247\u7ec4\u6210\u7684\uff0c\u4e5f\u662f\u6709\u7279\u5b9a\u7684\u7f16\u7801\u538b\u7f29\u65b9\u5f0f\u3002\u60f3\u8981\u89e3\u7801\u89c6\u9891\u8fd0\u7b97\u91cf\u8fd8\u662f\u633a\u5927\u7684\uff0c\u901a\u5e38\u4f7f\u7528\u786c\u4ef6\u89e3\u7801\uff08\u786c\u89e3\uff09\uff0c\u5728STM32\u91cc\u9762\u633a\u96be\u5b8c\u6210\u3002\u6240\u4ee5\u6211\u4eec\u8981\u628a\u89c6\u9891\u4e2d\u6bcf\u4e00\u5e27\u7684\u56fe\u7247\u62ff\u51fa\u6765\uff0c\u518d\u7528\u6bd4\u8f83\u7b80\u5355\u7684\u7f16\u7801\u65b9\u5f0f\u5199\u8fdb\u6587\u4ef6\uff0c\u7136\u540e\u5728STM32\u4e2d\u8bfb\u53d6\u3002  \n\u9996\u5148\u6211\u4eec\u6253\u5f00\u4e00\u4e2a\u7bee\u7403\u89c6\u9891  \n```c++\nVideoCapture cap(\"CXK.mp4\");\n```\n\u6211\u4eec\u505a\u4e00\u4e2a\u5faa\u73af\uff0c\u6bcf\u96940.1\u79d2\u8bfb\u53d6\u4e00\u5f20\u56fe\u7247\n```c++\nMat frame;\nint index=0;\nwhile (cap.read(frame)){\n    imshow(\"cxk\",frame);\n    index++;\n    cap.set(CAP_PROP_POS_MSEC ,100 * index);\n    waitKey(100);\n}\n```\n\u8fd9\u91cccap.set(CAP_PROP_POS_MSEC ,100 * index);\u628a\u89c6\u9891\u7684\u65f6\u95f4\u4f4d\u7f6e\u6307\u5411100 * index ms\u5904  \n\u4ec0\u4e48\uff0c\u539f\u89c6\u9891\u768416:9\uff0c\u663e\u793a\u5c4f\u662f4:3\uff0c\u6bd4\u4f8b\u4e0d\u5bf9\uff1f\u90a3\u6211\u4eec\u8fdb\u884c\u4e00\u4e0b\u88c1\u526a  \n```c++\nvoid resize(Mat&img){\n\tresize(img,img,Size(426,240));\n\timg=img(Rect(53,0,320,240));\n}\n```\n\u8fd8\u6709\u4e00\u70b9\u5c31\u662f\u67d0\u5b9d\u4e70\u5230\u7684LCD\u5c4f\u5e55\u90fd\u662f16\u4f4drgb\u7684\uff0c\u6211\u4eec\u5c4f\u5e55\u4e0a\u9762\u663e\u793a\u7684\u771f\u5f69\u8272\u662f24\u4f4d\u7684\uff0c\u6240\u4ee5\u8fd8\u8981\u8fdb\u884c\u8f6c\u6362\u3002  \n```c++\ncvtColor(frame,frame_16bits,COLOR_BGR2BGR565);\n```\n\u7136\u540e\u518d\u6309\u7167\u884c->\u5217\u7684\u8bfb\u53d6\u987a\u5e8f\u628a\u6bcf\u4e00\u5e27\u7684\u56fe\u7247\u4fe1\u606f\u5199\u8fdb\u6587\u4ef6\uff0c\u518d\u628a\u6587\u4ef6\u653e\u8fdbSD\u5361\n\n## \u7b2c\u4e09\u6b65\n\u4ec0\u4e48\uff0c\u6ca1\u6709\u58f0\u97f3\uff1f\u6ca1\u6709\u9e21\u4f60\u592a\u7f8e\u7684\u7bee\u7403\u89c6\u9891\u662f\u6ca1\u6709\u7075\u9b42\u7684\u2014\u2014\u9c81\u8fc5\u3002  \n<div align=\"center\"><img src =\"img/2.jpg\"/></div>  \n\n\u5176\u5b9e\u97f3\u9891\u6587\u4ef6\u91cc\u9762\u7684\u6570\u636e\uff0c\u662f\u4e00\u8fde\u4e32\u7684\u6a21\u62df\u503c\uff0c\u7ecf\u8fc7\u538b\u7f29\u7f16\u7801\u540e\u53d8\u6210\u4e86mp3\u4ec0\u4e48\u7684\u3002\u6211\u4eec\u7528\u6700\u7b80\u5355\u7684\u7f16\u7801\u65b9\u5f0f(PCM)\u7684\u6587\u4ef6\uff0c\u5c06\u6570\u636e\u8bfb\u51fa\u6765\uff0c\u5c06\u56fe\u7247\u548c\u97f3\u9891\u6574\u5408\u5728\u6587\u4ef6\u4e2d\uff0c\u5c31\u80fd\u540c\u6b65\u64ad\u653e\u89c6\u9891\u548c\u56fe\u7247\u5566\uff01\uff01\uff01  \n\u9996\u5148\u4e00\u4e2awav\u6587\u4ef6\u7684\u6587\u4ef6\u5934\u662f\u8fd9\u6837\u7684\u3002\n```c++\n__attribute__((packed)) struct WavHead{\n\tint8_t RIFF[4];\n\tint32_t filesize;\n\tint8_t WAVE[4];\n\tint8_t FMT[4];\n\n\tint32_t size1;\n\tint16_t fmttag;//1\n\tint16_t channel;//1\n\tint32_t samplespersec;//\u6bcf\u79d2\u91c7\u6837\u6570\n\tint32_t bytepersec;\n\tint16_t blockalign;\n\tint16_t bitpersamples;\n\tint8_t DATA[4];\n\tint32_t datasize;\n};\n```\n\u4ec0\u4e48\u770b\u4e0d\u61c2\uff1f\u522b\u7ba1\u90a3\u4e48\u591a\uff0c\u6211\u4eec\u8981\u7684\u662fdatasize\u548csamplespersec\uff08\u8fd9\u91cc\u7684\u97f3\u9891\u6587\u4ef6\u4e3a\u4e86\u65b9\u4fbf\u5904\u7406\uff0c\u901a\u8fc7\u8f6f\u4ef6\u8f6c\u6210\u4e8616\u4f4d\u6df1\uff0c16000hz\u91c7\u6837\u7387\uff08\u5373256kbps)\uff0c\u5355\u58f0\u9053\uff09\u3002datasize\u5373\u540e\u9762\u7684\u6570\u636e\u7684\u603b\u5b57\u8282\u6570\u91cf\uff0csamplespersec\u5373\u91c7\u6837\u7387\u3002  \n\u7136\u540e\u53ea\u9700\u8981\u5728\u6bcf\u4e00\u5e27\u7684\u5faa\u73af\u91cc\u9762\uff0c\u5199\u5165\u97f3\u9891\u7684\u6570\u636e\uff1a\u6bcf0.1s\u91c7\u68371600\u4e2a16\u4f4d\u503c\uff0c\u53733200\u5b57\u8282\u3002\u5199\u5165\u56fe\u50cf\u6570\u636e\uff1a320 * 240 * 2\u4e2a\u5b57\u8282\u3002  \n\u8fd9\u6837\u6211\u4eec\u5c31\u5b8c\u6210\u4e86\u89c6\u9891\u6587\u4ef6\u7684\u9884\u5904\u7406\u5566\uff01\uff01\uff01  \n<div align=\"center\"><img width = '300' height ='300' src =\"img/3.gif\"/></div>\n\n## \u7b2c\u56db\u6b65\n\u7ec8\u4e8e\u6765\u5230\u6700\u91cd\u8981\u7684\u4e00\u6b65\u4e86\uff0c\u4ec0\u4e48\u4e0d\u4f1aStm32\uff1f\u4f1a\u6284\u5c31\u884c\u4e86\u3002\n<div align=\"center\"><img src =\"img/4.jpg\"/></div>\n\n\u9996\u5148\u6211\u4eec\u5148\u62ff\u5230\u4e00\u4efd\u5356\u5bb6\u63d0\u4f9b\u7684\u975e\u5e38\u5b8c\u5584\u7684\u793a\u4f8b\u4ee3\u7801\uff0c\u91cc\u9762\u4ee5\u53ca\u5305\u542b\u4e86\u5404\u79cd\u57fa\u672c\u529f\u80fd\u7684\u5b9e\u73b0\uff0c\u6211\u4eec\u9700\u8981\u7684\u662fLCD\u5c4f\u5e55\u3001SD\u5361\u8bfb\u5199\u90e8\u5206\u7684\u793a\u4f8b\u4ee3\u7801\u3002  \n\u4ec0\u4e48\u5356\u5bb6\u6ca1\u7ed9\u4f60\u793a\u4f8b\u4ee3\u7801\uff1f\u5728\u8fd9\u91cc\u6211\u6559\u5927\u5bb6\u4e00\u4e2a\u627e\u786c\u4ef6\u6587\u6863\u7684\u4e07\u80fd\u65b9\u6cd5\uff1a\u6dd8\u5b9d\u3002\u5c06\u4f60\u624b\u4e0a\u7684\u7535\u5b50\u5668\u4ef6\u578b\u53f7\u8f93\u5165\u6dd8\u5b9d\uff0c\u968f\u610f\u70b9\u8fdb\u4e00\u4e2a\u5356\u5bb6\uff0c\u5728\u5546\u54c1\u4ecb\u7ecd\u4e00\u822c\u90fd\u6709\u5f88\u663e\u773c\u7684\u67d0\u5ea6\u7f51\u76d8\u7684\u94fe\u63a5\uff0c\u61c2\u4e86\u5427\uff1f  \n\u6211\u4eec\u5c06lcd\u5c4f\u5e55\u521d\u59cb\u5316\uff0cusart\u521d\u59cb\u5316\uff0csd\u5361\u521d\u59cb\u5316\u7b49\u4e00\u7cfb\u5217\u770b\u4e0d\u61c2\u7684\u521d\u59cb\u5316\u653e\u5728\u4e00\u8d77\u3002\u7136\u540e\u6211\u4eec\u9700\u8981\u77e5\u9053\u7684\u6709\u8fd9\u4e48\u51e0\u4e2a\u3002  \n1\u3001SD\u5361\u6587\u4ef6\u8bfb\u53d6\uff0c\u5356\u5bb6\u7ed9\u7684\u5b9e\u4f8b\u4ee3\u7801\u4e00\u822c\u4f1a\u5c01\u88c5\u597d\u7684\uff0csd\u5361\u521d\u59cb\u5316\u4e4b\u540e\u7684\u64cd\u4f5c\u5c31\u548c\u6211\u4eec\u5728windows\u4e0b\u5199\u7684\u63a7\u5236\u53f0(\u5c31\u662f\u90a3\u4e2a\u9ed1\u7a97)\u7684\u6587\u4ef6\u8bfb\u5199\u64cd\u4f5c\u65f6\u4e00\u6837\u7684\u3002  \n2\u3001\u5728lcd\u5c4f\u5e55\u663e\u793a\u56fe\u7247\uff0c\u8fd9\u4e2a\u5546\u5bb6\u4e5f\u5c01\u88c5\u597d\u7684\uff0c\u8c03\u7528\u4e2a\u51fd\u6570\uff0c\u4f20\u8fdb\u53bb\u663e\u793a\u56fe\u7247\u7684\u4f4d\u7f6e\uff0c\u8fd8\u6709\u50a8\u5b58\u56fe\u7247\u50cf\u7d20\u7684\u6570\u7ec4\u5c31\u80fd\u663e\u793a\u56fe\u7247\u3002  \n3\u3001\u5b9a\u65f6\u5668\u3001\u65f6\u949f\u3001dac\uff0c\u8fd9\u662f\u7528\u6765\u540c\u6b65\u64ad\u653e\u97f3\u4e50\u7684\uff0c\u6211\u4eec\u628a\u97f3\u9891\u6570\u636e\u4ece\u6587\u4ef6\u8bfb\u5165\u4e4b\u540e\uff0c\u901a\u8fc7\u4e2d\u65ad\u628a\u97f3\u9891\u6587\u4ef6\u901a\u8fc7dac\u64ad\u653e\u3002\u56e0\u4e3a\u5355\u7247\u673a\u662f\u6ca1\u6709\u8d1f\u7535\u538b\u5f97\uff0c\u6240\u4ee5\u4f7f\u75282\u4e2adac\u8f93\u51fa\uff0c\u4ea7\u751f\u7535\u538b\u5dee\u3002  \n\u90a3\u4e48\u663e\u793a\u4e00\u5e27\u56fe\u7247\u7684\u65f6\u5e8f\u662f\u8fd9\u6837\u7684\uff1a  \n\u5f00\u542f\u4e00\u4e2a\u8ba1\u65f6\u5668\u8ba1\u6570->\u4ece\u6587\u4ef6\u8bfb\u51653200byte(16000hz / 10 * 2)\u7684\u97f3\u9891\u6570\u636e->\u5b9a\u65f6\u5668\u4e2d\u65ad\u51fd\u6570\u53d1\u73b0\u97f3\u9891\u6570\u636e\u957f\u5ea6\u5927\u4e8e0\uff0c\u4e4b\u540e\u7684\u4e2d\u65ad\u5f00\u59cb\u5faa\u73af\u8f93\u51fa\u97f3\u9891\u6570\u636e\uff0c\u8f93\u51fa\u5b8c\u5c06\u97f3\u9891\u6570\u636e\u957f\u5ea6\u7f6e0->\u4ece\u6587\u4ef6\u8bfb\u5b8c\u97f3\u9891\u6570\u636e\u540e\u540c\u65f6\u8bfb\u56fe\u7247\u6570\u636e\uff0c\u663e\u793a\u5728\u663e\u793a\u5c4f\u4e2d->\u901a\u8fc7\u8ba1\u65f6\u5668\u5224\u65ad\u8fd9\u4e00\u5e27\u56fe\u7247\u7684\u663e\u793a\u65f6\u95f4\u662f\u5426\u6ee1100ms\uff0c\u7136\u540e\u5f00\u59cb\u4e0b\u4e00\u5e27\u7684\u663e\u793a\u3002  \n\u4ee3\u7801\u91cf\u633a\u591a\u7684\u5c31\u4e0d\u8d34\u4e0a\u6765\u4e86\uff0c\u6587\u7ae0\u6700\u540e\u4f1a\u653e\u51fa\u5168\u90e8\u4ee3\u7801\u7684github\u94fe\u63a5\uff0c\u53cd\u6b63\uff0c\u6211\u4eec\u53ea\u662f\u4ee3\u7801\u7684\u642c\u8fd0\u5de5\u3002  \n\u641e\u5b8c\u4e0a\u9762\u7684\u4ee3\u7801\u540e\u6211\u4eec\u5c31\u80fd\u5f88\u6e05\u6670\u5730\u64ad\u653e\u7bee\u7403\u89c6\u9891\uff0c\u4f46\u662f\u53d1\u73b0\u58f0\u97f3\u4e0d\u5bf9\u52b2\uff0c\u592a\u5c0f\u4e86\u3002dac\u7684\u9a71\u52a8\u662f3.3v\uff0c\u5b66\u8fc7\u7b80\u5355\u7684\u7535\u8def\u5c31\u77e5\u9053\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u80a5\u80a0\u7b80\u5355\u7684\u4fe1\u53f7\u653e\u5927\u7535\u8def\u3002  \n<div align=\"center\"><img src =\"img/5.jpg\"/></div>\n\n\u5982\u679c\u60f3\u8981\u8f93\u5165\u7535\u538b3.3v\uff0c\u8f93\u51fa\u7535\u538b5v\uff0c\u90a3\u4e481.7R1=3.3R2  \n\u90a3\u4e48\u968f\u7f18R1=2k\u03a9 R2=1k\u03a9\u5427\n\u4f7f\u7528\u8fd0\u653e\u7684\u8bdd\u8f93\u51fa\u7535\u6d41\u8fd8\u662f\u633a\u5c0f\u7684\uff0c\u4f5c\u8005\u624b\u4e0a\u6682\u65f6\u53ea\u6709\u4e00\u4e2a\u8702\u9e23\u5668\uff0c\u5168\u635f\u97f3\u8d28\uff0c\u51e0\u4e4e\u542c\u4e0d\u51fa\u90a3\u53e5\u719f\u6089\u7684\u9e21\u4f60\u592a\u7f8e\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u601d\u8def\u5e94\u8be5\u662f\u5bf9\u7684\uff0c\u8fd9\u4e2a\u7535\u6d41\u5e94\u8be5\u662f\u53ef\u4ee5\u9a71\u52a8\u4e00\u4e2a\u8033\u673a\uff08\u5e94\u8be5\u8fd8\u8981\u52a0\u4e2a\u6ee4\u6ce2\u7535\u5bb9\uff0c\u8fd9\u5f97\u7ed3\u5408\u8033\u673a\u963b\u6297\uff09\u3002\u5982\u679c\u60f3\u8981\u5b9e\u73b0\u5e7f\u573a\u821e\u90a3\u79cd\u9707\u64bc\u611f\uff0c\u81ea\u884c\u5b9e\u73b0\u653e\u5927\u7535\u8def\u5427\u3002  \n\u6700\u540e\uff0c\u732e\u4e0a\u89c6\u9891\uff08\u58f0\u97f3\u662f\u53e6\u5916\u5f55\u540e\u671f\u52a0\u4e0a\u53bb\u7684\uff09\uff1a  \n<div align=\"center\">\n<video src=\"img/final.mp4\" width=\"640\" height=\"360\" controls=\"controls\"></video>\n</div>\n\n[\u89c6\u9891\u94fe\u63a5](img/final.mp4)"
 },
 {
  "repo": "treelover28/nbaMatchPredictor_PROTOTYPE",
  "language": "Java",
  "readme_contents": "# NBA Match Predictor &copy; \n### A better implementation in Python with added features and a working API is now available on : [Nba-Match-Predictor](https://github.com/treelover28/NBA-match-predictor). The new version is still a project-in-progress \n\n**Version**: 2\n\n**Author:** Khai H Lai\n\n**Last Updated:** 9/3/2019\n\n**Changelog:** \n* Added hashCode() and equals() to class Team.\n* Added webscraping functionality using JSoup library\n\n**Language:** Java\n![NBA Finals 2019](https://user-images.githubusercontent.com/50902696/64215334-f46c7e80-ce4f-11e9-9d50-25ddd49c66da.jpg)\nThis simple program uses Monte Carlo simulation to:\n * predict the result of an NBA match.\n * output each team's probability of winning the matchup.\n\nHas **basic UI** that allows users to type in the names of the teams they wish to simulate the match-up with.\n![Text-based UI](https://user-images.githubusercontent.com/50902696/64215182-3e089980-ce4f-11e9-9293-4595691ae68e.PNG)\n\n### Procedure Description\nThe simulator uses library Jsoup to scrape data from Basketball Reference NBA 2019 Ranking and Team Rankings. It then uses Monte-Carlo simulation (with added random statistical variations applied on the procedure described on Basketball Distribution) to give the probability of each team winning the match-up.\n\n### Next update\n* Make this program into a webapp that can be easily used and accessed by the public.\n* Make this program into a browser extension that automatically fetch from that day's NBA schedule and output predictions.\n* Goal for completion: December 20, 2019\n"
 },
 {
  "repo": "nicidob/bbgm",
  "language": "Jupyter Notebook",
  "readme_contents": "# bbgm\nrosters for basketball gm\n"
 },
 {
  "repo": "fuzzthink/basketball-public",
  "language": "R",
  "readme_contents": "The shell script \"demo.sh\" loads scraped data alias tables\nbetween the two data sets (NCAA and Basketball Reference)\nfor schools and players. It then runs sample R code that does\na simple stepwise regression to detect some NCAA features\nthat impact NBA playing time 1 year out from the draft.\n\nYou won't be able to run these without installing PostgreSQL,\nR etc., but I've included two text files showing the results. The\nfirst is \"shell_output.txt\" which shows the output of the \"demo.sh\"\nscript (including the total time take - about 12 seconds).\n\nThe file \"feature_selection.txt\" shows the results of the stepwise\nregression.\n\nThis is the final model - no surprise, the pick number dominates\nin a non-linear way. Also settled on were height, position, games,\nassists per game and steals per game. I did not examine any\ninteraction terms, nor did I look at other measures of NBA value,\nbut these are straightforward given the database (up to the\nlimitations of my scraped data, of course).\n\nI haven't adjusted college performance for NCAA strength of\nschedule yet.\n"
 },
 {
  "repo": "AlvinJiaozhu/Linear-Regression-Model-Basketball",
  "language": "R",
  "readme_contents": "# Linear-Regression-Model-Basketball\nStatistical model on NBA basketball players' performance using multiple linear regression and stepwise search.\n"
 }
]